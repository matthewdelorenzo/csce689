Using GPU
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_prompts/Bcdadd4.v
Prompt str:  // You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

Loading LLM model...
Loaded LLM:  shailja/CodeGen_16B_Verilog
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  100
********-- EPISODE-1--************
ORIG MODILE:  top_module
--------MCTS-------
Env seed:  42
Initializing MCTS tree.
Initialize search (creating root node)

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  122.250157  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.35912319 0.10113981 0.04314834 0.03887139 0.03003299 0.01593892
 0.30084069 0.01137262 0.00465671 0.00268029]  taking action:  0
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  121.524051  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  2.0
Iteration TIME (sec):  122.66812485699998
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.33228958 0.12387046 0.05284571 0.04760754 0.03678275 0.01952111
 0.36845309 0.01392856 0.00570329 0.00328268]  taking action:  6
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  121.355585  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  3.0
Iteration TIME (sec):  122.48848048600001
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.46104522  0.14303329  0.06102097  0.05497245  0.04247306  0.02254103
 -0.28727351  0.01608332  0.00658559  0.00379051]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8903673e+00 1.4097284e-02 1.0489968e-02 7.4700075e-03 2.6118767e-03
 1.8393961e-03 1.7549766e-03 8.5469411e-04 7.6642341e-04 5.9668173e-04]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.680121  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  4.0
Iteration TIME (sec):  121.80728088800004
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04965413  0.15991608  0.06822352  0.06146106  0.04748632  0.02520164
 -0.26216455  0.01798169  0.00736291  0.00423792]  taking action:  1
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] c;

bcd_fadd a0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
bcd_fadd a1 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
bcd_fadd a2 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
bcd_fadd a3 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  113.74153  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  5.0
Iteration TIME (sec):  114.92167747500002
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.11802345 -0.41241036  0.07473512  0.06732722  0.05201866  0.02760701
 -0.23946432  0.01969796  0.00806567  0.00464241]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.65760887 0.01726558 0.01284753 0.00914885 0.00319888 0.00225279
 0.0021494  0.00104678 0.00093867 0.00073078]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.201312   0.02187993 0.01521789 0.01511029 0.01403628 0.01081549
 0.00492457 0.00384997 0.0038071  0.00336755]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.04554  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  6.0
Iteration TIME (sec):  121.16838681600007
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.11432833 -0.40539237  0.08072315  0.07272171  0.05618658  0.02981898
 -0.2185893   0.02127623  0.00871192  0.00501437]  taking action:  2
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
   
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  121.197778  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  7.0
Iteration TIME (sec):  122.34963965400004
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.0704384  -0.39886019 -0.45685166  0.07774278  0.06006598  0.03187783
 -0.19915931  0.02274524  0.00931343  0.00536059]  taking action:  3
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
	
	wire [3:0] c;
	
	bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
	bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
	bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
	bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
	
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  121.260509  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  8.0
Iteration TIME (sec):  122.39911719299994
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.02921608 -0.39272504 -0.45423427 -0.45877066  0.06370959  0.03381155
 -0.18091026  0.02412497  0.00987838  0.00568576]  taking action:  4
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
 
    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:28: syntax error\nI give up.\n'
LLM generates return in:  118.453211  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  9.0
Iteration TIME (sec):  119.59812077300012
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00977296 -0.38692226 -0.45175869 -0.45654046 -0.4664221   0.0356405
 -0.16364988  0.02542995  0.01041273  0.00599332]  taking action:  5
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
        
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  121.316007  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  10.0
Iteration TIME (sec):  122.44627978800008
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0468566  -0.38140306 -0.44940409 -0.45441925 -0.4647832  -0.48130996
 -0.14723302  0.02667116  0.01092096  0.00628585]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.22446096 0.01993657 0.01483505 0.01056419 0.00369375 0.0026013
 0.00248191 0.00120872 0.00108389 0.00084384]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.23565036 0.02679733 0.01863803 0.01850626 0.01719087 0.01324622
 0.00603134 0.00471524 0.00466272 0.00412439]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6862322  0.41588756 0.2810925  0.15805799 0.03891535 0.00971618
 0.0066652  0.00569093 0.00422698 0.00372168]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  119.48781  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  11.0
Iteration TIME (sec):  120.63448825399996
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.13416835 -0.37612954 -0.44715429 -0.45239246 -0.46321725 -0.48047889
 -0.13154691  0.02785712  0.01140658  0.00656536]  taking action:  7
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
     
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  121.336953  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  12.0
Iteration TIME (sec):  122.46484300199995
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.10698044 -0.37107154 -0.44499644 -0.45044851 -0.4617153  -0.47968179
 -0.11650186 -0.4855027   0.01187234  0.00683344]  taking action:  8
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  570

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
assign cout = cin;
assign sum = a + b + cin;
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:23: syntax error\nI give up.\n'
LLM generates return in:  12.717006  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  13.0
Iteration TIME (sec):  14.10640923599999
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.08081962 -0.36620461 -0.44292011 -0.44857798 -0.46027009 -0.4789148
 -0.10202518 -0.48495544 -0.49383975  0.00709139]  taking action:  9
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
       
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  121.320402  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  14.0
Iteration TIME (sec):  122.4594245589999
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.05557758 -0.36150862 -0.4409167  -0.44677316 -0.45887564 -0.47817474
 -0.08805692 -0.4844274  -0.49362353 -0.49632985]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.00276679  0.02228976  0.0165861   0.01181112  0.00412974  0.00290834
  0.00277486  0.00135139  0.00121182  0.00094344]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    wire [3:0] sum_temp5;
    wire [3:0] sum_temp6;
    wire [3:0] sum_temp7;
    wire [3:0] sum_temp8;
    wire [3:0] sum_temp9;
    wire [3:0] sum_temp10;
    wire [3:0] sum_temp11;
    wire [3:0] sum_temp12;
    wire [3:0] sum_temp13;
    wire [3:0] sum_temp14;
    wire [3:0] sum_temp15;
    wire [3:0] sum_temp16;
    wire [3:0] sum_temp17;
    wire [3:0] sum_temp18;
    wire [3:0] sum_temp19;
    wire [3:0] sum_temp20;
    wire [3:0] sum_temp21;
    wire [3:0] sum_temp22;
    wire [3:0] sum_temp23;
    wire [3:0] sum_temp24;
    wire [3:0] sum_temp25;
    wire [3:0] sum_temp26;
    wire [3:0] sum_temp27;
    wire [3:0] sum_temp28;
    wire [3:0] sum_temp29;
    wire [3:0] sum_temp30;
    wire [3:0] sum_temp31;
    wire [3:0] sum_temp32;
    wire [3:0] sum_temp33;
    wire [3:0] sum_temp34;
    wire [3:0] sum_temp35;
    wire [3:0] sum_temp36;
    wire [3:0] sum_temp37;
    wire [3:0] sum_temp38;
    wire [3:0] sum_temp39;
    wire [3:0] sum_temp40;
    wire [3:0] sum_temp41;
    wire [3:0] sum_temp42;
    wire [3:0] sum_temp43;
    wire [3:0] sum_temp44;
    wire [3:0] sum_temp45;
    wire [3:0] sum_temp46;
    wire [3:0] sum_temp47;
    wire [3:0] sum_temp48;
    wire [3:0] sum_temp49;
    wire [3:0] sum_temp50;
    wire [3:0] sum_temp51;
    wire [3:0] sum_temp52;
    wire [3:0] sum_temp53;
    wire [3:0] sum_temp54;
    wire [3:0] sum_temp55;
    wire [3:0] sum_temp56;
    wire [3:0] sum_temp57;
    wire [3:0] sum_temp58;
    wire [3:0] sum_temp59;
    wire [3:0] sum_temp60;
    wire [3:0] sum_temp61;
    wire [3:0] sum_temp62;
    wire [3:0] sum_temp63;
    wire [3:0] sum_temp64;
    wire [3:0] sum_temp65;
    wire [3:0] sum_temp66;
    wire [3:0] sum_temp67;
    wire [3:0] sum_temp68;
    wire [3:0] sum_temp69;
    wire [3:0] sum_temp70;
    wire [3:0] sum_temp71;
    wire [3:0] sum_temp72;
    wire [3:0] sum_temp73;
    wire [3:0] sum_temp74;
    wire [3:0] sum_temp75;
    wire [3:0] sum_temp76;
    wire [3:0] sum_temp77;
    wire [3:0] sum_temp78;
    wire [3:0] sum_temp79
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:99: syntax error\nI give up.\n'
LLM generates return in:  1641.508037  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  15.0
Iteration TIME (sec):  1639.1503367939997
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.1926365  -0.35696671 -0.43897903 -0.44502755 -0.45752694 -0.47745897
 -0.07454702 -0.48391668 -0.49341441 -0.49620949]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8370006e+00 3.2304101e-02 1.8721014e-02 1.5911611e-02 1.4411399e-02
 2.6918377e-03 1.0289029e-03 7.1583915e-04 4.8305458e-04 4.5751443e-04]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.621202  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  16.0
Iteration TIME (sec):  121.75789138099981
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.17291815 -0.35256466 -0.43710103 -0.4433357  -0.45621977 -0.47676524
 -0.37430209 -0.4834217  -0.49321173 -0.49609283]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.06855303 -0.4877914   0.01816916  0.01293843  0.0045239   0.00318593
  0.00303971  0.00148037  0.00132748  0.00103348]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.10036278  0.03094289  0.02152134  0.02136918  0.0198503   0.01529542
  0.00696439  0.00544469  0.00538405  0.00476244]  taking action:  1
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  65

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    

bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:28: syntax error\nI give up.\n'
LLM generates return in:  99.26773  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  17.0
Iteration TIME (sec):  100.45890256199982
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.2746615  -0.34829029 -0.43527749 -0.44169291 -0.45495052 -0.47609163
 -0.365826   -0.48294107 -0.49301493 -0.49597956]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.09268934 -0.4868132   0.01962493  0.0139751   0.00488637  0.0034412
  0.00328326  0.00159899  0.00143385  0.00111629]  taking action:  2
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  10210

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:26: syntax error\nI give up.\n'
LLM generates return in:  101.721765  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  18.0
Iteration TIME (sec):  102.89765577599974
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.35136262 -0.34413309 -0.43350394 -0.44009516 -0.45371606 -0.47543648
 -0.35758226 -0.48247361 -0.49282352 -0.49586939]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.12197922 0.09608212 0.0897636  0.02365072 0.00657679 0.00592453
 0.00537044 0.00419625 0.00282364 0.0023957 ]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] c;

bcd_fadd a0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
bcd_fadd a1 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
bcd_fadd a2 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
bcd_fadd a3 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  113.094913  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  19.0
Iteration TIME (sec):  114.25044291600034
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.33775939 -0.56005597 -0.43177648 -0.43853894 -0.45251368 -0.47479836
 -0.34955276 -0.48201831 -0.49263709 -0.49576208]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.0438531  -0.48590273 -0.48951003  0.01494002  0.00522375  0.00367879
  0.00350995  0.00170939  0.00153285  0.00119336]  taking action:  3
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  570

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    assign sum = a + b + cin;
    assign cout = a[15] + b[15] + cin;
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:24: syntax error\nI give up.\n'
LLM generates return in:  21.300404  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  20.0
Iteration TIME (sec):  22.662458352999693
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.39954862 -0.55742321 -0.4300917  -0.43702115 -0.451341   -0.474176
 -0.3417216  -0.48157425 -0.49245526 -0.49565743]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [6.2492859e-01 3.9564282e-02 2.2928467e-02 1.9487664e-02 1.7650288e-02
 3.2968144e-03 1.2601437e-03 8.7672035e-04 5.9161859e-04 5.6033843e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.998999   0.05032429 0.04242453 0.02291707 0.01944709 0.01007948
 0.00506642 0.00376269 0.00218584 0.00213025]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.08104  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  21.0
Iteration TIME (sec):  121.2121541030001
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.38803315 -0.55485242 -0.42844657 -0.43553909 -0.45019592 -0.4735683
 -0.50055608 -0.48114064 -0.49227771 -0.49555523]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00201482 -0.48504758 -0.48887372 -0.49207687  0.00554063  0.00390195
  0.00372287  0.00181308  0.00162583  0.00126575]  taking action:  4
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    

    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    wire [3:0] sum_temp5;
    wire [3:0] sum_temp6;
    wire [3:0] sum_temp7;
    wire [3:0] sum_temp8;
    wire [3:0] sum_temp9;
    wire [3:0] sum_temp10;
    wire [3:0] sum_temp11;
    wire [3:0] sum_temp12;
    wire [3:0] sum_temp13;
    wire [3:0] sum_temp14;
    wire [3:0] sum_temp15;
    wire [3:0] sum_temp16;
    wire [3:0] sum_temp17;
    wire [3:0] sum_temp18;
    wire [3:0] sum_temp19;
    wire [3:0] sum_temp20;
    wire [3:0] sum_temp21;
    wire [3:0] sum_temp22;
    wire [3:0] sum_temp23;
    wire [3:0] sum_temp24;
    wire [3:0] sum_temp25;
    wire [3:0] sum_temp26;
    wire [3:0] sum_temp27;
    wire [3:0] sum_temp28;
    wire [3:0] sum_temp29;
    wire [3:0] sum_temp30;
    wire [3:0] sum_temp31;
    wire [3:0] sum_temp32;
    wire [3:0] sum_temp33;
    wire [3:0] sum_temp34;
    wire [3:0] sum_temp35;
    wire [3:0] sum_temp36;
    wire [3:0] sum_temp37;
    wire [3:0] sum_temp38;
    wire [3:0] sum_temp39;
    wire [3:0] sum_temp40;
    wire [3:0] sum_temp41;
    wire [3:0] sum_temp42;
    wire [3:0] sum_temp43;
    wire [3:0] sum_temp44;
    wire [3:0] sum_temp45;
    wire [3:0] sum_temp46;
    wire [3:0] sum_temp47;
    wire [3:0] sum_temp48;
    wire [3:0] sum_temp49;
    wire [3:0] sum_temp50;
    wire [3:0] sum_temp51;
    wire [3:0] sum_temp52;
    wire [3:0] sum_temp53;
    wire [3:0] sum_temp54;
    wire [3:0] sum_temp55;
    wire [3:0] sum_temp56;
    wire [3:0] sum_temp57;
    wire [3:0] sum_temp58;
    wire [3:0] sum_temp59;
    wire [3:0] sum_temp60;
    wire [3:0] sum_temp61;
    wire [3:0] sum_temp62;
    wire [3:0] sum_temp63;
    wire [3:0] sum_temp64;
    wire [3:0] sum_temp65;
    wire [3:0] sum_temp66;
    wire [3:0] sum_temp67;
    wire [3:0] sum_temp68;
    wire [3:0] sum_temp69;
    wire [3:0] sum_temp70;
    wire [3:0] sum_temp71;
    wire [3:0] sum_temp72;
    wire [3:0] sum_temp73;
    wire [3:0] sum_temp74;
    wire [3:0] sum_temp75;
    wire [3:0] sum_temp76;
    wire [3:0] sum_temp77;
    wire [3:0] sum_temp78;
    wire [3:0] sum_
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:101: syntax error\nI give up.\n'
LLM generates return in:  1643.61966  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  22.0
Iteration TIME (sec):  1641.2618507999996
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.43909888 -0.55233943 -0.42683843 -0.43409035 -0.44907659 -0.47297425
 -0.4949499  -0.48071678 -0.49210416 -0.49545534]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8557701e+00 1.9536771e-02 1.2645106e-02 1.0711803e-02 5.3161760e-03
 3.7843718e-03 1.1541682e-03 7.2759163e-04 6.6272228e-04 6.5672275e-04]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
   
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.713317  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  23.0
Iteration TIME (sec):  121.83601900700069
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.42918589 -0.5498805  -0.61684327 -0.43267278 -0.44798134 -0.47239299
 -0.48946432 -0.48030204 -0.49193433 -0.49535759]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04539794 -0.48423874 -0.48827186 -0.4916483  -0.49707982  0.00411301
  0.00392425  0.00191115  0.00171377  0.00133422]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.03351969 -0.4827024   0.02406159  0.02389147  0.02219331  0.0171008
  0.00778643  0.00608734  0.00601955  0.00532457]  taking action:  2
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
   wire [3:0] c;
   
   bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
   bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
   bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
   bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
   
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.087102  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  24.0
Iteration TIME (sec):  121.2299144059998
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.4722522  -0.54747228 -0.61581588 -0.43128444 -0.44690868 -0.47182371
 -0.48409189 -0.47989586 -0.49176801 -0.49526186]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.9337611  0.7006151  0.05546655 0.05350224 0.04466803 0.03804021
 0.01531672 0.01528871 0.01410505 0.00613128]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  197

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
	
	wire [3:0] c;
	
	bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
	bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
	bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
	bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
	
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.659014  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  25.0
Iteration TIME (sec):  121.7961062860004
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.46360109 -0.54511177 -0.61480883 -0.61994909 -0.44585726 -0.47126571
 -0.47882587 -0.47949772 -0.49160499 -0.49516803]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9240488e+00 2.5838193e-02 1.5246199e-03 1.0361246e-04 5.7871075e-06
 2.9751773e-06 2.8295924e-06 2.5704048e-06 6.8330667e-07 6.6356824e-07]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
 
    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:28: syntax error\nI give up.\n'
LLM generates return in:  117.772861  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  26.0
Iteration TIME (sec):  118.92400194200036
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.4551148  -0.54279623 -0.61382098 -0.61905915 -0.62988394 -0.47071834
 -0.47366018 -0.47910716 -0.49144507 -0.49507598]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.09444928 -0.48346946 -0.48769942 -0.49124065 -0.4969373   0.00431377
  0.00411579  0.00200444  0.00179742  0.00139934]  taking action:  5
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    reg [15:0] cout_temp;
    
    assign sum = cout_temp + a + b + cin;
    always @ (a or b or cin)
        begin
            cout_temp = 0;
            if (a[15] == b[15] && a[15] == cin)
                cout_temp = 1;
            else if (a[15] == b[15] && a[15]!= cin)
                cout_temp = 0;
            else if (a[15]!= b[15] && a[15] == cin)
                cout_temp = 0;
            else if (a[15]!= b[15] && a[15]!= cin)
                cout_temp = 1;
        end
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:37: syntax error\nI give up.\n'
LLM generates return in:  150.410262  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  27.0
Iteration TIME (sec):  151.48199387400018
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.49288558 -0.54052318 -0.61285125 -0.61818555 -0.62920897 -0.47018102
 -0.4685893  -0.47872377 -0.49128808 -0.49498563]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.19930369 0.0456849  0.02647551 0.02250242 0.0203808  0.00380683
 0.00145509 0.00101235 0.00068314 0.00064702]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.11175948 0.06163442 0.05195922 0.02806756 0.02381772 0.01234479
 0.00620508 0.00460834 0.00267709 0.00260902]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.70664775 0.4892491  0.21563053 0.12630409 0.0161573  0.01240091
 0.00947299 0.00735442 0.00509974 0.00428763]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  119.547332  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  28.0
Iteration TIME (sec):  120.69595385999946
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.48538444 -0.53829038 -0.61189869 -0.61732741 -0.62854595 -0.46965321
 -0.57088657 -0.47834717 -0.49113388 -0.49489687]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8562154e+00 2.2407126e-02 9.2160925e-03 7.0123048e-03 3.7310326e-03
 3.4999033e-03 2.4648954e-03 2.2454432e-03 1.3703727e-03 1.2400706e-03]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
        
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.774391  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  29.0
Iteration TIME (sec):  121.89085678399988
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.47801156 -0.53609576 -0.61096242 -0.61648394 -0.62789427 -0.64608963
 -0.56696982 -0.47797701 -0.49098231 -0.49480963]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8330539e+00 2.3162583e-02 1.6796282e-02 7.0189536e-03 6.7241560e-03
 5.7126414e-03 2.6002373e-03 1.3732219e-03 9.5899991e-04 7.7778392e-04]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
     
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.771718  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  30.0
Iteration TIME (sec):  121.90840757099977
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.47076057 -0.53393741 -0.61004162 -0.61565441 -0.62725336 -0.64574949
 -0.56311782 -0.651742   -0.49083325 -0.49472383]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.06159407 -0.4827344  -0.48715246 -0.49085113 -0.4968011  -0.4977472
  0.0042988   0.00209356  0.00187735  0.00146157]  taking action:  6
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  1312

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    integer i;
    
    assign cout = 0;
    assign sum = 0;
    
    always @(*) begin
        for(i=0;i<16;i=i+1) begin
            if(i==0)
                sum[i] = a[i] ^ b[i] ^ cin;
            else
                sum[i] = a[i] ^ b[i] ^ sum[i-1];
            cout = sum[i];
        end
    end
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:36: syntax error\nI give up.\n'
LLM generates return in:  88.400778  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  31.0
Iteration TIME (sec):  89.63623837799969
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.50488518 -0.53181361 -0.60913557 -0.61483817 -0.6266227  -0.6454148
 -0.55932746 -0.65150319 -0.49068657 -0.49463941]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9514617e+00 6.1336505e-05 3.1821208e-05 2.2562204e-05 2.0731113e-05
 8.0624359e-06 2.8958605e-06 1.4270076e-06 6.3894754e-07 5.2441038e-07]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  42304

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
assign cout = cin;
assign sum = a + b + cin;
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:23: syntax error\nI give up.\n'
LLM generates return in:  12.166853  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  32.0
Iteration TIME (sec):  13.524614096999358
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.4984012  -0.52972274 -0.60824356 -0.61403458 -0.62600183 -0.64508529
 -0.55559588 -0.65126808 -0.66036146 -0.4945563 ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9117427e+00 1.1871084e-02 7.4133337e-03 4.5855879e-03 1.4364170e-03
 8.6205360e-04 7.5111666e-04 7.4177713e-04 4.6440482e-04 3.8957910e-04]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
       
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.767793  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  33.0
Iteration TIME (sec):  121.90981230899979
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.49201474 -0.52766332 -0.60736496 -0.61324307 -0.62539029 -0.64476074
 -0.55192042 -0.65103651 -0.66026664 -0.66298297]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.03008163 -0.4820294  -0.48662788 -0.49047756 -0.49667048 -0.4976552
 -0.49776283  0.00217905  0.001954    0.00152125]  taking action:  7
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    	
    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    
    bcd_fadd a1 (a[3:0], b[3:0], cin, sum_temp[0], sum_temp[1]);
    bcd_fadd a2 (a[7:4], b[7:4], sum_temp[0], sum_temp[2], sum_temp[3]);
    bcd_fadd a3 (a[11:8], b[11:8], sum_temp[0], sum_temp[4], sum_temp[3]);
    bcd_fadd a4 (a[15:12], b[15:12], sum_temp[0], cout, sum_temp[5]);
    
    assign sum[3:0] = sum_temp[3:0];
    assign sum[15:4] = sum_temp[5:1];
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:35: syntax error\nI give up.\n'
LLM generates return in:  216.00468  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  34.0
Iteration TIME (sec):  216.94099630900018
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.52245567 -0.52563396 -0.6064992  -0.61246312 -0.62478769 -0.64444093
 -0.54829863 -0.65080832 -0.66017321 -0.66292919]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 2.4026632e-04 -4.8135105e-01 -4.8612309e-01 -4.9011812e-01
 -4.9654481e-01 -4.9756670e-01 -4.9767840e-01 -4.9886936e-01
  2.0277656e-03  1.5786714e-03]  taking action:  8
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  7785

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    genvar i;
    
    wire [3:0] sum_temp;
    wire [3:0] carry_temp;
    
    generate for (i=0; i<4; i=i+1) begin: adder
        bcd_fadd fadd (
           .a(a[3*i+:4]),
           .b(b[3*i+:4]),
           .cin(carry_temp[i]),
           .cout(carry_temp[i+1]),
           .sum(sum_temp[i+:4])
        );
    end
    endgenerate
    
    assign carry_temp[0] = cin;
    assign cout = carry_temp[4];
    
    generate for (i=0; i<4; i=i+1) begin: concat
        assign sum[3*i+:4] = sum_temp[i];
    end
    endgenerate
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:45: syntax error\nI give up.\n'
LLM generates return in:  193.642528  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  35.0
Iteration TIME (sec):  194.5905375679995
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.54891525 -0.5236334  -0.60564572 -0.61169424 -0.62419363 -0.64412565
 -0.54472822 -0.65058337 -0.6600811  -0.66287618]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.42530328  0.11767609  0.10993752  0.0289661   0.0080549   0.00725603
  0.00657742  0.00513934  0.00345824  0.00293412]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  10210

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:27: syntax error\nI give up.\n'
LLM generates return in:  98.073871  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  36.0
Iteration TIME (sec):  99.2689341309997
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.54361268 -0.64124531 -0.60480401 -0.61093596 -0.62360776 -0.64381473
 -0.54120707 -0.65036152 -0.65999026 -0.66282389]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.02386177  0.05107727  0.02960052  0.02515846  0.02278642  0.00425617
  0.00162684  0.00113184  0.00076378  0.00072339]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  	
    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    wire [3:0] sum_temp5;
    wire [3:0] sum_temp6;
    wire [3:0] sum_temp7;
    wire [3:0] sum_temp8;
    wire [3:0] sum_temp9;
    wire [3:0] sum_temp10;
    wire [3:0] sum_temp11;
    wire [3:0] sum_temp12;
    wire [3:0] sum_temp13;
    wire [3:0] sum_temp14;
    wire [3:0] sum_temp15;
    wire [3:0] sum_temp16;
    wire [3:0] sum_temp17;
    wire [3:0] sum_temp18;
    wire [3:0] sum_temp19;
    wire [3:0] sum_temp20;
    wire [3:0] sum_temp21;
    wire [3:0] sum_temp22;
    wire [3:0] sum_temp23;
    wire [3:0] sum_temp24;
    wire [3:0] sum_temp25;
    wire [3:0] sum_temp26;
    wire [3:0] sum_temp27;
    wire [3:0] sum_temp28;
    wire [3:0] sum_temp29;
    wire [3:0] sum_temp30;
    wire [3:0] sum_temp31;
    wire [3:0] sum_temp32;
    wire [3:0] sum_temp33;
    wire [3:0] sum_temp34;
    wire [3:0] sum_temp35;
    wire [3:0] sum_temp36;
    wire [3:0] sum_temp37;
    wire [3:0] sum_temp38;
    wire [3:0] sum_temp39;
    wire [3:0] sum_temp40;
    wire [3:0] sum_temp41;
    wire [3:0] sum_temp42;
    wire [3:0] sum_temp43;
    wire [3:0] sum_temp44;
    wire [3:0] sum_temp45;
    wire [3:0] sum_temp46;
    wire [3:0] sum_temp47;
    wire [3:0] sum_temp48;
    wire [3:0] sum_temp49;
    wire [3:0] sum_temp50;
    wire [3:0] sum_temp51;
    wire [3:0] sum_temp52;
    wire [3:0] sum_temp53;
    wire [3:0] sum_temp54;
    wire [3:0] sum_temp55;
    wire [3:0] sum_temp56;
    wire [3:0] sum_temp57;
    wire [3:0] sum_temp58;
    wire [3:0] sum_temp59;
    wire [3:0] sum_temp60;
    wire [3:0] sum_temp61;
    wire [3:0] sum_temp62;
    wire [3:0] sum_temp63;
    wire [3:0] sum_temp64;
    wire [3:0] sum_temp65;
    wire [3:0] sum_temp66;
    wire [3:0] sum_temp67;
    wire [3:0] sum_temp68;
    wire [3:0] sum_temp69;
    wire [3:0] sum_temp70;
    wire [3:0] sum_temp71;
    wire [3:0] sum_temp72;
    wire [3:0] sum_temp73;
    wire [3:0] sum_temp74;
    wire [3:0] sum_temp75;
    wire [3:0] sum_temp76;
    wire [3:0] sum_temp77;
    wire [3:0] sum_temp78;
    wire [3:0] sum
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:100: syntax error\nI give up.\n'
LLM generates return in:  1643.728695  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  37.0
Iteration TIME (sec):  1641.3827847730008
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.53838129 -0.63978545 -0.6039736  -0.61018787 -0.62302977 -0.64350798
 -0.61477762 -0.65014265 -0.65990064 -0.66277231]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02949733 -0.4806965  -0.48563603 -0.48977128 -0.49642354 -0.49748132
 -0.4975969  -0.49882966 -0.49895054  0.00163408]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.02691108 -0.48105142 -0.48682094  0.02617179  0.02431156  0.01873299
  0.0085296   0.00666835  0.00659408  0.00583277]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [-0.0797703   0.50935614  0.34426662  0.19358072  0.04766138  0.01189984
  0.00816317  0.00696993  0.00517697  0.00455811]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  10210

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:27: syntax error\nI give up.\n'
LLM generates return in:  102.394575  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  38.0
Iteration TIME (sec):  103.55813955799931
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.56239216 -0.63834468 -0.60315405 -0.60944955 -0.62245933 -0.64320524
 -0.61192056 -0.64992664 -0.65981219 -0.6627214 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.09331918 -0.48006344 -0.48516494 -0.48943582 -0.49630624 -0.4973987
 -0.4975181  -0.49879128 -0.49891612  0.00168767]  taking action:  9
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  2357

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    parameter csize = 4;
    
    wire [csize-1:0] carry;
    
    genvar i;
    generate
        for (i=0; i<csize; i=i+1)
            full_adder fa (a[i], b[i], cin, carry[i], sum[i]);
    endgenerate
    
    assign cout = carry[csize-1];
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:33: syntax error\nI give up.\n'
LLM generates return in:  71.867739  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  39.0
Iteration TIME (sec):  73.10009360600088
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.58363626 -0.63692226 -0.60234494 -0.60872064 -0.62189615 -0.64290635
 -0.6090999  -0.64971338 -0.65972487 -0.66267114]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.0698114  -0.47944987 -0.48470837 -0.48911068 -0.49619257 -0.49731866
 -0.4974417  -0.49875408 -0.49888274 -0.4991302 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.18813777 -0.4795332  -0.48576498  0.02826877  0.02625948  0.02023394
  0.00921302  0.00720264  0.00712242  0.00630011]  taking action:  3
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  10210

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:27: syntax error\nI give up.\n'
LLM generates return in:  98.43535  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  40.0
Iteration TIME (sec):  99.60540244200092
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.60257264 -0.63551751 -0.60154588 -0.60800079 -0.62133997 -0.64261118
 -0.60631429 -0.64950278 -0.65963863 -0.6626215 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6364225  0.02392756 0.01548703 0.01311923 0.00651096 0.00463489
 0.00141356 0.00089111 0.00081167 0.00080432]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.326914   0.06490014 0.0288657  0.01866983 0.01182497 0.00722912
 0.00619983 0.00524986 0.00303533 0.00287107]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
   
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.082887  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  41.0
Iteration TIME (sec):  121.22174668799926
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.59842859 -0.63412979 -0.70056737 -0.60728966 -0.62079054 -0.64231959
 -0.60356244 -0.64929472 -0.65955344 -0.66257247]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.1661123  -0.47885406 -0.48426506 -0.48879498 -0.4960822  -0.4972409
 -0.49736753 -0.49871796 -0.49885038 -0.49910498]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.14934403 -0.4781201  -0.4847821  -0.48488972  0.02807257  0.02163099
  0.00984914  0.00769995  0.00761419  0.0067351 ]  taking action:  4
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
	wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:28: syntax error\nI give up.\n'
LLM generates return in:  118.223987  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  42.0
Iteration TIME (sec):  119.37361046200022
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.6156845  -0.6327585  -0.69998234 -0.60658695 -0.62024761 -0.64203145
 -0.60084316 -0.64908913 -0.65946925 -0.66252401]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04544455 -0.47202384  0.03242575  0.02755972  0.02496127  0.0046624
  0.00178211  0.00123987  0.00083667  0.00079244]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.19573405  0.07116929  0.05999734  0.03240963  0.02750234  0.01425453
  0.007165    0.00532125  0.00309124  0.00301263]  taking action:  1
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  
  wire [3:0] c;
  
  bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
  bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
  bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
  bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
  
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.120488  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  43.0
Iteration TIME (sec):  121.26332294699932
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.61184987 -0.63140306 -0.69940409 -0.60589236 -0.61971095 -0.64174664
 -0.65556174 -0.64888591 -0.65938604 -0.66247612]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.07180959 0.8580747  0.06793237 0.0655266  0.05470693 0.04658956
 0.01875908 0.01872476 0.01727508 0.00750925]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
	 
	 assign cout = (a[15] == b[15] && a[15] == cin)? 1 : 0;
	 
	 assign sum = {cout, a + b};
	 
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:26: syntax error\nI give up.\n'
LLM generates return in:  33.304841  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  44.0
Iteration TIME (sec):  34.6690752279992
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.60805858 -0.63006294 -0.69883236 -0.7039042  -0.61918036 -0.64146505
 -0.65328391 -0.64868499 -0.65930377 -0.66242877]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.24149966 -0.4782746  -0.48383388 -0.48848796 -0.49597484 -0.4971653
 -0.4972954  -0.49868283 -0.49881887 -0.49908045]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.11290812 -0.47679284 -0.483859   -0.48397312 -0.48511228  0.02294313
  0.01044659  0.00816703  0.00807607  0.00714366]  taking action:  5
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  570

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
assign {cout, sum} = a + b + cin;

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:24: syntax error\nI give up.\n'
LLM generates return in:  11.508112  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  45.0
Iteration TIME (sec):  12.909970605998751
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.6240937  -0.62873763 -0.69826696 -0.70339484 -0.61865564 -0.64118657
 -0.65103126 -0.64848629 -0.65922241 -0.66238194]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [6.7823446e-01 3.1645194e-02 1.8672703e-03 1.2689883e-04 7.0877304e-06
 3.6438332e-06 3.4655288e-06 3.1480902e-06 8.3687632e-07 8.1270178e-07]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.4249465  0.03282027 0.01878708 0.01508825 0.01314595 0.00765335
 0.00669782 0.00629807 0.00605883 0.00528154]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
 
    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:28: syntax error\nI give up.\n'
LLM generates return in:  117.240714  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  46.0
Iteration TIME (sec):  118.38380432800113
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.62057028 -0.62742665 -0.69770766 -0.70289099 -0.71360242 -0.6409111
 -0.64880296 -0.64828974 -0.65914193 -0.66233562]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.30221343 -0.47771025 -0.4834139  -0.4881889  -0.49587026 -0.49709165
 -0.49722514 -0.4986486  -0.49878818 -0.49905658]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.07844621 -0.4755375  -0.48298588 -0.48310617 -0.48430696 -0.48790792
  0.01101167  0.00860881  0.00851293  0.00753007]  taking action:  6
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21412

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:22: syntax error\nI give up.\n'
LLM generates return in:  0.008819  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  47.0
Iteration TIME (sec):  1.424920942999961
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.63531826 -0.62612954 -0.69715429 -0.70239246 -0.71321725 -0.64063854
 -0.64659824 -0.64809527 -0.6590623  -0.66228978]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.41374767 -0.43205968  0.1269449   0.03344717  0.00930099  0.00837855
  0.00759496  0.00593439  0.00399323  0.00338803]  taking action:  2
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  570

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

assign sum = a + b + cin;
assign cout = a[15] + b[15] + cin;

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:25: syntax error\nI give up.\n'
LLM generates return in:  19.981961  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  48.0
Iteration TIME (sec):  21.356397998999455
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.63203255 -0.69987671 -0.69660665 -0.70189911 -0.71283607 -0.64036882
 -0.64441637 -0.64790282 -0.6589835  -0.66224443]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.35222816 -0.4771598  -0.4830043  -0.48789722 -0.49576828 -0.49701983
 -0.49715662 -0.49861524 -0.49875826 -0.49903327]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.04566836 -0.4743435  -0.48215544 -0.48228163 -0.483541   -0.4873177
 -0.49422544  0.00902899  0.00892843  0.00789761]  taking action:  7
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
     wire [3:0] c;
     
     bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
     bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
     bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
     bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
     
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.021671  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  49.0
Iteration TIME (sec):  121.15742960199896
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.6456538  -0.69886021 -0.69606457 -0.70141076 -0.71245877 -0.64010183
 -0.64225666 -0.64771232 -0.65890549 -0.66219953]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.63669515 0.02744301 0.01128736 0.00858828 0.00456956 0.00428649
 0.00301887 0.0027501  0.00167836 0.00151877]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.3007274  0.02500128 0.0145947  0.01251497 0.01231963 0.01196248
 0.01008726 0.00633387 0.00358593 0.00336138]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
        
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.068241  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  50.0
Iteration TIME (sec):  121.2057182410008
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.64258018 -0.69785381 -0.69552789 -0.70092728 -0.71208521 -0.7298781
 -0.64011843 -0.64752371 -0.65882827 -0.66215508]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.11265731 -0.4697823   0.03502381  0.0297679   0.02696126  0.00503597
  0.0019249   0.00133921  0.00090371  0.00085593]  taking action:  2
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  wire [3:0] c;
  
  bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
  bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
  bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
  bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:27: syntax error\nI give up.\n'
LLM generates return in:  116.937219  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  51.0
Iteration TIME (sec):  118.09143191899966
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.63953654 -0.69685724 -0.69499644 -0.70044851 -0.7117153  -0.72968179
 -0.68325093 -0.64733695 -0.65875179 -0.66211106]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.3941968  -0.4766223  -0.48260435 -0.4876124  -0.49566868 -0.4969497
 -0.4970897  -0.49858266 -0.49872902 -0.4990105 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.01434964 -0.47320268 -0.481362   -0.48149374 -0.48280913 -0.4867538
 -0.49396867 -0.49528477  0.00932544  0.00824878]  taking action:  8
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
  
    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    
    bcd_fadd a1(a[3:0], b[3:0], 1'b0, sum_temp[0], sum_temp[1]);
    bcd_fadd a2(a[7:4], b[7:4], sum_temp[0], sum_temp[2], sum_temp[3]);
    bcd_fadd a3(a[11:8], b[11:8], sum_temp[2], sum_temp[4], sum_temp[3]);
    bcd_fadd a4(a[15:12], b[15:12], sum_temp[4], cout, sum_temp[3]);
    
    assign sum[3:0] = sum_temp[3:0];
    assign sum[15:4] = sum_temp[3:0];
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:421: syntax error\nI give up.\n'
LLM generates return in:  1639.553892  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  52.0
Iteration TIME (sec):  1637.1922488850014
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.65232545 -0.69587021 -0.69447008 -0.69997432 -0.71134893 -0.72948735
 -0.68141597 -0.64715197 -0.65867605 -0.66206747]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.62251174 0.02836826 0.02057116 0.00859643 0.00823538 0.00699653
 0.00318463 0.00168185 0.00117453 0.00095259]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.2715927  0.02887588 0.02837663 0.01405131 0.01402582 0.00779809
 0.0069217  0.00549812 0.00413806 0.00403025]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
     
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.130489  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  53.0
Iteration TIME (sec):  121.26964475400018
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.64946909 -0.69489244 -0.69394866 -0.69950458 -0.710986   -0.72929474
 -0.67959824 -0.73522653 -0.65860102 -0.66202428]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.4299579  -0.4760969  -0.4822134  -0.48733398 -0.49557135 -0.49688116
 -0.4970243  -0.4985508  -0.49870047 -0.49898827]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.01568913 -0.47210845 -0.48060092 -0.48073807 -0.4821072  -0.4862129
 -0.49372238 -0.4950922  -0.4951469   0.00858561]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [-0.01476055 -0.20592308  0.39752483  0.22352776  0.05503462  0.01374076
  0.00942602  0.00804818  0.00597785  0.00526325]  taking action:  2
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  570

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    assign sum = a + b + cin;
    assign cout = a[15] + b[15] + cin;
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:25: syntax error\nI give up.\n'
LLM generates return in:  21.408409  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  54.0
Iteration TIME (sec):  22.78747244999977
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.66136239 -0.69392369 -0.69343205 -0.69903918 -0.71062642 -0.7291039
 -0.67779726 -0.73509037 -0.65852668 -0.66198149]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [6.9502139e-01 7.5121570e-05 3.8972863e-05 2.7632945e-05 2.5390324e-05
 9.8744267e-06 3.5466903e-06 1.7477204e-06 7.8254777e-07 6.4226890e-07]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.36697114 0.3230427  0.32208297 0.22825252 0.14335592 0.0461725
 0.03400094 0.03386038 0.03367759 0.02919237]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  796

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
assign cout = cin;
assign sum = a + b + cin;
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:23: syntax error\nI give up.\n'
LLM generates return in:  11.502796  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  55.0
Iteration TIME (sec):  12.89279193099901
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.65867482 -0.6929637  -0.69292011 -0.69857798 -0.71027009 -0.7289148
 -0.67601259 -0.73495544 -0.74383975 -0.66193909]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.4608268  -0.47558278 -0.48183084 -0.48706156 -0.4954761  -0.49681407
 -0.49696028 -0.49851963 -0.49867252 -0.49896652]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.16432548 -0.47105557 -0.47986862 -0.48001096 -0.48143175 -0.48569244
 -0.49348542 -0.49490696 -0.49496368  0.0089097 ]  taking action:  9
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
reg [15:0] cout_temp;
    
    bcd_fadd a1 (a[3:0], b[3:0], cin, cout_temp[0], sum[3:0]);
    bcd_fadd a2 (a[7:4], b[7:4], cout_temp[0], cout_temp[1], sum[7:4]);
    bcd_fadd a3 (a[11:8], b[11:8], cout_temp[1], cout_temp[2], sum[11:8]);
    bcd_fadd a4 (a[15:12], b[15:12], cout_temp[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  132.607375  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  56.0
Iteration TIME (sec):  133.69268893700064
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.66977069 -0.69201225 -0.69241272 -0.69812089 -0.70991693 -0.72872737
 -0.67424378 -0.7348217  -0.74378499 -0.66189707]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [6.7069852e-01 1.4539049e-02 9.0794424e-03 5.6161755e-03 1.7592444e-03
 1.0557957e-03 9.1992633e-04 9.0848777e-04 5.6877744e-04 4.7713501e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.2578895  0.02624286 0.01743197 0.0148749  0.01206207 0.01095151
 0.01048082 0.00762232 0.00581737 0.00460466]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
       
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.160074  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  57.0
Iteration TIME (sec):  121.30695407500025
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.66723588 -0.69106911 -0.69190977 -0.69766779 -0.70956685 -0.72854158
 -0.67249041 -0.73468914 -0.74373071 -0.74639154]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.4877695  -0.4750793  -0.4814562  -0.48679477 -0.49538282 -0.4967484
 -0.4968976  -0.4984891  -0.49864516 -0.4989452 ]  taking action:  1
Leaf selection - depth:  2
Leaf selection - action scores:  [1.2197548  0.22920088 0.15958616 0.04913592 0.03145533 0.03120602
 0.01949488 0.01734466 0.015532   0.01541913]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  18

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    wire [3:0] sum_temp5;
    wire [3:0] sum_temp6;
    wire [3:0] sum_temp7;
    wire [3:0] sum_temp8;
    wire [3:0] sum_temp9;
    wire [3:0] sum_temp10;
    wire [3:0] sum_temp11;
    wire [3:0] sum_temp12;
    wire [3:0] sum_temp13;
    wire [3:0] sum_temp14;
    wire [3:0] sum_temp15;
    wire [3:0] sum_temp16;
    wire [3:0] sum_temp17;
    wire [3:0] sum_temp18;
    wire [3:0] sum_temp19;
    wire [3:0] sum_temp20;
    wire [3:0] sum_temp21;
    wire [3:0] sum_temp22;
    wire [3:0] sum_temp23;
    wire [3:0] sum_temp24;
    wire [3:0] sum_temp25;
    wire [3:0] sum_temp26;
    wire [3:0] sum_temp27;
    wire [3:0] sum_temp28;
    wire [3:0] sum_temp29;
    wire [3:0] sum_temp30;
    wire [3:0] sum_temp31;
    wire [3:0] sum_temp32;
    wire [3:0] sum_temp33;
    wire [3:0] sum_temp34;
    wire [3:0] sum_temp35;
    wire [3:0] sum_temp36;
    wire [3:0] sum_temp37;
    wire [3:0] sum_temp38;
    wire [3:0] sum_temp39;
    wire [3:0] sum_temp40;
    wire [3:0] sum_temp41;
    wire [3:0] sum_temp42;
    wire [3:0] sum_temp43;
    wire [3:0] sum_temp44;
    wire [3:0] sum_temp45;
    wire [3:0] sum_temp46;
    wire [3:0] sum_temp47;
    wire [3:0] sum_temp48;
    wire [3:0] sum_temp49;
    wire [3:0] sum_temp50;
    wire [3:0] sum_temp51;
    wire [3:0] sum_temp52;
    wire [3:0] sum_temp53;
    wire [3:0] sum_temp54;
    wire [3:0] sum_temp55;
    wire [3:0] sum_temp56;
    wire [3:0] sum_temp57;
    wire [3:0] sum_temp58;
    wire [3:0] sum_temp59;
    wire [3:0] sum_temp60;
    wire [3:0] sum_temp61;
    wire [3:0] sum_temp62;
    wire [3:0] sum_temp63;
    wire [3:0] sum_temp64;
    wire [3:0] sum_temp65;
    wire [3:0] sum_temp66;
    wire [3:0] sum_temp67;
    wire [3:0] sum_temp68;
    wire [3:0] sum_temp69;
    wire [3:0] sum_temp70;
    wire [3:0] sum_temp71;
    wire [3:0] sum_temp72;
    wire [3:0] sum_temp73;
    wire [3:0] sum_temp74;
    wire [3:0] sum_temp75;
    wire [3:0] sum_temp76;
    wire [3:0] sum_temp77;
    wire [3:0] sum_temp78;
    wire [3:0] sum_temp79
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:99: syntax error\nI give up.\n'
LLM generates return in:  1642.625617  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  58.0
Iteration TIME (sec):  1640.252981601001
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.67761811 -0.69013406 -0.69141113 -0.69721858 -0.70921978 -0.72835738
 -0.6707521  -0.73455771 -0.74367689 -0.74636057]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.06519979 -0.4676959  -0.481279    0.03182322  0.0288228   0.00538368
  0.00205781  0.00143168  0.00096611  0.00091503]  taking action:  3
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  117.853481  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  59.0
Iteration TIME (sec):  118.97282371000074
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.67522211 -0.6892069  -0.6909167  -0.69677316 -0.70887564 -0.72817474
 -0.70580308 -0.7344274  -0.74362353 -0.74632985]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.4789456  -0.6497239  -0.48108894 -0.48653325 -0.49529138 -0.49668398
 -0.4968362  -0.4984592  -0.4986183  -0.49892431]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.14201432 -0.47003967 -0.47916204 -0.47930938 -0.48078004 -0.48519027
 -0.49325675 -0.4947282  -0.49478692 -0.49538878]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.0425142  -0.17121202 -0.27777687  0.24991162  0.06153058  0.01536263
  0.01053861  0.00899814  0.00668344  0.00588449]  taking action:  3
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);
    
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  106.230236  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  60.0
Iteration TIME (sec):  107.38912806900044
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.68496287 -0.68828744 -0.69042638 -0.69633143 -0.70853435 -0.72799361
 -0.70428367 -0.73429816 -0.74357061 -0.7462994 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.5033967  -0.6494011  -0.4807287  -0.48627672 -0.49520168 -0.4966208
 -0.4967759  -0.49842983 -0.498592   -0.4989038 ]  taking action:  2
Leaf selection - depth:  2
Leaf selection - action scores:  [1.9484227e+00 1.0182149e-03 4.4792076e-04 3.1376010e-04 2.0893755e-04
 9.0537331e-05 7.1279130e-05 6.4640459e-05 4.9540391e-05 3.8198988e-05]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  62

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:26: syntax error\nI give up.\n'
LLM generates return in:  101.162707  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  61.0
Iteration TIME (sec):  102.34929729999931
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.69402581 -0.68737549 -0.68994005 -0.69589331 -0.70819585 -0.72781397
 -0.70277667 -0.73416998 -0.74351813 -0.74626919]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.40356696 -0.42404044 -0.42903563  0.03739507  0.01039882  0.0093675
  0.00849142  0.00663485  0.00446457  0.00378793]  taking action:  3
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21412

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:22: syntax error\nI give up.\n'
LLM generates return in:  0.008804  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  62.0
Iteration TIME (sec):  1.4355993650005985
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.69185502 -0.73872569 -0.68945763 -0.69545872 -0.70786007 -0.72763576
 -0.70128176 -0.73404283 -0.74346606 -0.74623922]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.2081517  0.02762917 0.01788288 0.01514878 0.00751821 0.00535191
 0.00163224 0.00102897 0.00093723 0.00092875]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.31256557 0.07948612 0.03535312 0.02286578 0.01448257 0.00885383
 0.00759321 0.00642974 0.0037175  0.00351633]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.730562   0.46065423 0.21850263 0.165209   0.02345379 0.00958906
 0.00834671 0.00766177 0.0051711  0.00406603]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
   
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  119.500645  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  63.0
Iteration TIME (sec):  120.64036793599917
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.68970138 -0.73797779 -0.75118324 -0.69502755 -0.70752694 -0.72745897
 -0.69979868 -0.73391668 -0.74341441 -0.74620949]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.49543083 -0.64908427 -0.6535834  -0.4860249  -0.4951136  -0.49655882
 -0.49671674 -0.49840102 -0.49856615 -0.49888372]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [1.9515424e+00 2.5436637e-05 9.7385118e-06 8.0199770e-06 8.0006048e-06
 7.6889710e-06 4.4159774e-06 1.8849752e-06 1.4268544e-06 8.4318987e-07]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  2160

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    assign sum = a + b + cin;
    assign cout = a[15] + b[15] + cin;
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:24: syntax error\nI give up.\n'
LLM generates return in:  20.692802  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  64.0
Iteration TIME (sec):  22.06843833199855
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.69833811 -0.73723571 -0.75080333 -0.69459975 -0.70719641 -0.72728355
 -0.69832714 -0.73379152 -0.74336316 -0.74617999]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.16026878 -0.00459033  0.07844155  0.0756636   0.06317013  0.05379698
  0.02166112  0.02162149  0.01994755  0.00867093]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.669188   0.53984517 0.03620105 0.01236971 0.01213249 0.01193274
 0.00622767 0.0059394  0.00418489 0.00374113]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
	
	wire [3:0] c;
	
	bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
	bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
	bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
	bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
	
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  120.123888  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  65.0
Iteration TIME (sec):  121.2579600220015
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.69629073 -0.73649932 -0.75042634 -0.75534018 -0.7068684  -0.72710947
 -0.69686687 -0.73366732 -0.7433123  -0.74615072]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.487606   -0.6487731  -0.65335184 -0.657185   -0.49502712 -0.4964979
 -0.49665862 -0.4983727  -0.49854076 -0.49886397]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.2670294  -0.4690571  -0.47847867 -0.4786308  -0.4801497  -0.48470458
 -0.4930356  -0.49455532 -0.49461594 -0.49523756]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.09429449 -0.13983083 -0.25656676 -0.36311775  0.06740337  0.01682892
  0.01154447  0.00985697  0.00732134  0.00644614]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.1507694  0.39034244 0.10850009 0.05771548 0.03104124 0.02676739
 0.02056999 0.01818983 0.01440164 0.0106475 ]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  18

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  118.942864  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  66.0
Iteration TIME (sec):  120.08563030000005
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.70445017 -0.73576849 -0.7500522  -0.75500312 -0.70654288 -0.72693671
 -0.69541763 -0.73354405 -0.74326183 -0.74612167]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.02062672 -0.46573633 -0.48014337 -0.48312318  0.03057119  0.00571025
  0.00218263  0.00151852  0.00102471  0.00097053]  taking action:  4
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  570

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  assign sum = a + b + cin;
  assign cout = a[15] + b[15] + cin;
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:23: syntax error\nI give up.\n'
LLM generates return in:  19.994599  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  67.0
Iteration TIME (sec):  21.376720993999697
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.70250057 -0.73504309 -0.74968083 -0.75466857 -0.70621977 -0.72676524
 -0.72458122 -0.7334217  -0.74321173 -0.74609283]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.5105082  -0.6484672  -0.6531242  -0.65702295 -0.49494213 -0.49643803
 -0.4966015  -0.4983449  -0.4985158  -0.49884453]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [1.7425842e+00 1.4684831e-01 1.4413378e-02 1.2258073e-02 7.0272000e-03
 5.6053083e-03 4.6921368e-03 3.7534765e-03 1.4460348e-03 1.4369288e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    

    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    wire [3:0] sum_temp5;
    wire [3:0] sum_temp6;
    wire [3:0] sum_temp7;
    wire [3:0] sum_temp8;
    wire [3:0] sum_temp9;
    wire [3:0] sum_temp10;
    wire [3:0] sum_temp11;
    wire [3:0] sum_temp12;
    wire [3:0] sum_temp13;
    wire [3:0] sum_temp14;
    wire [3:0] sum_temp15;
    wire [3:0] sum_temp16;
    wire [3:0] sum_temp17;
    wire [3:0] sum_temp18;
    wire [3:0] sum_temp19;
    wire [3:0] sum_temp20;
    wire [3:0] sum_temp21;
    wire [3:0] sum_temp22;
    wire [3:0] sum_temp23;
    wire [3:0] sum_temp24;
    wire [3:0] sum_temp25;
    wire [3:0] sum_temp26;
    wire [3:0] sum_temp27;
    wire [3:0] sum_temp28;
    wire [3:0] sum_temp29;
    wire [3:0] sum_temp30;
    wire [3:0] sum_temp31;
    wire [3:0] sum_temp32;
    wire [3:0] sum_temp33;
    wire [3:0] sum_temp34;
    wire [3:0] sum_temp35;
    wire [3:0] sum_temp36;
    wire [3:0] sum_temp37;
    wire [3:0] sum_temp38;
    wire [3:0] sum_temp39;
    wire [3:0] sum_temp40;
    wire [3:0] sum_temp41;
    wire [3:0] sum_temp42;
    wire [3:0] sum_temp43;
    wire [3:0] sum_temp44;
    wire [3:0] sum_temp45;
    wire [3:0] sum_temp46;
    wire [3:0] sum_temp47;
    wire [3:0] sum_temp48;
    wire [3:0] sum_temp49;
    wire [3:0] sum_temp50;
    wire [3:0] sum_temp51;
    wire [3:0] sum_temp52;
    wire [3:0] sum_temp53;
    wire [3:0] sum_temp54;
    wire [3:0] sum_temp55;
    wire [3:0] sum_temp56;
    wire [3:0] sum_temp57;
    wire [3:0] sum_temp58;
    wire [3:0] sum_temp59;
    wire [3:0] sum_temp60;
    wire [3:0] sum_temp61;
    wire [3:0] sum_temp62;
    wire [3:0] sum_temp63;
    wire [3:0] sum_temp64;
    wire [3:0] sum_temp65;
    wire [3:0] sum_temp66;
    wire [3:0] sum_temp67;
    wire [3:0] sum_temp68;
    wire [3:0] sum_temp69;
    wire [3:0] sum_temp70;
    wire [3:0] sum_temp71;
    wire [3:0] sum_temp72;
    wire [3:0] sum_temp73;
    wire [3:0] sum_temp74;
    wire [3:0] sum_temp75;
    wire [3:0] sum_temp76;
    wire [3:0] sum_temp77;
    wire [3:0] sum_temp78;
    wire [3:0] sum_
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:101: syntax error\nI give up.\n'
LLM generates return in:  1643.356536  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  68.0
Iteration TIME (sec):  1641.0015337999994
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.71022445 -0.734323   -0.74931219 -0.75433647 -0.70589903 -0.72659502
 -0.72329608 -0.73330024 -0.743162   -0.74606421]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [2.4033862e-01 3.6540721e-02 2.1561380e-03 1.4653015e-04 8.1842054e-06
 4.2075358e-06 4.0016480e-06 3.6351012e-06 9.6634153e-07 9.3842715e-07]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.372598   0.04019645 0.02300938 0.01847925 0.01610044 0.00937341
 0.00820312 0.00771353 0.00742052 0.00646854]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7657544  0.43558526 0.29205018 0.12993507 0.02187679 0.00843072
 0.00832741 0.00748814 0.00562645 0.00332127]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
 
    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:28: syntax error\nI give up.\n'
LLM generates return in:  116.543947  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  69.0
Iteration TIME (sec):  117.68779632800033
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.70836509 -0.73360812 -0.74894621 -0.75400676 -0.7644645  -0.72642602
 -0.72202022 -0.73317967 -0.74311263 -0.74603579]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.50338924 -0.64816636 -0.65290034 -0.6568635  -0.663239   -0.49637914
 -0.4965453  -0.49831754 -0.4984913  -0.49882543]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [1.3590693  0.22449094 0.06948571 0.05656695 0.03072701 0.02670342
 0.02352706 0.01507925 0.01288459 0.01067038]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  1314

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    reg [15:0] cout_temp;
    
    assign sum = cout_temp + a + b + cin;
    always @ (a or b or cin)
        begin
            cout_temp = 0;
            if (a[15] == b[15] && a[15] == cin)
                cout_temp = 1;
            else if (a[15] == b[15] && a[15]!= cin)
                cout_temp = 0;
            else if (a[15]!= b[15] && a[15] == cin)
                cout_temp = 0;
            else if (a[15]!= b[15] && a[15]!= cin)
                cout_temp = 1;
        end
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:37: syntax error\nI give up.\n'
LLM generates return in:  149.768922  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  70.0
Iteration TIME (sec):  150.84136686199963
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.71569028 -0.73289832 -0.74858283 -0.7536794  -0.76421158 -0.72625824
 -0.72075345 -0.73305995 -0.7430636  -0.74600757]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.49638417 -0.6478703  -0.65268004 -0.6567067  -0.66318417 -0.66421413
 -0.49649006 -0.4982906  -0.49846715 -0.49880663]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.35680056 -0.4681048  -0.4778163  -0.47797316 -0.47953877 -0.48423386
 -0.49282128 -0.49438775 -0.49445024 -0.495091  ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [-0.23872572 -0.11097279 -0.23706204 -0.35215026  0.07280396  0.01817731
  0.01246945  0.01064675  0.00790795  0.00696262]  taking action:  4
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  7785

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    genvar i;
    
    wire [3:0] sum_temp;
    wire [3:0] carry_temp;
    
    generate for (i=0; i<4; i=i+1) begin: adder
        bcd_fadd fadd (
           .a(a[3*i+:4]),
           .b(b[3*i+:4]),
           .cin(carry_temp[i]),
           .cout(carry_temp[i+1]),
           .sum(sum_temp[i+:4])
        );
    end
    endgenerate
    
    assign carry_temp[0] = cin;
    assign cout = carry_temp[4];
    
    generate for (i=0; i<4; i=i+1) begin: concat
        assign sum[3*i+:4] = sum_temp[i];
    end
    endgenerate
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:46: syntax error\nI give up.\n'
LLM generates return in:  194.477002  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  71.0
Iteration TIME (sec):  195.45222205400205
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.72258369 -0.73219351 -0.748222   -0.75335434 -0.76396043 -0.72609163
 -0.71949556 -0.73294107 -0.74301493 -0.74597956]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02153158 -0.46388292 -0.47906926 -0.48221028 -0.48388755  0.00601913
  0.0023007   0.00160067  0.00108014  0.00102303]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.14014798 -0.46021515  0.06707906  0.03623507  0.03074855  0.01593705
  0.00801072  0.00594934  0.00345611  0.00336823]  taking action:  2
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  21809

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  

wire [3:0] c;

bcd_fadd a1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
bcd_fadd a2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
bcd_fadd a3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
bcd_fadd a4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:30: syntax error\nI give up.\n'
LLM generates return in:  114.475153  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  72.0
Iteration TIME (sec):  115.62364107699977
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.72087354 -0.73149357 -0.74786367 -0.75303153 -0.76371101 -0.72592617
 -0.7438604  -0.73282301 -0.74296659 -0.74595173]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.51784956 -0.6475789  -0.6524632  -0.65655226 -0.66313016 -0.6641761
 -0.4964356  -0.4982641  -0.4984434  -0.49878815]  taking action:  6
Leaf selection - depth:  2
Leaf selection - action scores:  [1.3651172  0.03531601 0.0269299  0.02425454 0.02345139 0.0226769
 0.02242532 0.02235401 0.02167042 0.01842705]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  26

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    integer i;
    
    assign cout = 0;
    assign sum = 0;
    
    always @(*) begin
        for(i=0;i<16;i=i+1) begin
            if(i==0)
                sum[i] = a[i] ^ b[i] ^ cin;
            else
                sum[i] = a[i] ^ b[i] ^ sum[i-1];
            cout = sum[i];
        end
    end
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:36: syntax error\nI give up.\n'
LLM generates return in:  87.79927  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  73.0
Iteration TIME (sec):  89.0157315769975
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.72743457 -0.73079841 -0.74750779 -0.75271092 -0.76346331 -0.72576184
 -0.74273253 -0.73270576 -0.74291858 -0.7459241 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.20836163 0.03168846 0.01303352 0.0099169  0.00527648 0.00494961
 0.00348589 0.00317554 0.001938   0.00175372]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.2965296  0.03062019 0.01787478 0.01532765 0.0150884  0.01465099
 0.01235432 0.00775737 0.00439185 0.00411683]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.60883635 0.5602705  0.2763507  0.09761329 0.02199119 0.01160518
 0.00989294 0.00480223 0.00459216 0.00457268]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
        
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  119.528614  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  74.0
Iteration TIME (sec):  120.6750136619994
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.72579715 -0.73010793 -0.7471543  -0.75239248 -0.76321726 -0.78047891
 -0.74161226 -0.7325893  -0.74287089 -0.74589665]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.5114342  -0.64729184 -0.6522496  -0.65640014 -0.663077   -0.6641387
 -0.6642547  -0.498238   -0.49841997 -0.4987699 ]  taking action:  7
Leaf selection - depth:  2
Leaf selection - action scores:  [1.4353943  0.12732658 0.04366179 0.04322891 0.03581396 0.03523614
 0.02026222 0.01297789 0.01215816 0.01101066]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    	
    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    
    bcd_fadd a1 (a[3:0], b[3:0], cin, sum_temp[0], sum_temp[1]);
    bcd_fadd a2 (a[7:4], b[7:4], sum_temp[0], sum_temp[2], sum_temp[3]);
    bcd_fadd a3 (a[11:8], b[11:8], sum_temp[0], sum_temp[4], sum_temp[3]);
    bcd_fadd a4 (a[15:12], b[15:12], sum_temp[0], cout, sum_temp[5]);
    
    assign sum[3:0] = sum_temp[3:0];
    assign sum[15:4] = sum_temp[5:1];
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:35: syntax error\nI give up.\n'
LLM generates return in:  215.474385  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  75.0
Iteration TIME (sec):  216.4033946319978
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.73205149 -0.72942204 -0.74680316 -0.75207614 -0.76297286 -0.7803492
 -0.74049943 -0.73247361 -0.74282352 -0.74586939]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.3943629  -0.41679046 -0.42226243 -0.47951788  0.01139134  0.01026158
  0.00930188  0.00726812  0.00489069  0.00414947]  taking action:  4
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

reg [15:0] cout_temp;

bcd_fadd a1 (a[3:0], b[3:0], cin, cout_temp[0], sum[3:0]);
bcd_fadd a2 (a[7:4], b[7:4], cout_temp[0], cout_temp[1], sum[7:4]);
bcd_fadd a3 (a[11:8], b[11:8], cout_temp[1], cout_temp[2], sum[11:8]);
bcd_fadd a4 (a[15:12], b[15:12], cout_temp[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  126.480753  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  76.0
Iteration TIME (sec):  127.59346735700092
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.73048178 -0.76749201 -0.74645433 -0.75176189 -0.76273005 -0.78022034
 -0.7393939  -0.73235869 -0.74277646 -0.7458423 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.5051125  -0.64700896 -0.6520391  -0.65625024 -0.6630246  -0.6641018
 -0.6642195  -0.6654749  -0.4983969  -0.49875194]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [1.9496061e+00 1.9812190e-03 1.3153221e-05 2.8086774e-06 1.1889332e-06
 9.5491191e-07 9.0503102e-07 7.1043206e-07 4.5416598e-07 4.4884740e-07]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  1312

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    genvar i;
    
    wire [3:0] sum_temp;
    wire [3:0] carry_temp;
    
    generate for (i=0; i<4; i=i+1) begin: adder
        bcd_fadd fadd (
           .a(a[3*i+:4]),
           .b(b[3*i+:4]),
           .cin(carry_temp[i]),
           .cout(carry_temp[i+1]),
           .sum(sum_temp[i+:4])
        );
    end
    endgenerate
    
    assign carry_temp[0] = cin;
    assign cout = carry_temp[4];
    
    generate for (i=0; i<4; i=i+1) begin: concat
        assign sum[3*i+:4] = sum_temp[i];
    end
    endgenerate
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:45: syntax error\nI give up.\n'
LLM generates return in:  193.070807  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  77.0
Iteration TIME (sec):  194.02053939899997
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.73645216 -0.76691174 -0.74610775 -0.75144966 -0.76248882 -0.78009231
 -0.73829553 -0.7322445  -0.74272971 -0.74581539]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.19744325 0.03275684 0.02375353 0.0099263  0.00950939 0.0080789
 0.00367729 0.00194203 0.00135623 0.00109995]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.27868837 0.03536559 0.03475413 0.01720927 0.01717805 0.00955067
 0.00847732 0.0067338  0.00506807 0.00493603]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7021073  0.5713103  0.21253397 0.10981707 0.02428686 0.00876296
 0.00694335 0.00487915 0.00446729 0.00400904]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
     
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  119.442066  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  78.0
Iteration TIME (sec):  120.58109854200302
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.73494563 -0.76633518 -0.74576339 -0.75113943 -0.76224913 -0.7799651
 -0.73720417 -0.78570485 -0.74268325 -0.74578865]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.49888062 -0.6467301  -0.6518316  -0.6561025  -0.6629729  -0.66406536
 -0.66418475 -0.66545796 -0.6655828  -0.49873424]  taking action:  9
Leaf selection - depth:  2
Leaf selection - action scores:  [1.9439535e+00 3.5733860e-03 1.4184590e-03 4.7368009e-04 1.2146284e-04
 9.2903829e-05 7.9274723e-05 7.7663746e-05 7.7159966e-05 7.6762451e-05]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  269

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    parameter csize = 4;
    
    wire [csize-1:0] carry;
    
    genvar i;
    generate
        for (i=0; i<csize; i=i+1)
            full_adder fa (a[i], b[i], cin, carry[i], sum[i]);
    endgenerate
    
    assign cout = carry[csize-1];
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:33: syntax error\nI give up.\n'
LLM generates return in:  71.277944  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  79.0
Iteration TIME (sec):  72.51927789799811
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.74065272 -0.76576225 -0.7454212  -0.75083116 -0.76201095 -0.7798387
 -0.7361197  -0.78561466 -0.74263709 -0.74576208]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.11530858 -0.4621201  -0.47804767 -0.481342   -0.48310113  0.00631292
  0.00241299  0.00167879  0.00113286  0.00107297]  taking action:  5
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  10210

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  bcd_fadd a1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
  bcd_fadd a2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
  bcd_fadd a3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
  bcd_fadd a4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:26: syntax error\nI give up.\n'
LLM generates return in:  100.830413  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  80.0
Iteration TIME (sec):  102.0137526369981
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.73920523 -0.7651929  -0.74508114 -0.75052481 -0.76177426 -0.77971308
 -0.75712182 -0.78552503 -0.74259121 -0.74573568]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.49273455 -0.6464551  -0.651627   -0.6559568  -0.66292197 -0.6640295
 -0.66415054 -0.6654413  -0.6655679  -0.66581124]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.424508   -0.4671801  -0.47717318 -0.47733456 -0.47894558 -0.48377675
 -0.49261314 -0.49422503 -0.49428937 -0.4949487 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [-0.20917854 -0.08411244 -0.2189075  -0.341942   -0.46108463  0.01943236
  0.01333041  0.01138185  0.00845395  0.00744336]  taking action:  5
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  275

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    module bcd_fadd (
        input [3:0] a,
        input [3:0] b,
        input     cin,
        output   cout,
        output [3:0] sum );
        
        assign sum = a + b + cin;
        assign cout = (a&b | a&cin | b&cin);
    endmodule
Verilog compilation failed, error:  4
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:22: error: Module definition bcd_fadd cannot nest into module top_module.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:31: syntax error\nI give up.\n'
LLM generates return in:  60.225032  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  81.0
Iteration TIME (sec):  61.519819899996946
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.74466749 -0.76462704 -0.74474317 -0.75022034 -0.76153902 -0.77958824
 -0.75613999 -0.78543595 -0.74254562 -0.74570943]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [2.5326115e-01 8.6742919e-05 4.5001983e-05 3.1907774e-05 2.9318220e-05
 1.1402006e-05 4.0953651e-06 2.0180935e-06 9.0360828e-07 7.4162824e-07]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.275277    0.3956449   0.39446944  0.27955112  0.17557442  0.05654953
  0.04164248  0.04147033  0.04124646  0.0357532 ]  taking action:  1
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  796

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
assign sum = a + b + cin;
assign cout = a[15] + b[15] + cin;
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:23: syntax error\nI give up.\n'
LLM generates return in:  18.056245  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  82.0
Iteration TIME (sec):  19.432411231002334
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.74327528 -0.76406463 -0.74440726 -0.74991773 -0.76130521 -0.77946415
 -0.75516414 -0.78534741 -0.79400025 -0.74568335]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.51368845 -0.6461838  -0.6514251  -0.65581304 -0.6628717  -0.66399413
 -0.66411674 -0.6654248  -0.6655531  -0.66579974]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.47747865 -0.46628076 -0.47654766 -0.47671348 -0.47836864 -0.48333222
 -0.49241072 -0.4940668  -0.49413288 -0.49481025]  taking action:  1
Leaf selection - depth:  3
Leaf selection - action scores:  [0.16942723 0.14202261 0.10957087 0.05858332 0.04031379 0.00740938
 0.00638587 0.00438928 0.00353844 0.00255999]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  10210

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    

bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:28: syntax error\nI give up.\n'
LLM generates return in:  98.71742  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  83.0
Iteration TIME (sec):  99.90580055499959
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.74850962 -0.7635056  -0.74407337 -0.74961693 -0.76107281 -0.77934081
 -0.75419414 -0.78525941 -0.79396422 -0.74565743]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.01644248  0.03089035  0.01999367  0.01693685  0.00840561  0.00598362
  0.0018249   0.00115042  0.00104786  0.00103837]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  570

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
   assign sum = a + b + cin;
   assign cout = a[15] + b[15] + cin;
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:23: syntax error\nI give up.\n'
LLM generates return in:  19.991468  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  84.0
Iteration TIME (sec):  21.368928183001117
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.74716925 -0.76294988 -0.78645119 -0.74931792 -0.76084179 -0.77921821
 -0.75322991 -0.78517193 -0.7939284  -0.74563165]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.23453748 0.01678825 0.01048404 0.006485   0.0020314  0.00121913
 0.00106224 0.00104903 0.00065677 0.00055095]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.27029687 0.03214081 0.02134971 0.01821796 0.01477295 0.0134128
 0.01283633 0.0093354  0.00712479 0.00563953]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.64440054 0.5923737  0.20680836 0.13001114 0.01700672 0.00855315
 0.00683859 0.00477826 0.00446152 0.00439946]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
       
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  119.491694  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  85.0
Iteration TIME (sec):  120.63203630700082
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.74583675 -0.76239743 -0.78617621 -0.74902066 -0.76061212 -0.77909632
 -0.75227133 -0.78508496 -0.79389279 -0.79648484]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.53261817 -0.64591604 -0.65122586 -0.6556711  -0.6628221  -0.66395915
 -0.6640834  -0.6654086  -0.66553855 -0.6657884 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.46679088 -0.6436032  -0.4759384  -0.47610852 -0.4778067  -0.4828992
 -0.49221358 -0.49391267 -0.49398047 -0.49467543]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [-0.18142727 -0.05888465 -0.20185637 -0.3323542  -0.45872402 -0.48969445
  0.01413903  0.01207228  0.00896677  0.00789487]  taking action:  6
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    reg [15:0] cout_reg;
    
    always @ (a, b, cin)
        begin
            {cout_reg, sum} = a + b + cin;
        end
    
    assign cout = cout_reg;
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:31: syntax error\nI give up.\n'
LLM generates return in:  43.177064  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  86.0
Iteration TIME (sec):  44.498626573000365
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.7508992  -0.76184817 -0.78590284 -0.74872513 -0.76038378 -0.77897514
 -0.7513183  -0.78499849 -0.79385738 -0.79646446]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.1745314   0.05388486  0.08770031  0.08459447  0.07062635  0.06014686
  0.02421786  0.02417357  0.02230204  0.0096944 ]  taking action:  2
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  198

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
	  
    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    wire [3:0] sum_temp5;
    wire [3:0] sum_temp6;
    wire [3:0] sum_temp7;
    wire [3:0] sum_temp8;
    wire [3:0] sum_temp9;
    wire [3:0] sum_temp10;
    wire [3:0] sum_temp11;
    wire [3:0] sum_temp12;
    wire [3:0] sum_temp13;
    wire [3:0] sum_temp14;
    wire [3:0] sum_temp15;
    wire [3:0] sum_temp16;
    wire [3:0] sum_temp17;
    wire [3:0] sum_temp18;
    wire [3:0] sum_temp19;
    wire [3:0] sum_temp20;
    wire [3:0] sum_temp21;
    wire [3:0] sum_temp22;
    wire [3:0] sum_temp23;
    wire [3:0] sum_temp24;
    wire [3:0] sum_temp25;
    wire [3:0] sum_temp26;
    wire [3:0] sum_temp27;
    wire [3:0] sum_temp28;
    wire [3:0] sum_temp29;
    wire [3:0] sum_temp30;
    wire [3:0] sum_temp31;
    wire [3:0] sum_temp32;
    wire [3:0] sum_temp33;
    wire [3:0] sum_temp34;
    wire [3:0] sum_temp35;
    wire [3:0] sum_temp36;
    wire [3:0] sum_temp37;
    wire [3:0] sum_temp38;
    wire [3:0] sum_temp39;
    wire [3:0] sum_temp40;
    wire [3:0] sum_temp41;
    wire [3:0] sum_temp42;
    wire [3:0] sum_temp43;
    wire [3:0] sum_temp44;
    wire [3:0] sum_temp45;
    wire [3:0] sum_temp46;
    wire [3:0] sum_temp47;
    wire [3:0] sum_temp48;
    wire [3:0] sum_temp49;
    wire [3:0] sum_temp50;
    wire [3:0] sum_temp51;
    wire [3:0] sum_temp52;
    wire [3:0] sum_temp53;
    wire [3:0] sum_temp54;
    wire [3:0] sum_temp55;
    wire [3:0] sum_temp56;
    wire [3:0] sum_temp57;
    wire [3:0] sum_temp58;
    wire [3:0] sum_temp59;
    wire [3:0] sum_temp60;
    wire [3:0] sum_temp61;
    wire [3:0] sum_temp62;
    wire [3:0] sum_temp63;
    wire [3:0] sum_temp64;
    wire [3:0] sum_temp65;
    wire [3:0] sum_temp66;
    wire [3:0] sum_temp67;
    wire [3:0] sum_temp68;
    wire [3:0] sum_temp69;
    wire [3:0] sum_temp70;
    wire [3:0] sum_temp71;
    wire [3:0] sum_temp72;
    wire [3:0] sum_temp73;
    wire [3:0] sum_temp74;
    wire [3:0] sum_temp75;
    wire [3:0] sum_temp76;
    wire [3:0] sum_temp77;
    wire [3:0] sum_temp78;
    wire [3:0] sum
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:100: syntax error\nI give up.\n'
LLM generates return in:  1643.65526  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  87.0
Iteration TIME (sec):  1641.3101151279989
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.74961494 -0.76130207 -0.78563103 -0.79035937 -0.76015675 -0.77885465
 -0.75037074 -0.78491252 -0.79382218 -0.7964442 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.5498105  -0.6456517  -0.65102917 -0.65553105 -0.66277313 -0.6639247
 -0.6640505  -0.6653926  -0.6655242  -0.6657772 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.5107304  -0.6430337  -0.4753442  -0.47551852 -0.47725862 -0.4824769
 -0.4920213  -0.4937623  -0.4938318  -0.49454394]  taking action:  2
Leaf selection - depth:  3
Leaf selection - action scores:  [0.34216347 0.28158492 0.25928944 0.15056293 0.01865775 0.01068918
 0.00836932 0.00323077 0.00309038 0.00286041]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
   wire [3:0] c;
   
   bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
   bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
   bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
   bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
   
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  119.481053  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  88.0
Iteration TIME (sec):  120.61564172399812
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.75447606 -0.76075906 -0.78536076 -0.79011589 -0.75993101 -0.77873484
 -0.74942854 -0.78482704 -0.79378718 -0.79642405]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.08338094 -0.46043572 -0.47707152 -0.48051232 -0.48234972 -0.49670318
  0.00252029  0.00175344  0.00118324  0.00112068]  taking action:  6
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  reg [15:0] cout_temp;
  
  assign sum = cout_temp + a + b + cin;
  assign cout = cout_temp[15];
  
  always @ (a, b, cin)
    begin
      cout_temp[0] = 0;
      cout_temp[1] = (a[0] ^ b[0]) | (a[0] & b[1]) | (a[1] & b[0]);
      cout_temp[2] = (a[1] ^ b[1]) | (a[1] & b[2]) | (a[2] & b[1]) | (a[2] & b[0]);
      cout_temp[3] = (a[3] ^ b[3]) | (a[3] & b[4]) | (a[4] & b[3]) | (a[4] & b[2]) | (a[4] & b[1]) | (a[4] & b[0]);
      cout_temp[4] = (a[5] ^ b[5]) | (a[5] & b[6]) | (a[6] & b[5]) | (a[6] & b[4]) | (a[6] & b[3]) | (a[6] & b[2]) | (a[6] & b[1]) | (a[6] & b[0]);
      cout_temp[5] = (a[7] ^ b[7]) | (a[7] & b[8]) | (a[8] & b[7]) | (a[8] & b[6]) | (a[8] & b[5]) | (a[8] & b[4]) | (a[8] & b[3]) | (a[8] & b[2]) | (a[8] & b[1]) | (a[8] & b[0]);
      cout_temp[6] = (a[9] ^ b[9]) | (a[9] & b[10]) | (a[10] & b[9]) | (a[10] & b[8]) | (a[10] & b[7]) | (a[10] & b[6]) | (a[10] & b[5]) | (a[10] & b[4]) | (a[10] & b[3]) | (a[10] & b[2]) | (a[10] & b[1]) | (a[10] & b[0]);
      cout_temp[7] = (a[11] ^ b[11]) | (a[11] & b[12]) | (a[12] & b[11]) | (a[12] & b[10]) | (a[12] & b[9]) | (a[12] & b[8]) | (a[12] & b[7]) | (a[12] & b[6]) | (a[12] & b[5]) | (a[12] & b[4]) | (a[12] & b[3]) | (a[12] & b[2]) | (a[12] & b[1]) | (a[12] & b[0]);
      cout_temp[8] = (a[13] ^ b[13]) | (a[13] & b[14]) | (a[14] & b[13]) | (a[14] & b[12]) | (a[14] & b[11]) | (a[14] & b[10]) | (a[14] & b[9]) | (a[14] & b[8]) | (a[14] & b[7]) | (a[14] & b[6]) | (a[14] & b[5]) | (a[14] & b[4]) | (a[14] & b[3]) | (a[14] & b[2]) | (a[14] & b[1]) | (a[14] & b[0]);
      cout_temp[9] = (a[15] ^ b[15]) | (a[15] & b[16]) | (a[16] & b[15]) | (a[16] & b[14]) | (a[16] & b[13]) | (a[16] & b[12]) | (a
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:37: syntax error\nI give up.\n'
LLM generates return in:  1643.738373  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  89.0
Iteration TIME (sec):  1641.398425116
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.75323721 -0.76021909 -0.785092   -0.78987378 -0.75970653 -0.77861571
 -0.76783841 -0.78474204 -0.79375237 -0.79640402]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.5654999  -0.6453906  -0.6508349  -0.6553927  -0.66272473 -0.6638906
 -0.66401803 -0.6653768  -0.66551    -0.6657662 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.50156987 -0.6424775  -0.6498427  -0.47494242 -0.47672346 -0.48206455
 -0.49183354 -0.49361554 -0.49368665 -0.49441555]  taking action:  3
Leaf selection - depth:  3
Leaf selection - action scores:  [1.9470899e+00 1.0911049e-03 7.2832580e-04 4.2858877e-04 1.8878574e-04
 1.3625556e-04 1.2856696e-04 1.2044344e-04 9.5402997e-05 7.1277667e-05]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  62

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
bcd_fadd f1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
bcd_fadd f2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
bcd_fadd f3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
bcd_fadd f4 (a[15:12], b[15:12], cout3, cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:27: syntax error\nI give up.\n'
LLM generates return in:  97.788908  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  90.0
Iteration TIME (sec):  98.97644783799842
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.7579098  -0.75968211 -0.78482474 -0.789633   -0.7594833  -0.77849724
 -0.76697836 -0.78465751 -0.79371776 -0.7963841 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.57988036 -0.6451327  -0.650643   -0.65525603 -0.662677   -0.663857
 -0.6639859  -0.6653611  -0.66549593 -0.6657552 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.49261525 -0.64193386 -0.64946455 -0.6495862  -0.4762003  -0.48166144
 -0.49165    -0.49347204 -0.49354476 -0.49429002]  taking action:  4
Leaf selection - depth:  3
Leaf selection - action scores:  [0.52204895 0.4170242  0.30909616 0.12067681 0.07442912 0.05250184
 0.03823019 0.03724984 0.02024759 0.0155925 ]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
	wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:28: syntax error\nI give up.\n'
LLM generates return in:  117.585383  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  91.0
Iteration TIME (sec):  118.7309227859987
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.76237157 -0.75914807 -0.78455893 -0.78939355 -0.75926128 -0.77837941
 -0.76612302 -0.78457344 -0.79368334 -0.79636428]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.3858989  -0.4101234  -0.41603383 -0.47787678 -0.49384797  0.01108378
  0.01004718  0.00785046  0.00528255  0.00448194]  taking action:  5
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  62

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

top_module_bcd_fadd a1 (a[3:0], b[3:0], cin, cout, sum[3:0]);
top_module_bcd_fadd a2 (a[7:4], b[7:4], cout, cout, sum[7:4]);
top_module_bcd_fadd a3 (a[11:8], b[11:8], cout, cout, sum[11:8]);
top_module_bcd_fadd a4 (a[15:12], b[15:12], cout, cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:27: syntax error\nI give up.\n'
LLM generates return in:  107.450069  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  92.0
Iteration TIME (sec):  108.59970120799699
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.76120965 -0.78878981 -0.78429457 -0.78915539 -0.75904048 -0.77826223
 -0.76527231 -0.78448982 -0.7936491  -0.79634458]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0547042e-02 4.0853769e-02 2.4106356e-03 1.6382568e-04 9.1502197e-06
 4.7041681e-06 4.4739782e-06 4.0641667e-06 1.0804026e-06 1.0491934e-06]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
 

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  117.883689  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  93.0
Iteration TIME (sec):  119.03564526899936
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.76005396 -0.78832755 -0.78403163 -0.78891851 -0.79901735 -0.77814567
 -0.76442617 -0.78440666 -0.79361505 -0.79632498]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.59311366 -0.6448779  -0.6504534  -0.655121   -0.6626298  -0.6638237
 -0.6639542  -0.66534567 -0.6654821  -0.6657444 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.4838533  -0.64140195 -0.6490946  -0.6492188  -0.650459   -0.481267
 -0.4914704  -0.49333164 -0.4934059  -0.49416724]  taking action:  5
Leaf selection - depth:  3
Leaf selection - action scores:  [1.9515615e+00 1.5453106e-05 1.2968618e-05 1.1330821e-05 6.3511661e-06
 2.5518996e-06 1.7140947e-06 9.5616156e-07 1.7370667e-07 1.6503280e-07]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  1391

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
assign {cout, sum} = a + b + cin;

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:24: syntax error\nI give up.\n'
LLM generates return in:  10.895446  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  94.0
Iteration TIME (sec):  12.290070128001389
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.76438388 -0.78786775 -0.78377008 -0.78868289 -0.7988353  -0.77802973
 -0.76358451 -0.78432394 -0.79358117 -0.79630548]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.05275822 -0.4588202  -0.47613528 -0.4797166  -0.481629   -0.49656856
 -0.4986884   0.00182504  0.00123155  0.00116644]  taking action:  7
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  275

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
    wire [3:0] c;
    
    assign c[0] = cin;
    assign cout = c[3];
    
    assign sum = a + b + c[3:1];
    
    always @(*)
        case (c[3:1])
            3'b000: c[3:1] = 4'b0000;
            3'b001: c[3:1] = 4'b0001;
            3'b010: c[3:1] = 4'b0010;
            3'b011: c[3:1] = 4'b0011;
            3'b100: c[3:1] = 4'b0100;
            3'b101: c[3:1] = 4'b0101;
            3'b110: c[3:1] = 4'b0110;
            3'b111: c[3:1] = 4'b0111;
        endcase
endmodule
Verilog compilation failed, error:  4
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:21: error: Module definition bcd_fadd cannot nest into module top_module.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:46: syntax error\nI give up.\n'
LLM generates return in:  251.430103  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  95.0
Iteration TIME (sec):  252.2809875060011
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.76326635 -0.78741036 -0.7835099  -0.7884485  -0.79865421 -0.7779144
 -0.77969387 -0.78424165 -0.79354748 -0.79628609]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.6053356  -0.64462596 -0.65026593 -0.6549875  -0.6625831  -0.6637908
 -0.66392285 -0.6653304  -0.6654684  -0.6657338 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.47527206 -0.64088094 -0.64873224 -0.648859   -0.6501248  -0.65392053
 -0.4912945  -0.49319413 -0.49326995 -0.49404696]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [-0.15517938 -0.03502357 -0.18572903 -0.3232858  -0.45649132 -0.489137
 -0.49254808  0.0127253   0.0094518   0.00832193]  taking action:  7
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  1433

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    add16 instance1 (a[15:0], b[15:0], cin, sum[15:0], c[0]);
    add16 instance2 (a[31:16], b[31:16], c[0], sum[31:16], c[1]);
    add16 instance3 (a[47:32], b[47:32], c[1], sum[47:32], c[2]);
    add16 instance4 (a[63:48], b[63:48], c[2], sum[63:48], cout);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:27: syntax error\nI give up.\n'
LLM generates return in:  96.950381  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  96.0
Iteration TIME (sec):  98.1304486170011
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.76744005 -0.78695534 -0.78325108 -0.78821533 -0.79847405 -0.77779967
 -0.77892048 -0.78415978 -0.79351396 -0.79626679]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.61666155 -0.64437693 -0.65008056 -0.65485555 -0.6625369  -0.66375834
 -0.66389185 -0.6653153  -0.66545486 -0.66572326]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.51532805 -0.6403703  -0.64837706 -0.6485064  -0.6497972  -0.6536681
 -0.4911221  -0.49305937 -0.49313667 -0.49392906]  taking action:  6
Leaf selection - depth:  3
Leaf selection - action scores:  [1.9514289e+00 1.0743626e-04 2.2989972e-05 1.6047139e-05 8.5680776e-06
 7.3785968e-06 4.4884077e-06 1.6904272e-06 1.2915743e-06 9.8367298e-07]  taking action:  0
Adding child.
Leaf selection - depth:  4
// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:22: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:22: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  97.0
Iteration TIME (sec):  0.0025534619999234565
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.77143778 -0.78650267 -0.78299358 -0.78798336 -0.79829483 -0.77768553
 -0.77815106 -0.78407834 -0.79348061 -0.7962476 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.6271895  -0.64413065 -0.64989734 -0.6547251  -0.6624913  -0.6637262
 -0.66386116 -0.66530037 -0.66544145 -0.66571283]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.5078271  -0.63986933 -0.6480287  -0.64816046 -0.6494758  -0.65342045
 -0.66063535 -0.49292713 -0.49300593 -0.49381343]  taking action:  7
Leaf selection - depth:  3
Leaf selection - action scores:  [0.43140382 0.33551398 0.18399946 0.14301495 0.02067727 0.01418927
 0.00963117 0.00751256 0.0072061  0.00498992]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
     wire [3:0] c;
     
     bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
     bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
     bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
     bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
     
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  119.497746  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  98.0
Iteration TIME (sec):  120.62811500800308
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.77527066 -0.7860523  -0.7827374  -0.78775257 -0.79811651 -0.77757197
 -0.77738556 -0.78399732 -0.79344743 -0.7962285 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.6370038  -0.643887   -0.649716   -0.654596   -0.6624462  -0.66369444
 -0.6638308  -0.6652856  -0.6654282  -0.6657025 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [-0.50046384 -0.6393776  -0.64768666 -0.64782083 -0.6491604  -0.6531774
 -0.66052467 -0.66186494 -0.49287757 -0.49369988]  taking action:  8
Leaf selection - depth:  3
Leaf selection - action scores:  [0.38370407 0.25364387 0.19044937 0.15991993 0.04510473 0.02035451
 0.0101475  0.0049145  0.00475778 0.00451834]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  50284

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
  
    wire [3:0] sum_temp;
    wire [3:0] sum_temp2;
    wire [3:0] sum_temp3;
    wire [3:0] sum_temp4;
    
    bcd_fadd a1(a[3:0], b[3:0], 1'b0, sum_temp[0], sum_temp[1]);
    bcd_fadd a2(a[7:4], b[7:4], sum_temp[0], sum_temp[2], sum_temp[3]);
    bcd_fadd a3(a[11:8], b[11:8], sum_temp[2], sum_temp[4], sum_temp[3]);
    bcd_fadd a4(a[15:12], b[15:12], sum_temp[4], cout, sum_temp[3]);
    
    assign sum[3:0] = sum_temp[3:0];
    assign sum[15:4] = sum_temp[3:0];
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:421: syntax error\nI give up.\n'
LLM generates return in:  1638.865163  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  99.0
Iteration TIME (sec):  1636.516069899997
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.77894893 -0.7856042  -0.78248251 -0.78752294 -0.7979391  -0.77745898
 -0.77662391 -0.7839167  -0.79341442 -0.7962095 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.0232923  -0.4572657  -0.47523442 -0.47895092 -0.4809355  -0.49643904
 -0.4986389  -0.49905303  0.00127804  0.00121047]  taking action:  8
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  1312

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
  integer i;
  
  assign cout = 0;
  assign sum = 0;
  
  always @(*) begin
    for(i=0;i<16;i=i+1) begin
      if(i==0)
        sum[i] = a[i] ^ b[i] ^ cin;
      else
        sum[i] = a[i] ^ b[i] ^ sum[i-1];
      cout = sum[i];
    end
  end
  
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:36: syntax error\nI give up.\n'
LLM generates return in:  88.314316  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  100.0
Iteration TIME (sec):  89.52862365500187
ROBUST FINAL VALUE, ITERATION:  1.0
Adding child.
// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  118.208513  seconds
Running getPromptScore: 
// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  118.198963  seconds
Running getPromptScore: 
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [-0.77795033 -0.78515833 -0.78222888 -0.78729446 -0.79776257 -0.77734656
 -0.79080835 -0.78383648 -0.79338158 -0.7961906 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.01626652  0.03542877  0.01457192  0.01108743  0.00589928  0.00553383
  0.00389734  0.00355036  0.00216675  0.00196072]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  685

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
        wire [3:0] c;
        bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
        bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
        bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
        bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);

endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:27: syntax error\nI give up.\n'
LLM generates return in:  115.921992  seconds
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  101.0
Iteration TIME (sec):  117.07064149500002
----
 Tree depth: 0
 Node: action=None
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198]]
• Child Action scores:[-0.77695667 -0.78471466 -0.78197652 -0.78706711 -0.79758691 -0.81436221
 -0.79010452 -0.78375666 -0.79334889 -0.79617178]
• Child averaged monte carlo:-0.9901960784313726
• Child probablities:[0.69640958 0.05182365 0.02210905 0.01991755 0.01538879 0.00816704
 0.15414963 0.00582729 0.00238608 0.00137337]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=101.0,Q=-0.9901960784313726,M=-0.9901960784313726
----
 Tree depth: 1
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284]]
• Child Action scores:[-0.6461768  -0.64364594 -0.64953667 -0.65446824 -0.6624015  -0.66366297
 -0.66380084 -0.665271   -0.6654151  -0.6656923 ]
• Child averaged monte carlo:-0.9791666666666666
• Child probablities:[9.6861702e-01 7.2233947e-03 5.3750197e-03 3.8276035e-03 1.3383158e-03
 9.4249961e-04 8.9924334e-04 4.3794201e-04 3.9271245e-04 3.0573746e-04]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=47.0,Q=-0.9791666666666666,M=-0.9791666666666666
----
 Tree depth: 1
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   198]]
• Child Action scores:[-0.37802076 -0.40391788 -0.4102364  -0.4763493  -0.4934232  -0.49407548
  0.01074089  0.0083925   0.00564728  0.0047914 ]
• Child averaged monte carlo:-0.875
• Child probablities:[0.06250169 0.04923211 0.04599453 0.01211854 0.00336992 0.00303571
 0.0027518  0.00215014 0.00144682 0.00122755]
• Child visitation:[1 1 1 1 1 1 0 0 0 0]
• N=7.0,Q=-0.875,M=-0.875
----
 Tree depth: 1
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50285]]
• Child Action scores:[ 0.053572   -0.48308066  0.02190197  0.01855339  0.00920789  0.00655472
  0.00199908  0.00126023  0.00114787  0.00113748]
• Child averaged monte carlo:-0.8333333333333334
• Child probablities:[9.50889587e-01 1.00105675e-02 6.47930428e-03 5.48868719e-03
 2.72398838e-03 1.93909777e-03 5.91391406e-04 3.72815208e-04
 3.39576392e-04 3.36502242e-04]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.8333333333333334,M=-0.8333333333333334
----
 Tree depth: 1
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   197]]
• Child Action scores:[-0.12755948  0.10675043 -0.45196456  0.0926686   0.07736729  0.06588758
  0.02652934  0.02648081  0.02443066  0.01061968]
• Child averaged monte carlo:-0.8333333333333334
• Child probablities:[0.47845566 0.35899252 0.02842085 0.02741435 0.02288773 0.01949166
 0.00784823 0.00783387 0.00722737 0.00314164]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=5.0,Q=-0.8333333333333334,M=-0.8333333333333334
----
 Tree depth: 1
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   220]]
• Child Action scores:[ 8.3137512e-02 -4.7762346e-01  2.6407191e-03  1.7946205e-04
  1.0023564e-05  5.1531579e-06  4.9009977e-06  4.4520716e-06
  1.1835218e-06  1.1493338e-06]
• Child averaged monte carlo:-0.8333333333333334
• Child probablities:[9.8587531e-01 1.3239392e-02 7.8120944e-04 5.3090633e-05 2.9652920e-06
 1.5244696e-06 1.4498725e-06 1.3170657e-06 3.5012374e-07 3.4000985e-07]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.8333333333333334,M=-0.8333333333333334
----
 Tree depth: 1
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50280]]
• Child Action scores:[ 0.05376476 -0.48059487  0.01596274  0.01214567  0.00646234  0.00606201
  0.00426932  0.00388922  0.00237356  0.00214787]
• Child averaged monte carlo:-0.8333333333333334
• Child probablities:[9.5111769e-01 1.1481326e-02 4.7222911e-03 3.5930783e-03 1.9117669e-03
 1.7933372e-03 1.2630031e-03 1.1505566e-03 7.0217380e-04 6.3540746e-04]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.8333333333333334,M=-0.8333333333333334
----
 Tree depth: 1
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286]]
• Child Action scores:[ 0.00513887 -0.45576578 -0.4743652  -0.47821212 -0.4802664  -0.49631405
 -0.49859113 -0.4990198  -0.49933854  0.00125295]
• Child averaged monte carlo:-0.9333333333333333
• Child probablities:[9.4127214e-01 1.6552499e-02 9.5925769e-03 8.1530493e-03 7.3843463e-03
 1.3792875e-03 5.2720599e-04 3.6679328e-04 2.4751533e-04 2.3442866e-04]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=14.0,Q=-0.9333333333333333,M=-0.9333333333333333
----
 Tree depth: 1
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50283]]
• Child Action scores:[-0.02542186  0.03662326  0.02655725  0.01109794  0.01063182  0.00903248
  0.00411134  0.00217125  0.00151631  0.00122978]
• Child averaged monte carlo:-0.8
• Child probablities:[9.3924987e-01 1.1868420e-02 8.6063510e-03 3.5964851e-03 3.4454321e-03
 2.9271359e-03 1.3323517e-03 7.0363370e-04 4.9138791e-04 3.9853354e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.8,M=-0.8
----
 Tree depth: 1
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   562]]
• Child Action scores:[2.1382928e-02 9.6981530e-05 5.0313745e-05 3.5673977e-05 3.2778764e-05
 1.2747829e-05 4.5787574e-06 2.2562972e-06 1.0102648e-06 8.2916557e-07]
• Child averaged monte carlo:-0.8
• Child probablities:[9.9992156e-01 3.1428594e-05 1.6305066e-05 1.1560788e-05 1.0622543e-05
 4.1311614e-06 1.4838280e-06 7.3119332e-07 3.2739430e-07 2.6870589e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.8,M=-0.8
----
 Tree depth: 1
 Node: action=9
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50281]]
• Child Action scores:[0.00568265 0.01876983 0.01172151 0.00725045 0.00227117 0.00136303
 0.00118762 0.00117285 0.00073429 0.00061598]
• Child averaged monte carlo:-0.8
• Child probablities:[9.7956973e-01 6.0826982e-03 3.7985642e-03 2.3496379e-03 7.3601463e-04
 4.4171300e-04 3.8486934e-04 3.8008380e-04 2.3795926e-04 1.9961885e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.8,M=-0.8
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198]]
• Child Action scores:[-0.49323094 -0.6388946  -0.64735067 -0.6474873  -0.6488505  -0.6529386
 -0.66041595 -0.66177994 -0.66183436 -0.49358836]
• Child averaged monte carlo:-0.9655172413793104
• Child probablities:[0.6155477  0.01121119 0.00779759 0.00774246 0.00719214 0.00554182
 0.00252333 0.00197271 0.00195074 0.00172552]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=28.0,Q=-0.9655172413793104,M=-0.9655172413793104
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284 21809]]
• Child Action scores:[0.24694425 0.2807126  0.19545233 0.06017896 0.03852475 0.03821941
 0.02387625 0.02124279 0.01902274 0.0188845 ]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.62499774 0.11744166 0.08177134 0.02517706 0.01611759 0.01598984
 0.0099891  0.00888734 0.00795854 0.0079007 ]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284    65]]
• Child Action scores:[6.93160295e-01 1.24705338e-03 5.48588636e-04 3.84276093e-04
 2.55895196e-04 1.10885136e-04 8.72987512e-05 7.91680723e-05
 6.06743379e-05 4.67840182e-05]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.9836439e-01 5.2172941e-04 2.2951289e-04 1.6076949e-04 1.0705881e-04
 4.6390986e-05 3.6523157e-05 3.3121527e-05 2.5384308e-05 1.9573017e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   562]]
• Child Action scores:[6.9507074e-01 3.1153391e-05 1.1927194e-05 9.8224255e-06 9.7986995e-06
 9.4170282e-06 5.4084458e-06 2.3086138e-06 1.7475326e-06 1.0326925e-06]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.9996293e-01 1.3033637e-05 4.9899768e-06 4.1094058e-06 4.0994796e-06
 3.9397996e-06 2.2627300e-06 9.6585416e-07 7.3111477e-07 4.3204730e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   628]]
• Child Action scores:[0.56711054 0.17985171 0.01765271 0.01501301 0.00860653 0.00686507
 0.00574667 0.00459705 0.00177102 0.00175987]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[8.9289355e-01 7.5244516e-02 7.3853605e-03 6.2809903e-03 3.6007105e-03
 2.8721387e-03 2.4042332e-03 1.9232671e-03 7.4094272e-04 7.3627685e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284  2301]]
• Child Action scores:[0.33225662 0.27494413 0.08510226 0.06928009 0.03763275 0.03270488
 0.02881465 0.01846823 0.01578033 0.01306849]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.696382   0.11502831 0.03560421 0.02898469 0.0157444  0.01368273
 0.01205518 0.00772655 0.00660201 0.00546746]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284 41433]]
• Child Action scores:[0.33596015 0.0432531  0.03298226 0.02970562 0.02872197 0.02777342
 0.0274653  0.02737796 0.02654074 0.02256844]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.6994809  0.01809579 0.01379878 0.01242793 0.0120164  0.01161956
 0.01149065 0.01145411 0.01110384 0.00944195]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   197]]
• Child Action scores:[0.37899595 0.15594257 0.05347455 0.05294438 0.04386297 0.04315528
 0.02481605 0.0158946  0.01489064 0.01348525]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.7354906  0.06524166 0.02237214 0.02215033 0.01835094 0.01805486
 0.01038228 0.00664982 0.00622979 0.00564182]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284  5235]]
• Child Action scores:[6.9388497e-01 2.4264879e-03 1.6109339e-05 3.4399134e-06 1.4561398e-06
 1.1695236e-06 1.1084321e-06 8.7009806e-07 5.5623747e-07 5.4972355e-07]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.9897075e-01 1.0151691e-03 6.7396604e-06 1.4391557e-06 6.0920485e-07
 4.8929326e-07 4.6373447e-07 3.6402270e-07 2.3271294e-07 2.2998771e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=9
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284 17143]]
• Child Action scores:[6.9042361e-01 4.3764864e-03 1.7372505e-03 5.8013730e-04 1.4876100e-04
 1.1378349e-04 9.7091310e-05 9.5118274e-05 9.4501273e-05 9.4014424e-05]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.9607444e-01 1.8309895e-03 7.2681304e-04 2.4271189e-04 6.2237101e-05
 4.7603571e-05 4.0620067e-05 3.9794610e-05 3.9536473e-05 3.9332790e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   198 21809]]
• Child Action scores:[1.2154927  0.3572135  0.12511277 0.03886325 0.02921469 0.01701726
 0.01278839 0.01206235 0.01089759 0.01076504]
• Child averaged monte carlo:-0.5
• Child probablities:[0.6228139  0.18303484 0.06410731 0.01991338 0.0149695  0.00871958
 0.00655272 0.0061807  0.00558388 0.00551597]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   198    65]]
• Child Action scores:[1.9478892e+00 9.4618218e-04 6.1712682e-04 3.4187495e-04 2.2851057e-04
 1.9397584e-04 1.2208914e-04 7.8800811e-05 4.8355556e-05 4.1563144e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.98091042e-01 4.84820164e-04 3.16213438e-04 1.75175432e-04
 1.17087955e-04 9.93924841e-05 6.25580142e-05 4.03772356e-05
 2.47772041e-05 2.12967971e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   198   562]]
• Child Action scores:[1.9515663e+00 1.8511369e-05 1.2917843e-05 5.8561864e-06 5.3232375e-06
 1.9129818e-06 1.5751493e-06 6.6060210e-07 2.0687490e-07 2.0329192e-07]
• Child averaged monte carlo:-0.5
• Child probablities:[9.99975204e-01 9.48515572e-06 6.61905415e-06 3.00068768e-06
 2.72760667e-06 9.80204618e-07 8.07100548e-07 3.38490025e-07
 1.06001913e-07 1.04166006e-07]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   198   437]]
• Child Action scores:[1.9513416e+00 1.8094074e-04 2.5257666e-05 2.1518485e-05 1.2912957e-05
 5.6059857e-06 4.1529397e-06 2.8551424e-06 2.2782986e-06 1.1578493e-06]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9986005e-01 9.2713351e-05 1.2941932e-05 1.1025990e-05 6.6165503e-06
 2.8724858e-06 2.1279507e-06 1.4629642e-06 1.1673916e-06 5.9327760e-07]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   198  2301]]
• Child Action scores:[1.2291111  0.3792561  0.08217774 0.06694013 0.01969288 0.01744759
 0.01732899 0.01369582 0.01200555 0.01055517]
• Child averaged monte carlo:-0.5
• Child probablities:[0.62979186 0.1943294  0.04210756 0.03429987 0.01009056 0.00894008
 0.00887931 0.00701769 0.0061516  0.00540843]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   198  4852]]
• Child Action scores:[1.9088714e+00 1.1801279e-02 3.5081487e-03 2.3817867e-03 1.6736240e-03
 1.4758417e-03 1.3702516e-03 1.1869582e-03 1.1752440e-03 9.3447324e-04]
• Child averaged monte carlo:-0.5
• Child probablities:[9.7809851e-01 6.0469308e-03 1.7975621e-03 1.2204185e-03 8.5755863e-04
 7.5621571e-04 7.0211175e-04 6.0819287e-04 6.0219056e-04 4.7882056e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50285   198]]
• Child Action scores:[-0.04115343  0.09178267  0.04082227  0.02640313  0.01672303  0.01022352
  0.00876789  0.00742442  0.0042926   0.00406031]
• Child averaged monte carlo:-0.75
• Child probablities:[0.6799057  0.03325459 0.01479068 0.00956635 0.00605907 0.00370417
 0.00317677 0.00269001 0.00155529 0.00147113]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50285   562]]
• Child Action scores:[1.9515641e+00 1.1068905e-05 9.8550327e-06 7.0189626e-06 6.4480419e-06
 4.6287150e-06 4.5096226e-06 2.1687317e-06 8.8683288e-07 5.9167826e-07]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9997401e-01 5.6716649e-06 5.0496815e-06 3.5964899e-06 3.3039523e-06
 2.3717359e-06 2.3107136e-06 1.1112500e-06 4.5440981e-07 3.0317369e-07]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   197   198]]
• Child Action scores:[-0.0902077   0.66117257  0.04433705  0.01514974  0.01485921  0.01461456
  0.0076273   0.00727425  0.00512542  0.00458194]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.3428894  0.2766146  0.01854928 0.00633819 0.00621664 0.00611429
 0.00319103 0.00304333 0.00214432 0.00191694]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   197   220]]
• Child Action scores:[1.9059837e+00 3.5090890e-02 9.6782986e-03 6.2360364e-04 8.0631638e-05
 2.1651107e-05 1.0422769e-05 9.0825815e-06 8.3420246e-06 5.0078479e-06]
• Child averaged monte carlo:-0.5
• Child probablities:[9.7661883e-01 1.7980440e-02 4.9591237e-03 3.1953215e-04 4.1315347e-05
 1.1093945e-05 5.3405874e-06 4.6538803e-06 4.2744218e-06 2.5660022e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   197 50286]]
• Child Action scores:[1.8545111e+00 3.0626817e-02 2.1505628e-02 7.7393013e-03 7.3059881e-03
 4.2713750e-03 2.2229026e-03 1.7321496e-03 1.2590569e-03 9.1709249e-04]
• Child averaged monte carlo:-0.5
• Child probablities:[9.5024449e-01 1.5693065e-02 1.1019402e-02 3.9655888e-03 3.7435608e-03
 2.1886365e-03 1.1390069e-03 8.8754692e-04 6.4513594e-04 4.6991472e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   220   198]]
• Child Action scores:[0.00505954 0.04641486 0.02656895 0.021338   0.01859118 0.01082348
 0.00947215 0.00890682 0.00856848 0.00746923]
• Child averaged monte carlo:-0.75
• Child probablities:[0.7301372  0.01681698 0.00962643 0.00773116 0.00673594 0.00392155
 0.00343194 0.00322711 0.00310452 0.00270624]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   220   628]]
• Child Action scores:[1.6328126e+00 2.3427254e-01 1.7434170e-02 1.5895566e-02 8.8677583e-03
 6.9668652e-03 5.1523522e-03 4.6464596e-03 3.8682481e-03 1.3582559e-03]
• Child averaged monte carlo:-0.5
• Child probablities:[8.36646974e-01 1.20040365e-01 8.93320329e-03 8.14482756e-03
 4.54380596e-03 3.56979528e-03 2.64004571e-03 2.38082837e-03
 1.98207563e-03 6.95965136e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50280   198]]
• Child Action scores:[-0.05349797  0.03535715  0.02064002  0.01769884  0.01742259  0.0169175
  0.01426554  0.00895744  0.00507127  0.0047537 ]
• Child averaged monte carlo:-0.75
• Child probablities:[0.66648775 0.01281056 0.00747827 0.00641262 0.00631253 0.00612953
 0.00516867 0.00324545 0.00183742 0.00172236]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50280 21809]]
• Child Action scores:[1.1570233  0.20868897 0.19324002 0.06670863 0.05465952 0.02860797
 0.02120974 0.01666652 0.01391107 0.01216932]
• Child averaged monte carlo:-0.5
• Child probablities:[0.5928544  0.10693144 0.09901545 0.03418125 0.02800733 0.01465861
 0.01086779 0.00853986 0.00712798 0.00623552]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286   198]]
• Child Action scores:[-0.08989435 -0.4564179  -0.46325928  0.03969353  0.03368334  0.01745817
  0.0087753   0.00651717  0.00378598  0.00368971]
• Child averaged monte carlo:-0.8333333333333334
• Child probablities:[0.5118833  0.02578598 0.02173817 0.01174262 0.00996462 0.00516469
 0.00259602 0.00192799 0.00112001 0.00109153]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=5.0,Q=-0.8333333333333334,M=-0.8333333333333334
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286   197]]
• Child Action scores:[0.71005857 0.5308526  0.16469654 0.13689914 0.12434036 0.05504368
 0.03231262 0.03090357 0.01694798 0.01209057]
• Child averaged monte carlo:-0.5
• Child probablities:[0.3638313  0.27200687 0.08438989 0.07014661 0.06371153 0.02820417
 0.01655686 0.01583487 0.00868408 0.00619516]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286 21809]]
• Child Action scores:[1.1563486  0.2951453  0.1922438  0.03630472 0.02503957 0.02357928
 0.01803629 0.01624205 0.01076503 0.00980863]
• Child averaged monte carlo:-0.5
• Child probablities:[0.5925086  0.15123133 0.098505   0.0186024  0.01283018 0.01208193
 0.00924173 0.00832237 0.00551596 0.0050259 ]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286   628]]
• Child Action scores:[1.6559062  0.19560891 0.02217765 0.02100314 0.01639324 0.00608583
 0.00496158 0.00366213 0.00222153 0.0017421 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.84848005 0.10022926 0.01136374 0.01076193 0.00839984 0.00311836
 0.0025423  0.00187646 0.0011383  0.00089265]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286   562]]
• Child Action scores:[1.9515585e+00 1.2233445e-05 1.1529978e-05 1.0580865e-05 7.1774198e-06
 5.6376198e-06 3.9509009e-06 8.8046613e-07 6.9357895e-07 4.9650748e-07]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9997115e-01 6.2683707e-06 5.9079171e-06 5.4215952e-06 3.6776828e-06
 2.8886950e-06 2.0244267e-06 4.5114751e-07 3.5538724e-07 2.5440855e-07]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286    65]]
• Child Action scores:[1.9461107e+00 1.1807749e-03 8.1308320e-04 4.7445906e-04 3.5696477e-04
 2.7889668e-04 2.5626604e-04 1.2322921e-04 9.6811556e-05 9.6726653e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9717975e-01 6.0502457e-04 4.1662075e-04 2.4311102e-04 1.8290739e-04
 1.4290560e-04 1.3130975e-04 6.3142179e-05 4.9605875e-05 4.9562372e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286  2301]]
• Child Action scores:[1.3554866  0.16648166 0.08981492 0.06345697 0.03584932 0.0294513
 0.02436054 0.01460974 0.01233139 0.01173737]
• Child averaged monte carlo:-0.5
• Child probablities:[0.6945462  0.08530457 0.04602083 0.03251511 0.01836906 0.01509073
 0.01248225 0.00748597 0.00631856 0.00601419]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286 21412]]
• Child Action scores:[0.8894508  0.11471988 0.09482571 0.0891009  0.08003546 0.07329884
 0.04973535 0.04642941 0.03078716 0.0234456 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.4557512  0.05878203 0.04858834 0.04565497 0.04100987 0.03755805
 0.0254842  0.02379026 0.01577523 0.01201343]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286 41433]]
• Child Action scores:[1.3038749  0.04495526 0.03748624 0.03186335 0.02846575 0.0278161
 0.02622207 0.02225854 0.02126901 0.02025249]
• Child averaged monte carlo:-0.5
• Child probablities:[0.66810054 0.02303491 0.01920781 0.01632666 0.01458574 0.01425286
 0.01343609 0.01140519 0.01089816 0.0103773 ]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50283   198]]
• Child Action scores:[-0.06723213  0.04083666  0.04013061  0.01987155  0.0198355   0.01102816
  0.00978877  0.00777552  0.0058521   0.00569964]
• Child averaged monte carlo:-0.75
• Child probablities:[0.6515593  0.01479589 0.01454008 0.00719984 0.00718678 0.00399571
 0.00354665 0.00281722 0.00212033 0.00206509]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   562   570]]
• Child Action scores:[-0.24051222 -0.27157432  0.45549408  0.3227978   0.20273587  0.06529777
  0.0480846   0.04788581  0.0476273   0.04128424]
• Child averaged monte carlo:-0.75
• Child probablities:[0.18803462 0.16552585 0.16503409 0.11695573 0.07345503 0.02365861
 0.01742196 0.01734993 0.01725627 0.01495806]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50281   198]]
• Child Action scores:[-0.0736919   0.037113    0.02465252  0.02103629  0.01705834  0.01548777
  0.01482212  0.01077959  0.008227    0.00651197]
• Child averaged monte carlo:-0.75
• Child probablities:[0.6445378  0.01344674 0.00893207 0.00762184 0.00618056 0.00561151
 0.00537033 0.00390565 0.0029808  0.00235941]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284]]
• Child Action scores:[-0.13021427 -0.01232859 -0.1703898  -0.31466055 -0.4543677  -0.48860678
 -0.49218434 -0.49332678  0.00991314  0.00872811]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0.3516228  0.21309921 0.14403073 0.08098832 0.01994008 0.00497853
 0.00341523 0.00291601 0.00216589 0.00190697]
• Child visitation:[1 1 1 1 1 1 1 1 0 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 3
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198   198]]
• Child Action scores:[-0.39624745  0.17394146  0.13419636  0.07174962  0.04937411  0.0090746
  0.00782106  0.00537574  0.00433369  0.00313533]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.08681387 0.07277185 0.0561437  0.03001787 0.02065663 0.00379654
 0.0032721  0.00224905 0.00181309 0.00131173]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50285]]
• Child Action scores:[-0.2904685   0.34486967  0.3175634   0.18440117  0.02285098  0.01309152
  0.01025028  0.00395687  0.00378493  0.00350327]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.17532326 0.14428304 0.13285893 0.07714787 0.00956016 0.0054771
 0.00428841 0.00165544 0.0015835  0.00146566]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198    65]]
• Child Action scores:[6.9234419e-01 1.3363253e-03 8.9201331e-04 5.2491191e-04 2.3121436e-04
 1.6687831e-04 1.5746172e-04 1.4751249e-04 1.1684433e-04 8.7296961e-05]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.9768150e-01 5.5907806e-04 3.7319137e-04 2.1960726e-04 9.6733093e-05
 6.9816837e-05 6.5877219e-05 6.1714760e-05 4.8884132e-05 3.6522408e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198   197]]
• Child Action scores:[-0.18031162  0.51074827  0.37856394  0.1477983   0.09115668  0.06430136
  0.04682223  0.04562155  0.02479814  0.01909684]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.2674959  0.21368162 0.1583797  0.06183434 0.0381372  0.02690174
 0.01958901 0.01908668 0.01037479 0.00798954]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198   562]]
• Child Action scores:[6.9508243e-01 1.8926112e-05 1.5883248e-05 1.3877365e-05 7.7785580e-06
 3.1254260e-06 2.0993286e-06 1.1710539e-06 2.1274636e-07 2.0212308e-07]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.9997270e-01 7.9181127e-06 6.6450707e-06 5.8058695e-06 3.2543135e-06
 1.3075837e-06 8.7829562e-07 4.8993354e-07 8.9006640e-08 8.4562181e-08]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198   437]]
• Child Action scores:[6.9500124e-01 1.3158201e-04 2.8156850e-05 1.9653651e-05 1.0493709e-05
 9.0368985e-06 5.4971542e-06 2.0703421e-06 1.5818491e-06 1.2047485e-06]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.9990475e-01 5.5049932e-05 1.1779975e-05 8.2224933e-06 4.3902505e-06
 3.7807652e-06 2.2998431e-06 8.6616848e-07 6.6179780e-07 5.0403031e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50283]]
• Child Action scores:[-0.2358202   0.41091904  0.2253524   0.17515683  0.02532438  0.01737824
  0.01179572  0.00920097  0.00882563  0.00611138]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.22104968 0.1719161  0.09428063 0.07328032 0.01059495 0.00727053
 0.00493497 0.00384941 0.00369238 0.00255681]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50286]]
• Child Action scores:[-0.2650302   0.31064904  0.2332519   0.19586112  0.0552418   0.02492908
  0.01242809  0.00601901  0.00582706  0.00553382]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.19660851 0.12996615 0.09758554 0.08194236 0.0231115  0.01042957
 0.00519954 0.00251817 0.00243787 0.00231518]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=9
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198  2301]]
• Child Action scores:[1.3095342  0.34557593 0.07160585 0.06618771 0.01954133 0.01333294
 0.0119565  0.0115943  0.00941718 0.00910651]
• Child averaged monte carlo:-0.5
• Child probablities:[0.67100036 0.1770718  0.03669057 0.03391433 0.0100129  0.00683175
 0.00612646 0.00594087 0.00482533 0.00466614]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284 21809   685]]
• Child Action scores:[1.2323699  0.20852366 0.16771719 0.07039342 0.05507314 0.05223697
 0.04269903 0.02327074 0.01836967 0.0130541 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.6314617  0.10684673 0.08593765 0.03606932 0.02821927 0.02676602
 0.02187882 0.01192384 0.00941255 0.00668887]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284    65 10210]]
• Child Action scores:[1.9090006e+00 1.8445564e-02 6.1811311e-03 4.4331886e-03 1.3256525e-03
 1.1375819e-03 9.3423697e-04 7.2219787e-04 4.7584559e-04 4.4077740e-04]
• Child averaged monte carlo:-0.5
• Child probablities:[9.7816467e-01 9.4514377e-03 3.1671883e-03 2.2715491e-03 6.7925930e-04
 5.8289262e-04 4.7869948e-04 3.7005145e-04 2.4382147e-04 2.2585267e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   562   570]]
• Child Action scores:[0.44992122 0.29169247 0.22052146 0.21966758 0.12431345 0.05693308
 0.04123639 0.03229935 0.02429513 0.02319903]
• Child averaged monte carlo:-0.5
• Child probablities:[0.23053794 0.14946212 0.11299437 0.11255684 0.06369774 0.0291723
 0.02112937 0.01655006 0.01244873 0.0118871 ]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   628 50284]]
• Child Action scores:[0.7104019  0.42644584 0.17255622 0.10675013 0.04293396 0.01403551
 0.00577971 0.00451865 0.00377533 0.00322754]
• Child averaged monte carlo:-0.5
• Child probablities:[0.36400723 0.21850923 0.08841716 0.05469836 0.0219992  0.00719174
 0.0029615  0.00231534 0.00193447 0.00165378]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284  2301   685]]
• Child Action scores:[1.0396258  0.29334283 0.19814073 0.13057394 0.06215966 0.02869248
 0.02702905 0.02670396 0.02348324 0.01544399]
• Child averaged monte carlo:-0.5
• Child probablities:[0.5327003  0.15030776 0.10152656 0.0669056  0.03185038 0.01470192
 0.01384958 0.01368301 0.01203273 0.00791344]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284 41433  1312]]
• Child Action scores:[1.7411299e+00 8.8421106e-02 5.6293134e-02 3.7333176e-02 1.5821615e-02
 2.5469975e-03 2.1416477e-03 1.1672577e-03 9.5770176e-04 6.4184330e-04]
• Child averaged monte carlo:-0.5
• Child probablities:[8.9214838e-01 4.5306642e-02 2.8844388e-02 1.9129377e-02 8.1069358e-03
 1.3050719e-03 1.0973722e-03 5.9809838e-04 4.9072277e-04 3.2887809e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   197   198]]
• Child Action scores:[0.6088405  0.5067762  0.02886079 0.0172383  0.01455492 0.01338838
 0.01037894 0.00532009 0.00462944 0.0035064 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.31196758 0.25967023 0.01478816 0.00883284 0.00745789 0.00686016
 0.00531813 0.00272599 0.00237211 0.00179667]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284  5235  7785]]
• Child Action scores:[1.6240283  0.09319355 0.02698496 0.02636578 0.01804855 0.01773589
 0.01664087 0.01495233 0.01230349 0.00995064]
• Child averaged monte carlo:-0.5
• Child probablities:[0.832146   0.04775202 0.01382699 0.01350973 0.00924801 0.0090878
 0.00852672 0.00766152 0.00630426 0.00509867]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284 17143  2357]]
• Child Action scores:[0.2099806  0.1442068  0.11321987 0.0906166  0.07349604 0.06621462
 0.06517477 0.05880395 0.05507665 0.05311298]
• Child averaged monte carlo:-0.5
• Child probablities:[0.10759327 0.07389102 0.05801344 0.0464316  0.03765909 0.03392812
 0.0333953  0.03013092 0.02822107 0.02721489]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50285   198 50284]]
• Child Action scores:[-0.05262396  0.5641839   0.26760998  0.20233887  0.02872492  0.01174415
  0.01022259  0.00938371  0.00633327  0.00497985]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.3743372  0.23603748 0.11195992 0.08465246 0.01201764 0.0049134
 0.00427682 0.00392586 0.00264965 0.00208342]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   197   198   197]]
• Child Action scores:[0.82754207 0.30430102 0.2033774  0.18769912 0.02383579 0.01665759
 0.01088496 0.00709742 0.00514456 0.0049059 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.4240294  0.1559227  0.10420981 0.09617632 0.01221337 0.00853529
 0.00557741 0.00363669 0.00263605 0.00251376]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   220   198 50284]]
• Child Action scores:[-0.03107309  0.5334808   0.35768697  0.15913732  0.02679349  0.01032548
  0.01019895  0.00917107  0.00689096  0.00406771]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.39236966 0.22319224 0.1496454  0.06657824 0.01120958 0.00431987
 0.00426693 0.0038369  0.00288297 0.00170181]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50280   198 50284]]
• Child Action scores:[-0.1271654   0.6861884   0.3384591   0.11955138  0.0269336   0.01421338
  0.01211633  0.00588151  0.00562422  0.00560037]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.31196544 0.28708047 0.14160106 0.05001668 0.0112682  0.00594645
 0.00506911 0.00246065 0.002353   0.00234303]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286   198 50284]]
• Child Action scores:[-0.06726837  0.5992053   0.2640924   0.1546903   0.01978858  0.01518795
  0.01160199  0.00900728  0.00624588  0.00525126]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.36208364 0.2506894  0.11048827 0.06471774 0.00827894 0.00635418
 0.00485392 0.00376838 0.00261309 0.00219697]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286   198 50286]]
• Child Action scores:[0.60162115 0.33706716 0.19609421 0.18218124 0.01883295 0.01500028
 0.01382946 0.00656154 0.00515171 0.00444451]
• Child averaged monte carlo:-0.5
• Child probablities:[0.3082684  0.17271194 0.10047793 0.09334898 0.00964993 0.00768609
 0.00708616 0.00336211 0.00263972 0.00227735]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286   198   198]]
• Child Action scores:[0.11162526 0.10932101 0.0735     0.06790072 0.03712826 0.00489266
 0.00421639 0.00383988 0.00270632 0.00173008]
• Child averaged monte carlo:-0.5
• Child probablities:[0.05719636 0.05601567 0.03766112 0.03479207 0.01902438 0.00250698
 0.00216046 0.00196754 0.00138671 0.00088649]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50283   198 50284]]
• Child Action scores:[-0.07004884  0.69970936  0.2602999   0.13449788  0.0297452   0.01073239
  0.00850383  0.00597571  0.00547129  0.00491005]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.35975713 0.29273722 0.1089016  0.05626985 0.01244449 0.00449011
 0.00355774 0.00250006 0.00228902 0.00205422]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   562   570 42304]]
• Child Action scores:[1.7220875  0.09743708 0.03617478 0.02498309 0.02253971 0.01505024
 0.00783386 0.00555597 0.00521855 0.00248281]
• Child averaged monte carlo:-0.5
• Child probablities:[0.8823911  0.04992639 0.01853582 0.01280124 0.01154926 0.00771169
 0.00401404 0.00284686 0.00267397 0.00127218]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   562   570  2160]]
• Child Action scores:[1.416723   0.25992486 0.12504485 0.06252443 0.02109122 0.01432886
 0.01295393 0.00744257 0.0071315  0.00261538]
• Child averaged monte carlo:-0.5
• Child probablities:[0.7259235  0.13318451 0.06407251 0.03203728 0.01080706 0.00734205
 0.00663755 0.00381354 0.00365415 0.00134011]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50281   198 50284]]
• Child Action scores:[-0.10538688  0.7255067   0.2532875   0.15923047  0.02082889  0.01047542
  0.00837553  0.00585215  0.00546422  0.00538821]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.3301884  0.30353007 0.10596782 0.06661721 0.00871418 0.0043826
 0.00350407 0.00244836 0.00228606 0.00225427]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284 21809]]
• Child Action scores:[0.20469946 0.4780699  0.13288493 0.07068674 0.0380176  0.03278323
 0.02519298 0.0222779  0.01763833 0.01304047]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[0.58964986 0.20000999 0.05559504 0.02957319 0.01590541 0.01371551
 0.01053998 0.0093204  0.00737934 0.00545574]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284    65]]
• Child Action scores:[1.9485242e+00 1.0320253e-03 4.9899775e-04 3.2374175e-04 2.4831801e-04
 5.3196476e-05 5.1779760e-05 4.7036072e-05 4.4018063e-05 4.1096075e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9841642e-01 5.2880589e-04 2.5568454e-04 1.6588405e-04 1.2723720e-04
 2.7257673e-05 2.6531752e-05 2.4101106e-05 2.2554688e-05 2.1057473e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284   562]]
• Child Action scores:[1.9515896e+00 9.7174479e-06 3.4890420e-06 2.6929158e-06 2.6527746e-06
 2.2065885e-06 1.9057718e-06 8.1810344e-07 3.3147936e-07 1.8200400e-07]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9998713e-01 4.9791834e-06 1.7877719e-06 1.3798399e-06 1.3592717e-06
 1.1306477e-06 9.7651025e-07 4.1919310e-07 1.6984876e-07 9.3258159e-08]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284   198]]
• Child Action scores:[1.4542143  0.03685774 0.03576192 0.03226534 0.02351236 0.00989367
 0.00834747 0.00671209 0.00635439 0.00469803]
• Child averaged monte carlo:-0.5
• Child probablities:[0.74513394 0.01888576 0.01832427 0.01653264 0.01204764 0.00506948
 0.00427721 0.00343925 0.00325597 0.00240725]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284  5235]]
• Child Action scores:[1.9510828e+00 5.1172823e-04 1.1320913e-05 2.9653156e-06 7.0893361e-07
 3.7806620e-07 3.4512723e-07 2.7004745e-07 2.6622004e-07 2.5970604e-07]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9972743e-01 2.6220761e-04 5.8007927e-06 1.5194165e-06 3.6325491e-07
 1.9371969e-07 1.7684189e-07 1.3837129e-07 1.3641014e-07 1.3307239e-07]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284 21412]]
• Child Action scores:[0.8057994  0.10645416 0.0911065  0.07168812 0.06963667 0.05947554
 0.04367837 0.04108168 0.03540436 0.0350809 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.4128886  0.05454671 0.04668262 0.03673272 0.03568157 0.03047504
 0.02238063 0.0210501  0.01814106 0.01797532]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284  2301]]
• Child Action scores:[1.2453215  0.3647309  0.10599869 0.04766122 0.01908006 0.01667523
 0.01602662 0.01341826 0.01327458 0.0094095 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.638098   0.18688673 0.05431333 0.02442143 0.00977655 0.00854432
 0.00821198 0.00687546 0.00680185 0.00482139]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284  2860]]
• Child Action scores:[1.6137074  0.11961575 0.10799295 0.03018735 0.01457739 0.00441742
 0.00365321 0.00364341 0.00339256 0.00289077]
• Child averaged monte carlo:-0.5
• Child probablities:[0.82685757 0.06129066 0.05533518 0.01546788 0.0074694  0.00226347
 0.00187189 0.00186687 0.00173834 0.00148122]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198   198    65]]
• Child Action scores:[1.9484500e+00 8.4765884e-04 4.8790724e-04 3.3824981e-04 3.1904376e-04
 7.8669094e-05 7.3226474e-05 6.7912275e-05 6.1599392e-05 5.1187839e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9837840e-01 4.3433718e-04 2.5000182e-04 1.7331792e-04 1.6347681e-04
 4.0309747e-05 3.7520967e-05 3.4797991e-05 3.1563297e-05 2.6228454e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50285 21809]]
• Child Action scores:[1.1729047  0.35259467 0.08386238 0.07695645 0.04153263 0.03617182
 0.01989962 0.01158328 0.01055265 0.01047293]
• Child averaged monte carlo:-0.5
• Child probablities:[0.60099196 0.18066818 0.04297077 0.03943219 0.02128116 0.01853431
 0.01019649 0.00593523 0.00540714 0.00536629]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198    65 10210]]
• Child Action scores:[1.9133946e+00 1.6516007e-02 3.6524704e-03 2.2651039e-03 2.0628094e-03
 1.1027785e-03 7.8992615e-04 7.8964903e-04 7.2978233e-04 6.1765953e-04]
• Child averaged monte carlo:-0.5
• Child probablities:[9.8041612e-01 8.4627401e-03 1.8715120e-03 1.1606306e-03 1.0569757e-03
 5.6505954e-04 4.0475518e-04 4.0461318e-04 3.7393771e-04 3.1648640e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198   197 21809]]
• Child Action scores:[1.0833762  0.46700415 0.07785928 0.05083939 0.02507839 0.02395883
 0.01870434 0.01839919 0.01414206 0.01294703]
• Child averaged monte carlo:-0.5
• Child probablities:[0.55511785 0.23929116 0.0398948  0.02604991 0.01285007 0.01227641
 0.00958403 0.00942767 0.00724634 0.00663401]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198   562   570]]
• Child Action scores:[0.46527603 0.44435245 0.374335   0.24974737 0.06367868 0.03590411
 0.02735351 0.02362233 0.0165289  0.01621075]
• Child averaged monte carlo:-0.5
• Child probablities:[0.23840567 0.22768451 0.19180784 0.12796961 0.03262872 0.01839713
 0.01401584 0.01210399 0.00846934 0.00830632]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198   437 21412]]
• Child Action scores:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50283 21809]]
• Child Action scores:[0.9694802  0.50218517 0.09001692 0.06786596 0.04108121 0.0303071
 0.02643937 0.02372669 0.01759335 0.01673411]
• Child averaged monte carlo:-0.5
• Child probablities:[0.49675798 0.25731778 0.04612433 0.03477426 0.02104986 0.01552925
 0.01354743 0.01215747 0.00901476 0.00857449]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50286   198]]
• Child Action scores:[1.1634562  0.05306185 0.05208638 0.02729765 0.01560841 0.01473227
 0.01142703 0.00971799 0.00656309 0.00499789]
• Child averaged monte carlo:-0.5
• Child probablities:[0.5961506  0.02718869 0.02668886 0.01398721 0.00799769 0.00754876
 0.00585517 0.00497946 0.0033629  0.0025609 ]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50285   198 50284 21809]]
• Child Action scores:[1.1229312  0.40987596 0.09099911 0.06702077 0.03321213 0.02434193
 0.02204872 0.02028978 0.01554639 0.01225709]
• Child averaged monte carlo:-0.5
• Child probablities:[0.5753857  0.21001889 0.0466276  0.03434119 0.01701777 0.01247271
 0.01129768 0.01039641 0.00796591 0.00628048]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198   220   198 50284 21809]]
• Child Action scores:[1.1143214  0.42835897 0.09854914 0.06960193 0.02826972 0.0228074
 0.02101757 0.01995316 0.01609335 0.01270179]
• Child averaged monte carlo:-0.5
• Child probablities:[0.57097405 0.21948951 0.05049621 0.03566376 0.0144853  0.01168642
 0.01076932 0.01022392 0.00824617 0.00650835]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50280   198 50284 21809]]
• Child Action scores:[1.1498107  0.3872362  0.09427714 0.06949651 0.03588281 0.02406064
 0.02057325 0.01648472 0.01508562 0.01219027]
• Child averaged monte carlo:-0.5
• Child probablities:[0.58915865 0.19841836 0.04830725 0.03560975 0.01838621 0.01232858
 0.01054165 0.00844671 0.00772982 0.00624625]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50286   198 50284 21809]]
• Child Action scores:[1.1017807  0.44185042 0.08376563 0.06709787 0.02861573 0.02403719
 0.0208963  0.02081468 0.01562662 0.01389596]
• Child averaged monte carlo:-0.5
• Child probablities:[0.56454825 0.22640248 0.04292119 0.03438069 0.01466259 0.01231656
 0.01070719 0.01066536 0.00800702 0.00712024]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50283   198 50284 21809]]
• Child Action scores:[1.1431655  0.43063176 0.08191958 0.05527837 0.02913588 0.02410699
 0.02106953 0.01855383 0.01446298 0.01195479]
• Child averaged monte carlo:-0.5
• Child probablities:[0.5857537  0.22065409 0.04197528 0.02832443 0.01492911 0.01235233
 0.01079595 0.00950691 0.00741077 0.00612559]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50281   198 50284 21809]]
• Child Action scores:[1.158519   0.3979797  0.07971156 0.06412974 0.0323238  0.0239155
 0.02347387 0.01617142 0.01522169 0.01263387]
• Child averaged monte carlo:-0.5
• Child probablities:[0.5936208  0.2039233  0.0408439  0.03285984 0.01656259 0.01225421
 0.01202792 0.00828618 0.00779954 0.00647355]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284 21809   685]]
• Child Action scores:[1.2589072  0.20618312 0.17042916 0.07406859 0.0512143  0.04330348
 0.03766292 0.0251998  0.01691602 0.0119159 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.6450593  0.10564745 0.08732726 0.03795246 0.02624201 0.02218854
 0.01929834 0.01291228 0.0086677  0.00610566]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   357 39491    12 40976
  32465     8   530    12 27003   751   263  3706   275 10210    62    69
   2860   326  6673   734   347  8610 19561   290  3283    12   259    11
    290 11073   257  2160   290  3283    12   448    13   198   198 21412
    275 10210    62    69  2860   357   198 50284 15414   685    18    25
     15    60   257    11   198 50284 15414   685    18    25    15    60
    275    11   198 50284 15414 50283 17879    11   198 50284 22915 50285
     66   448    11   198 50284 22915   685    18    25    15    60  2160
   5619   198 50284   198  1003 24470  9386   604  9088   286   275 10210
     62    69  2860   284  2251   257   604    12 27003   347  8610 42462
     12 34993   751   263    13  3406   751   263   815   751   734   604
     12 27003   347  8610  3146   357 34860   656  1467    12  2545 30104
      8   290   257  3283    12   259   284  4439   257   604    12 27003
   2160   290  3283   503    13   198   198  1003   367   600    25   383
    347  8610 10552   329   262   642    12 27003 32465  1271 17031  2231
    318  1160     6    71 10163  2231    13   770   318   407   262   976
    355  1478  1549 10163  2231   357  4758   318  1478     6    71  1270
   2670   737   198  1003   383 10349   318 20793   655   588   257 13934
  42462    12 34993   751   263    11  2845   262   751   364   389  2779
     12   940  2138   621  2779    12    17    13   628   198 21412  1353
     62 21412   357   220   198 50284 15414   685  1314    25    15    60
    257    11   275    11   198 50284 15414   269   259    11   198 50284
  22915 42304    11   198 50284 22915   685  1314    25    15    60  2160
   5619   198 50284   198 50284 21809   685    18]]
• Child Action scores:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child averaged monte carlo:0.0
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=0.0,Q=0.0,M=0.0
END ROBUST/MAX VALUES:
// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  118.217219  seconds
Running getPromptScore: 
// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );
    
    wire [3:0] c;
    
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], cout, sum[15:12]);
    
endmodule
Verilog compilation failed, error:  3
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:16: error: Module definition top_module cannot nest into module bcd_fadd.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/mcts_dump/14901_top_module/14901_top_module.v:29: syntax error\nI give up.\n'
LLM generates return in:  118.244393  seconds
Running getPromptScore: 
MCTS Total Time:  24789.494282
