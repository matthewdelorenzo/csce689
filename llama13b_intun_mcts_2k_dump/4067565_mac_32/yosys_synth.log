
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38+92 (git sha1 84116c9a3, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1708682838165/work=/usr/local/src/conda/yosys-0.38_93_g84116c9a3 -fdebug-prefix-map=/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/miniconda3/envs/rltf=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v
Parsing SystemVerilog input from `/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v' to AST representation.
Storing AST representation for module `$abstract\mac_32'.
Successfully finished Verilog frontend.

2. Executing Liberty frontend: /mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/scripts/NangateOpenCellLibrary_typical.lib
Imported 135 cell types from liberty file.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\mac_32'.
Generating RTLIL representation for module `\mac_32'.

3.2.1. Analyzing design hierarchy..
Top module:  \mac_32

3.2.2. Analyzing design hierarchy..
Top module:  \mac_32
Removing unused module `$abstract\mac_32'.
Removed 1 unused modules.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:14$1 in module mac_32.
Removed a total of 0 dead cases.

3.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

3.3.4. Executing PROC_INIT pass (extract init attributes).

3.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\mac_32.$proc$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:14$1'.

3.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mac_32.$proc$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:14$1'.
     1/1: $0\accumulator[63:0]

3.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mac_32.\accumulator' using process `\mac_32.$proc$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:14$1'.
  created $adff cell `$procdff$4' with positive edge clock and positive level reset.

3.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `mac_32.$proc$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:14$1'.
Cleaned up 0 empty switches.

3.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.4. Executing FLATTEN pass (flatten design).

3.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..
Removed 0 unused cells and 1 unused wires.

3.7. Executing CHECK pass (checking for obvious problems).
Checking module mac_32...
Found and reported 0 problems.

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_32.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing FSM pass (extract and optimize FSM).

3.9.1. Executing FSM_DETECT pass (finding FSMs in design).

3.9.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.9.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.9.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.9.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.9.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.9.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.9.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_32.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.10.6. Executing OPT_DFF pass (perform DFF optimizations).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing WREDUCE pass (reducing word size of cells).

3.12. Executing PEEPOPT pass (run peephole optimizers).

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.14. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mac_32:
  creating $macc model for $add$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:18$3 ($add).
  creating $macc model for $mul$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:18$2 ($mul).
  merging $macc model for $mul$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:18$2 into $add$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:18$3.
  creating $macc cell for $add$/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/4067565_mac_32.v:18$3: $auto$alumacc.cc:365:replace_macc$5
  created 0 $alu and 1 $macc cells.

3.15. Executing SHARE pass (SAT-based resource sharing).

3.16. Executing OPT pass (performing simple optimizations).

3.16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_32.
Performed a total of 0 changes.

3.16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.16.6. Executing OPT_DFF pass (perform DFF optimizations).

3.16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..
Removed 1 unused cells and 1 unused wires.

3.16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.16.9. Rerunning OPT passes. (Maybe there is more to do..)

3.16.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.16.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_32.
Performed a total of 0 changes.

3.16.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.16.13. Executing OPT_DFF pass (perform DFF optimizations).

3.16.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.16.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.16.16. Finished OPT passes. (There is nothing left to do.)

3.17. Executing MEMORY pass.

3.17.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.17.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.17.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.17.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.17.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.17.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.17.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.17.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.17.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.19.3. Executing OPT_DFF pass (perform DFF optimizations).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.19.5. Finished fast OPT passes.

3.20. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_32.
Performed a total of 0 changes.

3.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.21.6. Executing OPT_SHARE pass.

3.21.7. Executing OPT_DFF pass (perform DFF optimizations).

3.21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

3.21.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.21.10. Finished OPT passes. (There is nothing left to do.)

3.22. Executing TECHMAP pass (map to technology primitives).

3.22.1. Executing Verilog-2005 frontend: /mnt/shared-scratch/Rajendran_J/matthewdelorenzo/miniconda3/envs/rltf/bin/../share/yosys/techmap.v
Parsing Verilog input from `/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/miniconda3/envs/rltf/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.22.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adff.
Using extmapper maccmap for cells of type $macc.
  add \accumulator (64 bits, unsigned)
  add \A * \B (32x32 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000001000000 for cells of type $fa.
Using template $paramod$039520c137afc9cd69dd56c3fb11a4e1fbe5f664\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
No more expansions possible.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..
Removed 85 unused cells and 381 unused wires.

3.23.5. Finished fast OPT passes.

3.24. Executing ABC pass (technology mapping using ABC).

3.24.1. Extracting gate netlist of module `\mac_32' to `<abc-temp-dir>/input.blif'..
Extracted 6601 gates and 6729 wires to a netlist network with 128 inputs and 64 outputs.

3.24.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.24.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:      129
ABC RESULTS:              NAND cells:      403
ABC RESULTS:               AND cells:      944
ABC RESULTS:             ORNOT cells:       69
ABC RESULTS:                OR cells:      739
ABC RESULTS:               NOR cells:      183
ABC RESULTS:            ANDNOT cells:     2049
ABC RESULTS:               XOR cells:     1707
ABC RESULTS:              XNOR cells:      507
ABC RESULTS:        internal signals:     6537
ABC RESULTS:           input signals:      128
ABC RESULTS:          output signals:       64
Removing temp directory.

3.25. Executing OPT pass (performing simple optimizations).

3.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

3.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

3.25.3. Executing OPT_DFF pass (perform DFF optimizations).

3.25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..
Removed 0 unused cells and 562 unused wires.

3.25.5. Finished fast OPT passes.

3.26. Executing HIERARCHY pass (managing design hierarchy).

3.26.1. Analyzing design hierarchy..
Top module:  \mac_32

3.26.2. Analyzing design hierarchy..
Top module:  \mac_32
Removed 0 unused modules.

3.27. Printing statistics.

=== mac_32 ===

   Number of wires:               6681
   Number of wire bits:           7436
   Number of public wires:           5
   Number of public wire bits:     130
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6794
     $_ANDNOT_                    2049
     $_AND_                        944
     $_DFF_PP0_                     64
     $_NAND_                       403
     $_NOR_                        183
     $_NOT_                        129
     $_ORNOT_                       69
     $_OR_                         739
     $_XNOR_                       507
     $_XOR_                       1707

3.28. Executing CHECK pass (checking for obvious problems).
Checking module mac_32...
Found and reported 0 problems.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_32.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

4.9. Finished OPT passes. (There is nothing left to do.)

5. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

5.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\mac_32':
  mapped 64 $_DFF_PN0_ cells to \DFFR_X1 cells.

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 63 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_32.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..
Removed 3 unused cells and 69 unused wires.

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

6.9. Rerunning OPT passes. (Maybe there is more to do..)

6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac_32.
Performed a total of 0 changes.

6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac_32'.
Removed a total of 0 cells.

6.13. Executing OPT_DFF pass (perform DFF optimizations).

6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..

6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_32.

6.16. Finished OPT passes. (There is nothing left to do.)
Using ABC ADP script.
[WARN][FLOW] No clock period constraints detected in design

7. Executing ABC pass (technology mapping using ABC).

7.1. Extracting gate netlist of module `\mac_32' to `<abc-temp-dir>/input.blif'..
Extracted 6728 gates and 6857 wires to a netlist network with 129 inputs and 65 outputs.

7.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/scripts/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "TAPCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/scripts/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 10 dont_use).  Time =     0.06 sec
ABC: Memory =   11.38 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + read_constr -v /mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/llama13b_intun_mcts_2k_dump/4067565_mac_32/abc.constr 
ABC: Setting driving cell to be "BUF_X1".
ABC: Setting output load to be 3.898000.
ABC: + source /mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_old/scripts/abc_adp.script 
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: WireLoad = "5K_hvratio_1_1"  Gates =   7051 ( 13.8 %)   Cap =  4.2 ff (  0.0 %)   Area =     7279.62 (100.0 %)   Delay =  2822.71 ps  (  3.3 %)               
ABC: + write_blif <abc-temp-dir>/output.blif 

7.1.2. Re-integrating ABC results.
ABC RESULTS:            INV_X8 cells:        1
ABC RESULTS:            BUF_X8 cells:        9
ABC RESULTS:            INV_X4 cells:        1
ABC RESULTS:          AOI21_X4 cells:        1
ABC RESULTS:          AOI21_X2 cells:        4
ABC RESULTS:          NAND3_X2 cells:       13
ABC RESULTS:            OR2_X4 cells:        4
ABC RESULTS:           NOR2_X4 cells:        4
ABC RESULTS:           BUF_X16 cells:        3
ABC RESULTS:          OAI21_X4 cells:        3
ABC RESULTS:           XOR2_X2 cells:       17
ABC RESULTS:          OAI21_X2 cells:       12
ABC RESULTS:           NOR3_X4 cells:        2
ABC RESULTS:           NOR3_X2 cells:        1
ABC RESULTS:           NOR2_X2 cells:       24
ABC RESULTS:            OR2_X2 cells:       19
ABC RESULTS:           AND2_X4 cells:        2
ABC RESULTS:           AND2_X2 cells:       17
ABC RESULTS:            BUF_X4 cells:       25
ABC RESULTS:          NAND4_X1 cells:        2
ABC RESULTS:            OR3_X4 cells:        1
ABC RESULTS:            INV_X2 cells:        9
ABC RESULTS:          XNOR2_X2 cells:       76
ABC RESULTS:            BUF_X2 cells:       22
ABC RESULTS:           AND2_X1 cells:       62
ABC RESULTS:           NOR4_X1 cells:        3
ABC RESULTS:            BUF_X1 cells:      216
ABC RESULTS:           NOR3_X1 cells:       16
ABC RESULTS:          NAND3_X4 cells:       14
ABC RESULTS:         AOI211_X1 cells:        1
ABC RESULTS:          AOI21_X1 cells:      353
ABC RESULTS:          OAI21_X1 cells:      381
ABC RESULTS:            OR2_X1 cells:      477
ABC RESULTS:           XOR2_X1 cells:      426
ABC RESULTS:            OR3_X1 cells:        4
ABC RESULTS:          NAND2_X4 cells:       75
ABC RESULTS:          OAI22_X1 cells:        7
ABC RESULTS:          NAND2_X1 cells:     1577
ABC RESULTS:          NAND3_X1 cells:      307
ABC RESULTS:          NAND2_X2 cells:       57
ABC RESULTS:           NOR2_X1 cells:      810
ABC RESULTS:          XNOR2_X1 cells:     1303
ABC RESULTS:            INV_X1 cells:      965
ABC RESULTS:        internal signals:     6663
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:       65
Removing temp directory.

8. Executing SETUNDEF pass (replace undef values with defined constants).

9. Executing SPLITNETS pass (splitting up multi-bit signals).

10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac_32..
Removed 0 unused cells and 7433 unused wires.

11. Executing CHECK pass (checking for obvious problems).
Checking module mac_32...
Found and reported 0 problems.

12. Printing statistics.

=== mac_32 ===

   Number of wires:               7395
   Number of wire bits:           7520
   Number of public wires:           5
   Number of public wire bits:     130
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7390
     AND2_X1                        62
     AND2_X2                        17
     AND2_X4                         2
     AOI211_X1                       1
     AOI21_X1                      353
     AOI21_X2                        4
     AOI21_X4                        1
     BUF_X1                        216
     BUF_X16                         3
     BUF_X2                         22
     BUF_X4                         25
     BUF_X8                          9
     DFFR_X1                        64
     INV_X1                        965
     INV_X2                          9
     INV_X4                          1
     INV_X8                          1
     NAND2_X1                     1577
     NAND2_X2                       57
     NAND2_X4                       75
     NAND3_X1                      307
     NAND3_X2                       13
     NAND3_X4                       14
     NAND4_X1                        2
     NOR2_X1                       810
     NOR2_X2                        24
     NOR2_X4                         4
     NOR3_X1                        16
     NOR3_X2                         1
     NOR3_X4                         2
     NOR4_X1                         3
     OAI21_X1                      381
     OAI21_X2                       12
     OAI21_X4                        3
     OAI22_X1                        7
     OR2_X1                        477
     OR2_X2                         19
     OR2_X4                          4
     OR3_X1                          4
     OR3_X4                          1
     XNOR2_X1                     1303
     XNOR2_X2                       76
     XOR2_X1                       426
     XOR2_X2                        17

   Chip area for module '\mac_32': 8273.664000
     of which used for sequential elements: 340.480000 (4.12%)

13. Executing Verilog backend.
Dumping module `\mac_32'.

Warnings: 8 unique messages, 72 total
End of script. Logfile hash: b69ee78f05, CPU: user 1.74s system 0.02s, MEM: 50.00 MB peak
Yosys 0.38+92 (git sha1 84116c9a3, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1708682838165/work=/usr/local/src/conda/yosys-0.38_93_g84116c9a3 -fdebug-prefix-map=/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/miniconda3/envs/rltf=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 66% 2x abc (3 sec), 12% 21x opt_expr (0 sec), ...
