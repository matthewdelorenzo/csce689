{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);    \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\t\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);  \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\t\t\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\nalways @(*) begin\n\tcase (y)\n\t\t4'b0000: Y2 = w? 4'b0001 : 4'b0000;\n\t\t4'b0001: Y2 = w? 4'b0010 : 4'b0000;\n\t\t4'b0010: Y2 = w? 4'b0011 : 4'b0000;\n\t\t4'b0011: Y2 = w? 4'b0100 : 4'b0000;\n\t\t4'b0100: Y2 = w? 4'b0101 : 4'b0000;\n\t\t4'b0101: Y2 = w? 4'b0110 : 4'b0000;\n\t\t4'b0110: Y2 = w? 4'b0111 : 4'b0000;\n\t\t4'b0111: Y2 = w? 4'b1000 : 4'b0000;\n\t\t4'b1000: Y2 = w? 4'b1001 : 4'b0000;\n\t\t4'b1001: Y2 = w? 4'b0000 : 4'b0000;\n\tendcase\nend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\tparameter A=0, B=1, C=2, D=3, E=4, F=5;\n\t\n\talways @(w, y) begin\n\t\tcase(y)\n\t\t\tA: Y2 = w? B : A;\n\t\t\tB: Y2 = w? B : C;\n\t\t\tC: Y2 = w? D : A;\n\t\t\tD: Y2 = w? B : E;\n\t\t\tE: Y2 = w? D : F;\n\t\t\tF: Y2 = w? D : C;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\nalways @(*) begin\n\tcase (y)\n\t\t4'b0000: Y2 = w? 4'b0001 : 4'b0000;\n\t\t4'b0001: Y2 = w? 4'b0010 : 4'b0000;\n\t\t4'b0010: Y2 = w? 4'b0011 : 4'b0000;\n\t\t4'b0011: Y2 = w? 4'b0100 : 4'b0000;\n\t\t4'b0100: Y2 = w? 4'b0101 : 4'b0000;\n\t\t4'b0101: Y2 = w? 4'b0110 : 4'b0000;\n\t\t4'b0110: Y2 = w? 4'b0111 : 4'b0000;\n\t\t4'b0111: Y2 = w? 4'b1000 : 4'b0000;\n\t\t4'b1000: Y2 = w? 4'b1001 : 4'b0000;\n\t\t4'b1001: Y2 = w? 4'b0000 : 4'b0000;\n\tendcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n    always @(*) begin\n        case (y)\n            3'b000: Y2 = w;\n            3'b001: Y2 = w;\n            3'b010: Y2 = w;\n            3'b011: Y2 = w;\n            3'b100: Y2 = w;\n            3'b101: Y2 = 1'b0;\n            default: Y2 = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n   \n   always @(*) begin\n      case (y)\n\t3'b000: Y2 = w;\n\t3'b001: Y2 = w;\n\t3'b010: Y2 = w;\n\t3'b011: Y2 = w;\n\t3'b100: Y2 = w;\n\t3'b101: Y2 = 1'b0;\n\tdefault: Y2 = 1'b0;\n      endcase\n   end\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = w;\n\t\t\t3'b110: Y2 = w;\n\t\t\t3'b111: Y2 = w;\n\t\tendcase\n\tend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);    \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\t\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);  \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\t\t\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n    \n    always @(*) begin\n        case (y)\n            3'b000: Y2 = w;\n            3'b001: Y2 = w;\n            3'b010: Y2 = w;\n            3'b011: Y2 = w;\n            3'b100: Y2 = w;\n            3'b101: Y2 = 1'b0;\n            default: Y2 = 1'b0;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n   parameter A=0, B=1, C=2, D=3, E=4, F=5;\n   reg [3:1] NS;\n\n   always @(*)\n\tbegin\n\t\tcase(y)\n\t\t\tA: NS = w? B : A;\n\t\t\tB: NS = w? B : C;\n\t\t\tC: NS = w? D : A;\n\t\t\tD: NS = w? B : E;\n\t\t\tE: NS = w? D : F;\n\t\t\tF: NS = w? D : C;\n\t\tendcase\n\tend\n\n   always @(*)\n\tbegin\n\t\tcase(y)\n\t\t\tA: Y2 = 0;\n\t\t\tB: Y2 = 0;\n\t\t\tC: Y2 = 0;\n\t\t\tD: Y2 = 0;\n\t\t\tE: Y2 = 0;\n\t\t\tF: Y2 = 1;\n\t\tendcase\n\tend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n  \n  always @(*) begin\n    case (y)\n      3'b000: Y2 = w;\n      3'b001: Y2 = w;\n      3'b010: Y2 = w;\n      3'b011: Y2 = w;\n      3'b100: Y2 = w;\n      3'b101: Y2 = 1'b0;\n    endcase\n  end\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\treg [3:1] Y;\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t4'b0000: Y = 4'b0000;\n\t\t\t4'b0001: Y = 4'b1000;\n\t\t\t4'b0010: Y = 4'b0100;\n\t\t\t4'b0011: Y = 4'b0010;\n\t\t\t4'b0100: Y = 4'b0001;\n\t\t\t4'b0101: Y = 4'b1001;\n\t\t\t4'b0110: Y = 4'b0101;\n\t\t\t4'b0111: Y = 4'b0110;\n\t\t\t4'b1000: Y = 4'b0011;\n\t\t\t4'b1001: Y = 4'b0111;\n\t\t\t4'b1010: Y = 4'b0111;\n\t\t\t4'b1011: Y = 4'b0111;\n\t\t\t4'b1100: Y = 4'b0111;\n\t\t\t4'b1101: Y = 4'b0111;\n\t\t\t4'b1110: Y = 4'b0111;\n\t\t\t4'b1111: Y = 4'b0111;\n\t\tendcase\n\tend\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t4'b0000: Y2 = 0;\n\t\t\t4'b0001: Y2 = 0;\n\t\t\t4'b0010: Y2 = 0;\n\t\t\t4'b0011: Y2 = 0;\n\t\t\t4'b0100: Y2 = 0;\n\t\t\t4'b0101: Y2 = 0;\n\t\t\t4'b0110: Y2 = 0;\n\t\t\t4'b0111: Y2 = 0;\n\t\t\t4'b1000: Y2 = 0;\n\t\t\t4'b1001: Y2 = 0;\n\t\t\t4'b1010: Y2 = 0;\n\t\t\t4'b1011: Y2 = 0;\n\t\t\t4'b1100: Y2 = 0;\n\t\t\t4'b1101: Y2 = 0;\n\t\t\t4'b1110: Y2 = 0;\n\t\t\t4'b1111: Y2 = 1;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\nassign Y2 = (y == 3'b011)? w : y[2];\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n \n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n  always @(*) begin\n    case (y)\n      3'b000: Y2 = w;\n      3'b001: Y2 = w;\n      3'b010: Y2 = w;\n      3'b011: Y2 = w;\n      3'b100: Y2 = w;\n      3'b101: Y2 = 1'b0;\n    endcase\n  end\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\nreg [3:1] Y;\n\nalways @(*) begin\n\tcase (y)\n\t\t4'b0000: Y = 4'b0000;\n\t\t4'b0001: Y = 4'b1000;\n\t\t4'b0010: Y = 4'b0100;\n\t\t4'b0011: Y = 4'b0010;\n\t\t4'b0100: Y = 4'b0001;\n\t\t4'b0101: Y = 4'b1001;\n\t\t4'b0110: Y = 4'b0101;\n\t\t4'b0111: Y = 4'b0110;\n\t\t4'b1000: Y = 4'b0011;\n\t\t4'b1001: Y = 4'b0111;\n\t\t4'b1010: Y = 4'b0111;\n\t\t4'b1011: Y = 4'b0111;\n\t\tdefault: Y = 4'b0000;\n\tendcase\nend\n\nalways @(*) begin\n\tcase (y)\n\t\t4'b0000: Y2 = 0;\n\t\t4'b0001: Y2 = 0;\n\t\t4'b0010: Y2 = 0;\n\t\t4'b0011: Y2 = 0;\n\t\t4'b0100: Y2 = 0;\n\t\t4'b0101: Y2 = 0;\n\t\t4'b0110: Y2 = 0;\n\t\t4'b0111: Y2 = 0;\n\t\t4'b1000: Y2 = 0;\n\t\t4'b1001: Y2 = 0;\n\t\t4'b1010: Y2 = 0;\n\t\t4'b1011: Y2 = 0;\n\t\tdefault: Y2 = 1;\n\tendcase\nend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\t\talways @(*) begin\n\t\t\tcase (y)\n\t\t\t\t3'b000: Y2 = w;\n\t\t\t\t3'b001: Y2 = w;\n\t\t\t\t3'b010: Y2 = w;\n\t\t\t\t3'b011: Y2 = w;\n\t\t\t\t3'b100: Y2 = w;\n\t\t\t\t3'b101: Y2 = 1'b0;\n\t\t\t\tdefault: Y2 = 1'b0;\n\t\t\tendcase\n\t\tend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\nalways @(*) begin\n\tcase (y)\n\t\t4'b0000: Y2 = w? 4'b0001 : 4'b0000;\n\t\t4'b0001: Y2 = w? 4'b0010 : 4'b0000;\n\t\t4'b0010: Y2 = w? 4'b0011 : 4'b0000;\n\t\t4'b0011: Y2 = w? 4'b0100 : 4'b0000;\n\t\t4'b0100: Y2 = w? 4'b0101 : 4'b0000;\n\t\t4'b0101: Y2 = w? 4'b0110 : 4'b0000;\n\t\t4'b0110: Y2 = w? 4'b0111 : 4'b0000;\n\t\t4'b0111: Y2 = w? 4'b1000 : 4'b0000;\n\t\t4'b1000: Y2 = w? 4'b1001 : 4'b0000;\n\t\t4'b1001: Y2 = w? 4'b0000 : 4'b0000;\n\tendcase\nend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \t\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\tparameter A=0, B=1, C=2, D=3, E=4, F=5;\n\talways @(w) begin\n\t\tcase(y)\n\t\t\tA: begin\n\t\t\t\tY2 = 0;\n\t\t\tend\n\t\t\tB: begin\n\t\t\t\tY2 = 0;\n\t\t\tend\n\t\t\tC: begin\n\t\t\t\tY2 = 0;\n\t\t\tend\n\t\t\tD: begin\n\t\t\t\tY2 = w;\n\t\t\tend\n\t\t\tE: begin\n\t\t\t\tY2 = w;\n\t\t\tend\n\t\t\tF: begin\n\t\t\t\tY2 = 0;\n\t\t\tend\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);    \n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\treg [3:1] Y;\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t4'b0000: Y = 4'b0000;\n\t\t\t4'b0001: Y = 4'b1000;\n\t\t\t4'b0010: Y = 4'b0100;\n\t\t\t4'b0011: Y = 4'b0010;\n\t\t\t4'b0100: Y = 4'b0001;\n\t\t\t4'b0101: Y = 4'b1001;\n\t\t\t4'b0110: Y = 4'b0101;\n\t\t\t4'b0111: Y = 4'b0110;\n\t\t\t4'b1000: Y = 4'b0011;\n\t\t\t4'b1001: Y = 4'b0111;\n\t\t\t4'b1010: Y = 4'b0111;\n\t\t\t4'b1011: Y = 4'b0111;\n\t\t\tdefault: Y = 4'b0000;\n\t\tendcase\n\tend\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t4'b0000: Y2 = 0;\n\t\t\t4'b0001: Y2 = 0;\n\t\t\t4'b0010: Y2 = 0;\n\t\t\t4'b0011: Y2 = 0;\n\t\t\t4'b0100: Y2 = 0;\n\t\t\t4'b0101: Y2 = 0;\n\t\t\t4'b0110: Y2 = 0;\n\t\t\t4'b0111: Y2 = 0;\n\t\t\t4'b1000: Y2 = 0;\n\t\t\t4'b1001: Y2 = 0;\n\t\t\t4'b1010: Y2 = 0;\n\t\t\t4'b1011: Y2 = 0;\n\t\t\tdefault: Y2 = 1;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n \talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);  \n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\t\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   always @(*) begin\n\t\tcase({y,w})\n\t\t\t4'b0000: Y2 <= 1'b0;\n\t\t\t4'b0001: Y2 <= 1'b0;\n\t\t\t4'b0010: Y2 <= 1'b0;\n\t\t\t4'b0011: Y2 <= 1'b0;\n\t\t\t4'b0100: Y2 <= 1'b0;\n\t\t\t4'b0101: Y2 <= 1'b0;\n\t\t\t4'b0110: Y2 <= 1'b0;\n\t\t\t4'b0111: Y2 <= 1'b0;\n\t\t\t4'b1000: Y2 <= 1'b0;\n\t\t\t4'b1001: Y2 <= 1'b0;\n\t\t\t4'b1010: Y2 <= 1'b0;\n\t\t\t4'b1011: Y2 <= 1'b0;\n\t\t\t4'b1100: Y2 <= 1'b0;\n\t\t\t4'b1101: Y2 <= 1'b0;\n\t\t\t4'b1110: Y2 <= 1'b0;\n\t\t\t4'b1111: Y2 <= 1'b1;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\tlocalparam A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\talways @(*) begin\n\t\tcase (y)\n\t\t\tA: begin\n\t\t\t\tY2 = w? E : A;\n\t\t\tend\n\t\t\tB: begin\n\t\t\t\tY2 = w? F : B;\n\t\t\tend\n\t\t\tC: begin\n\t\t\t\tY2 = w? C : E;\n\t\t\tend\n\t\t\tD: begin\n\t\t\t\tY2 = w? D : C;\n\t\t\tend\n\t\t\tE: begin\n\t\t\t\tY2 = w? E : D;\n\t\t\tend\n\t\t\tF: begin\n\t\t\t\tY2 = w? F : A;\n\t\t\tend\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n always @(*) begin\n\tcase (y)\n\t\t4'b0000: Y2 = w? 4'b0001 : 4'b0000;\n\t\t4'b0001: Y2 = w? 4'b0010 : 4'b0000;\n\t\t4'b0010: Y2 = w? 4'b0011 : 4'b0000;\n\t\t4'b0011: Y2 = w? 4'b0100 : 4'b0000;\n\t\t4'b0100: Y2 = w? 4'b0101 : 4'b0000;\n\t\t4'b0101: Y2 = w? 4'b0110 : 4'b0000;\n\t\t4'b0110: Y2 = w? 4'b0111 : 4'b0000;\n\t\t4'b0111: Y2 = w? 4'b1000 : 4'b0000;\n\t\t4'b1000: Y2 = w? 4'b1001 : 4'b0000;\n\t\t4'b1001: Y2 = w? 4'b0000 : 4'b0000;\n\tendcase\n end\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t\n\tparameter A=0, B=1, C=2, D=3, E=4, F=5;\n\t\n\talways @(w, y) begin\n\t\tcase(y)\n\t\t\tA: Y2 = w? B : A;\n\t\t\tB: Y2 = w? B : C;\n\t\t\tC: Y2 = w? D : A;\n\t\t\tD: Y2 = w? B : E;\n\t\t\tE: Y2 = w? D : F;\n\t\t\tF: Y2 = w? D : C;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\nalways @(*) begin\n\tcase (y)\n\t\t4'b0000: Y2 = w? 4'b0001 : 4'b0000;\n\t\t4'b0001: Y2 = w? 4'b0010 : 4'b0000;\n\t\t4'b0010: Y2 = w? 4'b0011 : 4'b0000;\n\t\t4'b0011: Y2 = w? 4'b0100 : 4'b0000;\n\t\t4'b0100: Y2 = w? 4'b0101 : 4'b0000;\n\t\t4'b0101: Y2 = w? 4'b0110 : 4'b0000;\n\t\t4'b0110: Y2 = w? 4'b0111 : 4'b0000;\n\t\t4'b0111: Y2 = w? 4'b1000 : 4'b0000;\n\t\t4'b1000: Y2 = w? 4'b1001 : 4'b0000;\n\t\t4'b1001: Y2 = w? 4'b0000 : 4'b0000;\n\tendcase\nend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 <= w;\n\t\t\t3'b001: Y2 <= w;\n\t\t\t3'b010: Y2 <= w;\n\t\t\t3'b011: Y2 <= w;\n\t\t\t3'b100: Y2 <= w;\n\t\t\t3'b101: Y2 <= 1'b0;\n\t\t\tdefault: Y2 <= 1'b0;\n\t\tendcase\n\tend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   module top_module(\n    input clk,\n    input areset,    \n    input x,\n    output z ); \n    parameter A=0, B=1, C=2, D=3, E=4, F=5;\n    reg [2:0] PS, NS;\n    assign z = ((PS == E) || (PS == F))? 1:0;\n    always @(PS,x)\n        case (PS)\n            A: begin\n                NS <= (x)? B:A;\n                Y2 <= (x)? 1:0;\n            end\n            B: begin\n                NS <= C;\n                Y2 <= (x)? 0:1;\n            end\n            C: begin\n                NS <= (x)? D:A;\n                Y2 <= (x)? 0:0;\n            end\n            D: begin\n                NS <= C;\n                Y2 <= (x)? 0:0;\n            end\n            E: begin\n                NS <= (x)? E:F;\n                Y2 <= (x)? 0:1;\n            end\n            F: begin\n                NS <= C;\n                Y2 <= (x)? 0:0;\n            end\n        endcase\n    always @(posedge clk, posedge areset)\n        if(areset)\n            PS <= A;\n    \telse\n            PS <= NS;\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t \n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\nalways @(*) begin\n\tcase (y)\n\t\t3'b000: Y2 = w;\n\t\t3'b001: Y2 = w;\n\t\t3'b010: Y2 = w;\n\t\t3'b011: Y2 = w;\n\t\t3'b100: Y2 = w;\n\t\t3'b101: Y2 = 1'b0;\n\tendcase\nend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\nalways @(*) begin\n\tcase (y)\n\t\t4'b0000: Y2 = w? 4'b0001 : 4'b0000;\n\t\t4'b0001: Y2 = w? 4'b0010 : 4'b0000;\n\t\t4'b0010: Y2 = w? 4'b0011 : 4'b0000;\n\t\t4'b0011: Y2 = w? 4'b0100 : 4'b0000;\n\t\t4'b0100: Y2 = w? 4'b0101 : 4'b0000;\n\t\t4'b0101: Y2 = w? 4'b0110 : 4'b0000;\n\t\t4'b0110: Y2 = w? 4'b0111 : 4'b0000;\n\t\t4'b0111: Y2 = w? 4'b1000 : 4'b0000;\n\t\t4'b1000: Y2 = w? 4'b1001 : 4'b0000;\n\t\t4'b1001: Y2 = w? 4'b0000 : 4'b0000;\n\tendcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\twire [3:1] Y;\n\tassign Y[3] = y[3];\n\tassign Y[2] = w? (y[2]? 0 : 1) : (y[2]? 1 : 0);\n\tassign Y[1] = y[1];\n\tassign Y[0] = y[0];\n\talways @(*)\n\t\tcase (y)\n\t\t\t4'b0000: Y2 = 4'b0000;\n\t\t\t4'b0001: Y2 = 4'b1000;\n\t\t\t4'b0010: Y2 = 4'b0100;\n\t\t\t4'b0011: Y2 = 4'b0010;\n\t\t\t4'b0100: Y2 = 4'b0001;\n\t\t\t4'b0101: Y2 = 4'b1001;\n\t\t\t4'b0110: Y2 = 4'b0101;\n\t\t\t4'b0111: Y2 = 4'b0110;\n\t\t\t4'b1000: Y2 = 4'b0111;\n\t\t\t4'b1001: Y2 = 4'b0111;\n\t\t\t4'b1010: Y2 = 4'b0111;\n\t\t\t4'b1011: Y2 = 4'b0111;\n\t\t\t4'b1100: Y2 = 4'b0111;\n\t\t\t4'b1101: Y2 = 4'b0111;\n\t\t\t4'b1110: Y2 = 4'b0111;\n\t\t\t4'b1111: Y2 = 4'b0111;\n\t\tendcase\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \t\t\t\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 <= w;\n\t\t\t3'b001: Y2 <= w;\n\t\t\t3'b010: Y2 <= w;\n\t\t\t3'b011: Y2 <= w;\n\t\t\t3'b100: Y2 <= w;\n\t\t\t3'b101: Y2 <= 1'b0;\n\t\t\tdefault: Y2 <= 1'b0;\n\t\tendcase\n\tend\n\t\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\tlocalparam A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\tA: begin\n\t\t\t\tY2 = w? E : F;\n\t\t\tend\n\t\t\tB: begin\n\t\t\t\tY2 = w? D : F;\n\t\t\tend\n\t\t\tC: begin\n\t\t\t\tY2 = w? C : E;\n\t\t\tend\n\t\t\tD: begin\n\t\t\t\tY2 = w? B : E;\n\t\t\tend\n\t\t\tE: begin\n\t\t\t\tY2 = w? A : C;\n\t\t\tend\n\t\t\tF: begin\n\t\t\t\tY2 = w? D : B;\n\t\t\tend\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\t\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 <= w;\n\t\t\t3'b001: Y2 <= w;\n\t\t\t3'b010: Y2 <= w;\n\t\t\t3'b011: Y2 <= w;\n\t\t\t3'b100: Y2 <= w;\n\t\t\t3'b101: Y2 <= 1'b0;\n\t\t\tdefault: Y2 <= 1'b0;\n\t\tendcase\n\tend\n\t\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n   \n   always @(*) begin\n      case (y)\n\t3'b000: Y2 = w;\n\t3'b001: Y2 = w;\n\t3'b010: Y2 = w;\n\t3'b011: Y2 = w;\n\t3'b100: Y2 = w;\n\t3'b101: Y2 = 1'b0;\n\tdefault: Y2 = 1'b0;\n      endcase\n   end\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   assign Y2 = (y == 3'b011)? w : y[2];\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\tassign Y2 = (y == 3'b011)? w : y[2];\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\twire [3:1] Y;\n\tassign Y[3] = y[3];\n\tassign Y[2] = w? (y[2]? 0 : 1) : (y[2]? 1 : 0);\n\tassign Y[1] = y[1];\n\tassign Y[0] = y[0];\n\n\talways @(*)\n\t\tcase (Y)\n\t\t\t4'b0000: Y2 = 0;\n\t\t\t4'b0001: Y2 = 0;\n\t\t\t4'b0010: Y2 = 0;\n\t\t\t4'b0011: Y2 = 0;\n\t\t\t4'b0100: Y2 = 0;\n\t\t\t4'b0101: Y2 = 0;\n\t\t\t4'b0110: Y2 = 0;\n\t\t\t4'b0111: Y2 = 0;\n\t\t\t4'b1000: Y2 = 0;\n\t\t\t4'b1001: Y2 = 0;\n\t\t\t4'b1010: Y2 = 0;\n\t\t\t4'b1011: Y2 = 0;\n\t\t\t4'b1100: Y2 = 0;\n\t\t\t4'b1101: Y2 = 0;\n\t\t\t4'b1110: Y2 = 0;\n\t\t\t4'b1111: Y2 = 1;\n\t\tendcase\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \t\t\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n    \n    always @(*) begin\n        case (y)\n            3'b000: Y2 = w;\n            3'b001: Y2 = w;\n            3'b010: Y2 = w;\n            3'b011: Y2 = w;\n            3'b100: Y2 = w;\n            3'b101: Y2 = 1'b0;\n            default: Y2 = 1'b0;\n        endcase\n    end\n    \nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t  \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);    \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\t   \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);  \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\t\t\t\t  \n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\tinteger i;\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = 0;\n\t\t\t3'b001: Y2 = 0;\n\t\t\t3'b010: Y2 = 0;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = 0;\n\t\t\t3'b101: Y2 = w;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\tinitial begin\n\t\tY2 = 0;\n\tend\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = w;\n\t\t\t3'b110: Y2 = w;\n\t\t\t3'b111: Y2 = w;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   \n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\nparameter A=0, B=1, C=2, D=3, E=4, F=5;\n\nalways @(w) begin\n\tcase(y)\n\t\tA: Y2 <= w;\n\t\tB: Y2 <= w;\n\t\tC: Y2 <= w;\n\t\tD: Y2 <= w;\n\t\tE: Y2 <= w;\n\t\tF: Y2 <= w;\n\tendcase\nend\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\tassign Y2 = (y == 3'b011)? w : y[2];\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n  \n  always @(*) begin\n    case (y)\n      3'b000: Y2 = w;\n      3'b001: Y2 = w;\n      3'b010: Y2 = w;\n      3'b011: Y2 = w;\n      3'b100: Y2 = w;\n      3'b101: Y2 = 1'b0;\n    endcase\n  end\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\nassign Y2 = (y == 3'b011)? w : y[2];\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2); \t\t\t\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = w;\n\t\t\t3'b110: Y2 = w;\n\t\t\t3'b111: Y2 = w;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n    always @(*) begin\n        case (y)\n            3'b000: Y2 = w;\n            3'b001: Y2 = w;\n            3'b010: Y2 = w;\n            3'b011: Y2 = w;\n            3'b100: Y2 = w;\n            3'b101: Y2 = 1'b0;\n            default: Y2 = 1'b0;\n        endcase\n    end\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);   `include \"FSM_three_always.v\"\n\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001,..., 101 for states A, B,..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\nmodule top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n \n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = w;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = w;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule"}
