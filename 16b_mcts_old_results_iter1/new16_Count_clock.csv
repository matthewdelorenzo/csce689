Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,2.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);
    
    wire [3:0] h_out, m_out, s_out;
    
    bcd_to_7seg bcd_to_7seg_h(.in(h_out),.out(hh));
    bcd_to_7seg bcd_to_7seg_m(.in(m_out),.out(mm));
    bcd_to_7seg bcd_to_7seg_s(.in(s_out),.out(ss));
    
    wire [3:0] h_in, m_in, s_in;
    
    assign h_in = (ena)? h_out : 4'b0;
    assign m_in = (ena)? m_out : 4'b0;
    assign s_in = (ena)? s_out : 4'b0;
    
    wire [3:0] h_out_in, m_out_in, s_out_in;
    
    assign h_out_in = (reset)? 4'b0 : h_in;
    assign m_out_in = (reset)? 4'b0 : m_in;
    assign s_out_in = (reset)? 4'b0 : s_in;
    
    wire [3:0] h_in_in, m_in_in, s_in_in;
    
    assign h_in_in = (reset)? 4'b0 : h_out;
    assign m_in_in = (reset)? 4'b0 : m_out;
    assign s_in_in = (reset)? 4'b0 : s_out;
    
    wire [3:0] h_out_pm, m_out_pm, s_out_pm;
    
    assign h_out_pm = (reset)? 4'b0 : h_out_in;
    assign m_out_pm = (reset)? 4'b0 : m_out_in;
    assign s_out_pm = (reset)? 4'b0 : s_out_in;
    
    wire [3:0] h_in_pm, m_in_pm, s_in_pm;
    
    assign h_in_pm = (reset)? 4'b0 : h_out_pm;
    assign m_in_pm = (reset)? 4'b0 : m_out_pm;
    assign s_in_pm = (reset)? 4'b0 : s_out_pm;
    
    wire [3:0] h_out_ss, m_out_ss, s_out_ss;
    
    assign h_out_ss = (reset)? 4'b0 : h_in_pm;
    assign m_out_ss = (reset)? 4'b0 : m_in_pm;
    assign s_out_ss = (reset)? 4'b0 : s_in_pm;
    
    wire [3:0] h_in_ss, m_in_ss, s_in_ss;
    
    assign h_in_ss = (reset)? 4'b0 : h_out_ss;
    assign m_in_ss = (reset)? 4'b0 : m_out_ss;
    assign s_in_ss = (reset)? 4'b0 : s_out_ss;
    
    wire [3:0] h_out_mm, m_out_mm, s_out_mm;
    
    assign h_out_mm = (reset)? 4'b0 : h_in_ss;
    assign m_out_mm = (reset)? 4'b0 : m_in_ss;
    assign s_out_mm = (reset)? 4'b0 : s_in_ss;
    
    wire [3:0] h_in_mm, m_in_mm, s_in_mm;
    
    assign h_in_mm = (reset)? 4'b0 : h_out_mm;
    assign m_in_mm = (reset)? 4'b0 : m_out_mm;
    assign s_in_mm = (reset"
N/A,N/A,-1,3.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);
        
    wire [3:0] h_out, m_out, s_out;
    
    bcd_to_7seg bcd_to_7seg_h(.in(h_out),.out(hh));
    bcd_to_7seg bcd_to_7seg_m(.in(m_out),.out(mm));
    bcd_to_7seg bcd_to_7seg_s(.in(s_out),.out(ss));
    
    wire [3:0] h_in, m_in, s_in;
    
    assign h_in = (ena)? h_out : 4'b0;
    assign m_in = (ena)? m_out : 4'b0;
    assign s_in = (ena)? s_out : 4'b0;
    
    wire [3:0] h_out_in, m_out_in, s_out_in;
    
    assign h_out_in = (reset)? 4'b0 : h_in;
    assign m_out_in = (reset)? 4'b0 : m_in;
    assign s_out_in = (reset)? 4'b0 : s_in;
    
    wire [3:0] h_in_in, m_in_in, s_in_in;
    
    assign h_in_in = (reset)? 4'b0 : h_out;
    assign m_in_in = (reset)? 4'b0 : m_out;
    assign s_in_in = (reset)? 4'b0 : s_out;
    
    wire [3:0] h_out_pm, m_out_pm, s_out_pm;
    
    assign h_out_pm = (reset)? 4'b0 : h_out_in;
    assign m_out_pm = (reset)? 4'b0 : m_out_in;
    assign s_out_pm = (reset)? 4'b0 : s_out_in;
    
    wire [3:0] h_in_pm, m_in_pm, s_in_pm;
    
    assign h_in_pm = (reset)? 4'b0 : h_out_pm;
    assign m_in_pm = (reset)? 4'b0 : m_out_pm;
    assign s_in_pm = (reset)? 4'b0 : s_out_pm;
    
    wire [3:0] h_out_ss, m_out_ss, s_out_ss;
    
    assign h_out_ss = (reset)? 4'b0 : h_in_pm;
    assign m_out_ss = (reset)? 4'b0 : m_in_pm;
    assign s_out_ss = (reset)? 4'b0 : s_in_pm;
    
    wire [3:0] h_in_ss, m_in_ss, s_in_ss;
    
    assign h_in_ss = (reset)? 4'b0 : h_out_ss;
    assign m_in_ss = (reset)? 4'b0 : m_out_ss;
    assign s_in_ss = (reset)? 4'b0 : s_out_ss;
    
    wire [3:0] h_out_mm, m_out_mm, s_out_mm;
    
    assign h_out_mm = (reset)? 4'b0 : h_in_ss;
    assign m_out_mm = (reset)? 4'b0 : m_in_ss;
    assign s_out_mm = (reset)? 4'b0 : s_in_ss;
    
    wire [3:0] h_in_mm, m_in_mm, s_in_mm;
    
    assign h_in_mm = (reset)? 4'b0 : h_out_mm;
    assign m_in_mm = (reset)? 4'b0 : m_out_mm;
    assign s_in_mm = (reset"
N/A,N/A,-1,4.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);
    
    wire [3:0] h_out, m_out, s_out;
    
    bcd_to_7seg bcd_to_7seg_h(.in(h_out),.out(hh));
    bcd_to_7seg bcd_to_7seg_m(.in(m_out),.out(mm));
    bcd_to_7seg bcd_to_7seg_s(.in(s_out),.out(ss));
    
    wire [3:0] h_in, m_in, s_in;
    
    assign h_in = (ena)? h_out : 4'b0;
    assign m_in = (ena)? m_out : 4'b0;
    assign s_in = (ena)? s_out : 4'b0;
    
    wire [3:0] h_out_in, m_out_in, s_out_in;
    
    assign h_out_in = (reset)? 4'b0 : h_in;
    assign m_out_in = (reset)? 4'b0 : m_in;
    assign s_out_in = (reset)? 4'b0 : s_in;
    
    wire [3:0] h_in_in, m_in_in, s_in_in;
    
    assign h_in_in = (reset)? 4'b0 : h_out;
    assign m_in_in = (reset)? 4'b0 : m_out;
    assign s_in_in = (reset)? 4'b0 : s_out;
    
    wire [3:0] h_out_pm, m_out_pm, s_out_pm;
    
    assign h_out_pm = (reset)? 4'b0 : h_out_in;
    assign m_out_pm = (reset)? 4'b0 : m_out_in;
    assign s_out_pm = (reset)? 4'b0 : s_out_in;
    
    wire [3:0] h_in_pm, m_in_pm, s_in_pm;
    
    assign h_in_pm = (reset)? 4'b0 : h_out_pm;
    assign m_in_pm = (reset)? 4'b0 : m_out_pm;
    assign s_in_pm = (reset)? 4'b0 : s_out_pm;
    
    wire [3:0] h_out_ss, m_out_ss, s_out_ss;
    
    assign h_out_ss = (reset)? 4'b0 : h_in_pm;
    assign m_out_ss = (reset)? 4'b0 : m_in_pm;
    assign s_out_ss = (reset)? 4'b0 : s_in_pm;
    
    wire [3:0] h_in_ss, m_in_ss, s_in_ss;
    
    assign h_in_ss = (reset)? 4'b0 : h_out_ss;
    assign m_in_ss = (reset)? 4'b0 : m_out_ss;
    assign s_in_ss = (reset)? 4'b0 : s_out_ss;
    
    wire [3:0] h_out_mm, m_out_mm, s_out_mm;
    
    assign h_out_mm = (reset)? 4'b0 : h_in_ss;
    assign m_out_mm = (reset)? 4'b0 : m_in_ss;
    assign s_out_mm = (reset)? 4'b0 : s_in_ss;
    
    wire [3:0] h_in_mm, m_in_mm, s_in_mm;
    
    assign h_in_mm = (reset)? 4'b0 : h_out_mm;
    assign m_in_mm = (reset)? 4'b0 : m_out_mm;
    assign s_in_mm = (reset"
N/A,N/A,-1,5.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
reg [7:0] hh_reg;
reg [7:0] mm_reg;
reg [7:0] ss_reg;

always @(posedge clk) begin
    if (reset) begin
        pm_reg <= 0;
        hh_reg <= 0;
        mm_reg <= 0;
        ss_reg <= 0;
    end
    else if (ena) begin
        if (ss_reg == 59) begin
            if (mm_reg == 59) begin
                if (hh_reg == 11) begin
                    hh_reg <= 0;
                    mm_reg <= 0;
                    ss_reg <= 0;
                    if (pm_reg)
                        pm_reg <= 0;
                    else
                        pm_reg <= 1;
                end
                else begin
                    hh_reg <= hh_reg + 1;
                    mm_reg <= 0;
                    ss_reg <= 0;
                    pm_reg <= 0;
                end
            end
            else begin
                if (hh_reg == 11) begin
                    hh_reg <= 0;
                    mm_reg <= mm_reg + 1;
                    ss_reg <= 0;
                    pm_reg <= 0;
                end
                else begin
                    hh_reg <= hh_reg + 1;
                    mm_reg <= mm_reg;
                    ss_reg <= ss_reg + 1;
                    pm_reg <= 0;
                end
            end
        end
        else begin
            ss_reg <= ss_reg + 1;
            pm_reg <= 0;
        end
    end
end

assign pm = pm_reg;
assign hh = hh_reg;
assign mm = mm_reg;
assign ss = ss_reg;

endmodule"
N/A,N/A,-1,6.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);
    
    wire [3:0] h_out, m_out, s_out;
    
    bcd_to_7seg bcd_to_7seg_h(.in(h_out),.out(hh));
    bcd_to_7seg bcd_to_7seg_m(.in(m_out),.out(mm));
    bcd_to_7seg bcd_to_7seg_s(.in(s_out),.out(ss));
    
    wire [3:0] h_in, m_in, s_in;
    
    assign h_in = (ena)? h_out : 4'b0;
    assign m_in = (ena)? m_out : 4'b0;
    assign s_in = (ena)? s_out : 4'b0;
    
    wire [3:0] h_out_in, m_out_in, s_out_in;
    
    assign h_out_in = (reset)? 4'b0 : h_in;
    assign m_out_in = (reset)? 4'b0 : m_in;
    assign s_out_in = (reset)? 4'b0 : s_in;
    
    wire [3:0] h_in_in, m_in_in, s_in_in;
    
    assign h_in_in = (reset)? 4'b0 : h_out;
    assign m_in_in = (reset)? 4'b0 : m_out;
    assign s_in_in = (reset)? 4'b0 : s_out;
    
    wire [3:0] h_out_pm, m_out_pm, s_out_pm;
    
    assign h_out_pm = (reset)? 4'b0 : h_out_in;
    assign m_out_pm = (reset)? 4'b0 : m_out_in;
    assign s_out_pm = (reset)? 4'b0 : s_out_in;
    
    wire [3:0] h_in_pm, m_in_pm, s_in_pm;
    
    assign h_in_pm = (reset)? 4'b0 : h_out_pm;
    assign m_in_pm = (reset)? 4'b0 : m_out_pm;
    assign s_in_pm = (reset)? 4'b0 : s_out_pm;
    
    wire [3:0] h_out_ss, m_out_ss, s_out_ss;
    
    assign h_out_ss = (reset)? 4'b0 : h_in_pm;
    assign m_out_ss = (reset)? 4'b0 : m_in_pm;
    assign s_out_ss = (reset)? 4'b0 : s_in_pm;
    
    wire [3:0] h_in_ss, m_in_ss, s_in_ss;
    
    assign h_in_ss = (reset)? 4'b0 : h_out_ss;
    assign m_in_ss = (reset)? 4'b0 : m_out_ss;
    assign s_in_ss = (reset)? 4'b0 : s_out_ss;
    
    wire [3:0] h_out_mm, m_out_mm, s_out_mm;
    
    assign h_out_mm = (reset)? 4'b0 : h_in_ss;
    assign m_out_mm = (reset)? 4'b0 : m_in_ss;
    assign s_out_mm = (reset)? 4'b0 : s_in_ss;
    
    wire [3:0] h_in_mm, m_in_mm, s_in_mm;
    
    assign h_in_mm = (reset)? 4'b0 : h_out_mm;
    assign m_in_mm = (reset)? 4'b0 : m_out_mm;
    assign s_in_mm = (reset"
N/A,N/A,-1,7.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);
	 
	 reg pm_;
	 reg [7:0] hh_, mm_, ss_;
	 
	 always @(posedge clk) begin
		if(reset) begin
			hh_ <= 8'h12;
			mm_ <= 8'h00;
			ss_ <= 8'h00;
			pm_ <= 0;
		end
		else if(ena) begin
			if(ss_ == 8'h59) begin
				if(mm_ == 8'h59) begin
					if(hh_ == 8'h11) begin
						hh_ <= 8'h12;
					end
					else begin
						hh_ <= hh_ + 1;
					end
				end
				else begin
					mm_ <= mm_ + 1;
					ss_ <= 0;
				end
			end
			else begin
				ss_ <= ss_ + 1;
			end
		end
		else begin
			pm_ <= 0;
		end
	 end
	 
	 assign pm = pm_;
	 assign hh = hh_;
	 assign mm = mm_;
	 assign ss = ss_;
	 
endmodule"
N/A,N/A,-1,8.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);
 
    wire [3:0] h_out, m_out, s_out;
 
    bcd_to_7seg bcd_to_7seg_h(.in(h_out),.out(hh));
    bcd_to_7seg bcd_to_7seg_m(.in(m_out),.out(mm));
    bcd_to_7seg bcd_to_7seg_s(.in(s_out),.out(ss));
 
    wire [3:0] h_in, m_in, s_in;
    wire [3:0] h_next, m_next, s_next;
 
    assign h_in = h_out;
    assign m_in = m_out;
    assign s_in = s_out;
 
    always @(posedge clk) begin
        if (reset) begin
            h_out <= 4'd0;
            m_out <= 4'd0;
            s_out <= 4'd0;
        end
        else begin
            if (ena) begin
                h_out <= h_next;
                m_out <= m_next;
                s_out <= s_next;
            end
        end
    end
 
    assign h_next = (h_in == 4'd9)? 4'd0 : h_in + 4'd1;
    assign m_next = (m_in == 4'd9)? (h_in == 4'd0? 4'd0 : 4'd5) : m_in + 4'd1;
    assign s_next = (s_in == 4'd9)? (m_in == 4'd0? 4'd0 : 4'd5) : s_in + 4'd1;
 
    assign pm = (h_in == 4'd0) && (m_in == 4'd0)? 1'b0 : 1'b1;
 
endmodule"
