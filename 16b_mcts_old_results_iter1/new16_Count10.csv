Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,2.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,3.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,4.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,5.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,6.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,7.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q); 

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,8.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);    

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,9.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);  

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,10.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);   

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,11.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,12.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);     
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end
endmodule"
N/A,N/A,-1,13.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,14.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);        
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,15.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);      
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,16.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,17.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    initial
        q = 4'd0;
    
    always @(posedge clk)
        if(reset)
            q = 4'd0;
    	else
            q = q + 1'b1;
endmodule"
N/A,N/A,-1,18.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

	initial
	begin
		q = 4'd0;
	end
	
	always @ (posedge clk)
	begin
		if (reset)
			q <= 4'd0;
		else
			q <= q + 1'b1;
	end
endmodule"
N/A,N/A,-1,19.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,20.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

   always @(posedge clk) begin
      if(reset)
        q <= 4'd0;
      else begin
        q <= q + 4'd1;
      end
   end
endmodule"
N/A,N/A,-1,21.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,22.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);


    always @(posedge clk) begin
        if(reset)
            q <= 4'd0;
        else begin
            q[3] <= q[2];
            q[2] <= q[1];
            q[1] <= q[0];
            q[0] <= ~q[3];
        end
    end

endmodule"
N/A,N/A,-1,23.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
 
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end
endmodule"
N/A,N/A,-1,24.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,25.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q); 

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,26.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

 	initial
	begin
		q = 4'd0;
	end
	
    always @ (posedge clk)
        if (reset)
            q <= 4'd0;
        else
            q <= q + 4'd1;

endmodule"
N/A,N/A,-1,27.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,28.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	 
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,29.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

        always @ (posedge clk)
            begin
                if(reset)
                    q <= 4'd0;
                else
                    begin
                        q[3] <= q[2];
                        q[2] <= q[1];
                        q[1] <= q[0];
                        q[0] <= ~q[3];
                    end
            end

endmodule"
N/A,N/A,-1,30.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);    

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,31.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);  

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,32.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);   

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,33.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);     
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end
endmodule"
N/A,N/A,-1,34.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);        
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,35.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

  always @(posedge clk)
    begin
      if(reset)
        q <= 4'd0;
      else
        q <= q + 4'd1;
    end
endmodule"
N/A,N/A,-1,36.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);      
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,37.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

       always @(posedge clk)
    begin
        if(reset)
            q <= 4'd0;
        else
            begin
                q[3] <= q[2];
                q[2] <= q[1];
                q[1] <= q[0];
                q[0] <= ~q[3];
            end
    end
endmodule"
N/A,N/A,-1,38.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

always @ (posedge clk)
    begin
        if(reset)
            q <= 4'd0;
        else
            begin
                q[3] <= q[2];
                q[2] <= q[1];
                q[1] <= q[0];
                q[0] <= 1'b0;
            end
    end

endmodule"
N/A,N/A,-1,39.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	    

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,40.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    parameter [3:0] d = 4'b0000;
    reg [3:0] q_next, q_reg;
    
    always @(*) begin
        q_next = d;
        case (q_reg)
            4'b0000: q_next = 4'b0001;
            4'b0001: q_next = 4'b0010;
            4'b0010: q_next = 4'b0011;
            4'b0011: q_next = 4'b0100;
            4'b0100: q_next = 4'b0101;
            4'b0101: q_next = 4'b0110;
            4'b0110: q_next = 4'b0111;
            4'b0111: q_next = 4'b1000;
            4'b1000: q_next = 4'b1001;
            4'b1001: q_next = 4'b0000;
        endcase
    end
    
    always @(posedge clk) begin
        if (reset)
            q_reg <= 4'b0000;
        else
            q_reg <= q_next;
    end
    
    assign q = q_reg;

endmodule"
N/A,N/A,-1,41.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

     always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end
endmodule"
N/A,N/A,-1,42.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
	
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,43.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

      always @(posedge clk) begin
        if(reset)
            q <= 4'd0;
        else begin
            q <= q + 4'd1;
        end
    end

endmodule"
N/A,N/A,-1,44.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    wire [3:0] next_q;
    
    assign next_q = (q == 4'd9)? 4'd0 : q + 4'd1;
    
    always @(posedge clk)
        if(reset)
            q <= 4'd0;
    	else
            q <= next_q;
endmodule"
N/A,N/A,-1,45.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	  

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,46.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
        
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,47.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    reg [3:0] d;
    
    always @(posedge clk)
        if(reset)
            d <= 4'd0;
    	else
            d <= d + 4'd1;
    
    assign q = d;
    
endmodule"
N/A,N/A,-1,48.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always@(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,49.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q); 
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end
    
endmodule"
N/A,N/A,-1,50.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,51.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,52.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	   

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,53.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    assign #5 q[0] = q[4];
    assign #10 q[1] = q[0];
    assign #10 q[2] = q[1];
    assign #10 q[3] = q[2];
    
    always @(posedge clk) begin
        if(reset)
            q <= 4'd0;
        else
            q <= q + 4'd1;
    end
endmodule"
N/A,N/A,-1,54.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);    
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end
endmodule"
N/A,N/A,-1,55.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    localparam [3:0] zero=4'd0, one=4'd1, two=4'd2, three=4'd3, four=4'd4, five=4'd5, six=4'd6, seven=4'd7, eight=4'd8, nine=4'd9;
    reg [3:0] state, next_state;
    
    always @(*) begin
        state <= next_state;
    end
    
    always @(*) begin
        case (state)
            zero: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= one;
            end
            one: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= two;
            end
            two: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= three;
            end
            three: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= four;
            end
            four: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= five;
            end
            five: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= six;
            end
            six: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= seven;
            end
            seven: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= eight;
            end
            eight: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= nine;
            end
            nine: begin
                if(reset)
                    next_state <= zero;
                else
                    next_state <= zero;
            end
            default: begin
                next_state <= zero;
            end
        endcase
    end
    
    always @(*) begin
        case (state)
            zero:
                q = 4'd0;
            one:
                q = 4'd1;
            two:
                q = 4'd2;
            three:
                q = 4'd3;
            four:
                q = 4'd4;
            five:
                q = 4'd5;
            six:
                q = 4'd6;
            seven:
                q = 4'd7;
            eight:
                q = 4'd8;
            nine:
                q = 4'd9;
            default:
                q = 4'd0;
        endcase
    end
    
endmodule"
N/A,N/A,-1,56.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);  
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end
endmodule"
N/A,N/A,-1,57.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);   
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end
endmodule"
N/A,N/A,-1,58.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);     

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,59.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
   
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end
endmodule"
N/A,N/A,-1,60.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);        

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,61.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,62.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);      

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,63.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	     

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,64.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    defparam sc_rom_monitor_0_1_0.INITVAL_3F = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_3E = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_3D = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_3C = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_3B = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_3A = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_39 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_38 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_37 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_36 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_35 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_34 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_33 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_32 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_31 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_30 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_2F = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_2E = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_2D = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_2C = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_2B = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_2A = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_29 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_28 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_27 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_26 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_25 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_24 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_23 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_22 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_21 = ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"" ;
    defparam sc_rom_monitor_0_1_0.INITVAL_"
N/A,N/A,-1,65.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    genvar i;
    
    generate for (i=0; i<4; i=i+1) begin: clk_gen
        clock_divider #(10) clk_div (clk, reset, clk_div[i]);
    end
    endgenerate
    
    assign q[0] = clk_div[0];
    assign q[1] = clk_div[1];
    assign q[2] = clk_div[2];
    assign q[3] = clk_div[3];
    
endmodule"
N/A,N/A,-1,66.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
     
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end
    
endmodule"
N/A,N/A,-1,67.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

	initial
	begin
		q = 4'd0;
	end
	
	always @ (posedge clk)
	begin
		if (reset)
			q <= 4'd0;
		else
			q <= q + 1'b1;
	end
endmodule"
N/A,N/A,-1,68.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

   always @(posedge clk) begin
      if(reset)
        q <= 4'd0;
      else begin
        q <= q + 4'd1;
      end
   end
endmodule"
N/A,N/A,-1,69.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	        

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,70.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
  
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,71.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,72.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);


    always @(posedge clk) begin
        if(reset)
            q <= 4'd0;
        else begin
            q[3] <= q[2];
            q[2] <= q[1];
            q[1] <= q[0];
            q[0] <= ~q[3];
        end
    end

endmodule"
N/A,N/A,-1,73.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
       
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,74.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

 	initial
	begin
		q = 4'd0;
	end
	
    always @ (posedge clk)
        if (reset)
            q <= 4'd0;
        else
            q <= q + 4'd1;

endmodule"
N/A,N/A,-1,75.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	      

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,76.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q); 

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,77.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always  @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,78.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

        always @ (posedge clk)
            begin
                if(reset)
                    q <= 4'd0;
                else
                    begin
                        q[3] <= q[2];
                        q[2] <= q[1];
                        q[1] <= q[0];
                        q[0] <= ~q[3];
                    end
            end

endmodule"
N/A,N/A,-1,79.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end
endmodule"
N/A,N/A,-1,80.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

  always @(posedge clk)
    begin
      if(reset)
        q <= 4'd0;
      else
        q <= q + 4'd1;
    end
endmodule"
N/A,N/A,-1,81.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	       

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,82.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

       always @(posedge clk)
    begin
        if(reset)
            q <= 4'd0;
        else
            begin
                q[3] <= q[2];
                q[2] <= q[1];
                q[1] <= q[0];
                q[0] <= ~q[3];
            end
    end
endmodule"
N/A,N/A,-1,83.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
parameter [3:0] D = 4'b1001;

always @ (posedge clk)
    if (reset)
        q <= 4'b0;
    else
        q <= D;

endmodule"
N/A,N/A,-1,84.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    initial
        q = 4'd0;
    
    always @(posedge clk)
        if(reset)
            q = 4'd0;
    	else
            q = q + 1'b1;
endmodule"
N/A,N/A,-1,85.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);    	

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,86.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);  	

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,87.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);   	

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,88.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

     always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end
endmodule"
N/A,N/A,-1,89.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);     	
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,90.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);        assign q = (reset)? 4'd0 : (clk)? q + 1'b1 : q;
    
    always @(*) begin
        if (reset)
            q = 4'd0;
        else if (q == 4'd9)
            q = 4'd0;
        else
            q = q + 1'b1;
    end
    
endmodule"
N/A,N/A,-1,91.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);      	
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,92.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

      always @(posedge clk) begin
        if(reset)
            q <= 4'd0;
        else begin
            q <= q + 4'd1;
        end
    end

endmodule"
N/A,N/A,-1,93.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,94.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    parameter [3:0] d = 4'b0000;
    
    always @(posedge clk)
        if(reset)
            q <= d;
        else
            q <= q + 1'b1;
endmodule"
N/A,N/A,-1,95.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always_ff @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                q <= q + 4'd1;
        end
endmodule"
N/A,N/A,-1,96.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always #5 clk = ~clk;
    
    initial begin
        q = 4'd0;
        #100;
        $finish;
    end
    
    always @(posedge clk) begin
        if(reset)
            q <= 4'd0;
        else
            q <= q + 1'b1;
    end
    
endmodule"
N/A,N/A,-1,97.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
N/A,N/A,-1,98.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always begin
        #5 q = q + 1;
    end

    always @(posedge clk) begin
        if(reset)
            q <= 0;
    end

endmodule"
N/A,N/A,-1,99.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);	

    always @ (posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= 1'b0;
                end
        end

endmodule"
N/A,N/A,-1,100.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    parameter [3:0] d = 4'b0000;
    reg [3:0] q_next, q_reg;
    
    always @(*) begin
        q_next = d;
        case (q_reg)
            4'b0000: q_next = 4'b0001;
            4'b0001: q_next = 4'b0010;
            4'b0010: q_next = 4'b0011;
            4'b0011: q_next = 4'b0100;
            4'b0100: q_next = 4'b0101;
            4'b0101: q_next = 4'b0110;
            4'b0110: q_next = 4'b0111;
            4'b0111: q_next = 4'b1000;
            4'b1000: q_next = 4'b1001;
            4'b1001: q_next = 4'b0000;
        endcase
    end
    
    always @(posedge clk) begin
        if (reset)
            q_reg <= 4'b0000;
        else
            q_reg <= q_next;
    end
    
    assign q = q_reg;

endmodule"
N/A,N/A,-1,101.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @(posedge clk)
        begin
            if(reset)
                q <= 4'd0;
            else
                begin
                    q[3] <= q[2];
                    q[2] <= q[1];
                    q[1] <= q[0];
                    q[0] <= ~q[3];
                end
        end

endmodule"
