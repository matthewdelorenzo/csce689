Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-0.1,2.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


       reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011509562000000084,411
N/A,N/A,-1,3.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.010749119000000196,417
N/A,N/A,-0.1,4.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
reg pm_reg;

assign ss = {sec_tens, sec_ones};
assign mm = {min_tens, min_ones};
assign hh = {hour_tens, hour_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        sec_ones <= 4'd0;
        sec_tens <= 4'd0;
        min_ones <= 4'd0;
        min_tens <= 4'd0;
        hour_ones <= 4'd2;
        hour_tens <= 4'd1;
        pm_reg <= 1'b0; // AM
    end else if (ena) begin
        // Increment seconds
        if (sec_ones == 4'd9) begin
            sec_ones <= 4'd0;
            if (sec_tens == 4'd5) begin
                sec_tens <= 4'd0;
                // Increment minutes
                if (min_ones == 4'd9) begin
                    min_ones <= 4'd0;
                    if (min_tens == 4'd5) begin
                        min_tens <= 4'd0;
                        // Increment hours
                        if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                            hour_ones <= 4'd1;
                            if (hour_tens == 4'd1) begin
                                hour_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                        end else begin
                            hour_ones <= hour_ones + 4'd1;
                        end
                    end else begin
                        min_tens <= min_tens + 4'd1;
                    end
                end else begin
                    min_ones <= min_ones + 4'd1;
                end
            end else begin
                sec_tens <= sec_tens + 4'd1;
            end
        end else begin
            sec_ones <= sec_ones + 4'd1;
        end
    end
end

endmodule",0.010777915999999887,485
N/A,N/A,-1,5.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011169292000000386,288
N/A,N/A,-1,6.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //nreg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.010385400999999739,303
N/A,N/A,-0.1,7.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
reg pm_reg;

assign ss = {sec_tens, sec_ones};
assign mm = {min_tens, min_ones};
assign hh = {hour_tens, hour_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        sec_ones <= 4'd0;
        sec_tens <= 4'd0;
        min_ones <= 4'd0;
        min_tens <= 4'd0;
        hour_ones <= 4'd2;
        hour_tens <= 4'd1;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (sec_ones == 4'd9) begin
            sec_ones <= 4'd0;
            if (sec_tens == 4'd5) begin
                sec_tens <= 4'd0;
                // Increment minutes
                if (min_ones == 4'd9) begin
                    min_ones <= 4'd0;
                    if (min_tens == 4'd5) begin
                        min_tens <= 4'd0;
                        // Increment hours
                        if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                            hour_ones <= 4'd1;
                            if (hour_tens == 4'd1) begin
                                hour_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                        end else begin
                            hour_ones <= hour_ones + 4'd1;
                        end
                    end else begin
                        min_tens <= min_tens + 4'd1;
                    end
                end else begin
                    min_ones <= min_ones + 4'd1;
                end
            end else begin
                sec_tens <= sec_tens + 4'd1;
            end
        end else begin
            sec_ones <= sec_ones + 4'd1;
        end
    end
end

endmodule",0.010791535000000074,493
N/A,N/A,-1,8.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 0;           // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b01011001) begin // 59 seconds
                ss <= 8'b00000000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b01011001) begin // 59 minutes
                    mm <= 8'b00000000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b00010010) begin // 12 hours
                        hh <= 8'b00000001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b00001001) begin // 09 hours
                        hh <= 8'b00010000; // Increment to 10
                    end else if (hh == 8'b00010001) begin // 11 hours
                        hh <= 8'b00010010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else if (mm[3:0] == 4'b1001) begin // x9 minutes
                    mm <= {mm[7:4] + 1, 4'b0000}; // Increment tens place
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else if (ss[3:0] == 4'b1001) begin // x9 seconds
                ss <= {ss[7:4] + 1, 4'b0000}; // Increment tens place
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.010597791999999995,465
N/A,N/A,-0.1,9.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0] hh_tens, hh_ones, mm_tens, mm_ones, ss_tens, ss_ones;
    reg pm_reg;

    assign hh = {hh_tens, hh_ones};
    assign mm = {mm_tens, mm_ones};
    assign ss = {ss_tens, ss_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_tens <= 4'd1;
            hh_ones <= 4'd2;
            mm_tens <= 4'd0;
            mm_ones <= 4'd0;
            ss_tens <= 4'd0;
            ss_ones <= 4'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_ones == 4'd9) begin
                ss_ones <= 4'd0;
                if (ss_tens == 4'd5) begin
                    ss_tens <= 4'd0;
                    // Increment minutes
                    if (mm_ones == 4'd9) begin
                        mm_ones <= 4'd0;
                        if (mm_tens == 4'd5) begin
                            mm_tens <= 4'd0;
                            // Increment hours
                            if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                                hh_ones <= 4'd1;
                                hh_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end else if (hh_ones == 4'd9) begin
                                hh_ones <= 4'd0;
                                hh_tens <= hh_tens + 4'd1;
                            end else begin
                                hh_ones <= hh_ones + 4'd1;
                            end
                        end else begin
                            mm_tens <= mm_tens + 4'd1;
                        end
                    end else begin
                        mm_ones <= mm_ones + 4'd1;
                    end
                end else begin
                    ss_tens <= ss_tens + 4'd1;
                end
            end else begin
                ss_ones <= ss_ones + 4'd1;
            end
        end
    end
endmodule",0.010750888000000014,524
N/A,N/A,-0.1,10.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12 in BCD
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 8'h01;
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

endmodule",0.010521605999999739,301
N/A,N/A,-1,11.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[[    reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh_reg <= hh_reg + 8'b0000_0001; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 8'b0000_0001; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 8'b0000_0001; // Increment seconds
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",0.010625019999999985,472
N/A,N/A,-1,12.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.015505635999999878,499
N/A,N/A,-0.1,13.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.010971576999999844,299
N/A,N/A,-1,14.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //non reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Reset hours to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",0.010710490000000128,438
N/A,N/A,-1,15.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 0;           // AM
        end else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b00010010) begin // 12 hours
                                hh <= 8'b00000001; // 01 hour
                                pm <= ~pm; // Toggle AM/PM
                            end else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.010678244999999809,473
N/A,N/A,-0.1,16.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0] hh_tens, hh_ones, mm_tens, mm_ones, ss_tens, ss_ones;
reg pm_reg;

assign hh = {hh_tens, hh_ones};
assign mm = {mm_tens, mm_ones};
assign ss = {ss_tens, ss_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_tens <= 4'd1;
        hh_ones <= 4'd2;
        mm_tens <= 4'd0;
        mm_ones <= 4'd0;
        ss_tens <= 4'd0;
        ss_ones <= 4'd0;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            hh_tens <= 4'd0;
                            pm_reg <= ~pm_reg; // Toggle AM/PM
                        end else if (hh_ones == 4'd9) begin
                            hh_ones <= 4'd0;
                            hh_tens <= hh_tens + 4'd1;
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule",0.011036127999999756,515
N/A,N/A,-0.1,17.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.010867431999999955,298
N/A,N/A,-1,18.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.010673983999999859,365
N/A,N/A,-1,19.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 ss_ones, ss_tens, mm_ones, mm_tens, hh_ones, hh_tens;
reg pm_reg;

assign ss = {ss_tens, ss_ones};
assign mm = {mm_tens, mm_ones};
assign hh = {hh_tens, hh_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        ss_ones <= 4'd0;
        ss_tens <= 4'd0;
        mm_ones <= 4'd0;
        mm_tens <= 4'd0;
        hh_ones <= 4'd2;
        hh_tens <= 4'd1;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            hh_tens <= 4'd0;
                            pm_reg <= ~pm_reg; // Toggle AM/PM
                        end else if (hh_ones == 4'd9) begin
                            hh_ones <= 4'd0;
                            hh_tens <= hh_tens + 4'd1;
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule",0.011085935999999741,513
N/A,N/A,-0.1,20.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011243067000000107,288
N/A,N/A,-0.1,21.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //begin
    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",0.011335262000000235,283
N/A,N/A,-1,22.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //reg [reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011282031999999997,284
N/A,N/A,-1,23.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[[7:0] hh_reg;
reg [7:0] mm_reg;
reg [7:0] ss_reg;
reg pm_reg;

assign hh = hh_reg;
assign mm = mm_reg;
assign ss = ss_reg;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        hh_reg <= 8'b0001_0010; // 12 in BCD
        mm_reg <= 8'b0000_0000; // 00 in BCD
        ss_reg <= 8'b0000_0000; // 00 in BCD
        pm_reg <= 1'b0;         // AM
    end else if (ena) begin
        if (ss_reg == 8'b0101_1001) begin // 59 in BCD
            ss_reg <= 8'b0000_0000; // Reset seconds to 00
            if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                mm_reg <= 8'b0000_0000; // Reset minutes to 00
                if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                    hh_reg <= 8'b0000_0001; // Set hours to 01
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                    hh_reg <= 8'b0001_0010; // Set hours to 12
                end else begin
                    hh_reg <= hh_reg + 8'b0000_0001; // Increment hours
                end
            end else begin
                mm_reg <= mm_reg + 8'b0000_0001; // Increment minutes
            end
        end else begin
            ss_reg <= ss_reg + 8'b0000_0001; // Increment seconds
        end
    end
end

endmodule",0.01091000200000014,431
N/A,N/A,-0.1,24.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    // Assign outputs
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",0.01107390499999994,441
N/A,N/A,-0.1,25.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
    reg pm_reg;

    assign ss = {sec_tens, sec_ones};
    assign mm = {min_tens, min_ones};
    assign hh = {hour_tens, hour_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec_ones <= 4'd0;
            sec_tens <= 4'd0;
            min_ones <= 4'd0;
            min_tens <= 4'd0;
            hour_ones <= 4'd2;
            hour_tens <= 4'd1;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (sec_ones == 4'd9) begin
                sec_ones <= 4'd0;
                if (sec_tens == 4'd5) begin
                    sec_tens <= 4'd0;
                    // Increment minutes
                    if (min_ones == 4'd9) begin
                        min_ones <= 4'd0;
                        if (min_tens == 4'd5) begin
                            min_tens <= 4'd0;
                            // Increment hours
                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                                hour_ones <= 4'd1;
                                if (hour_tens == 4'd1) begin
                                    hour_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end
                            end else begin
                                hour_ones <= hour_ones + 4'd1;
                            end
                        end else begin
                            min_tens <= min_tens + 4'd1;
                        end
                    end else begin
                        min_ones <= min_ones + 4'd1;
                    end
                end else begin
                    sec_tens <= sec_tens + 4'd1;
                end
            end else begin
                sec_ones <= sec_ones + 4'd1;
            end
        end
    end
endmodule",0.011352489000000077,492
N/A,N/A,-0.1,26.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds;
reg [7:0] minutes;
reg [7:0] hours;
reg pm_reg;

assign ss = seconds;
assign mm = minutes;
assign hh = hours;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        seconds <= 8'h00;
        minutes <= 8'h00;
        hours <= 8'h12;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (seconds == 8'h59) begin
            seconds <= 8'h00;
            // Increment minutes
            if (minutes == 8'h59) begin
                minutes <= 8'h00;
                // Increment hours
                if (hours == 8'h12) begin
                    hours <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hours == 8'h11) begin
                    hours <= 8'h12;
                end else begin
                    hours <= hours + 1;
                end
            end else begin
                minutes <= minutes + 1;
            end
        end else begin
            seconds <= seconds + 1;
        end
    end
end

endmodule",0.011126221000000047,283
N/A,N/A,-0.1,27.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //non-blocking assignments for sequential logic
    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.01145550499999981,418
N/A,N/A,-1,28.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 0;           // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b01011001) begin // 59 seconds
                ss <= 8'b00000000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b01011001) begin // 59 minutes
                    mm <= 8'b00000000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b00010010) begin // 12 hours
                        hh <= 8'b00000001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b00001001) begin // 09 hours
                        hh <= 8'b00010000; // Increment to 10
                    end else if (hh == 8'b00010001) begin // 11 hours
                        hh <= 8'b00010010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.011097985999999782,364
N/A,N/A,-1,29.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh[3:0] <= hh[3:0] + 1; // Increment units digit
                        if (hh[3:0] == 4'b1001) begin // If units digit is 9
                            hh[3:0] <= 4'b0000; // Reset units digit
                            hh[7:4] <= hh[7:4] + 1; // Increment tens digit
                        end
                    end
                end else begin
                    mm[3:0] <= mm[3:0] + 1; // Increment units digit
                    if (mm[3:0] == 4'b1001) begin // If units digit is 9
                        mm[3:0] <= 4'b0000; // Reset units digit
                        mm[7:4] <= mm[7:4] + 1; // Increment tens digit
                    end
                end
            end else begin
                ss[3:0] <= ss[3:0] + 1; // Increment units digit
                if (ss[3:0] == 4'b1001) begin // If units digit is 9
                    ss[3:0] <= 4'b0000; // Reset units digit
                    ss[7:4] <= ss[7:4] + 1; // Increment tens digit
                end
            end
        end
    end
endmodule",0.010671959000000175,608
N/A,N/A,-1,30.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 0;           // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                if (hh[7:4] == 4'b0001) begin
                                    hh[7:4] <= 4'b0000;
                                    // Toggle AM/PM
                                    pm <= ~pm;
                                end
                                else begin
                                    hh[7:4] <= hh[7:4] + 1;
                                end
                            end
                            else if (hh == 8'b00010010) begin
                                hh <= 8'b00000001; // 12 -> 01
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.011235445000000066,527
N/A,N/A,-1,31.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[ [3:0] hh_ones, hh_tens, mm_ones, mm_tens, ss_ones, ss_tens;
reg pm_reg;

assign hh = {hh_tens, hh_ones};
assign mm = {mm_tens, mm_ones};
assign ss = {ss_tens, ss_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_ones <= 4'd2;
        hh_tens <= 4'd1;
        mm_ones <= 4'd0;
        mm_tens <= 4'd0;
        ss_ones <= 4'd0;
        ss_tens <= 4'd0;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            hh_tens <= 4'd0;
                            pm_reg <= ~pm_reg; // Toggle AM/PM
                        end else if (hh_ones == 4'd9) begin
                            hh_ones <= 4'd0;
                            hh_tens <= hh_tens + 4'd1;
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule",0.01070769699999996,516
N/A,N/A,-1,32.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.011262279999999958,486
N/A,N/A,-1,33.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.010670725999999853,292
N/A,N/A,-1,34.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.011120986000000332,490
N/A,N/A,-1,35.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 hh_tens, h_units;
reg [3:0] m_tens, m_units;
reg [3:0] s_tens, s_units;
reg pm_reg;

assign hh = {h_tens, h_units};
assign mm = {m_tens, m_units};
assign ss = {s_tens, s_units};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        h_tens <= 4'd1;
        h_units <= 4'd2;
        m_tens <= 4'd0;
        m_units <= 4'd0;
        s_tens <= 4'd0;
        s_units <= 4'd0;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (s_units == 4'd9) begin
            s_units <= 4'd0;
            if (s_tens == 4'd5) begin
                s_tens <= 4'd0;
                // Increment minutes
                if (m_units == 4'd9) begin
                    m_units <= 4'd0;
                    if (m_tens == 4'd5) begin
                        m_tens <= 4'd0;
                        // Increment hours
                        if (h_units == 4'd9 || (h_tens == 4'd1 && h_units == 4'd2)) begin
                            h_units <= 4'd1;
                            if (h_tens == 4'd1 && h_units == 4'd2) begin
                                h_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                        end else begin
                            h_units <= h_units + 4'd1;
                        end
                    end else begin
                        m_tens <= m_tens + 4'd1;
                    end
                end else begin
                    m_units <= m_units + 4'd1;
                end
            end else begin
                s_tens <= s_tens + 4'd1;
            end
        end else begin
            s_units <= s_units + 4'd1;
        end
    end
end

endmodule",0.010982605000000145,494
N/A,N/A,-0.1,36.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //
   reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.01123289099999969,417
N/A,N/A,-1,37.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.011115655999999863,502
N/A,N/A,-1,38.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 hh_tens, hh_ones;
reg [3:0] mm_tens, mm_ones;
reg [3:0] ss_tens, ss_ones;
reg pm_reg;

assign hh = {hh_tens, hh_ones};
assign mm = {mm_tens, mm_ones};
assign ss = {ss_tens, ss_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_tens <= 4'd1;
        hh_ones <= 4'd2;
        mm_tens <= 4'd0;
        mm_ones <= 4'd0;
        ss_tens <= 4'd0;
        ss_ones <= 4'd0;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            hh_tens <= 4'd0;
                            pm_reg <= ~pm_reg; // Toggle AM/PM
                        end else if (hh_ones == 4'd9) begin
                            hh_ones <= 4'd0;
                            hh_tens <= hh_tens + 4'd1;
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule",0.011498294000000353,530
N/A,N/A,-1,39.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    // Assign outputs
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",0.011352151999999727,437
N/A,N/A,-1,40.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //reg [[reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.01128916000000002,419
N/A,N/A,-1,41.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

`timescale 1ns / 1ps

    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",0.011288362000000163,420
N/A,N/A,-1,42.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.01140205599999966,505
N/A,N/A,-0.1,43.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //begin   
reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011228573999999991,380
N/A,N/A,-1,44.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[[7:0] hh_reg;
reg [7:0] mm_reg;
reg [7:0] ss_reg;
reg pm_reg;

assign hh = hh_reg;
assign mm = mm_reg;
assign ss = ss_reg;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        hh_reg <= 8'b0001_0010; // 12 in BCD
        mm_reg <= 8'b0000_0000; // 00 in BCD
        ss_reg <= 8'b0000_0000; // 00 in BCD
        pm_reg <= 1'b0;         // AM
    end else if (ena) begin
        // Increment seconds
        if (ss_reg == 8'b0101_1001) begin // 59 in BCD
            ss_reg <= 8'b0000_0000; // Reset to 00
            // Increment minutes
            if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                mm_reg <= 8'b0000_0000; // Reset to 00
                // Increment hours
                if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                    hh_reg <= 8'b0000_0001; // Reset to 01
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                    hh_reg <= 8'b0001_0010; // Increment to 12
                end else begin
                    hh_reg <= hh_reg + 1; // Increment hours
                end
            end else begin
                mm_reg <= mm_reg + 1; // Increment minutes
            end
        end else begin
            ss_reg <= ss_reg + 1; // Increment seconds
        end
    end
end

endmodule",0.01136826599999985,429
N/A,N/A,-1,45.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.01135044900000004,364
N/A,N/A,-0.1,46.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //begin

    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",0.010948726999999714,400
N/A,N/A,-0.1,47.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.01111079600000009,299
N/A,N/A,-1,48.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 hh[0], hh1;
reg [3:0 mm0, mm1;
reg [3:0 ss0, ss1;
reg pm_reg;

assign hh = {hh1, hh0};
assign mm = {mm1, mm0};
assign ss = {ss1, ss0};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh0 <= 4'd2;
        hh1 <= 4'd1;
        mm0 <= 4'd0;
        mm1 <= 4'd0;
        ss0 <= 4'd0;
        ss1 <= 4'd0;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss0 == 4'd9) begin
            ss0 <= 4'd0;
            if (ss1 == 4'd5) begin
                ss1 <= 4'd0;
                // Increment minutes
                if (mm0 == 4'd9) begin
                    mm0 <= 4'd0;
                    if (mm1 == 4'd5) begin
                        mm1 <= 4'd0;
                        // Increment hours
                        if (hh0 == 4'd9 || (hh1 == 4'd1 && hh0 == 4'd2)) begin
                            hh0 <= 4'd1;
                            hh1 <= (hh1 == 4'd1) ? 4'd0 : hh1 + 4'd1;
                            pm_reg <= ~pm_reg;
                        end else begin
                            hh0 <= hh0 + 4'd1;
                        end
                    end else begin
                        mm1 <= mm1 + 4'd1;
                    end
                end else begin
                    mm0 <= mm0 + 4'd1;
                end
            end else begin
                ss1 <= ss1 + 4'd1;
            end
        end else begin
            ss0 <= ss0 + 4'd1;
        end
    end
end

endmodule",0.012040687000000272,453
N/A,N/A,-1,49.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0]    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule",0.011549331000000329,413
N/A,N/A,-1,50.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.01154757499999981,504
N/A,N/A,-1,51.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0 ss_reg, mm_reg, hh_reg;
reg pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset the clock to 12:00:00 AM
        ss_reg <= 8'h00;
        mm_reg <= 8'h00;
        hh_reg <= 8'h12;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_reg == 8'h59) begin
            ss_reg <= 8'h00;
            // Increment minutes
            if (mm_reg == 8'h59) begin
                mm_reg <= 8'h00;
                // Increment hours
                if (hh_reg == 8'h12) begin
                    hh_reg <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'h11) begin
                    hh_reg <= 8'h12;
                end else begin
                    hh_reg <= hh_reg + 1;
                end
            end else begin
                mm_reg <= mm_reg + 1;
            end
        end else begin
            ss_reg <= ss_reg + 1;
        end
    end
end

assign ss = ss_reg;
assign mm = mm_reg;
assign hh = hh_reg;
assign pm = pm_reg;

endmodule",0.01130984299999982,294
N/A,N/A,-1,52.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //non-blockreg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011185746999999857,417
N/A,N/A,-1,53.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or negedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0;            // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.011786370000000268,508
N/A,N/A,-1,54.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end
                    else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end
                    else begin
                        hh <= hh + 1; // Increment hours
                    end
                end
                else begin
                    mm <= mm + 1; // Increment minutes
                end
            end
            else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end

endmodule",0.011380618000000009,375
N/A,N/A,-0.1,55.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] hh_reg;
    reg[7:0] mm_reg;
    reg[7:0] ss_reg;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Reset hours to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end
endmodule",0.011570654000000236,453
N/A,N/A,-1,56.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[ [3:0] hh_tens, hh_ones, mm_tens, mm_ones, ss_tens, ss_ones;
reg pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_tens <= 1;
        hh_ones <= 2;
        mm_tens <= 0;
        mm_ones <= 0;
        ss_tens <= 0;
        ss_ones <= 0;
        pm_reg <= 0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 9) begin
            ss_ones <= 0;
            if (ss_tens == 5) begin
                ss_tens <= 0;
                // Increment minutes
                if (mm_ones == 9) begin
                    mm_ones <= 0;
                    if (mm_tens == 5) begin
                        mm_tens <= 0;
                        // Increment hours
                        if (hh_ones == 9) begin
                            hh_ones <= 0;
                            if (hh_tens == 1) begin
                                hh_tens <= 0;
                                hh_ones <= 1;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end else begin
                                hh_tens <= 1;
                                hh_ones <= 0;
                            end
                        end else if (hh_ones == 2 && hh_tens == 1) begin
                            hh_ones <= 1;
                            hh_tens <= 0;
                            pm_reg <= ~pm_reg; // Toggle AM/PM
                        end else begin
                            hh_ones <= hh_ones + 1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 1;
                    end
                end else begin
                    mm_ones <= mm_ones + 1;
                end
            end else begin
                ss_tens <= ss_tens + 1;
            end
        end else begin
            ss_ones <= ss_ones + 1;
        end
    end
end

assign hh = {hh_tens, hh_ones};
assign mm = {mm_tens, mm_ones};
assign ss = {ss_tens, ss_ones};
assign pm = pm_reg;

endmodule",0.011737172000000129,505
N/A,N/A,-0.1,57.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //////
    reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12; // 12 in BCD
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",0.01122511500000023,286
N/A,N/A,-1,58.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end

endmodule",0.011476006000000094,364
N/A,N/A,-1,59.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //reg [[7reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.012000625999999848,303
N/A,N/A,-1,60.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 hh[0:1];  // Two BCD digits for hours
reg [3:0 mm[0:1];  // Two BCD digits for minutes
reg [3:0 ss[0:1];  // Two BCD digits for seconds
reg pm_reg;  // Register to hold AM/PM state

assign hh = {hh[1], hh[0]};
assign mm = {mm[1], mm[0]};
assign ss = {ss[1], ss[0]};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh[1] <= 4'd1;
        hh[0] <= 4'd2;
        mm[1] <= 4'd0;
        mm[0] <= 4'd0;
        ss[1] <= 4'd0;
        ss[0] <= 4'd0;
        pm_reg <= 1'b0;  // AM
    end else if (ena) begin
        // Increment seconds
        if (ss[0] == 4'd9) begin
            ss[0] <= 4'd0;
            if (ss[1] == 4'd5) begin
                ss[1] <= 4'd0;
                // Increment minutes
                if (mm[0] == 4'd9) begin
                    mm[0] <= 4'd0;
                    if (mm[1] == 4'd5) begin
                        mm[1] <= 4'd0;
                        // Increment hours
                        if (hh[0] == 4'd9 || (hh[1] == 4'd1 && hh[0] == 4'd2)) begin
                            hh[0] <= 4'd1;
                            if (hh[1] == 4'd1) begin
                                hh[1] <= 4'd0;
                                pm_reg <= ~pm_reg;  // Toggle AM/PM
                            end else begin
                                hh[1] <= hh[1] + 4'd1;
                            end
                        end else begin
                            hh[0] <= hh[0] + 4'd1;
                        end
                    end else begin
                        mm[1] <= mm[1] + 4'd1;
                    end
                end else begin
                    mm[0] <= mm[0] + 4'd1;
                end
            end else begin
                ss[1] <= ss[1] + 4'd1;
            end
        end else begin
            ss[0] <= ss[0] + 4'd1;
        end
    end
end

endmodule",0.01143034399999987,585
N/A,N/A,-0.1,61.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //begin   

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011684729000000171,380
N/A,N/A,-1,62.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or negedge reset) begin
        if (!reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 0;           // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b01011001) begin // 59 seconds
                ss <= 8'b00000000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b01011001) begin // 59 minutes
                    mm <= 8'b00000000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b00010010) begin // 12 hours
                        hh <= 8'b00000001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b00001001) begin // 09 hours
                        hh <= 8'b00010000; // Increment to 10
                    end else if (hh == 8'b00010001) begin // 11 hours
                        hh <= 8'b00010010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else if (mm[3:0] == 4'b1001) begin // x9 minutes
                    mm <= {mm[7:4] + 1, 4'b0000}; // Increment tens place
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else if (ss[3:0] == 4'b1001) begin // x9 seconds
                ss <= {ss[7:4] + 1, 4'b0000}; // Increment tens place
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end

endmodule",0.011953460000000415,459
N/A,N/A,-0.1,63.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[7:0] hh_reg, mm_reg, ss_reg;
reg pm_reg;

assign hh = hh_reg;
assign mm = mm_reg;
assign ss = ss_reg;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_reg <= 8'b0001_0010; // 12 in BCD
        mm_reg <= 8'b0000_0000; // 00 in BCD
        ss_reg <= 8'b0000_0000; // 00 in BCD
        pm_reg <= 1'b0;         // AM
    end else if (ena) begin
        // Increment seconds
        if (ss_reg == 8'b0101_1001) begin // 59 in BCD
            ss_reg <= 8'b0000_0000; // Reset seconds to 00
            // Increment minutes
            if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                mm_reg <= 8'b0000_0000; // Reset minutes to 00
                // Increment hours
                if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                    hh_reg <= 8'b0000_0001; // Reset hours to 01
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                    hh_reg <= 8'b0001_0010; // Increment to 12
                end else begin
                    hh_reg <= hh_reg + 1; // Increment hours
                end
            end else begin
                mm_reg <= mm_reg + 1; // Increment minutes
            end
        end else begin
            ss_reg <= ss_reg + 1; // Increment seconds
        end
    end
end

endmodule",0.011623508000000005,426
N/A,N/A,-1,64.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 hh   reg [7:0] hh;
   reg [7:0] mm;
   reg [7:0] ss;
   reg pm;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset the clock to 12:00:00 AM
           hh <= 8'b0001_0010; // 12 in BCD
           mm <= 8'b0000_0000; // 00 in BCD
           ss <= 8'b0000_0000; // 00 in BCD
           pm <= 0; // AM
       end else if (ena) begin
           // Increment seconds
           if (ss == 8'b0101_1001) begin // 59 in BCD
               ss <= 8'b0000_0000; // Reset seconds to 00
               // Increment minutes
               if (mm == 8'b0101_1001) begin // 59 in BCD
                   mm <= 8'b0000_0000; // Reset minutes to 00
                   // Increment hours
                   if (hh == 8'b0001_0010) begin // 12 in BCD
                       hh <= 8'b0000_0001; // Reset hours to 01
                       pm <= ~pm; // Toggle AM/PM
                   end else if (hh == 8'b0001_0001) begin // 11 in BCD
                       hh <= 8'b0001_0010; // Increment to 12
                   end else begin
                       hh[3:0] <= hh[3:0] + 1; // Increment lower BCD digit
                       if (hh[3:0] == 4'b1010) begin // If lower digit is 10
                           hh[3:0] <= 4'b0000; // Reset lower digit
                           hh[7:4] <= hh[7:4] + 1; // Increment upper digit
                       end
                   end
               end else begin
                   mm[3:0] <= mm[3:0] + 1; // Increment lower BCD digit
                   if (mm[3:0] == 4'b1010) begin // If lower digit is 10
                       mm[3:0] <= 4'b0000; // Reset lower digit
                       mm[7:4] <= mm[7:4] + 1; // Increment upper digit
                   end
               end
           end else begin
               ss[3:0] <= ss[3:0] + 1; // Increment lower BCD digit
               if (ss[3:0] == 4'b1010) begin // If lower digit is 10
                   ss[3:0] <= 4'b0000; // Reset lower digit
                   ss[7:4] <= ss[7:4] + 1; // Increment upper digit
               end
           end
       end
   end

endmodule",0.011658016999999798,648
N/A,N/A,-1,65.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //regreg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011205540999999819,380
N/A,N/A,-1,66.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@ (posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 0;           // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b01011001) begin // 59 seconds
                ss <= 8'b00000000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b01011001) begin // 59 minutes
                    mm <= 8'b00000000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b00010010) begin // 12 hours
                        hh <= 8'b00000001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b00001001) begin // 09 hours
                        hh <= 8'b00010000; // Increment to 10
                    end else if (hh == 8'b00010001) begin // 11 hours
                        hh <= 8'b00010010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.011479737000000156,365
N/A,N/A,-1,67.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 hh[]reg [3:0] hh_tens, hh_ones;
reg [3:0] mm_tens, mm_ones;
reg [3:0] ss_tens, ss_ones;
reg pm_reg;

assign hh = {hh_tens, hh_ones};
assign mm = {mm_tens, mm_ones};
assign ss = {ss_tens, ss_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        hh_tens <= 4'd1;
        hh_ones <= 4'd2;
        mm_tens <= 4'd0;
        mm_ones <= 4'd0;
        ss_tens <= 4'd0;
        ss_ones <= 4'd0;
        pm_reg <= 1'b0; // AM
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            if (hh_tens == 4'd1) begin
                                hh_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end else begin
                                hh_tens <= hh_tens + 4'd1;
                            end
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule",0.011552278999999999,522
N/A,N/A,-0.1,68.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //newline
    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011381627000000005,405
N/A,N/A,-0.1,69.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011267907000000132,301
N/A,N/A,-0.1,70.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0] sec_ones;
    reg [3:0] sec_tens;
    reg [3:0] min_ones;
    reg [3:0] min_tens;
    reg [3:0] hour_ones;
    reg [3:0] hour_tens;
    reg pm_reg;

    assign ss = {sec_tens, sec_ones};
    assign mm = {min_tens, min_ones};
    assign hh = {hour_tens, hour_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec_ones <= 4'd0;
            sec_tens <= 4'd0;
            min_ones <= 4'd0;
            min_tens <= 4'd0;
            hour_ones <= 4'd2;
            hour_tens <= 4'd1;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (sec_ones == 4'd9) begin
                sec_ones <= 4'd0;
                if (sec_tens == 4'd5) begin
                    sec_tens <= 4'd0;
                    // Increment minutes
                    if (min_ones == 4'd9) begin
                        min_ones <= 4'd0;
                        if (min_tens == 4'd5) begin
                            min_tens <= 4'd0;
                            // Increment hours
                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                                hour_ones <= 4'd1;
                                if (hour_tens == 4'd1) begin
                                    hour_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end
                            end else begin
                                hour_ones <= hour_ones + 4'd1;
                            end
                        end else begin
                            min_tens <= min_tens + 4'd1;
                        end
                    end else begin
                        min_ones <= min_ones + 4'd1;
                    end
                end else begin
                    sec_tens <= sec_tens + 4'd1;
                end
            end else begin
                sec_ones <= sec_ones + 4'd1;
            end
        end
    end
endmodule",0.011533158999999849,525
N/A,N/A,-1,71.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 hours, minutes, seconds;
reg pm_reg;

// Assign outputs
assign hh = {4'b0000, hours};
assign mm = {4'b0000, minutes};
assign ss = {4'b0000, seconds};
assign pm = pm_reg;

// Clock logic
always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hours <= 4'd12;
        minutes <= 4'd0;
        seconds <= 4'd0;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (seconds == 4'd59) begin
            seconds <= 4'd0;
            // Increment minutes
            if (minutes == 4'd59) begin
                minutes <= 4'd0;
                // Increment hours
                if (hours == 4'd12) begin
                    hours <= 4'd1;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hours == 4'd11) begin
                    hours <= 4'd12;
                end else begin
                    hours <= hours + 4'd1;
                end
            end else begin
                minutes <= minutes + 4'd1;
            end
        end else begin
            seconds <= seconds + 4'd1;
        end
    end
end

endmodule",0.011560640000000344,298
N/A,N/A,-1,72.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or negedge reset) begin
        if (!reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 0;           // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b01011001) begin // 59 seconds
                ss <= 8'b00000000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b01011001) begin // 59 minutes
                    mm <= 8'b00000000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b00010010) begin // 12 hours
                        hh <= 8'b00000001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b00001001) begin // 09 hours
                        hh <= 8'b00010000; // Increment to 10
                    end else if (hh == 8'b00010001) begin // 11 hours
                        hh <= 8'b00010010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else if (mm[3:0] == 4'b1001) begin // x9 minutes
                    mm <= {mm[7:4] + 1, 4'b0000}; // Increment tens place
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else if (ss[3:0] == 4'b1001) begin // x9 seconds
                ss <= {ss[7:4] + 1, 4'b0000}; // Increment tens place
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.01200512900000028,458
N/A,N/A,-1,73.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //
   ``
    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",0.01115201499999996,390
N/A,N/A,-1,74.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //assign ssreg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.01085764900000008,294
N/A,N/A,-1,75.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[[7:0] hh_reg, mm_reg, ss_reg;
reg pm_reg;

assign hh = hh_reg;
assign mm = mm_reg;
assign ss = ss_reg;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_reg <= 8'b0001_0010; // 12 in BCD
        mm_reg <= 8'b0000_0000; // 00 in BCD
        ss_reg <= 8'b0000_0000; // 00 in BCD
        pm_reg <= 1'b0;         // AM
    end else if (ena) begin
        // Increment seconds
        if (ss_reg == 8'b0101_1001) begin // 59 in BCD
            ss_reg <= 8'b0000_0000; // Reset seconds to 00
            // Increment minutes
            if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                mm_reg <= 8'b0000_0000; // Reset minutes to 00
                // Increment hours
                if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                    hh_reg <= 8'b0000_0001; // Reset hours to 01
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                    hh_reg <= 8'b0001_0010; // Increment to 12
                end else begin
                    hh_reg <= hh_reg + 1; // Increment hours
                end
            end else begin
                mm_reg <= mm_reg + 1; // Increment minutes
            end
        end else begin
            ss_reg <= ss_reg + 1; // Increment seconds
        end
    end
end

endmodule",0.011269193999999594,431
N/A,N/A,-1,76.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk    begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 1'b0;        // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b00010010) begin // 12 hours
                                hh <= 8'b00000001; // 01 hour
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.012638235999999914,482
N/A,N/A,-1,77.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0]hhreg [7:0] mm;
   reg [7:0] ss;
   reg pm_reg;

   assign hh = hh_reg;
   assign mm = mm_reg;
   assign ss = ss_reg;
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_reg <= 8'b0001_0010; // 12 in BCD
           mm_reg <= 8'b0000_0000; // 00 in BCD
           ss_reg <= 8'b0000_0000; // 00 in BCD
           pm_reg <= 1'b0;         // AM
       end else if (ena) begin
           if (ss_reg == 8'b0101_1001) begin // 59 in BCD
               ss_reg <= 8'b0000_0000;
               if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                   mm_reg <= 8'b0000_0000;
                   if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                       hh_reg <= 8'b0000_0001; // 01 in BCD
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                       hh_reg <= 8'b0001_0010; // 12 in BCD
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end
endmodule",0.011664170999999612,394
N/A,N/A,-1,78.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 0;           // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b01011001) begin // 59 seconds
                ss <= 8'b00000000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b01011001) begin // 59 minutes
                    mm <= 8'b00000000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b00010010) begin // 12 hours
                        hh <= 8'b00000001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b00001001) begin // 09 hours
                        hh <= 8'b00010000; // Increment to 10
                    end else if (hh == 8'b00010001) begin // 11 hours
                        hh <= 8'b00010010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else if (mm[3:0] == 4'b1001) begin // x9 minutes
                    mm <= {mm[7:4] + 1, 4'b0000}; // Increment tens place
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else if (ss[3:0] == 4'b1001) begin // x9 seconds
                ss <= {ss[7:4] + 1, 4'b0000}; // Increment tens place
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end

endmodule",0.010824104000000112,462
N/A,N/A,-1,79.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0 ss_reg;
reg [7:0] mm_reg;
reg [7:0] hh_reg;
reg pm_reg;

assign ss = ss_reg;
assign mm = mm_reg;
assign hh = hh_reg;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        ss_reg <= 8'h00;
        mm_reg <= 8'h00;
        hh_reg <= 8'h12;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_reg == 8'h59) begin
            ss_reg <= 8'h00;
            // Increment minutes
            if (mm_reg == 8'h59) begin
                mm_reg <= 8'h00;
                // Increment hours
                if (hh_reg == 8'h12) begin
                    hh_reg <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'h11) begin
                    hh_reg <= 8'h12;
                end else begin
                    hh_reg <= hh_reg + 1;
                end
            end else begin
                mm_reg <= mm_reg + 1;
            end
        end else begin
            ss_reg <= ss_reg + 1;
        end
    end
end

endmodule",0.011372352999999613,307
N/A,N/A,-1,80.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //non-blockingreg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12; // 12 in BCD
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.01113736799999998,280
N/A,N/A,-0.1,81.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@(posedge clk)
    reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Set to 12
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule",0.011850477000000303,404
N/A,N/A,-1,82.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss_reg, mm_reg, hh_reg;
   reg pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset the clock to 12:00:00 AM
           ss_reg <= 8'h00;
           mm_reg <= 8'h00;
           hh_reg <= 8'h12;
           pm_reg <= 1'b0;
       end else if (ena) begin
           // Increment seconds
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               // Increment minutes
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   // Increment hours
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 8'h01;
                   end
               end else begin
                   mm_reg <= mm_reg + 8'h01;
               end
           end else begin
               ss_reg <= ss_reg + 8'h01;
           end
       end
   end

   assign ss = ss_reg;
   assign mm = mm_reg;
   assign hh = hh_reg;
   assign pm = pm_reg;

endmodule",0.011449760999999725,307
N/A,N/A,-1,83.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 hh[](3:0) hh_tens, hh_ones;
reg [3:0] mm_tens, mm_ones;
reg [3:0] ss_tens, ss_ones;
reg pm_reg;

assign hh = {hh_tens, hh_ones};
assign mm = {mm_tens, mm_ones};
assign ss = {ss_tens, ss_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_tens <= 4'd1;
        hh_ones <= 4'd2;
        mm_tens <= 4'd0;
        mm_ones <= 4'd0;
        ss_tens <= 4'd0;
        ss_ones <= 4'd0;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            if (hh_tens == 4'd1) begin
                                hh_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end else begin
                                hh_tens <= hh_tens + 4'd1;
                            end
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule",0.011140957999999479,526
N/A,N/A,-1,84.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

`timescale 1ns / 1ps

    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Reset hours to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hours <= hours + 8'b0000_0001; // Increment hours
                    end
                end else begin
                    minutes <= minutes + 8'b0000_0001; // Increment minutes
                end
            end else begin
                seconds <= seconds + 8'b0000_0001; // Increment seconds
            end
        end
    end

endmodule",0.010948188000000414,454
N/A,N/A,-1,85.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or negedge reset)
    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011919020999999752,283
N/A,N/A,-0.1,86.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //begin   

       reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011596362000000582,374
N/A,N/A,-1,87.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 1'b0;        // AM
        end else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b00010010) begin // 12 hours
                                hh <= 8'b00000001; // 01 hour
                                pm <= ~pm; // Toggle AM/PM
                            end else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.011359969000000802,474
N/A,N/A,-1,88.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[ [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
reg pm_reg;

assign ss = {sec_tens, sec_ones};
assign mm = {min_tens, min_ones};
assign hh = {hour_tens, hour_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        sec_ones <= 4'd0;
        sec_tens <= 4'd0;
        min_ones <= 4'd0;
        min_tens <= 4'd0;
        hour_ones <= 4'd2;
        hour_tens <= 4'd1;
        pm_reg <= 1'b0; // AM
    end else if (ena) begin
        // Increment seconds
        if (sec_ones == 4'd9) begin
            sec_ones <= 4'd0;
            if (sec_tens == 4'd5) begin
                sec_tens <= 4'd0;
                // Increment minutes
                if (min_ones == 4'd9) begin
                    min_ones <= 4'd0;
                    if (min_tens == 4'd5) begin
                        min_tens <= 4'd0;
                        // Increment hours
                        if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                            hour_ones <= 4'd1;
                            if (hour_tens == 4'd1) begin
                                hour_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                        end else begin
                            hour_ones <= hour_ones + 4'd1;
                        end
                    end else begin
                        min_tens <= min_tens + 4'd1;
                    end
                end else begin
                    min_ones <= min_ones + 4'd1;
                end
            end else begin
                sec_tens <= sec_tens + 4'd1;
            end
        end else begin
            sec_ones <= sec_ones + 4'd1;
        end
    end
end

endmodule",0.011144904000000011,500
N/A,N/A,-1,89.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //reg [[7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Reset hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else if (mm_reg[3:0] == 4'b1001) begin // x9 in BCD
                    mm_reg <= {mm_reg[7:4] + 1, 4'b0000}; // Increment tens place
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else if (ss_reg[3:0] == 4'b1001) begin // x9 in BCD
                ss_reg <= {ss_reg[7:4] + 1, 4'b0000}; // Increment tens place
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    // Assign outputs
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",0.011727213000000347,553
N/A,N/A,-1,90.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0]hh;reg [7:0] mm;
    reg [7:0] ss;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh[3:0] <= hh[3:0] + 1; // Increment units digit
                        if (hh[3:0] == 4'b1001) begin // If units digit is 9
                            hh[3:0] <= 4'b0000; // Reset units digit
                            hh[7:4] <= hh[7:4] + 1; // Increment tens digit
                        end
                    end
                end else begin
                    mm[3:0] <= mm[3:0] + 1; // Increment units digit
                    if (mm[3:0] == 4'b1001) begin // If units digit is 9
                        mm[3:0] <= 4'b0000; // Reset units digit
                        mm[7:4] <= mm[7:4] + 1; // Increment tens digit
                    end
                end
            end else begin
                ss[3:0] <= ss[3:0] + 1; // Increment units digit
                if (ss[3:0] == 4'b1001) begin // If units digit is 9
                    ss[3:0] <= 4'b0000; // Reset units digit
                    ss[7:4] <= ss[7:4] + 1; // Increment tens digit
                end
            end
        end
    end
endmodule",0.011914189999999714,639
N/A,N/A,-1,91.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   reg [7:0 ss_reg, mm_reg, hh_reg;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss_reg <= 8'h00;
            mm_reg <= 8'h00;
            hh_reg <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end

    assign ss = ss_reg;
    assign mm = mm_reg;
    assign hh = hh_reg;
    assign pm = pm_reg;

endmodule",0.011106664999999794,295
N/A,N/A,-1,92.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 hh);[reg [3:0] hh_tens, hh_ones;
reg [3:0] mm_tens, mm_ones;
reg [3:0] ss_tens, ss_ones;
reg pm_reg;

assign hh = {hh_tens, hh_ones};
assign mm = {mm_tens, mm_ones};
assign ss = {ss_tens, ss_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_tens <= 4'd1;
        hh_ones <= 4'd2;
        mm_tens <= 4'd0;
        mm_ones <= 4'd0;
        ss_tens <= 4'd0;
        ss_ones <= 4'd0;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            if (hh_tens == 4'd1) begin
                                hh_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule",0.011346484999999795,514
N/A,N/A,-1,93.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end
                    else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end
                    else begin
                        hh <= hh + 1; // Increment hours
                    end
                end
                else begin
                    mm <= mm + 1; // Increment minutes
                end
            end
            else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.010791162000000298,375
N/A,N/A,-1,94.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@(posedge clkalways @(posedge clk) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'b00000000; // 00 seconds
            mm <= 8'b00000000; // 00 minutes
            hh <= 8'b00010010; // 12 hours
            pm <= 1'b0;        // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss == 8'b01011001) begin // 59 seconds
                ss <= 8'b00000000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b01011001) begin // 59 minutes
                    mm <= 8'b00000000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b00010010) begin // 12 hours
                        hh <= 8'b00000001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end
                    else if (hh == 8'b00001001) begin // 09 hours
                        hh <= 8'b00010000; // Increment to 10
                    end
                    else if (hh == 8'b00010001) begin // 11 hours
                        hh <= 8'b00010010; // Increment to 12
                    end
                    else begin
                        hh <= hh + 1; // Increment hours
                    end
                end
                else begin
                    mm <= mm + 1; // Increment minutes
                end
            end
            else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.011395328999999954,385
N/A,N/A,-0.1,95.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //begin
   reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011180828999999726,380
N/A,N/A,-1,96.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[[7:0] ss_reg, mm_reg, hh_reg;
reg pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset the clock to 12:00:00 AM
        ss_reg <= 8'h00;
        mm_reg <= 8'h00;
        hh_reg <= 8'h12;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_reg == 8'h59) begin
            ss_reg <= 8'h00;
            // Increment minutes
            if (mm_reg == 8'h59) begin
                mm_reg <= 8'h00;
                // Increment hours
                if (hh_reg == 8'h12) begin
                    hh_reg <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'h11) begin
                    hh_reg <= 8'h12;
                end else begin
                    hh_reg <= hh_reg + 1;
                end
            end else begin
                mm_reg <= mm_reg + 1;
            end
        end else begin
            ss_reg <= ss_reg + 1;
        end
    end
end

assign ss = ss_reg;
assign mm = mm_reg;
assign hh = hh_reg;
assign pm = pm_reg;

endmodule",0.011512406000000475,294
N/A,N/A,-1,97.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or negedge reset)

    if (!reset) begin
        // Reset the clock to 12:00:00 AM
        ss <= 8'b00000000; // 00 seconds
        mm <= 8'b00000000; // 00 minutes
        hh <= 8'b00010010; // 12 hours
        pm <= 1'b0;        // AM
    end else if (ena) begin
        // Increment seconds
        if (ss == 8'b01011001) begin // 59 seconds
            ss <= 8'b00000000; // Reset seconds to 00
            // Increment minutes
            if (mm == 8'b01011001) begin // 59 minutes
                mm <= 8'b00000000; // Reset minutes to 00
                // Increment hours
                if (hh == 8'b00010010) begin // 12 hours
                    hh <= 8'b00000001; // Reset hours to 01
                    pm <= ~pm; // Toggle AM/PM
                end else if (hh == 8'b00001001) begin // 09 hours
                    hh <= 8'b00010000; // Increment to 10
                end else if (hh == 8'b00010001) begin // 11 hours
                    hh <= 8'b00010010; // Increment to 12
                end else begin
                    hh <= hh + 1; // Increment hours
                end
            end else begin
                mm <= mm + 1; // Increment minutes
            end
        end else begin
            ss <= ss + 1; // Increment seconds
        end
    end
endmodule",0.011684075999999877,357
N/A,N/A,-1,98.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   always@(posedge clk or negedge reset) begin
        if (!reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule",0.011262888000000082,502
N/A,N/A,-1,99.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0] hh;reg [7:0] mm;
    reg [7:0] ss;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule",0.011583421000000094,397
N/A,N/A,-1,100.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0 ss;reg [7:0] mm;
reg [7:0] hh;
reg pm_reg;

assign ss = ss;
assign mm = mm;
assign hh = hh;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset the clock to 12:00:00 AM
        ss <= 8'h00;
        mm <= 8'h00;
        hh <= 8'h12;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss == 8'h59) begin
            ss <= 8'h00;
            // Increment minutes
            if (mm == 8'h59) begin
                mm <= 8'h00;
                // Increment hours
                if (hh == 8'h12) begin
                    hh <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh == 8'h11) begin
                    hh <= 8'h12;
                end else begin
                    hh <= hh + 1;
                end
            end else begin
                mm <= mm + 1;
            end
        end else begin
            ss <= ss + 1;
        end
    end
end

endmodule",0.011244564000000068,287
N/A,N/A,-1,101.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


   //always@(posedge clk)reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",0.011087939999999463,1155
