/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/miniconda3/envs/rltf/lib/python3.10/site-packages/bitsandbytes/libbitsandbytes_cpu.so: undefined symbol: cadam32bit_grad_fp32
[2024-10-24 16:58:58,272] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Using CPU
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_prompts/Hadd.v
Prompt str:  // Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

********-- EPISODE-1--************
ORIG MODILE:  top_module
--------MCTS-------
Initializing MCTS tree.
Initialize search (creating root node)

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

Tokens: ['   ', 'assign', '\\n', ';', '    \n']
Probs: [56.29, 9.78, 9.78, 4.62, 4.62]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
API response time: 0.846741 seconds
trimming text between  ```
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   // Sum is the XOR of the two inputs
    assign sum = a ^ b;
    
    // Carry-out is the AND of the two inputs
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  // Sum is the XOR of the two inputs
    assign sum = a ^ b;
    
    // Carry-out is the AND of the two inputs
    assign cout = a & b;
endmodule
Depth of rollout:  46
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [93.37793319 16.22377308 16.22377583  7.66399096  7.95673042]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  1
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
Tokens: ['\\n', 'assign', '\n', 'a', 'w']
Probs: [48.8, 38.01, 4.01, 2.43, 1.15]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  \n

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n
API response time: 0.508309 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
    assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      assign sum = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  2.0
Iteration TIME (sec):  0.012155454000000177
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [57.23207239 19.86998287 19.86998624  9.38643363  9.74496477]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [95.23879782 74.1808751   7.82597498  4.74242374  2.24435692]  taking action:  0  corresponding to token:  \n
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n
Tokens: ['\tassign', ' ', '   ', 'assign', ' assign']
Probs: [57.07, 20.99, 12.73, 4.68, 1.72]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  	assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign
API response time: 0.501212 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   sum = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  3.0
Iteration TIME (sec):  0.012040416000000054
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [44.08544652 22.94387992 22.94388381 10.83851996 11.25251607]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [58.37161459 90.85264634  9.58482273  5.80825916  2.74876462]  taking action:  1  corresponding to token:  assign
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign
Tokens: [' sum', 'sum', '<|end|>', '(sum', ' ']
Probs: [99.93, 0.04, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum
API response time: 0.590778 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
   assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  4.0
Iteration TIME (sec):  0.011982106000000048
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [36.98586901 25.65203759 25.65204193 12.11783371 12.58069543]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [67.39399977 52.50379982 11.06759996  6.70679998  3.17399999]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [111.37865146  40.96439275  24.84405525   9.13355684   3.3567773 ]  taking action:  0  corresponding to token:  	assign
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign
Tokens: [' sum', 'sum', '<|end|>', ' a', '(sum']
Probs: [95.5, 2.25, 1.06, 0.5, 0.18]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum
API response time: 0.729704 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  5.0
Iteration TIME (sec):  0.012690060999999808
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [32.42706492 28.10039926 28.10040402 13.27442174 13.78146135]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [50.26192046 58.69513104 12.37395293  7.49843033  3.54863987]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.95024858e+02 7.80645884e-02 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum
Tokens: [' =', '=', ' ', '=a', '`']
Probs: [99.91, 0.09, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum =
API response time: 0.494476 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a ^ b;
   assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  6.0
Iteration TIME (sec):  0.011768811000000046
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [29.19901946 30.35190019 30.35190533 14.3380142  14.88567957]  taking action:  2  corresponding to token:  \n
Adding child.
Leaf selection - depth:  1
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n
Tokens: ['\tassign', '   ', '\\t', 'assign', '\t']
Probs: [74.31, 21.29, 1.75, 1.36, 0.39]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  	assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign
API response time: 0.494292 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   sum = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  7.0
Iteration TIME (sec):  0.016563814999999593
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [31.20931107 32.44754616 16.27377583 15.32798193 15.91346084]  taking action:  1  corresponding to token:  assign
Adding child.
Leaf selection - depth:  1
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign
Tokens: [' sum', 'sum', '(sum', '`', '<|end|>']
Probs: [97.38, 1.39, 0.4, 0.4, 0.11]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum
API response time: 0.881209 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;
assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
assign cout = a & b;
endmodule
Depth of rollout:  15
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  8.0
Iteration TIME (sec):  0.01191205499999981
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [33.09741822 17.25790994 17.25791286 16.25777994 16.87877411]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [55.05281223 42.89501488 13.55498629  8.21411888  3.88734021]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [68.25521608 50.17092993 30.42762925 11.1862769   4.11119578]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [186.37920474   4.3911331    2.06871159   0.97580735   0.35129065]  taking action:  0  corresponding to token:   sum
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum
Tokens: [' =', '<|end|>', ' ', '=', ' \\<']
Probs: [97.01, 2.28, 0.51, 0.15, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum =
API response time: 0.478698 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  9.0
Iteration TIME (sec):  0.01214376599999989
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [29.91420089 18.18872973 18.1887328  17.13720477 17.79179009]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [44.61886892 46.32656988 14.64105855  8.87226242  4.19880732]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.19477847e+02 9.56092042e-02 2.39023011e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.94985826e+02 1.75645324e-01 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum =
Tokens: [' a', 'a', ' ', ' (', '<|end|>']
Probs: [99.81, 0.19, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a
API response time: 0.506548 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   ^ b;
   assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  10.0
Iteration TIME (sec):  0.012484205999999887
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [27.4613331  19.07406023 19.07406346 17.973652   18.66018688]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [47.69439891 37.16543755 15.65194997  9.48484749  4.48871383]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [52.57106649 57.9323998  35.13479988 12.91679996  4.74719998]  taking action:  1  corresponding to token:   
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n 
Tokens: [' ', 'assign', '\tassign', ' assign', '  ']
Probs: [45.73, 45.73, 3.75, 1.38, 1.08]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  
API response time: 0.609475 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
      assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      assign sum = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  21
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  11.0
Iteration TIME (sec):  0.012313155000000187
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [25.50314329 19.91998287 19.91998624 18.77286725 19.48992955]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [40.48639986 39.41534987 16.60139994 10.06019997  4.76099998]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [58.76837023 32.43519601 39.28190045 14.44142138  5.30753093]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [114.18348757   5.37801774   2.53364391   1.19511505   0.43024142]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.89326143e+02 4.44968154e+00 9.95323502e-01 2.92742206e-01
 1.95161471e-02]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum =
Tokens: [' a', 'a', '<|end|>', ' ', ' (']
Probs: [99.97, 0.02, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a
API response time: 0.687873 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  12.0
Iteration TIME (sec):  0.012472915999999667
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [23.89679519 20.73133388 20.73133738 19.53941974 20.28576183]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [35.57673767 41.54336984 17.49941206 10.60438187  5.01853463]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [9.20022664e+01 1.10400000e-01 2.75999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [119.45394496   0.21512071   0.           0.           0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [194.79066414   0.37080679   0.           0.           0.        ]  taking action:  0  corresponding to token:   a
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a
Tokens: [' ^', '^', ' ', 'endmodule', "'b"]
Probs: [93.99, 6.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   ^

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^
API response time: 0.532289 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   b;
   assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  13.0
Iteration TIME (sec):  0.01214269599999973
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.55043539 21.51203445 21.51203808 20.27701414 21.05152994]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [37.30912985 34.87391456 18.3535382  11.12196953  5.26348352]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [48.30337081 35.52620477 43.03116596 15.8197845   5.81410883]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [87.92666637  6.20999998  2.92559999  1.38        0.4968    ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.15988111e+02 5.44972464e+00 1.21901735e+00 3.58534516e-01
 2.39023011e-02]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [1.95102922e+02 3.90322942e-02 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a
Tokens: [' ^', '^', 'endmodule', ' \\xe2', ' ']
Probs: [98.2, 1.8, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   ^

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^
API response time: 0.500110 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   b;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  14.0
Iteration TIME (sec):  0.012732504999999783
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [21.40216684 22.26531621 22.26531997 20.98870366 21.79040367]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [145.02448905  41.54987716   3.41532574   2.654196     0.76112974]  taking action:  0  corresponding to token:  	assign
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign
Tokens: [' sum', ' a', 'sum', '(sum', ' b']
Probs: [98.76, 0.85, 0.19, 0.07, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum
API response time: 0.450169 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  15.0
Iteration TIME (sec):  0.01212639400000004
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.1010566  22.99387992 15.36258921 21.67703993 22.50503214]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [190.04824039   2.71274445   0.78064588   0.78064588   0.21467762]  taking action:  0  corresponding to token:   sum
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum
Tokens: [' =', '=', '<|end|>', '=a', ' ']
Probs: [98.89, 1.1, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum =
API response time: 0.492384 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;
assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a ^ b;
assign cout = a & b;
endmodule
Depth of rollout:  15
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  16.0
Iteration TIME (sec):  0.011908265000000195
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.77842653 15.83334007 15.83334274 22.34418132 23.19765616]  taking action:  4  corresponding to token:      

Adding child.
Leaf selection - depth:  1
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    

Tokens: ['   ', 'assign', '\tassign', ' ', '     ']
Probs: [99.62, 0.32, 0.04, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   
API response time: 1.134252 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum = a ^ b;
assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  assign sum = a ^ b;
assign cout = a & b;

endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  17.0
Iteration TIME (sec):  0.011756413000000077
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [23.43614997 16.29043975 16.2904425  22.99197289 11.98509563]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [33.4123512  36.42105853 19.16964545 11.61651832  5.49752924]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [7.71653439e+01 1.23430952e-01 3.08577380e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [91.98386635  0.2484      0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [119.33443345   0.45414372   0.           0.           0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [183.43226653  11.7292044    0.           0.           0.        ]  taking action:  0  corresponding to token:   ^
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^
Tokens: [' b', 'b', ' ', ' б', ' `']
Probs: [99.98, 0.02, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b
API response time: 0.823969 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;
   assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  18.0
Iteration TIME (sec):  0.012602843999999891
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.23154766 16.73500899 16.73501182 23.62200661 12.3121451 ]  taking action:  3  corresponding to token:  ;
Adding child.
Leaf selection - depth:  1
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;
ERROR: Logprobs or content is missing
Tokens: [' ', ' ', ' ', ' ', ' ']
Probs: [0.2, 0.2, 0.2, 0.2, 0.2]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
API response time: 0.775101 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;     // Sum is the XOR of the two input bits
    assign sum = a ^ b;
    
    // Carry-out is the AND of the two input bits
    assign cout = a & b;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: error: invalid module item.\n'
Rollout trimmed response:      // Sum is the XOR of the two input bits
    assign sum = a ^ b;
    
    // Carry-out is the AND of the two input bits
    assign cout = a & b;
endmodule
Depth of rollout:  45
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  19.0
Iteration TIME (sec):  0.010433864999999987
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.80668863 17.16802506 17.16802796 11.61783371 12.63069543]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [34.77317775 31.60414414 19.95239958 12.09085561  5.72200985]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [41.7540754  38.36868068 46.47897142 17.08732021  6.27995529]  taking action:  2  corresponding to token:     
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   
Tokens: ['assign', 'wire', '\tassign', ' ', '   ']
Probs: [98.79, 0.85, 0.12, 0.07, 0.05]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign
API response time: 0.634937 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   sum = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  20.0
Iteration TIME (sec):  0.011560178999999948
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [21.70564902 17.59034442 17.59034738 11.91708454 12.94137666]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [31.58477178 32.7940246  20.70558358 12.54727384  5.93801025]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [6.76385925e+01 1.35211833e-01 3.38029583e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [77.14991505  0.27771964  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [91.89186635  0.5244      0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [112.37886384  14.36528294   0.           0.           0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [1.95122439e+02 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b
Tokens: [';\n', ';', ';\\', ';\r\n', ' ;\n']
Probs: [99.81, 0.19, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;

API response time: 0.833599 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  21.0
Iteration TIME (sec):  0.012392166999999787
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [20.73997122 18.00272267 18.0027257  12.20929121 13.24474468]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [32.6902737  29.10752759 21.43231517 12.98766231  6.14642455]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [44.63146058 41.01439275 24.89405525 18.26711368  6.7135546 ]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [73.74784944  6.94299105  3.27092023  1.5428869   0.55543928]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [8.93158664e+01 6.29279998e+00 1.40760000e+00 4.13999999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [1.19525652e+02 4.78046021e-02 2.39023011e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [191.64856446   3.51290648   0.           0.           0.        ]  taking action:  0  corresponding to token:   ^
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^
Tokens: [' b', 'b', ' б', '\\n', ' ']
Probs: [99.99, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b
API response time: 0.809287 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  22.0
Iteration TIME (sec):  0.012529642000000063
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [19.88499864 18.40583044 18.40583354 12.49492893 13.54129282]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [30.01955546 30.05931418 22.13519992 13.41359995  6.34799998]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [6.08930167e+01 1.46045472e-01 3.65113680e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [67.62507134  0.30422663  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [77.0727707   0.58629702  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [86.53746637 16.58759994  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [1.19537603e+02 4.78046021e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [194.79066414   0.37080679   0.           0.           0.        ]  taking action:  0  corresponding to token:  ;

Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;

Tokens: ['  ', ';', '   ', '   \n', '\\n']
Probs: [99.51, 0.17, 0.17, 0.06, 0.04]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:    

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
  
API response time: 0.820010 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  23.0
Iteration TIME (sec):  0.012593772000000225
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [19.12180291 18.80026618 18.80026935 12.77442174 13.83146135]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [30.94071382 27.12156965 22.81644183 13.82642236  6.54336861]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [39.4616332  43.49929985 26.40109991 19.37519993  7.12079998]  taking action:  1  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [89.24734066 89.24734066  7.31855516  2.6932283   2.10774389]  taking action:  0  corresponding to token:   
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  
Tokens: ['assign', ' ', '\tassign', ' assign', '   ']
Probs: [73.01, 12.69, 5.99, 3.63, 2.2]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign
API response time: 0.505260 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
  assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   sum = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  20
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  24.0
Iteration TIME (sec):  0.012101074999999906
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.43560273 19.1865666  19.18656984 13.04814995 14.11564509]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [88.8589996  50.88799896  4.18290269  3.25071294  0.93218974]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.92741469e+02 1.65887250e+00 3.70806795e-01 1.36613030e-01
 5.85484413e-02]  taking action:  0  corresponding to token:   sum
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum
Tokens: [' =', '=', '<|end|>', ' ', '=a']
Probs: [99.74, 0.12, 0.07, 0.04, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum =
API response time: 0.439347 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  25.0
Iteration TIME (sec):  0.011734727999999972
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.79882925 19.56521524 14.69891391 13.3164562  14.39419976]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [116.43030387   3.32241985   0.95609204   0.95609204   0.26292531]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.92995179e+02 2.14677618e+00 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum =
Tokens: [' a', 'a', '(a', ' (', ' ']
Probs: [99.85, 0.15, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a
API response time: 0.476802 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   ^ b;
assign cout = a & b;

endmodule
Depth of rollout:  15
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  26.0
Iteration TIME (sec):  0.012343813000000203
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [19.15513526 14.97748716 14.97748968 13.57965044 14.66744716]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [28.66163936 27.90532817 23.47792495 14.22727123  6.73307075]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [41.59170599 30.59972228 27.82649819 20.42325397  7.50598223]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [64.64365042  7.60566563  3.58311358  1.69014792  0.60845325]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [7.49127290e+01 7.03556426e+00 1.57374464e+00 4.62866070e-01
 3.08577380e-02]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [9.20390664e+01 5.51999998e-02 2.75999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [117.41029821   4.30241419   0.           0.           0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [1.95141955e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b
Tokens: [';\n', ';\\', ';', ';\\\n', ';\r\n']
Probs: [55.77, 43.43, 0.8, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;

API response time: 0.434441 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  27.0
Iteration TIME (sec):  0.012622609000000118
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.48359125 15.2509501  15.25095267 13.8380142  14.93567957]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [26.77688087 28.66760158 24.12127489 14.61713167  6.9175726 ]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [5.58071023e+01 1.56129177e-01 3.90322942e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [60.88084623  0.32860231  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [67.55746542  0.64225621  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [72.58296983 18.54550053  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [9.20482664e+01 5.51999998e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [119.33443345   0.45414372   0.           0.           0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [1.94205180e+02 3.31774501e-01 3.31774501e-01 1.17096883e-01
 7.80645884e-02]  taking action:  0  corresponding to token:    
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
  
Tokens: [' assign', 'assign', '\\n', '``', '(assign']
Probs: [99.81, 0.19, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign
API response time: 0.810306 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  28.0
Iteration TIME (sec):  0.012657721000000066
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.87362882 15.51957184 15.51957445 14.09180407 15.19916338]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [27.47013844 26.15339158 24.74790586 14.99686066  7.09727974]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [37.40087015 32.09000556 29.18223707 21.42008947  7.87234058]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [58.19726068  8.21505779  3.870205    1.8255684   0.65720462]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [6.56644998e+01 7.70707450e+00 1.72395088e+00 5.07044375e-01
 3.38029583e-02]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [7.71962017e+01 6.17154760e-02 3.08577380e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [90.41066636  4.96799998  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [1.19549554e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [108.84155234  84.75862683   1.56129177   0.           0.        ]  taking action:  0  corresponding to token:  ;

Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;

Tokens: ['\\n', '\tassign', ';\\', ';', '   ']
Probs: [98.72, 0.85, 0.19, 0.09, 0.04]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  \n

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n
API response time: 0.991493 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  29.0
Iteration TIME (sec):  0.012700527000000239
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.31672287 15.78360074 15.7836034  14.34125468 15.4581422 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [25.80908139 26.79705647 25.35905729 15.36720928  7.2725476 ]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [5.18012748e+01 1.65599999e-01 4.13999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [55.79595018  0.35129065  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [60.81999395  0.69371599  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [63.62280107 20.31557796  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [7.72039161e+01 6.17154760e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [91.89186635  0.5244      0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [1.18975899e+02 4.06339118e-01 4.06339118e-01 1.43413806e-01
 9.56092042e-02]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [194.79066414   0.37080679   0.           0.           0.        ]  taking action:  0  corresponding to token:   assign
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign
Tokens: [' cout', ' cou', ' sum', 'cout', ' ']
Probs: [100.0, 0.0, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   cout

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout
API response time: 0.336581 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  30.0
Iteration TIME (sec):  0.013078233999999966
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.80587685 16.04326462 16.04326733 14.5865813  15.71283949]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [26.41427983 24.69301294 25.95582264 15.72884015  7.44368979]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [34.19010805 33.51395329 30.47762925 22.37255379  8.22239157]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [53.33691564  8.78226619  4.13742318  1.95161471  0.7025813 ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [5.91161301e+01 8.32459190e+00 1.86207977e+00 5.47670519e-01
 3.65113680e-02]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [6.76656349e+01 6.76059167e-02 3.38029583e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [75.83074675  5.55439284  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [9.20574664e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [ 66.70156651 103.80769351   1.91218408   0.           0.        ]  taking action:  1  corresponding to token:  ;\
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\
Tokens: ['n', '\n', '\\n', '\tassign', 'assign']
Probs: [99.99, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  n

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n
API response time: 0.444153 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  31.0
Iteration TIME (sec):  0.012740852999999941
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.33529273 16.29877308 16.29877583 14.82798193 15.96346084]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [24.93619055 25.24595868 26.53917239 16.08234137  7.6109846 ]  taking action:  2  corresponding to token:  

Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   

Tokens: ['   ', '\\n', ';\n', ';', 'assign']
Probs: [75.8, 13.17, 2.29, 1.78, 1.78]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   
API response time: 0.692384 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   assign sum = a ^ b;
    assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  assign sum = a ^ b;
    assign cout = a & b;

endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  32.0
Iteration TIME (sec):  0.011583550000000109
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.90012324 16.55031945 16.55032224 15.06563923 16.21019587]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [68.43186643 58.7603998   4.82999998  3.75359999  1.0764    ]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.18079563e+02 2.03169559e+00 4.54143720e-01 1.67316107e-01
 7.17069032e-02]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.94654051e+02 2.34193765e-01 1.36613030e-01 7.80645884e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum =
Tokens: [' a', 'a', ' (', '\\', '\ta']
Probs: [99.96, 0.03, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a
API response time: 0.536319 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  33.0
Iteration TIME (sec):  0.011939963000000109
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.13779507 16.79808252 13.45846827 15.29972213 16.45321998]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [89.65626636  3.83639999  1.104       1.104       0.3036    ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.18234928e+02 2.62925312e+00 2.39023011e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [194.86872873   0.29274221   0.           0.           0.        ]  taking action:  0  corresponding to token:   a
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a
Tokens: ['^', ' ^', 'endmodule', ' ', "'b"]
Probs: [56.22, 43.78, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ^

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^
API response time: 0.426761 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;
assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   b;
assign cout = a & b;

endmodule
Depth of rollout:  15
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  34.0
Iteration TIME (sec):  0.012026980000000353
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.37199668 13.65378241 13.65378471 15.53038721 16.69269571]  taking action:  4  corresponding to token:      

Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [1.94419857e+02 6.24516707e-01 7.80645884e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   
Tokens: ['assign', 'a', '\n', '//', '\\n']
Probs: [99.54, 0.09, 0.07, 0.06, 0.06]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign
API response time: 0.643265 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum = a ^ b;
   assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   sum = a ^ b;
   assign cout = a & b;

endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  35.0
Iteration TIME (sec):  0.012098924000000011
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.60287577 13.84632795 13.84633028 15.75777994 11.31918274]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [25.47052873 25.78700894 13.60498629 16.42823775  7.77468042]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [4.85432044e+01 1.74557726e-01 4.36394316e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [51.79092483  0.3726      0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [55.74018976  0.74161359  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [57.27839126 21.94333215  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [6.76723955e+01 6.76059167e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [77.0727707   0.58629702  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [91.61586635  0.4692      0.4692      0.1656      0.1104    ]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [119.33443345   0.45414372   0.           0.           0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [195.16147093   0.           0.           0.           0.        ]  taking action:  0  corresponding to token:   cout
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout
Tokens: [' =', '=', ' ', '```', '`']
Probs: [99.93, 0.07, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout =
API response time: 0.365257 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b; 
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a & b; 
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  36.0
Iteration TIME (sec):  0.012547045999999895
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.16134708 14.03621731 14.03621967 15.98203578 11.47439719]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [25.99384607 23.93354538 13.88449995 16.76699994  7.93499997]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [31.64010652 34.87970633 31.72008063 23.28609228  8.55813648]  taking action:  1  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [ 54.70261138 109.30522276   8.9633629    3.29851755   2.58144851]  taking action:  1  corresponding to token:  assign
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign
Tokens: [' sum', '<|end|>', 'sum', ' ', '(sum']
Probs: [95.96, 2.9, 0.5, 0.5, 0.05]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign sum
API response time: 0.577510 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
 assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  37.0
Iteration TIME (sec):  0.012088619000000023
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.75096055 14.22355746 14.22355986 16.20328106 11.62752794]  taking action:  3  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [0.39032294 0.39032294 0.39032294 0.39032294 0.39032294]  taking action:  0  corresponding to token:   
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
ERROR: Logprobs or content is missing
Tokens: [' ', ' ', ' ', ' ', ' ']
Probs: [0.2, 0.2, 0.2, 0.2, 0.2]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;  
API response time: 0.744408 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;      // Compute the sum using XOR
    assign sum = a ^ b;
    
    // Compute the carry-out using AND
    assign cout = a & b;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: error: invalid module item.\n'
Rollout trimmed response:      // Compute the sum using XOR
    assign sum = a ^ b;
    
    // Compute the carry-out using AND
    assign cout = a & b;
endmodule
Depth of rollout:  38
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  38.0
Iteration TIME (sec):  0.010534643999999815
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.95560723 14.40844842 14.40845084 10.61442256 11.77865673]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [24.6205978  24.40572263 14.15847704 17.09905198  8.09214394]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [32.8311348  27.17039896 32.91559588 24.16511998  8.88119794]  taking action:  2  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.92800017e+02 1.65887250e+00 2.34193765e-01 1.36613030e-01
 9.75807355e-02]  taking action:  0  corresponding to token:  assign
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign
Tokens: [' sum', 'sum', '<|end|>', ' ', '(sum']
Probs: [99.47, 0.25, 0.25, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign sum
API response time: 0.500025 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  39.0
Iteration TIME (sec):  0.011455847999999769
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.56291896 14.59098378 14.59098624 10.7581365  11.92786007]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [23.42197919 24.86890356 14.42723409 17.42477747  8.24629387]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [4.58273834e+01 1.83077688e-01 4.57694219e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [48.53350676  0.39275488  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [51.73917483  0.7866      0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [52.4949333  23.45840881  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [60.92344282  0.07302274  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [67.55746542  0.64225621  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [76.84133767  0.52458155  0.52458155  0.18514643  0.12343095]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [91.89186635  0.5244      0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [119.56150531   0.           0.           0.           0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.95024858e+02 1.36613030e-01 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout =
Tokens: [' a', 'a', ' (', '   ', ';']
Probs: [99.99, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a
API response time: 0.373968 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  40.0
Iteration TIME (sec):  0.013109674999999932
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.19594907 14.77125136 14.77125385 10.90006496 12.07520973]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [23.85006344 23.22161828 14.69105856 17.74452483  8.39761463]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [33.98033325 28.12140246 22.74608247 25.01327556  9.19291324]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [49.50874984  9.31499997  4.38839998  2.06999999  0.7452    ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [5.41788980e+01 8.89936307e+00 1.99064700e+00 5.85484413e-01
 3.90322942e-02]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [6.09173576e+01 7.30227359e-02 3.65113680e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [66.46901017  6.0845325   0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [7.72116305e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [77.01259973 59.98339979  2.20799999  0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.92663404e+02 1.65887250e+00 3.70806795e-01 1.75645324e-01
 7.80645884e-02]  taking action:  0  corresponding to token:  \n
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n
Tokens: ['\tassign', '   ', '\\t', 'assign', '  ']
Probs: [96.17, 3.73, 0.07, 0.01, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  	assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign
API response time: 0.823117 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;  
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   cout = a & b;  
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  41.0
Iteration TIME (sec):  0.012997784999999595
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.85211885 14.94933364 14.94933615 11.04027289 12.22077315]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [57.40096274 65.69612417  5.40010415  4.19665237  1.20345178]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n   
Tokens: ['assign', 'a', '\tassign', 'wire', ' assign']
Probs: [98.95, 0.67, 0.09, 0.07, 0.07]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n   assign
API response time: 0.476083 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

   assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   sum = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  42.0
Iteration TIME (sec):  0.011788103999999855
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.02674703 15.12530821 12.6210923  11.17882137 12.36461373]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [75.19816312  4.28922558  1.23430952  1.23430952  0.33943512]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [9.10454664e+01 3.03599999e+00 2.75999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [119.38223805   0.35853452   0.           0.           0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [109.71977896  85.44169197   0.           0.           0.        ]  taking action:  0  corresponding to token:  ^
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^
Tokens: [' b', 'b', ' б', '_b', '(b']
Probs: [99.14, 0.86, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b
API response time: 0.428375 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;
assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;
assign cout = a & b;

endmodule
Depth of rollout:  15
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  43.0
Iteration TIME (sec):  0.012394703000000007
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.19935617 12.76604016 12.76604231 11.31576798 12.50679125]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [22.75990861 23.63102974 14.95021245 18.0586116   8.54625652]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [43.51921719  0.19121841  0.0478046   0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [45.81822948  0.4119248   0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [48.4850185  0.8291492  0.         0.         0.       ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [48.72732484 24.88139991  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [55.83498247  0.07806459  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [60.81999395  0.69371599  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [67.35464767  0.57465029  0.57465029  0.20281775  0.13521183]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [77.0727707   0.58629702  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [92.06666635  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [119.47784726   0.16731611   0.           0.           0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.95141955e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a
Tokens: [' &', '&', ';', ' &&', 'endmodule']
Probs: [99.93, 0.07, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   &

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a &
API response time: 0.882427 seconds
trimming text between  ```
trimming text with ```verilog
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a &b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  b;
endmodule
Depth of rollout:  23
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  44.0
Iteration TIME (sec):  0.013600078000000515
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.86101425 12.90935213 12.9093543  11.45116702 12.6473621 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [23.14739238 22.19240723 15.20493539 18.36732818  8.69235696]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [31.5926399  29.0411999  23.48986659 25.83359991  9.49439997]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [46.39517461  9.8188721   4.62577975  2.18197158  0.78550977]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [5.02901748e+01 9.43919997e+00 2.11139999e+00 6.20999998e-01
 4.13999999e-02]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [5.58294064e+01 7.80645884e-02 3.90322942e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [59.84027224  6.57204623  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [6.76791561e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [57.43120158 67.05757803  2.46861904  0.          0.        ]  taking action:  1  corresponding to token:  ;\
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.95141955e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  n
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n
Tokens: ['\tassign', '   ', '\\t', '\t', '  ']
Probs: [98.19, 1.8, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  	assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign
API response time: 0.441352 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   cout = a & b;\nendmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  45.0
Iteration TIME (sec):  0.01295529700000042
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.54273661 13.0510804  13.05108259 11.5850698  12.78637953]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [22.15032484 22.55772288 15.45544716 18.67094095  8.83604201]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [41.52648151  0.19902643  0.04975661  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [43.51052545  0.43024142  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [45.77246006  0.86961902  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [45.66300192 26.22729837  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [51.82714983  0.0828      0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [55.74018976  0.74161359  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [60.63743711  0.62069326  0.62069326  0.21906821  0.14604547]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [67.55746542  0.64225621  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [77.21934496  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [92.00226635  0.1932      0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.19549554e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.95024858e+02 1.36613030e-01 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   &
Adding child.
Leaf selection - depth:  14
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a &
Tokens: [' b', 'b', ' б', ' ', ' `']
Probs: [99.99, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b
API response time: 0.389209 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  46.0
Iteration TIME (sec):  0.013399269000000658
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.24269766 13.19127633 13.19127855 11.71752485 12.92389393]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [22.50324656 21.2873929  15.70194997 18.96969497  8.97742766]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [29.61107086 29.93267544 24.21074851 26.62866528  9.78660348]  taking action:  1  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [63.15739978 63.15739978 10.34999996  3.80879999  2.98079999]  taking action:  0  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [142.48738993  24.76599066  11.69017211   7.08436139   4.29355236]  taking action:  0  corresponding to token:  assign
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign
Tokens: [' sum', '<|end|>', 'sum', ' ', '(sum']
Probs: [97.47, 1.79, 0.66, 0.04, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign sum
API response time: 0.869290 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
  assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  20
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  47.0
Iteration TIME (sec):  0.01237859100000005
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.95929025 13.32998858 13.32999083 11.84857815 13.05995303]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [21.5867681  21.61600995 15.94463033 19.26381631  9.11662089]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [39.78363643  0.20653949  0.05163487  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [41.51818875  0.44780947  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [43.46706672  0.90828744  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [43.1086797  27.50742259  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [48.56744854  0.08727886  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [51.73917483  0.7866      0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [55.5729085   0.663549    0.663549    0.23419377  0.15612918]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [60.81999395  0.69371599  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [67.68591667  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [77.16534392  0.21600417  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [9.20574664e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [119.47784726   0.16731611   0.           0.           0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [1.95141955e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Adding child.
Leaf selection - depth:  15
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b
Tokens: [';', ';\n', ';\\', ';\r\r\n', ';\n\n']
Probs: [96.27, 3.73, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
API response time: 0.808537 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  48.0
Iteration TIME (sec):  0.013794046000000115
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.69109375 13.46726329 13.46726556 11.97827327 13.19460209]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [21.90997908 20.48370558 16.18366074 19.55351402  9.25372063]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [30.46690495 24.65863565 24.91072192 27.40067052 10.0703319 ]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [43.79979797 10.29811994  4.85155873  2.2884711   0.8238496 ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [4.71273473e+01 9.94979040e+00 2.22561101e+00 6.54591473e-01
 4.36394316e-02]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [5.18219748e+01 8.27999997e-02 4.13999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [54.84244699  7.02581295  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [6.09295281e+01 3.65113680e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [62.90636621 49.00208268  2.70423667  0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.18031758e+02 2.03169559e+00 4.54143720e-01 2.15120710e-01
 9.56092042e-02]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [1.87686787e+02 7.27952287e+00 1.36613030e-01 1.95161471e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  	assign
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign
Tokens: [' cout', ' sum', 'cout', ' carry', ' cou']
Probs: [99.99, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   cout

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout
API response time: 0.403066 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a & b;

endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  49.0
Iteration TIME (sec):  0.013068902999999743
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.43684757 13.60314423 13.60314652 12.10665159 13.32788403]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [62.87244585 36.03324915  5.91551771  4.59720233  1.31831538]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [9.09258664e+01 2.34599999e+00 5.24399998e-01 1.93199999e-01
 8.27999997e-02]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.19250775e+02 2.86827613e-01 1.67316107e-01 9.56092042e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.95083406e+02 5.85484413e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a
Tokens: [' ^', '^', 'endmodule', ' ', "'b"]
Probs: [98.2, 1.8, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   ^

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^
API response time: 0.423645 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   b;
    assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  50.0
Iteration TIME (sec):  0.012114110999999816
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.56958421 13.73767303 11.78943601 12.23375241 13.4598397 ]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [65.91464165  4.69861121  1.35211833  1.35211833  0.37183254]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [7.63630427e+01 3.39435118e+00 3.08577380e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [91.92866635  0.414       0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [ 67.23936829 104.64427405   0.           0.           0.        ]  taking action:  1  corresponding to token:   ^
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^
Tokens: [' b', 'b', ' `', ' б', ' ']
Probs: [99.97, 0.03, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b
API response time: 0.576928 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;
assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;
assign cout = a & b;

endmodule
Depth of rollout:  15
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  51.0
Iteration TIME (sec):  0.012325288999999628
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.70102578 11.90361936 11.90362136 12.35961314 13.59050789]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [21.06381452 20.78139099 16.4192011  19.83898188  9.38881858]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [28.69933829 25.33214763 25.59150702 28.15151284 10.3462825 ]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [41.59399549 10.75603548  5.06728783  2.39023011  0.86048284]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [44.49091624 10.4354282   2.33424052  0.68654133  0.04576942]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [4.85625997e+01 8.72788631e-02 4.36394316e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [50.90599983  7.45199997  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [5.58405585e+01 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [50.98097479 52.92295703  2.92090944  0.          0.        ]  taking action:  1  corresponding to token:  ;\
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.19549554e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [191.62904831   3.51290648   0.           0.           0.        ]  taking action:  0  corresponding to token:  	assign
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign
Tokens: [' cout', ' sum', 'cout', ' c', ' co']
Probs: [99.97, 0.01, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   cout

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout
API response time: 0.399929 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a & b;\nendmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  52.0
Iteration TIME (sec):  0.01313636799999962
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.44978696 12.01671194 12.01671396 12.48426937 13.71992559]  taking action:  4  corresponding to token:      

Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [1.19107362e+02 7.64873634e-01 9.56092042e-02 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.94263728e+02 1.75645324e-01 1.36613030e-01 1.17096883e-01
 1.17096883e-01]  taking action:  0  corresponding to token:  assign
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign
Tokens: [' sum', ' ', '<|end|>', '(sum', 'sum']
Probs: [99.66, 0.15, 0.06, 0.04, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum
API response time: 0.700058 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum = a ^ b;
   assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
   assign cout = a & b;

endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  53.0
Iteration TIME (sec):  0.011995151000000703
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.5751659  12.12874254 12.12874458 12.60775505 10.41109601]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.29819994 21.07485328 16.65139994 20.12039993  9.52199997]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [38.24268357  0.21378868  0.05344717  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [39.77569261  0.46471385  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [41.47672491  0.94537554  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [40.93776868 28.73056588  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [45.85026808  0.09153884  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [48.4850185  0.8291492  0.         0.         0.       ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [51.58392483  0.7038      0.7038      0.2484      0.1656    ]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [55.74018976  0.74161359  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [60.93561328  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [67.63859252  0.23662071  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [7.72116305e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [92.00226635  0.1932      0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [1.19549554e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [187.88194807   7.27952287   0.           0.           0.        ]  taking action:  0  corresponding to token:  ;
Adding child.
Leaf selection - depth:  16
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
Tokens: [';\n', ';', 'endmodule', '`', '   \n']
Probs: [66.62, 21.63, 11.58, 0.06, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;

API response time: 0.864024 seconds
No trimming of ``` needed.
State does not end with endmodule - not complete.
Rollout trimmed response:  
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  54.0
Iteration TIME (sec):  0.013119496999999924
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.33183815 12.23974054 12.2397426  12.73010254 10.50636159]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.57687793 20.03525052 16.88039559 20.3979358   9.6533441 ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [27.18540165 25.98815681 26.2546003  28.88284275 10.61506187]  taking action:  3  corresponding to token:  assign
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \nassign
Tokens: [' sum', '<|end|>', 'sum', ' ', '<|end|>']
Probs: [86.7, 11.73, 1.24, 0.28, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \nassign sum
API response time: 0.953275 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  55.0
Iteration TIME (sec):  0.012309758999999865
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.10025202 12.34973397 12.34973605 12.85134274 10.60076497]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [19.86363311 20.30293365 17.10631705 20.67174585  9.78292499]  taking action:  3  corresponding to token:  a
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   a
Tokens: ['ss', 's', 'ssi', 'nd', 'endmodule']
Probs: [94.81, 3.68, 0.82, 0.64, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ss

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   ass
API response time: 0.486163 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ign sum = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  56.0
Iteration TIME (sec):  0.012296362999999921
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.87953201 12.45874962 12.45875172 12.97150519 10.69432917]  taking action:  3  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.26097699  0.47804602  0.47804602  0.47804602  0.47804602]  taking action:  1  corresponding to token:   
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
ERROR: Logprobs or content is missing
Tokens: [' ', ' ', ' ', ' ', ' ']
Probs: [0.2, 0.2, 0.2, 0.2, 0.2]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;  
API response time: 1.136682 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;      // Compute the sum using XOR
    assign sum = a ^ b;
    
    // Compute the carry-out using AND
    assign cout = a & b;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: error: invalid module item.\n'
Rollout trimmed response:      // Compute the sum using XOR
    assign sum = a ^ b;
    
    // Compute the carry-out using AND
    assign cout = a & b;
endmodule
Depth of rollout:  38
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  57.0
Iteration TIME (sec):  0.01049274599999972
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.99116816 12.56681312 12.56681523  9.5679636  10.78707616]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.12205447 20.56711719 17.3292849  10.52098811  9.91081179]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [36.86757322  0.2208      0.0552      0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [38.23504826  0.48102453  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [39.73597347  0.98106256  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [39.06352945 29.90372107  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [43.54094656  0.0956092   0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [45.77246006  0.86961902  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [48.33955373  0.74187034  0.74187034  0.26183659  0.17455773]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [51.73917483  0.7866      0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [55.84613455  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [60.89301668  0.25557958  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [6.76791561e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [77.16534392  0.21600417  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [9.20574664e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [115.10372616   8.9155583    0.           0.           0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [1.30016572e+02 4.22134262e+01 2.25996983e+01 1.17096883e-01
 5.85484413e-02]  taking action:  0  corresponding to token:  ;

Adding child.
Leaf selection - depth:  17
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;

Tokens: ['endmodule', '   \n', '  \n', '  ', '   ']
Probs: [98.7, 1.1, 0.05, 0.03, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  endmodule

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
API response time: 0.398054 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Rollout trimmed response:  
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  58.0
Iteration TIME (sec):  0.011553997000000038
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.74929985 12.67394898 12.67395111  9.65653144 10.879027  ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.37718344 19.54393876 17.54941206 10.65438187 10.03706926]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [27.85446768 26.62796073 26.90131333 14.84805338 10.87720163]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [39.68963342 11.19523667  5.27420039  2.48783037  0.89561893]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [42.2502223  10.89944928  2.43803471  0.71706903  0.0478046 ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [4.58456911e+01 9.15388439e-02 4.57694219e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [47.70435756  7.85509768  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [5.18323248e+01 4.13999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [54.49577617 42.45431342  3.12258353  0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [90.88906636  2.34599999  0.5244      0.2484      0.1104    ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [1.14984215e+02 8.91555830e+00 1.67316107e-01 2.39023011e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.95141955e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout
Tokens: [' =', '=', ' ', '<|end|>', ';']
Probs: [99.92, 0.07, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout =
API response time: 0.407696 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;  
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a & b;  
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  59.0
Iteration TIME (sec):  0.012604013000000691
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.54517079 12.78018069 12.78018284  9.74435183 10.97020184]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [54.34319507 38.9163512   6.38948939  4.96554604  1.42394335]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [76.26275508  2.62290773  0.58629702  0.21600417  0.09257321]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [91.82746635  0.3312      0.1932      0.1104      0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.19513701e+02 7.17069032e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [191.64856446   3.51290648   0.           0.           0.        ]  taking action:  0  corresponding to token:   ^
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^
Tokens: [' b', 'b', '\\n', ' б', '\\']
Probs: [99.99, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b
API response time: 0.778875 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;
    assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  60.0
Iteration TIME (sec):  0.012466508999999348
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.64869488 12.88553077 11.28734132  9.83144338 11.06062   ]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [59.34128355  5.07508015  1.46045472  1.46045472  0.40162505]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [6.69354910e+01 3.71832542e+00 3.38029583e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [77.10362844  0.46286607  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [77.63359973 60.46639979  0.          0.          0.        ]  taking action:  0  corresponding to token:  ^
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [193.48308228   1.67838865   0.           0.           0.        ]  taking action:  0  corresponding to token:   b
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b
Tokens: [';', ';\n', ';\\', ';\r\r\n', ';\\\n']
Probs: [62.24, 37.75, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;
API response time: 0.446415 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;    
assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      
assign cout = a & b;

endmodule
Depth of rollout:  16
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  61.0
Iteration TIME (sec):  0.012433763000000653
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.75137383 11.3787682  11.37877012  9.91782394 11.15030002]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [19.69599988 19.78636454 17.76680439 10.78611837 10.16175813]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [35.56189266  0.22759543  0.05689886  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [36.78687989  0.4968      0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [38.11830028  1.01549623  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [37.3397046  31.03255793  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [41.45554677  0.09951321  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [43.36706672  0.90828744  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [45.52515179  0.77808017  0.77808017  0.27461653  0.18307769]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [48.36279627  0.8291492   0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [51.69999982  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [55.6499594   0.27322606  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [6.07461947e+01 3.65113680e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [67.41859252  0.23662071  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [7.69366305e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [88.26839971 10.29479996  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [7.91185648e+01 5.17006772e+01 2.76788646e+01 1.43413806e-01
 7.17069032e-02]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  17
Leaf selection - action scores:  [1.92624372e+02 2.14677618e+00 9.75807355e-02 5.85484413e-02
 5.85484413e-02]  taking action:  0  corresponding to token:  endmodule
Adding child.
Leaf selection - depth:  18
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  62.0
Iteration TIME (sec):  0.0031219050000004245
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.52338926 11.46946258 11.4694645  10.00351065 11.23925968]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [19.93359092 18.85774864 17.98156138 10.91625789 10.28493545]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [26.47865691 27.2527041  27.53280318 15.19629052 11.13317081]  taking action:  2  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [118.1154161    2.03169559   0.28682761   0.16731611   0.11951151]  taking action:  0  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.94127115e+02 4.87903677e-01 4.87903677e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign sum
Tokens: [' =', '<|end|>', '=', ' ', '=a']
Probs: [98.7, 0.85, 0.24, 0.19, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign sum =
API response time: 0.880924 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  63.0
Iteration TIME (sec):  0.012558000000000291
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.33082225 11.55943997 11.55944191 10.08851996 11.32751607]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [19.29583211 19.08125377 18.19377659 11.04485714 10.4066549 ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [27.07167028 27.86340292 21.13757261 15.5366991  11.38338566]  taking action:  1  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [47.10414527 70.6062179  11.57165174  4.25836784  3.3326357 ]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.87276948e+02 5.65968266e+00 9.75807355e-01 9.75807355e-01
 9.75807355e-02]  taking action:  0  corresponding to token:   sum
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign sum
Tokens: [' =', '<|end|>', '=', ' ', '<|end|>']
Probs: [97.34, 2.29, 0.24, 0.11, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign sum =
API response time: 0.510235 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
 assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  64.0
Iteration TIME (sec):  0.012406057000000636
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.1462755  11.64871711 11.64871907 10.17286769 11.41508561]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.70873159 19.30217477 18.4035382  11.17196953 10.52696705]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [34.38085729  0.23419377  0.05854844  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [35.4860303   0.51208972  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [36.67674655  1.0488      0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [35.81785364 32.12174917  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [39.63426523  0.10326974  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [41.29339157  0.94537554  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [43.13669053  0.81267824  0.81267824  0.28682761  0.19121841]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [45.55246005  0.86961902  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [48.33270174  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [51.52627482  0.2898      0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [5.55262728e+01 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [60.52635002  0.25557958  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [6.72391561e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [73.7918609  11.50993627  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [60.6237331  59.69879979 31.96079989  0.1656      0.0828    ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  17
Leaf selection - action scores:  [1.17457856e+02 2.62925312e+00 1.19511505e-01 7.17069032e-02
 7.17069032e-02]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  18
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  65.0
Iteration TIME (sec):  0.0031012779999999296
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.94478634 11.73731011 11.73731208 10.25656905 11.50198409]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.9190535  18.44056771 18.6109294  11.2976455  10.6459196 ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [27.65192619 23.73413652 21.59058298 15.8697845  11.62821767]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [38.02407888 11.61784615  5.47329641  2.58174359  0.92942769]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [40.3157374  11.34450649  2.53758698  0.74634911  0.04975661]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [43.53660069  0.0956092   0.0478046   0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [45.03557236  8.23849595  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [4.85722974e+01 4.36394316e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [46.25755984 45.02504985  3.31199999  0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [76.23189734  2.62290773  0.58629702  0.27771964  0.12343095]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [8.85430664e+01 1.02948000e+01 1.93199999e-01 2.75999999e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.19549554e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.95005342e+02 1.36613030e-01 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout =
Tokens: [' a', 'a', ' ', ' `', ' (']
Probs: [99.98, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a
API response time: 0.402423 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  66.0
Iteration TIME (sec):  0.012746136999999713
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.77530133 11.82523445 11.82523644 10.33963868 11.5882267 ]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [48.42482969 41.59987716  6.83065148  5.30839201  1.52225947]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [66.8476033   2.87325146  0.64225621  0.23662071  0.10140888]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [77.01876966  0.37029286  0.21600417  0.12343095  0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [9.20298664e+01 8.27999997e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [117.41029821   4.30241419   0.           0.           0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [1.95141955e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b
Tokens: [';\n', ';\\', ';', ';\\\n', ';\r\n']
Probs: [85.79, 11.61, 2.59, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;

API response time: 0.836245 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  67.0
Iteration TIME (sec):  0.01281375000000029
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.86265728 11.91250505 10.60000628 10.42209066 11.67382808]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [54.38521154  5.42548889  1.56129177  1.56129177  0.42935524]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [6.02601530e+01 4.01625048e+00 3.65113680e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [67.58450779  0.50704438  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [57.89406765 67.59758845  0.          0.          0.        ]  taking action:  1  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [1.95102922e+02 5.85484413e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b
Tokens: [';\n', ';', ';\\', ';\r\n', ';\\\n']
Probs: [99.14, 0.86, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;

API response time: 0.479107 seconds
trimming text between  ```
trimming text with ```verilog
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;
assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  assign cout = a & b;
endmodule
Depth of rollout:  21
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  68.0
Iteration TIME (sec):  0.012322353000000064
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.94937324 10.67701004 10.67701183 10.50393857 11.75880232]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.36596915 18.64520944 18.81602877 11.42193264 10.76355765]  taking action:  2  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [147.93239497  25.70276572   4.46919768   3.47387418   3.47387418]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   
Tokens: ['assign', '//', 'a', ' assign', '//\n']
Probs: [99.93, 0.03, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   assign
API response time: 0.866781 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   assign sum = a ^ b;
   assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   sum = a ^ b;
   assign cout = a & b;

endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  69.0
Iteration TIME (sec):  0.012255237999999835
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.78151705 10.75345956 10.75346136 10.5851955  11.843163  ]  taking action:  4  corresponding to token:      

Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [9.17170664e+01 8.83199997e-01 1.10400000e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [119.01175239   0.21512071   0.16731611   0.14341381   0.14341381]  taking action:  0  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.94497922e+02 2.92742206e-01 1.17096883e-01 7.80645884e-02
 5.85484413e-02]  taking action:  0  corresponding to token:   sum
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum
Tokens: [' =', '=', ' ', '=`', ' `']
Probs: [99.85, 0.15, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum =
API response time: 0.565066 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum = a ^ b;
   assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a ^ b;
   assign cout = a & b;

endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  70.0
Iteration TIME (sec):  0.012056156999999956
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.86517545 10.82936493 10.82936675 10.66587407  9.56153857]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.56348807 18.84763864 12.7126071  11.54487603 10.87992381]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [33.30594348  0.24061122  0.06015281  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [34.30926336  0.52693597  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [35.38171852  1.08107829  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [34.46165323 33.17519989  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [38.02605755  0.10689434  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [39.48212732  0.98106256  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [41.07733339  0.84586233  0.84586233  0.29853964  0.19902643]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [43.16706671  0.90828744  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [45.52942194  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [48.17653772  0.30547602  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [5.14198248e+01 4.13999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [55.33567368  0.27322606  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [6.0379528e+01 3.6511368e-02 0.0000000e+00 0.0000000e+00 0.0000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [64.50421593 12.60850346  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [50.64356261 66.74528726 35.73326058  0.18514643  0.09257321]  taking action:  1  corresponding to token:  ;
Adding child.
Leaf selection - depth:  17
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
Tokens: ['endmodule', '<|end|>', '   \n', '\n', '  \n']
Probs: [42.17, 25.58, 15.51, 7.33, 4.44]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  endmodule

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;endmodule
API response time: 0.765525 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Rollout trimmed response:  
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  71.0
Iteration TIME (sec):  0.012471511000000213
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.67849162 10.90473762 10.90473945 10.74598645  9.6280765 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.75891666 18.04552928 12.8464303  11.66651832 10.99505849]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [26.34553326 24.22183325 22.03424993 16.19599994 11.86799996]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [36.5514624  12.02561325  5.66540002  2.6723585   0.96204906]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [38.62383777 11.77275076  2.63337846  0.77452308  0.05163487]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [41.54306705  0.09951321  0.04975661  0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [42.76738118  8.60482838  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [4.58548450e+01 4.57694219e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [40.64618497 47.45651282  3.49115452  0.          0.        ]  taking action:  1  corresponding to token:  ;\
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [9.20574664e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [117.39834706   4.30241419   0.           0.           0.        ]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.95102922e+02 1.95161471e-02 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout
Tokens: [' =', '=', '<|end|>', ' ', ';']
Probs: [99.6, 0.32, 0.04, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout =
API response time: 0.635415 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a & b;\nendmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  72.0
Iteration TIME (sec):  0.012612030000000551
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.52132507 10.97958867 10.97959052 10.82554439  9.69415394]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.2272307  18.23382995 12.97886663 11.78689996 11.10899996]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [32.32225007  0.2468619   0.06171548  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [33.23814872  0.54137525  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [34.21011721  1.11242038  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [33.24327257 34.19621332  0.          0.          0.        ]  taking action:  1  corresponding to token:  ^
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a^
Tokens: ['b', ' b', '   ', '_b', '\tb']
Probs: [99.14, 0.86, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a^b
API response time: 0.439934 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a^b;
   assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;
   assign cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  73.0
Iteration TIME (sec):  0.012334091999999686
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.36991583 11.05392879 11.05393064 10.90455927  9.75978033]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.41130727 17.54782741 13.10995831 11.90605936 11.22178458]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [25.19258994 24.69986976 22.46912878 16.51575376 12.10303268]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [35.23733323 12.41999996  5.85119998  2.75999999  0.9936    ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [37.12792831 12.18595476  2.72580567  0.80170755  0.05344717]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [39.79952408  0.10326974  0.05163487  0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [40.80915709  8.95618934  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [43.54529243  0.0478046   0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [42.62601104 39.8353199   3.66155376  0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [66.82056093  2.87325146  0.64225621  0.30422663  0.13521183]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [7.42647165e+01 1.15099363e+01 2.16004166e-01 3.08577380e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [9.20574664e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [119.46589611   0.16731611   0.           0.           0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.95122439e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Adding child.
Leaf selection - depth:  14
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a
Tokens: [' &', '&', ' \\', '<|end|>', ' &&']
Probs: [99.99, 0.0, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   &

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a &
API response time: 0.431858 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  74.0
Iteration TIME (sec):  0.013044741999999943
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.22393573 11.12776827 11.12777014 10.98304203  9.82496477]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.9086057  17.72357416 13.2397455  12.02403301 11.33344688]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [24.16654687 25.1687983  22.89572194 16.82941535 12.33358735]  taking action:  1  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [51.59364282 51.59364282 12.67610938  4.66480825  3.6507195 ]  taking action:  0  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [87.30535003 30.33202005 14.31747834  8.67653529  5.25850623]  taking action:  0  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [1.90223886e+02 3.49339033e+00 1.28806571e+00 7.80645884e-02
 5.85484413e-02]  taking action:  0  corresponding to token:   sum
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign sum
Tokens: [' =', '<|end|>', '=', ' ', '=a']
Probs: [98.95, 0.67, 0.31, 0.05, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   =

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign sum =
API response time: 0.455359 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
  assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  20
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  75.0
Iteration TIME (sec):  0.01241066600000007
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.08308149 11.20111711 11.201119   11.0610033   9.88971608]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [44.03477128 44.12029985  7.24499997  5.63039998  1.61459999]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.93112275e+02 1.30758186e+00 1.75645324e-01 1.36613030e-01
 1.36613030e-01]  taking action:  0  corresponding to token:  assign
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n   assign
Tokens: [' sum', 'sum', '<|end|>', ' ', ' cout']
Probs: [99.93, 0.06, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   sum

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n   assign sum
API response time: 0.524827 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

   assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  76.0
Iteration TIME (sec):  0.01200731399999988
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.15566994 11.27398497 10.15658818 11.13845334  9.95404278]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [50.48164983  5.75459998  1.65599999  1.65599999  0.4554    ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [5.52271939e+01 4.29355236e+00 3.90322942e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [60.84433486  0.54767052  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [63.41341059 49.39645053  0.          0.          0.        ]  taking action:  0  corresponding to token:  ^
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [118.53370636   2.05559789   0.           0.           0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [121.46849951  73.67345528   0.           0.           0.        ]  taking action:  0  corresponding to token:  ;
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;
Tokens: [';\n', 'assign', ' assign', '\n', ';']
Probs: [89.82, 5.74, 2.71, 1.0, 0.29]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;;

API response time: 0.469108 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;;

assign cout = a & b;

endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: error: invalid module item.\n'
Rollout trimmed response:  
assign cout = a & b;

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  77.0
Iteration TIME (sec):  0.010985546999999762
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.22778855 10.11174305 10.22174477 11.21540206 10.01795311]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.44016029 17.89760618 13.36826639 12.14085561 11.44401971]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [31.47263835  0.25295818  0.06323954  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [32.31575371  0.55543928  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [33.2047305  1.1429033  0.         0.         0.       ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [34.21229998 17.64380661  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [36.59263987  0.1104      0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [37.88258599  1.01549623  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [39.27835454  0.87779282  0.87779282  0.30980923  0.20653949]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [41.11005822  0.94537554  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [43.14963829  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [45.38738336  0.32038595  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [4.80834085e+01 4.36394316e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [51.25127482  0.2898      0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [5.52119871e+01 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [57.93248987 13.61874025  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [55.5488271  36.05789944 39.14382575  0.20281775  0.10140888]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  17
Leaf selection - action scores:  [9.01373330e+01 3.03599999e+00 1.38000000e-01 8.27999997e-02
 8.27999997e-02]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  18
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  78.0
Iteration TIME (sec):  0.002953822999999467
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.06738129 10.17648328 10.28648501 11.29185908 10.08145505]  taking action:  3  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.224 -0.224  0.552  0.552  0.552]  taking action:  2  corresponding to token:   
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
ERROR: Logprobs or content is missing
Tokens: [' ', ' ', ' ', ' ', ' ']
Probs: [0.2, 0.2, 0.2, 0.2, 0.2]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;  
API response time: 0.689472 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;      // Compute the sum using XOR
    assign sum = a ^ b;
    
    // Compute the carry-out using AND
    assign cout = a & b;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: error: invalid module item.\n'
Rollout trimmed response:      // Compute the sum using XOR
    assign sum = a ^ b;
    
    // Compute the carry-out using AND
    assign cout = a & b;
endmodule
Depth of rollout:  38
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  79.0
Iteration TIME (sec):  0.010209008000000352
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.13724345 10.24081504 10.35081678  8.89426695 10.14455634]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.6061328  17.20315578 13.49555733 12.25656021 11.55353435]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [24.60827966 21.98210325 23.31448571 17.13732021 12.55991058]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [34.05525555 12.80224292  6.03127889  2.84494287  1.02417943]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [35.79301323 12.58559996  2.81519999  0.828       0.0552    ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [38.25795419  0.10689434  0.05344717  0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [39.09649545  9.29427692  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [41.55135982  0.04975661  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [38.17232372 41.6030774   3.82436817  0.          0.        ]  taking action:  1  corresponding to token:  ;\
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [7.72116305e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [90.40146636  4.96799998  0.          0.          0.        ]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.19525652e+02 2.39023011e-02 2.39023011e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.94380825e+02 6.24516707e-01 7.80645884e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout =
Tokens: [' a', 'a', ' ', ' `', ' ab']
Probs: [99.92, 0.06, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout = a
API response time: 0.787580 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   & b;\nendmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  80.0
Iteration TIME (sec):  0.012920455000000608
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.00099123 10.30474597 10.41474772  8.95466795 10.20726446]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.16121757 17.36614246 13.62165296 12.37117831 11.66202063]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [30.63448945  0.25891095  0.06472774  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [31.4113144  0.5691559  0.         0.         0.       ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [32.22537714  1.17259404  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [33.02801273 18.12591797  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [35.30467354  0.11379771  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [36.45674653  1.0488      0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [37.68948492  0.90860189  0.90860189  0.32068302  0.21378868]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [39.31289653  0.98106256  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [41.09717285  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [43.01921719  0.33463221  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [45.30484503  0.04576942  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [47.93209329  0.30547602  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [5.11448248e+01 4.13999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [52.9805566  14.55904573  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [47.84774667 38.98704446 42.28016411  0.21906821  0.1095341 ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  17
Leaf selection - action scores:  [75.39146847  3.39435118  0.15428869  0.09257321  0.09257321]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  18
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  81.0
Iteration TIME (sec):  0.003300271000000521
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.84928192 10.36828347 10.47828523  9.01469725 10.26958668]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.31849892 16.72207789 13.74658635 12.48473996 11.76950696]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [23.65651497 22.36968004 23.72583598 17.43977414 12.78222714]  taking action:  2  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [90.95346636  2.34599999  0.3312      0.1932      0.138     ]  taking action:  0  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.18928094e+02 5.97557527e-01 5.97557527e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [192.62437181   1.6588725    0.46838753   0.37080679   0.        ]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign sum =
Tokens: [' a', 'a', '<|end|>', ' ', ' (']
Probs: [99.9, 0.09, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign sum = a
API response time: 0.512969 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  82.0
Iteration TIME (sec):  0.01233768799999968
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.72223667 10.43143471 10.54143648  9.07436161 10.33153002]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.89521159 16.87514329 13.87038905 12.59727384 11.8760205 ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [24.05931459 22.75063013 19.32412245 17.73705677 13.00074258]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [32.98456556 13.17339929  6.20613478  2.92742206  1.05387194]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [34.59223851 12.9729395   2.90184173  0.85348286  0.05689886]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [36.88229322  0.1104      0.0552      0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [37.58222925  9.6204906   0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [39.80746791  0.05163487  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [39.72751424 36.09882435  3.98052859  0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [60.1567041   3.10346628  0.69371599  0.32860231  0.14604547]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [6.50966101e+01 1.26085035e+01 2.36620708e-01 3.38029583e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [7.72116305e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [91.99306635  0.1932      0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.19537603e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [195.14195479   0.           0.           0.           0.        ]  taking action:  0  corresponding to token:   &
Adding child.
Leaf selection - depth:  15
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a &
Tokens: [' b', 'b', '\\n', ' б', '\tb']
Probs: [99.97, 0.03, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b
API response time: 0.947895 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  83.0
Iteration TIME (sec):  0.01372645500000047
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.59926615 10.49420666 10.60420844  9.13366762 10.39310133]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [46.41208799 31.0361166   7.63690052  5.93496269  1.70193783]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [60.18104501  3.10346628  0.69371599  0.25557958  0.1095341 ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [67.51014128  0.4056355   0.23662071  0.13521183  0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [77.18848722  0.09257321  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [90.41066636  4.96799998  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [1.19549554e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [167.42902591  22.65824678   5.0546821    0.           0.        ]  taking action:  0  corresponding to token:  ;

Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;

Tokens: ['\\n', '\tassign', '   ', ';\\', ';']
Probs: [88.66, 9.34, 0.98, 0.77, 0.17]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  \n

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;
\n
API response time: 0.432630 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;

    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:      assign cout = a & b;
endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  84.0
Iteration TIME (sec):  0.012934773000000455
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.66227448 10.55660606  9.70600714  9.19262165 10.45430721]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.49793702 17.02684803 13.99309122 12.70880735 11.98158721]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [29.85733957  0.2647299   0.06618247  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [30.57594395  0.58254964  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [31.32469463  1.20155134  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [31.95354218 18.59550053  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [34.13925387  0.11709688  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [35.17546851  1.08107829  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [36.27301321  0.9384      0.9384      0.3312      0.2208    ]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [37.7254431   1.01549623  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [39.3037475  0.         0.         0.         0.       ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [40.97648149  0.34829625  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [42.94529243  0.0478046   0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [45.16738336  0.32038595  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [4.78389640e+01 4.36394316e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [49.08222482 15.44219995  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [42.505524   41.71342616 45.19939667  0.23419377  0.11709688]  taking action:  2  corresponding to token:  endmodule
Adding child.
Leaf selection - depth:  17
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  85.0
Iteration TIME (sec):  0.004613359000000372
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.54172509 10.61863947  9.76240116  9.25122991 10.51515411]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [47.18453162  6.06588099  1.74557726  1.74557726  0.48003375]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [5.11255748e+01 4.55399998e+00 4.13999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [55.60535106  0.58548441  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [51.11672767 53.34892299  0.          0.          0.        ]  taking action:  1  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [1.19525652e+02 7.17069032e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [193.48308228   1.67838865   0.           0.           0.        ]  taking action:  0  corresponding to token:  ;

Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;

Tokens: ['assign', ' assign', ';', ';\n', '\\n']
Probs: [94.57, 4.71, 0.39, 0.3, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;
assign
API response time: 0.441816 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;
assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   cout = a & b;
endmodule
Depth of rollout:  15
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  86.0
Iteration TIME (sec):  0.014460043000000589
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.602927    9.7184666   9.81846825  9.30949839 10.57564827]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.64118134 16.46567659 14.11472169 12.81936672 12.08623188]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [23.17358893 23.12528222 19.64222866 18.02942462 13.21564545]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [32.00884945 13.53438117  6.37619735  3.00764026  1.08275049]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [33.50461348 13.34904461  2.98597051  0.87822662  0.05854844]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [35.64486738  0.11379771  0.05689886  0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [36.23093322  9.93599997  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [38.2655895   0.05344717  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [36.08345998 37.45837468  4.13078974  0.          0.        ]  taking action:  1  corresponding to token:  ;\
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [6.76791561e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [75.82303232  5.55439284  0.          0.          0.        ]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [9.20390664e+01 2.75999999e-02 2.75999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.19083459e+02 7.64873634e-01 9.56092042e-02 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.95005342e+02 1.17096883e-01 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Adding child.
Leaf selection - depth:  14
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout = a
Tokens: [' &', '&', '<|end|>', ' \\', 'endmodule']
Probs: [99.94, 0.04, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   &

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout = a &
API response time: 0.421581 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   b;\nendmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  87.0
Iteration TIME (sec):  0.013626955999999524
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.4847311   9.77421237  9.87421403  9.36743296 10.63579574]  taking action:  4  corresponding to token:      

Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [7.69261964e+01 9.87447615e-01 1.23430952e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [91.64346635  0.2484      0.1932      0.1656      0.1656    ]  taking action:  0  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.19155166e+02 3.58534516e-01 1.43413806e-01 9.56092042e-02
 7.17069032e-02]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [194.86872873   0.29274221   0.           0.           0.        ]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum =
Tokens: [' a', 'a', ' (', ' ', ' а']
Probs: [99.93, 0.07, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum = a
API response time: 0.941159 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum = a ^ b;
   assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   ^ b;
   assign cout = a & b;

endmodule
Depth of rollout:  18
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  88.0
Iteration TIME (sec):  0.012178709999999704
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.54421197  9.82964229  9.92964396  9.42503927  8.92966869]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.26184615 16.6085534  14.23530807 12.92897703 12.18997826]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [29.18199674  0.27042367  0.06760592  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [29.85132299  0.59564227  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [30.54512122  1.22982701  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [31.03097251 19.05348308  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [33.13931925  0.12030561  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [34.08070542  1.11242038  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [35.06878315  0.96728058  0.96728058  0.34139314  0.22759543]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [36.38341318  1.0488      0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [37.79797854  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [39.27594411  0.3614441   0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [41.0013598   0.04975661  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [42.91921719  0.33463221  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [45.19484495  0.04576942  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [46.03520083 16.27750797  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [45.13446653 44.27409985 24.02059992  0.2484      0.1242    ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  17
Leaf selection - action scores:  [65.92703974  3.71832542  0.16901479  0.10140888  0.10140888]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  18
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  89.0
Iteration TIME (sec):  0.003220193999999843
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.40997029  9.88476168  9.98476336  9.48232285  8.97922838]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.39826182 16.04021547 14.35487678 13.03766231 12.2928491 ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [22.37073031 23.49393872 19.9552442  18.31711368 13.4271092 ]  taking action:  1  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [41.81662143 55.72216191 13.69176299  5.03856878  3.94322774]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [114.7332405    6.93166731   1.19511505   1.19511505   0.11951151]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [189.97017581   4.46919768   0.46838753   0.21467762   0.        ]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign sum =
Tokens: [' a', 'a', '<|end|>', ' ', ' (']
Probs: [99.63, 0.32, 0.04, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign sum = a
API response time: 0.439410 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
 assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  90.0
Iteration TIME (sec):  0.012372168999999822
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.29784581  9.93957568 10.03957737  9.53928907  9.0285135 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.03555914 16.17509094 14.47345317 13.14544559 12.39486619]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [28.50487489  0.276       0.069       0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [29.12829189  0.60845325  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [29.77124005  1.25746702  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [30.12880013 19.50068505  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [32.16480678  0.12343095  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [33.02139715  1.1429033   0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [33.91267877  0.9953235   0.9953235   0.35129065  0.23419377]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [35.10671849  1.08107829  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [36.37999986  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [37.69268355  0.37413019  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [39.21516021  0.05163487  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [40.88481482  0.34829625  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [42.84529241  0.0478046   0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [43.3822225  17.07199439  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [40.67512757 46.69604523 25.31723087  0.26183659  0.13091829]  taking action:  1  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  17
Leaf selection - action scores:  [82.29959229 49.92230426 30.26954414 14.30533582  8.66516931]  taking action:  0  corresponding to token:  endmodule
Adding child.
Leaf selection - depth:  18
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  91.0
Iteration TIME (sec):  0.0032338940000000704
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.17128959  9.99408933 10.09409103  9.59594313  9.07752855]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.16567223 15.64313974 14.59106154 13.25234896 12.49605045]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [22.71611106 20.88726875 20.2634059  18.60034163 13.63529385]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [31.11488399 13.88598209  6.54184045  3.0857738   1.11087857]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [32.51346465 13.71483959  3.06779307  0.90229208  0.06015281]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [34.52404516  0.11709688  0.05854844  0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [35.01542377 10.24179434  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [36.88965322  0.0552      0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [37.34685839 33.24586561  4.2757736   0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [55.13240118  3.31774501  0.74161359  0.35129065  0.15612918]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [5.86049710e+01 1.36187403e+01 2.55579576e-01 3.65113680e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [6.76791561e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [77.15762948  0.21600417  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [9.20482664e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [119.54955416   0.           0.           0.           0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [1.95102922e+02 5.85484413e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Adding child.
Leaf selection - depth:  16
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b
Tokens: [';', ';\\', ';\n', ';\r\r\n', ';\\\n']
Probs: [80.55, 17.97, 1.48, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;
API response time: 0.456265 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  \nendmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  92.0
Iteration TIME (sec):  0.013264136000000093
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.06591442 10.04830751 10.14830922  9.65229012  9.12627793]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [42.60157182 32.54769978  8.00964884  6.22464139  1.78500746]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [55.15470534  3.31774501  0.74161359  0.27322606  0.11709688]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [60.77739735  0.43813642  0.25557958  0.14604547  0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [67.6588743   0.10140888  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [75.83074675  5.55439284  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [9.20574664e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [102.57892041  27.75057153   6.19069598   0.           0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [173.03016013  18.22808139   1.91258242   1.50274333   0.3317745 ]  taking action:  0  corresponding to token:  \n
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;
\n
Tokens: ['\tassign', '   ', 'assign', '\\t', '  ']
Probs: [99.83, 0.15, 0.01, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  	assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;
\n	assign
API response time: 0.442281 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   cout = a & b;
endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  93.0
Iteration TIME (sec):  0.012689963999999776
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.12010883 10.10223497  9.36038362  9.70833497  9.17476592]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.8184243  15.77073574 14.70772522 13.35839362 12.59642195]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [21.96314022 21.20006478 20.56693279 18.87930979 13.84034737]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [30.29188245 14.22889748  6.7033917   3.16197722  1.1383118 ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [31.60535961 14.07112852  3.14748927  0.92573214  0.06171548]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [33.50264411  0.12030561  0.06015281  0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [33.91445257 10.53871943  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [35.65197973  0.05689886  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [34.29448878 34.33337131  4.41599998  0.          0.        ]  taking action:  1  corresponding to token:  ;\
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [6.09295281e+01 3.65113680e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [66.46224957  6.0845325   0.          0.          0.        ]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [7.71962017e+01 3.08577380e-02 3.08577380e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [9.16986664e+01 8.83199997e-01 1.10400000e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.19465896e+02 1.43413806e-01 2.39023011e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [1.95044374e+02 7.80645884e-02 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   &
Adding child.
Leaf selection - depth:  15
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout = a &
Tokens: [' b', 'b', '\\n', ' б', ' ']
Probs: [99.98, 0.02, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   b

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout = a & b
API response time: 0.422082 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;
	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  ;\nendmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  94.0
Iteration TIME (sec):  0.013529011000000146
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.01660922 10.15587633  9.40955488  9.7640825   9.22299667]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [44.5502631   6.36194965  1.83077688  1.83077688  0.50346364]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [4.79167043e+01 4.80033747e+00 4.36394316e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [51.62237482  0.621       0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [54.65988948 42.79584599  0.          0.          0.        ]  taking action:  0  corresponding to token:  ^
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [90.9087997   2.37359999  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [73.8839609  90.23118651  0.          0.          0.        ]  taking action:  1  corresponding to token:  ;

Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;

Tokens: [' assign', ';\n', 'assign', ';', 'endmodule']
Probs: [87.76, 7.2, 4.37, 0.59, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   assign

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;
 assign
API response time: 0.391182 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;
 assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   cout = a & b;
endmodule
Depth of rollout:  15
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  95.0
Iteration TIME (sec):  0.012742070000000716
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.06939526  9.36679976  9.45846802  9.81953738  9.27097423]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.49005706 15.89732304 14.82346662 13.46359995 12.69599996]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [27.87088499  0.28146588  0.07036647  0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [28.45329156  0.621       0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [29.05107193  1.28451242  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [29.29757529 19.93783368  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [31.26844823  0.12647909  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [32.05169293  1.17259404  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [32.86003138  1.02259769  1.02259769  0.36091683  0.24061122]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [33.95129367  1.11242038  0.          0.          0.        ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [35.10553589  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [36.28090653  0.3864      0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [37.63701807  0.05344717  0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [39.10671338  0.3614441   0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [40.81802643  0.04975661  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [41.12862766 17.83111659  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [42.70226985 32.33308654 26.55049531  0.27461653  0.13730827]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  17
Leaf selection - action scores:  [59.22786699  4.01625048  0.18255684  0.1095341   0.1095341 ]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  18
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  96.0
Iteration TIME (sec):  0.0034373290000004886
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [9.95080082 9.41545879 9.50712705 9.87470418 9.31870256]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.60984808 15.39244645 14.93830726 13.56798752 12.794803  ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [21.2741058  21.50829371 20.86602792 19.15420477 14.04240692]  taking action:  1  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [44.69867033 44.69867033 14.63711032  5.3864566   4.21548777]  taking action:  0  corresponding to token:   
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [67.23586644 35.02439988 16.53239994 10.01879997  6.07199998]  taking action:  0  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [1.16537864e+02 4.27851189e+00 1.57755187e+00 9.56092042e-02
 7.17069032e-02]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [1.93112275e+02 1.30758186e+00 6.05000560e-01 9.75807355e-02
 1.95161471e-02]  taking action:  0  corresponding to token:   =
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign sum =
Tokens: [' a', 'a', '<|end|>', ' ', ' (']
Probs: [99.82, 0.15, 0.02, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   a

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign sum = a
API response time: 0.498258 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
  assign sum = a ^ b;
    assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   ^ b;
    assign cout = a & b;
endmodule
Depth of rollout:  20
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  97.0
Iteration TIME (sec):  0.012237030999999732
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [9.85220501 9.46386764 9.55553591 9.92958734 9.36618549]  taking action:  3  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.19142262 -0.19142262 -0.19142262  0.61715476  0.61715476]  taking action:  3  corresponding to token:   
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
ERROR: Logprobs or content is missing
Tokens: [' ', ' ', ' ', ' ', ' ']
Probs: [0.2, 0.2, 0.2, 0.2, 0.2]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;  
API response time: 0.696804 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;      // Compute the sum using XOR
    assign sum = a ^ b;
    
    // Compute the carry-out using AND
    assign cout = a & b;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:6: error: invalid module item.\n'
Rollout trimmed response:      // Compute the sum using XOR
    assign sum = a ^ b;
    
    // Compute the carry-out using AND
    assign cout = a & b;
endmodule
Depth of rollout:  38
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  98.0
Iteration TIME (sec):  0.010559796999999982
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [9.90260595 9.51203012 9.6036984  8.15349269 9.41342677]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.29458998 15.51246979 15.05226786 13.67157515 12.8928489 ]  taking action:  1  corresponding to token:  assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [27.27565705  0.28682761  0.0717069   0.          0.        ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [27.82125568  0.63329822  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [28.37870824  1.311       0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [28.52854595 20.36557796  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [30.440377    0.12945547  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [31.15969461  1.20155134  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [31.89635268  1.04916309  1.04916309  0.37029286  0.2468619 ]  taking action:  0  corresponding to token:    
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [32.8991749  1.1429033  0.         0.         0.       ]  taking action:  0  corresponding to token:   assign
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [33.95202428  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [35.01189267  0.398292    0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [36.22965321  0.0552      0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [37.53554064  0.37413019  0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [39.04592939  0.05163487  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [39.18390496 18.55921457  0.          0.          0.        ]  taking action:  0  corresponding to token:  ;
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [38.93428242 33.80045144 27.72886463  0.28682761  0.14341381]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  17
Leaf selection - action scores:  [54.17839194  4.29355236  0.19516147  0.11709688  0.11709688]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  18
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/1296897_top_module.v:7: error: invalid module item.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  99.0
Iteration TIME (sec):  0.0029960149999999075
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [9.78927905 9.55994997 9.65161826 8.19876666 9.46043006]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.40928872 15.03760203 15.16536834 13.77438095 12.9901548 ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [21.5745272  19.39968883 21.16087993 19.42519993 14.24159995]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [29.53094719 14.56374088  6.86114015  3.23638686  1.16509927]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [30.76934101 14.41861612  3.22521676  0.94859317  0.06323954]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [32.56682177  0.12343095  0.06171548  0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [32.91114153 10.82750494  0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [34.53093321  0.05854844  0.          0.          0.        ]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [35.34721422 30.97646724  4.55190859  0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [51.17509983  3.51899999  0.7866      0.3726      0.1656    ]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [5.37105105e+01 1.45590457e+01 2.73226059e-01 3.90322942e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [6.09295281e+01 3.65113680e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   cout
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [67.63183193  0.23662071  0.          0.          0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [7.72039161e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [92.05746635  0.          0.          0.          0.        ]  taking action:  0  corresponding to token:   &
Child already created - returning child node.
Leaf selection - depth:  15
Leaf selection - action scores:  [1.19525652e+02 7.17069032e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  16
Leaf selection - action scores:  [157.20256484  35.07051633   2.88838977   0.           0.        ]  taking action:  0  corresponding to token:  ;
Adding child.
Leaf selection - depth:  17
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;
Tokens: ['\\n', ';\\', ';', '\\', 'endmodule']
Probs: [99.26, 0.41, 0.09, 0.09, 0.05]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  \n

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\n
API response time: 0.760300 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  endmodule
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  100.0
Iteration TIME (sec):  0.013163565000000155
ROBUST FINAL VALUE, ITERATION:  1.0
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Adding child.
State does not end with endmodule - not complete.
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\n
Tokens: ['endmodule', 'e', '\\n', '\\', '`']
Probs: [99.37, 0.52, 0.07, 0.02, 0.0]
Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\nendmodule
API response time: 0.384406 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
State does not end with endmodule - not complete.
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\n
Tokens: ['endmodule', 'e', '\\n', '`', '\tend']
Probs: [99.91, 0.03, 0.02, 0.01, 0.01]
Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\nendmodule
API response time: 0.752323 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [9.695219   9.60763082 9.69929911 8.24381481 9.50719891]  taking action:  2  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [39.55955539 33.99199931  8.36580537  6.50142589  1.86437948]  taking action:  0  corresponding to token:  	assign
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [51.19579983  3.51899999  0.7866      0.2898      0.1242    ]  taking action:  0  corresponding to token:   sum
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [55.70115746  0.46838753  0.27322606  0.15612918  0.        ]  taking action:  0  corresponding to token:   =
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [60.91127237  0.1095341   0.          0.          0.        ]  taking action:  0  corresponding to token:   a
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [66.46901017  6.0845325   0.          0.          0.        ]  taking action:  0  corresponding to token:   ^
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [7.72116305e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   b
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [78.9934664  32.04359989  7.14839998  0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [106.00890061  22.32474919   2.3424255    1.84047718   0.40633912]  taking action:  0  corresponding to token:  \n
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.94829696e+02 2.92742206e-01 1.95161471e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  	assign
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;
\n	assign
Tokens: [' cout', 'cout', ' sum', ' c', ' carry']
Probs: [99.98, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   cout

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;
\n	assign cout
API response time: 0.808291 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

	assign sum = a ^ b;

	assign cout = a & b;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:   = a & b;

endmodule
Depth of rollout:  17
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  101.0
Iteration TIME (sec):  0.013389291000000192
TOTAL GENERATED TOKENS:  1168
MCTS EXECUTION TIME (sec):  1.1979898049999997
----
 Tree depth: 0
 Node: action=None
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

• Child Action scores:[9.74340919 9.6550762  9.00468723 8.28864051 9.5537368 ]
• Child averaged monte carlo:-0.07352941176470587
• Child probablities:[47.8465      8.313       8.31300141  3.927       4.07699859]
• Child visitation:[1 1 1 1 1]
• N=101.0,Q=-0.07352941176470587,M=-0.07352941176470587
----
 Tree depth: 1
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
• Child Action scores:[15.10629317 15.15161126 15.27762789 13.87642236 13.08673721]
• Child averaged monte carlo:-0.06323531795950497
• Child probablities:[48.8  38.01  4.01  2.43  1.15]
• Child visitation:[1 1 1 1 0]
• N=67.0,Q=-0.06323531795950497,M=-0.06323531795950497
----
 Tree depth: 1
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign
• Child Action scores:[42.31101959  6.6448397   1.91218408  1.91218408  0.52585062]
• Child averaged monte carlo:6.084640939244916e-09
• Child probablities:[97.38  1.39  0.4   0.4   0.11]
• Child visitation:[1 0 0 0 0]
• N=11.0,Q=6.084640939244916e-09,M=6.084640939244916e-09
----
 Tree depth: 1
 Node: action=2
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n
• Child Action scores:[37.06413499 35.37727241  8.7074063   6.76689861  1.94050769]
• Child averaged monte carlo:0.0923077051456158
• Child probablities:[74.31 21.29  1.75  1.36  0.39]
• Child visitation:[1 1 0 0 0]
• N=12.0,Q=0.0923077051456158,M=0.0923077051456158
----
 Tree depth: 1
 Node: action=3
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
;
• Child Action scores:[-0.16197042 -0.16197042 -0.16197042 -0.16197042  0.67605917]
• Child averaged monte carlo:-0.8333333333333334
• Child probablities:[0.2 0.2 0.2 0.2 0.2]
• Child visitation:[1 1 1 1 0]
• N=5.0,Q=-0.8333333333333334,M=-0.8333333333333334
----
 Tree depth: 1
 Node: action=4
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    

• Child Action scores:[6.74290142e+01 1.08169467e+00 1.35211833e-01 3.38029583e-02
 0.00000000e+00]
• Child averaged monte carlo:0.08333333333333333
• Child probablities:[9.962e+01 3.200e-01 4.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=5.0,Q=0.08333333333333333,M=0.08333333333333333
----
 Tree depth: 2
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n
• Child Action scores:[20.92424756 19.66605728 21.45166442 19.6924567  14.43804509]
• Child averaged monte carlo:0.09729726250107223
• Child probablities:[57.07 20.99 12.73  4.68  1.72]
• Child visitation:[1 1 1 1 0]
• N=36.0,Q=0.09729726250107223,M=0.09729726250107223
----
 Tree depth: 2
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign
• Child Action scores:[26.71541484  0.29209094  0.07302274  0.          0.        ]
• Child averaged monte carlo:-0.29642854418073383
• Child probablities:[9.993e+01 4.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=27.0,Q=-0.29642854418073383,M=-0.29642854418073383
----
 Tree depth: 2
 Node: action=2
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   

• Child Action scores:[90.63972103 31.4793305   5.47362694  4.25460959  4.25460959]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[75.8  13.17  2.29  1.78  1.78]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 2
 Node: action=3
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   a
• Child Action scores:[1.85032591e+02 7.18194213e+00 1.60032406e+00 1.24903341e+00
 3.90322942e-02]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.481e+01 3.680e+00 8.200e-01 6.400e-01 2.000e-02]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 2
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum
• Child Action scores:[45.24138137  5.03463641  0.04576942  0.          0.        ]
• Child averaged monte carlo:-0.00909090516242114
• Child probablities:[9.889e+01 1.100e+00 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=10.0,Q=-0.00909090516242114,M=-0.00909090516242114
----
 Tree depth: 2
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign
• Child Action scores:[47.9758918   3.70935168  0.8291492   0.30547602  0.13091829]
• Child averaged monte carlo:0.09000000953674317
• Child probablities:[9.876e+01 8.500e-01 1.900e-01 7.000e-02 3.000e-02]
• Child visitation:[1 0 0 0 0]
• N=9.0,Q=0.09000000953674317,M=0.09000000953674317
----
 Tree depth: 2
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n   
• Child Action scores:[118.3066345    1.60145417   0.21512071   0.16731611   0.16731611]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[9.895e+01 6.700e-01 9.000e-02 7.000e-02 7.000e-02]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 2
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
• Child Action scores:[0.39032294 0.39032294 0.39032294 0.39032294 0.39032294]
• Child averaged monte carlo:-0.5
• Child probablities:[0.2 0.2 0.2 0.2 0.2]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
• Child Action scores:[0.39032294 0.39032294 0.39032294 0.39032294 0.39032294]
• Child averaged monte carlo:-0.5
• Child probablities:[0.2 0.2 0.2 0.2 0.2]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
• Child Action scores:[0.39032294 0.39032294 0.39032294 0.39032294 0.39032294]
• Child averaged monte carlo:-0.5
• Child probablities:[0.2 0.2 0.2 0.2 0.2]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
; 
• Child Action scores:[0.39032294 0.39032294 0.39032294 0.39032294 0.39032294]
• Child averaged monte carlo:-0.5
• Child probablities:[0.2 0.2 0.2 0.2 0.2]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   
• Child Action scores:[76.86448097  0.27771964  0.21600417  0.18514643  0.18514643]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[9.954e+01 9.000e-02 7.000e-02 6.000e-02 6.000e-02]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 3
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign
• Child Action scores:[28.8246652  14.89105683  7.01534233  3.30912374  1.19128455]
• Child averaged monte carlo:0.09565217598624852
• Child probablities:[95.5   2.25  1.06  0.5   0.18]
• Child visitation:[1 0 0 0 0]
• N=22.0,Q=0.09565217598624852,M=0.09565217598624852
----
 Tree depth: 3
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n 
• Child Action scores:[37.94443987 47.40554984 15.52499995  5.71319998  4.47119998]
• Child averaged monte carlo:0.08888889683617486
• Child probablities:[45.73 45.73  3.75  1.38  1.08]
• Child visitation:[1 1 0 0 0]
• N=8.0,Q=0.08888889683617486,M=0.08888889683617486
----
 Tree depth: 3
 Node: action=2
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   
• Child Action scores:[76.28589839  2.62290773  0.37029286  0.21600417  0.15428869]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[9.879e+01 8.500e-01 1.200e-01 7.000e-02 5.000e-02]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 3
 Node: action=3
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \nassign
• Child Action scores:[1.69204995e+02 2.28924405e+01 2.42000224e+00 5.46452119e-01
 1.95161471e-02]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[8.670e+01 1.173e+01 1.240e+00 2.800e-01 1.000e-02]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum
• Child Action scores:[27.22783346  0.64536213  0.          0.          0.        ]
• Child averaged monte carlo:-0.3111110969826027
• Child probablities:[9.991e+01 9.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=26.0,Q=-0.3111110969826027,M=-0.3111110969826027
----
 Tree depth: 3
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
   
• Child Action scores:[1.95024858e+02 5.85484413e-02 1.95161471e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.993e+01 3.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum =
• Child Action scores:[48.38219157  0.65459147  0.          0.          0.        ]
• Child averaged monte carlo:-0.019999998807907104
• Child probablities:[99.85  0.15  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=9.0,Q=-0.019999998807907104,M=-0.019999998807907104
----
 Tree depth: 3
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum
• Child Action scores:[51.70294983  0.4968      0.2898      0.1656      0.        ]
• Child averaged monte carlo:0.08888889683617486
• Child probablities:[9.974e+01 1.200e-01 7.000e-02 4.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=8.0,Q=0.08888889683617486,M=0.08888889683617486
----
 Tree depth: 3
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n   assign
• Child Action scores:[1.95024858e+02 1.17096883e-01 1.95161471e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.993e+01 6.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign
• Child Action scores:[9.17538664e+01 4.13999999e-01 1.65599999e-01 1.10400000e-01
 8.27999997e-02]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.966e+01 1.500e-01 6.000e-02 4.000e-02 3.000e-02]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 4
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum
• Child Action scores:[29.99637045 14.7579241   3.3011146   0.97091606  0.06472774]
• Child averaged monte carlo:0.09545455195687035
• Child probablities:[9.701e+01 2.280e+00 5.100e-01 1.500e-01 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=21.0,Q=0.09545455195687035,M=0.09545455195687035
----
 Tree depth: 4
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  
• Child Action scores:[56.39808626 39.1584695  18.48378505 11.20135889  6.78870236]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[73.01 12.69  5.99  3.63  2.2 ]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 4
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign
• Child Action scores:[88.34986637  8.00399997  1.38        1.38        0.138     ]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.596e+01 2.900e+00 5.000e-01 5.000e-01 5.000e-02]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 4
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign
• Child Action scores:[9.15790664e+01 6.89999998e-01 6.89999998e-01 5.51999998e-02
 0.00000000e+00]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.947e+01 2.500e-01 2.500e-01 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 4
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum =
• Child Action scores:[27.74910909  1.33696291  0.          0.          0.        ]
• Child averaged monte carlo:-0.3269230769230769
• Child probablities:[99.81  0.19  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=25.0,Q=-0.3269230769230769,M=-0.3269230769230769
----
 Tree depth: 4
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a
• Child Action scores:[46.41015984 45.38729985  0.          0.          0.        ]
• Child averaged monte carlo:-0.03333333465788099
• Child probablities:[56.22 43.78  0.    0.    0.  ]
• Child visitation:[1 1 0 0 0]
• N=8.0,Q=-0.03333333465788099,M=-0.03333333465788099
----
 Tree depth: 4
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum =
• Child Action scores:[55.82383039  0.11709688  0.          0.          0.        ]
• Child averaged monte carlo:0.08750000596046448
• Child probablities:[9.996e+01 3.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=7.0,Q=0.08750000596046448,M=0.08750000596046448
----
 Tree depth: 4
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum
• Child Action scores:[119.38223805   0.35853452   0.           0.           0.        ]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[99.85  0.15  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 5
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum =
• Child Action scores:[31.70528627  0.12647909  0.06323954  0.          0.        ]
• Child averaged monte carlo:0.09523810659136091
• Child probablities:[9.997e+01 2.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=20.0,Q=0.09523810659136091,M=0.09523810659136091
----
 Tree depth: 5
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign
• Child Action scores:[8.97390664e+01 4.94039998e+00 1.82159999e+00 1.10400000e-01
 8.27999997e-02]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.747e+01 1.790e+00 6.600e-01 4.000e-02 3.000e-02]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 5
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign sum
• Child Action scores:[116.38249927   5.47362694   0.57365523   0.26292531   0.        ]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[97.34  2.29  0.24  0.11  0.  ]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 5
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign sum
• Child Action scores:[118.00785574   2.03169559   0.57365523   0.45414372   0.        ]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[98.7   0.85  0.24  0.19  0.  ]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 5
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a
• Child Action scores:[27.81439125 20.78449993  0.          0.          0.        ]
• Child averaged monte carlo:-0.34400001525878904
• Child probablities:[93.99  6.01  0.    0.    0.  ]
• Child visitation:[1 1 0 0 0]
• N=24.0,Q=-0.34400001525878904,M=-0.34400001525878904
----
 Tree depth: 5
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^
• Child Action scores:[76.2809036   2.65376547  0.          0.          0.        ]
• Child averaged monte carlo:-0.13999999761581422
• Child probablities:[99.14  0.86  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=-0.13999999761581422,M=-0.13999999761581422
----
 Tree depth: 5
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^
• Child Action scores:[9.20390664e+01 8.27999997e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.997e+01 3.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 5
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a
• Child Action scores:[59.84027224  6.57204623  0.          0.          0.        ]
• Child averaged monte carlo:0.08571428912026542
• Child probablities:[98.2  1.8  0.   0.   0. ]
• Child visitation:[1 0 0 0 0]
• N=6.0,Q=0.08571428912026542,M=0.08571428912026542
----
 Tree depth: 5
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
   assign sum =
• Child Action scores:[1.95024858e+02 1.36613030e-01 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.993e+01 7.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a
• Child Action scores:[31.99189338 11.10878567  0.          0.          0.        ]
• Child averaged monte carlo:0.09500001668930054
• Child probablities:[98.2  1.8  0.   0.   0. ]
• Child visitation:[1 0 0 0 0]
• N=19.0,Q=0.09500001668930054,M=0.09500001668930054
----
 Tree depth: 6
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign sum
• Child Action scores:[1.18306635e+02 1.60145417e+00 7.40971333e-01 1.19511505e-01
 2.39023011e-02]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[9.895e+01 6.700e-01 3.100e-01 5.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 6
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n assign sum =
• Child Action scores:[1.94439373e+02 6.24516707e-01 7.80645884e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.963e+01 3.200e-01 4.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n   assign sum =
• Child Action scores:[1.94966309e+02 1.75645324e-01 1.95161471e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.99e+01 9.00e-02 1.00e-02 0.00e+00 0.00e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^
• Child Action scores:[29.67238107  0.13236495  0.          0.          0.        ]
• Child averaged monte carlo:-0.38260866248089337
• Child probablities:[9.998e+01 2.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=22.0,Q=-0.38260866248089337,M=-0.38260866248089337
----
 Tree depth: 6
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a^
• Child Action scores:[193.48308228   1.67838865   0.           0.           0.        ]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[99.14  0.86  0.    0.    0.  ]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b
• Child Action scores:[85.3911997  52.14499982  0.          0.          0.        ]
• Child averaged monte carlo:-0.19999998807907104
• Child probablities:[62.24 37.75  0.    0.    0.  ]
• Child visitation:[1 1 0 0 0]
• N=3.0,Q=-0.19999998807907104,M=-0.19999998807907104
----
 Tree depth: 6
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b
• Child Action scores:[118.53370636   2.05559789   0.           0.           0.        ]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[99.14  0.86  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 6
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^
• Child Action scores:[6.76791561e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.08333333333333333
• Child probablities:[9.999e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=5.0,Q=0.08333333333333333,M=0.08333333333333333
----
 Tree depth: 7
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^
• Child Action scores:[33.50932776  0.06015281  0.          0.          0.        ]
• Child averaged monte carlo:0.0947368584181133
• Child probablities:[9.999e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=18.0,Q=0.0947368584181133,M=0.0947368584181133
----
 Tree depth: 7
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n  assign sum =
• Child Action scores:[1.94810180e+02 2.92742206e-01 3.90322942e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.982e+01 1.500e-01 2.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b
• Child Action scores:[30.33559741  1.22982701  0.          0.          0.        ]
• Child averaged monte carlo:-0.4045454372059215
• Child probablities:[99.81  0.19  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=21.0,Q=-0.4045454372059215,M=-0.4045454372059215
----
 Tree depth: 7
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;
• Child Action scores:[175.29403319  11.20226843   5.28887586   1.95161471   0.56596827]
• Child averaged monte carlo:-0.5
• Child probablities:[89.82  5.74  2.71  1.    0.29]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 7
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a^ b;

• Child Action scores:[1.71273707e+02 1.40516259e+01 8.52855628e+00 1.15145268e+00
 3.90322942e-02]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[8.776e+01 7.200e+00 4.370e+00 5.900e-01 2.000e-02]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
assign sum = a ^ b;

• Child Action scores:[1.84564203e+02 9.19210528e+00 7.61129737e-01 5.85484413e-01
 1.95161471e-02]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.457e+01 4.710e+00 3.900e-01 3.000e-01 1.000e-02]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b
• Child Action scores:[66.25713354 35.8258338   7.99215414  0.          0.        ]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[85.79 11.61  2.59  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 8
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b
• Child Action scores:[32.74246571 31.87198507  4.6838753   0.          0.        ]
• Child averaged monte carlo:0.09444446033901638
• Child probablities:[55.77 43.43  0.8   0.    0.  ]
• Child visitation:[1 1 0 0 0]
• N=17.0,Q=0.09444446033901638,M=0.09444446033901638
----
 Tree depth: 8
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;

• Child Action scores:[31.00983529  1.07507225  1.07507225  0.37943727  0.25295818]
• Child averaged monte carlo:-0.42857142857142855
• Child probablities:[9.951e+01 1.700e-01 1.700e-01 6.000e-02 4.000e-02]
• Child visitation:[1 0 0 0 0]
• N=20.0,Q=-0.42857142857142855,M=-0.42857142857142855
----
 Tree depth: 8
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;

• Child Action scores:[81.63386639 25.77839991  2.70479999  2.12519999  0.4692    ]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[88.66  9.34  0.98  0.77  0.17]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 9
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;

• Child Action scores:[47.95649649  3.70935168  0.8291492   0.39275488  0.17455773]
• Child averaged monte carlo:0.09000000953674317
• Child probablities:[9.872e+01 8.500e-01 1.900e-01 9.000e-02 4.000e-02]
• Child visitation:[1 0 0 0 0]
• N=9.0,Q=0.09000000953674317,M=0.09000000953674317
----
 Tree depth: 9
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\
• Child Action scores:[5.58405585e+01 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.08750000596046448
• Child probablities:[9.999e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=7.0,Q=0.08750000596046448,M=0.08750000596046448
----
 Tree depth: 9
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
  
• Child Action scores:[31.9359034   1.17259404  0.          0.          0.        ]
• Child averaged monte carlo:-0.4550000190734863
• Child probablities:[99.81  0.19  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=19.0,Q=-0.4550000190734863,M=-0.4550000190734863
----
 Tree depth: 9
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;
\n
• Child Action scores:[1.19358336e+02 3.58534516e-01 2.39023011e-02 2.39023011e-02
 0.00000000e+00]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[9.983e+01 1.500e-01 1.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 10
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n
• Child Action scores:[4.98554748e+01 1.54421999e+01 2.89799999e-01 4.13999999e-02
 4.13999999e-02]
• Child averaged monte carlo:0.08888889683617486
• Child probablities:[9.617e+01 3.730e+00 7.000e-02 1.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=8.0,Q=0.08888889683617486,M=0.08888889683617486
----
 Tree depth: 10
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n
• Child Action scores:[59.83418701  6.57204623  0.          0.          0.        ]
• Child averaged monte carlo:0.08571428912026542
• Child probablities:[98.19  1.8   0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=6.0,Q=0.08571428912026542,M=0.08571428912026542
----
 Tree depth: 10
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign
• Child Action scores:[32.90155847  0.          0.          0.          0.        ]
• Child averaged monte carlo:-0.48421056647049754
• Child probablities:[100.   0.   0.   0.   0.]
• Child visitation:[1 0 0 0 0]
• N=18.0,Q=-0.48421056647049754,M=-0.48421056647049754
----
 Tree depth: 10
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
\n	assign sum = a ^ b;
\n	assign
• Child Action scores:[1.95122439e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.998e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 11
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign
• Child Action scores:[5.58405585e+01 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.08750000596046448
• Child probablities:[9.999e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=7.0,Q=0.08750000596046448,M=0.08750000596046448
----
 Tree depth: 11
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign
• Child Action scores:[6.76656349e+01 3.38029583e-02 3.38029583e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.08333333333333333
• Child probablities:[9.997e+01 1.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=5.0,Q=0.08333333333333333,M=0.08333333333333333
----
 Tree depth: 11
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout
• Child Action scores:[33.86321025  0.40983909  0.          0.          0.        ]
• Child averaged monte carlo:-0.5166666772630479
• Child probablities:[9.993e+01 7.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=17.0,Q=-0.5166666772630479,M=-0.5166666772630479
----
 Tree depth: 12
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout
• Child Action scores:[60.88693146  0.25557958  0.          0.          0.        ]
• Child averaged monte carlo:0.08571428912026542
• Child probablities:[9.992e+01 7.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=6.0,Q=0.08571428912026542,M=0.08571428912026542
----
 Tree depth: 12
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout
• Child Action scores:[7.69107676e+01 9.87447615e-01 1.23430952e-01 3.08577380e-02
 0.00000000e+00]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[9.96e+01 3.20e-01 4.00e-02 1.00e-02 0.00e+00]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 12
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout =
• Child Action scores:[34.96447972  0.05689886  0.          0.          0.        ]
• Child averaged monte carlo:-0.5529411540311926
• Child probablities:[9.999e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=16.0,Q=-0.5529411540311926,M=-0.5529411540311926
----
 Tree depth: 13
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout =
• Child Action scores:[6.76723955e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.08333333333333333
• Child probablities:[9.998e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=5.0,Q=0.08333333333333333,M=0.08333333333333333
----
 Tree depth: 13
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout =
• Child Action scores:[9.19930664e+01 1.65599999e-01 2.75999999e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.992e+01 6.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 13
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a
• Child Action scores:[36.13423983  0.3864      0.          0.          0.        ]
• Child averaged monte carlo:-0.59375
• Child probablities:[9.993e+01 7.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=15.0,Q=-0.59375,M=-0.59375
----
 Tree depth: 14
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a
• Child Action scores:[77.21163053  0.          0.          0.          0.        ]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[99.99  0.    0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 14
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout = a
• Child Action scores:[1.19489798e+02 9.56092042e-02 2.39023011e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[9.994e+01 4.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 14
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a &
• Child Action scores:[37.47987513  0.05344717  0.          0.          0.        ]
• Child averaged monte carlo:-0.6400000254313151
• Child probablities:[9.999e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=14.0,Q=-0.6400000254313151,M=-0.6400000254313151
----
 Tree depth: 15
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a &
• Child Action scores:[9.20390664e+01 8.27999997e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.997e+01 3.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 15
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;\n	assign cout = a &
• Child Action scores:[1.95122439e+02 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.998e+01 2.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 15
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b
• Child Action scores:[37.48376233 19.25980717  0.          0.          0.        ]
• Child averaged monte carlo:-0.692857197352818
• Child probablities:[96.27  3.73  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=13.0,Q=-0.692857197352818,M=-0.692857197352818
----
 Tree depth: 16
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b
• Child Action scores:[96.31651753 42.95243501  3.53754056  0.          0.        ]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[80.55 17.97  1.48  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 16
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;
• Child Action scores:[35.94205763 35.20784727 28.8590757   0.29853964  0.14926982]
• Child averaged monte carlo:-0.7538461685180664
• Child probablities:[6.662e+01 2.163e+01 1.158e+01 6.000e-02 3.000e-02]
• Child visitation:[1 1 1 0 0]
• N=12.0,Q=-0.7538461685180664,M=-0.7538461685180664
----
 Tree depth: 17
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;
• Child Action scores:[1.93717276e+02 8.00162031e-01 1.75645324e-01 1.75645324e-01
 9.75807355e-02]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.926e+01 4.100e-01 9.000e-02 9.000e-02 5.000e-02]
• Child visitation:[1 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 17
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;

• Child Action scores:[50.20224982  4.55399998  0.207       0.1242      0.1242    ]
• Child averaged monte carlo:-0.8888888888888888
• Child probablities:[9.87e+01 1.10e+00 5.00e-02 3.00e-02 3.00e-02]
• Child visitation:[1 0 0 0 0]
• N=8.0,Q=-0.8888888888888888,M=-0.8888888888888888
----
 Tree depth: 17
 Node: action=1
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
• Child Action scores:[49.89800179 61.14208612 37.07246895 17.52038668 10.61262167]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[42.17 25.58 15.51  7.33  4.44]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 17
 Node: action=2
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;endmodule
• Child Action scores:[0. 0. 0. 0. 0.]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 18
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\n
• Child Action scores:[0. 0. 0. 0. 0.]
• Child averaged monte carlo:0.0
• Child probablities:[0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0]
• N=0.0,Q=0.0,M=0.0
----
 Tree depth: 18
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;
endmodule
• Child Action scores:[0. 0. 0. 0. 0.]
• Child averaged monte carlo:-0.875
• Child probablities:[0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0]
• N=7.0,Q=-0.875,M=-0.875
----
 Tree depth: 18
 Node: action=0
• state:// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   assign sum = a ^ b;
   assign cout = a & b;;endmodule
• Child Action scores:[0. 0. 0. 0. 0.]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
END ROBUST/MAX VALUES:
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
State does not end with endmodule - not complete.
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\n
Tokens: ['endmodule', 'e', '\\n', '\\', '`']
Probs: [92.3, 7.58, 0.07, 0.03, 0.01]
Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\nendmodule
API response time: 0.353945 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
State does not end with endmodule - not complete.
getLLMestimates: prior state:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\n
Tokens: ['endmodule', 'e', '\\n', '`', '\\']
Probs: [99.5, 0.41, 0.06, 0.01, 0.01]
Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   \n	assign sum = a ^ b;
\n	assign cout = a & b;\nendmodule
API response time: 0.826732 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
   
	assign sum = a ^ b;

	assign cout = a & b;
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nTest 4 passed!\nTest 5 passed!\nTest 6 passed!\nTest 7 passed!\nTest 8 passed!\nAll tests passed!\n'

All testbench tests passed!
Rollout trimmed response:  
Depth of rollout:  19
Running getPromptScore: 
top_module
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1296897_top_module/synth_script.sh
Running bash
Retrieving snythesis results.

Currently displaying area/delay scores for  top_module  module.
Area of the chip design is:  4.256
Delay value for the chip design is:  74.12
Product:  315.45472
Score (1/chip area):  0.1
MCTS Total Time:  195.876169
