Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-1,2.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.0110714599999997,389
N/A,N/A,-1,3.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011189723000000207,389
N/A,N/A,-1,4.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [2:0] state, next_state;
    reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg stop_bit;

    // State encoding
    localparam IDLE = 3'd0,
               START = 3'd1,
               DATA = 3'd2,
               STOP = 3'd3,
               DONE = 3'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: next_state = in ? IDLE : START; // Wait for start bit (0)
            START: next_state = DATA;
            DATA: next_state = (bit_count == 4'd8) ? STOP : DATA;
            STOP: next_state = in ? DONE : IDLE; // Check for stop bit (1)
            DONE: next_state = in ? IDLE : START; // Wait for next start bit
            default: next_state = IDLE;
        endcase
    end

    // Output logic and datapath
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'd0;
            bit_count <= 4'd0;
            stop_bit <= 1'b0;
        end else begin
            case (state)
                START: begin
                    shift_reg <= 8'd0;
                    bit_count <= 4'd0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in LSB first
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    stop_bit <= in; // Capture stop bit
                end
                DONE: begin
                    // Latch the output byte
                end
            endcase
        end
    end

    // Assign outputs
    assign out_byte = (state == DONE) ? shift_reg : 8'd0;
    assign done = (state == DONE);

endmodule",0.011126624999999724,458
N/A,N/A,-1,5.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
re// State encoding
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP,
        DONE
    } state_t;

    state_t state, next_state;
    logic [7:0] shift_reg;
    logic [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011776929000000269,360
N/A,N/A,-1,6.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        RECEIVE = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == RECEIVE) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = RECEIVE;
            end
            RECEIVE: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.010657533000000274,391
N/A,N/A,-1,7.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````

    // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011270892000000199,386
N/A,N/A,-1,8.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``````w// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.01075442399999993,392
N/A,N/A,-1,9.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [2:0] state, next_state;
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 3'd0,
           START = 3'd1,
           DATA = 3'd2,
           STOP = 3'd3,
           DONE = 3'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for a valid stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 4'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 4'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 4'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No action needed
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011072959000000271,499
N/A,N/A,-1,10.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
``// State encoding
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP,
        DONE
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.010972472999999816,360
N/A,N/A,-1,11.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
 reg [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and datapath
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'd0;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    shift_reg <= 8'd0;
                    bit_count <= 3'd0;
                    done_reg <= 1'b0;
                end
                START: begin
                    bit_count <= 3'd0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    // Do nothing, just wait for stop bit verification
                end
                DONE: begin
                    done_reg <= 1'b1;
                end
            endcase
        end
    end

    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.010864691999999732,523
N/A,N/A,-1,12.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
   // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.010749563000000073,392
N/A,N/A,-1,13.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg[3:0] state, next_state;
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 4'd0;
        shift_reg <= 8'd0;
        done_reg <= 1'b0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            shift_reg <= {in, shift_reg[7:1]};
            bit_count <= bit_count + 1;
        end
        if (state == DONE) begin
            done_reg <= 1'b1;
        end else begin
            done_reg <= 1'b0;
        end
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for a valid stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.016340877999999837,421
N/A,N/A,-1,14.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
r// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011256595999999952,389
N/A,N/A,-1,15.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````
``    // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011728296999999888,384
N/A,N/A,-1,16.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
 reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg [1:0] state, next_state;

    localparam IDLE = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 4'd0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end else if (state == IDLE) begin
                bit_count <= 4'd0;
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 1'b0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 4'd8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1'b1) // Stop bit detected
                    next_state = IDLE;
                else
                    next_state = STOP;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    assign done = (state == STOP) && (in == 1'b1);
    assign out_byte = (done) ? shift_reg : 8'bx;

endmodule",0.011238206999999889,382
N/A,N/A,-1,17.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.010879419000000112,389
N/A,N/A,-1,18.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [7:0] shift_reg;
reg [3:0] state, next_state;
reg [2:0] bit_count;
reg [7:0] data_byte;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            bit_count <= bit_count + 1;
        end else if (state == DONE) begin
            bit_count <= 3'd0;
        end
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
always @(posedge clk) begin
    if (state == DATA) begin
        data_byte <= {in, data_byte[7:1]}; // Shift in the data bits
    end
    if (state == DONE) begin
        done_reg <= 1'b1;
    end else begin
        done_reg <= 1'b0;
    end
end

assign out_byte = data_byte;
assign done = done_reg;

endmodule",0.011099227999999961,466
N/A,N/A,-1,19.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``````wire logic [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(*) begin
        case (state)
            IDLE: next_state = in ? IDLE : START;
            START: next_state = DATA;
            DATA: next_state = (bit_count == 3'd7) ? STOP : DATA;
            STOP: next_state = in ? DONE : IDLE;
            DONE: next_state = in ? IDLE : START;
            default: next_state = IDLE;
        endcase
    end

    // State flip-flops
    always @(posedge clk) begin
        if (reset)
            state <= IDLE;
        else
            state <= next_state;
    end

    // Output logic
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'd0;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end
        else begin
            case (state)
                START: begin
                    shift_reg <= 8'd0;
                    bit_count <= 3'd0;
                    done_reg <= 1'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]};
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    done_reg <= in;
                end
                DONE: begin
                    done_reg <= 1'b1;
                end
            endcase
        end
    end

    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.010915987999999821,408
N/A,N/A,-1,20.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`include""Fsm_serial.vh""

    // State encoding
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP,
        DONE
    } state_t;

    state_t state, next_state;
    logic [2:0] bit_count;
    logic [7:0] shift_reg;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'd0;
            shift_reg <= 8'd0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'd0;

endmodule",0.010717253000000149,360
N/A,N/A,-1,21.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00;
localparam START = 2'b01;
localparam DATA = 2'b10;
localparam STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 4'd0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            shift_reg <= {in, shift_reg[7:1]};
            bit_count <= bit_count + 1;
        end else if (state == IDLE) begin
            bit_count <= 4'd0;
        end
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
assign done = (state == STOP) && (in == 1'b1);
assign out_byte = (done) ? shift_reg : 8'bx;

endmodule",0.011263401999999978,370
N/A,N/A,-1,22.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and shift register
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
    end else begin
        case (state)
            IDLE: begin
                bit_count <= 4'b0;
            end
            START: begin
                bit_count <= 4'b0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
            STOP: begin
                if (in == 1) begin
                    out_byte <= shift_reg;
                end
            end
        endcase
    end
end

// Done signal
assign done = (state == STOP) && (in == 1);

endmodule",0.01125543200000001,436
N/A,N/A,-1,23.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
   reg [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and datapath
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'd0;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    shift_reg <= 8'd0;
                    bit_count <= 3'd0;
                    done_reg <= 1'b0;
                end
                START: begin
                    bit_count <= 3'd0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    // No action needed, just wait for stop bit
                end
                DONE: begin
                    done_reg <= 1'b1;
                end
            endcase
        end
    end

    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011491324999999719,523
N/A,N/A,-1,24.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````
   // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011296032000000178,390
N/A,N/A,-1,25.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```````
``
    // State encoding
    typedef enum logic [2:0] {
        IDLE,       // Waiting for start bit
        START,      // Start bit detected
        DATA,       // Receiving data bits
        STOP,       // Waiting for stop bit
        DONE        // Byte received successfully
    } state_t;

    state_t state, next_state;
    logic [7:0] shift_reg;
    logic [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011101655000000044,385
N/A,N/A,-1,26.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
   reg [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and datapath
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'd0;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    shift_reg <= 8'd0;
                    bit_count <= 3'd0;
                    done_reg <= 1'b0;
                end
                START: begin
                    bit_count <= 3'd0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    // Do nothing, just wait for stop bit
                end
                DONE: begin
                    done_reg <= 1'b1;
                end
            endcase
        end
    end

    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011203652000000286,522
N/A,N/A,-1,27.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
``n// State encoding
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP
    } state_t;

    state_t state, next_state;
    logic [2:0] bit_count;
    logic [7:0] shift_reg;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'd0;
            shift_reg <= 8'd0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        done = 1'b0;
        case (state)
            IDLE: begin
                if (in == 1'b0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1'b1) begin // Stop bit detected
                    done = 1'b1;
                    next_state = IDLE;
                end else begin
                    next_state = IDLE; // Wait for stop bit
                end
            end
        endcase
    end

    // Output logic
    assign out_byte = shift_reg;

endmodule",0.011302678999999927,345
N/A,N/A,-1,28.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
reg [3:0] state, next_state;
reg [7:0] shift_reg;
reg [2:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 3'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 3'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // Do nothing, just wait for stop bit
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.01154237899999977,502
N/A,N/A,-1,29.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
n// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.010996748000000167,391
N/A,N/A,-1,30.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 4'd0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            shift_reg <= {in, shift_reg[7:1]};
            bit_count <= bit_count + 1;
        end else if (state == IDLE) begin
            bit_count <= 4'd0;
        end
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
assign done = (state == STOP) && (in == 1'b1);
assign out_byte = (done) ? shift_reg : 8'bx;

endmodule",0.011568519999999971,366
N/A,N/A,-1,31.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg[3:0] state, next_state;
reg [7:0] shift_reg;
reg [2:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for a valid stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 3'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 3'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No action needed
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.01105757900000004,505
N/A,N/A,-1,32.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```````
// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011193234999999913,392
N/A,N/A,-1,33.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
   // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    logic [7:0] shift_reg;
    logic [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011182521000000278,387
N/A,N/A,-1,34.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire shift_reg[7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00;
localparam START = 2'b01;
localparam DATA = 2'b10;
localparam STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 4'd0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            shift_reg <= {in, shift_reg[7:1]};
            bit_count <= bit_count + 1;
        end else begin
            bit_count <= 4'd0;
        end
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
assign done = (state == STOP) && (in == 1'b1);
assign out_byte = shift_reg;

endmodule",0.011348127999999846,355
N/A,N/A,-1,35.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
r// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        RECEIVE = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == RECEIVE) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = RECEIVE;
            end
            RECEIVE: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.010883471000000089,389
N/A,N/A,-1,36.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
 reg [[reg [3:0] state, next_state;
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 4'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 4'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 4'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the LSB first
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No action needed
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011565097999999718,504
N/A,N/A,-1,37.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
``ne// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011076806000000161,389
N/A,N/A,-1,38.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Datapath to shift in bits
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'd0;
    end else if (state == DATA) begin
        shift_reg <= {in, shift_reg[7:1]};
        bit_count <= bit_count + 1;
    end else if (state == STOP) begin
        bit_count <= 4'd0;
    end
end

// Output logic
assign out_byte = shift_reg;
assign done = (state == STOP) && (in == 1);

endmodule",0.011218412000000288,389
N/A,N/A,-1,39.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``````wire [2:0] state, next_state;
    reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 3'b000,
               START = 3'b001,
               DATA = 3'b010,
               STOP = 3'b011,
               WAIT_STOP = 3'b100;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
                else
                    next_state = WAIT_STOP;
            end
            WAIT_STOP: begin
                if (in == 1)
                    next_state = IDLE;
                else
                    next_state = WAIT_STOP;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and datapath
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_count <= 4'b0;
            done_reg <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    shift_reg <= 8'b0;
                    bit_count <= 4'b0;
                    done_reg <= 1'b0;
                end
                START: begin
                    bit_count <= 4'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    if (in == 1) begin
                        done_reg <= 1'b1;
                    end
                end
                WAIT_STOP: begin
                    done_reg <= 1'b0;
                end
            endcase
        end
    end

    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011060394000000251,545
N/A,N/A,-1,40.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`include ""Fsm_serial.vh""

    reg [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(*) begin
        case (state)
            IDLE: next_state = in ? IDLE : START;
            START: next_state = DATA;
            DATA: next_state = (bit_count == 3'd7) ? STOP : DATA;
            STOP: next_state = in ? DONE : IDLE;
            DONE: next_state = in ? IDLE : START;
            default: next_state = IDLE;
        endcase
    end

    // State flip-flops
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Output logic
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'd0;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end else begin
            case (state)
                START: begin
                    shift_reg <= 8'd0;
                    bit_count <= 3'd0;
                    done_reg <= 1'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]};
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    done_reg <= in;
                end
                DONE: begin
                    done_reg <= 1'b1;
                end
            endcase
        end
    end

    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011020991000000091,419
N/A,N/A,-1,41.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
   reg [7:0] shift_reg;
    reg [3:0] state, next_state;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
            if (state == DONE) begin
                done_reg <= 1'b1;
            end else begin
                done_reg <= 1'b0;
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 1'b0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1'b1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011122212000000076,420
N/A,N/A,-1,42.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
 reg [[7:0] shift_reg;
    reg [3:0] bit_count;
    reg [1:0] state, next_state;
    
    localparam IDLE = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;
    
    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end
    
    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
                else
                    next_state = STOP;
            end
            default: next_state = IDLE;
        endcase
    end
    
    // Output logic and bit counting
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_count <= 4'b0;
            done <= 0;
        end else begin
            case (state)
                IDLE: begin
                    bit_count <= 4'b0;
                    done <= 0;
                end
                START: begin
                    bit_count <= 4'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]};
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    if (in == 1) begin
                        out_byte <= shift_reg;
                        done <= 1;
                    end else begin
                        done <= 0;
                    end
                end
            endcase
        end
    end

endmodule",0.011308923000000526,450
N/A,N/A,-1,43.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````      
    // State encoding
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP
    } state_t;

    state_t state, next_state;
    logic [7:0] shift_reg;
    logic [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'd0;
            shift_reg <= 8'd0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == STOP) && (in == 1);
    assign out_byte = (done) ? shift_reg : 8'd0;

endmodule",0.010947006000000314,325
N/A,N/A,-1,44.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 4'd0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            bit_count <= bit_count + 1;
        end else begin
            bit_count <= 4'd0;
        end
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Shift register to capture incoming bits
always @(posedge clk) begin
    if (state == DATA) begin
        shift_reg <= {in, shift_reg[7:1]};
    end
end

// Output logic
assign out_byte = shift_reg;
assign done = (state == STOP) && (in == 1'b1);

endmodule",0.011428633999999604,382
N/A,N/A,-1,45.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
   reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg [1:0] state, next_state;

    localparam IDLE = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
                else
                    next_state = STOP;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and shift register
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_count <= 4'b0;
            done <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    bit_count <= 4'b0;
                    done <= 1'b0;
                end
                START: begin
                    bit_count <= 4'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    if (in == 1) begin
                        out_byte <= shift_reg;
                        done <= 1'b1;
                    end else begin
                        done <= 1'b0;
                    end
                end
            endcase
        end
    end

endmodule",0.011716026000000213,465
N/A,N/A,-1,46.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [3:0] state, next_state;
reg [7:0] shift_reg;
reg [2:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 3'd0;
        shift_reg <= 8'd0;
        done_reg <= 1'b0;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    next_state = state;
    done_reg = 1'b0;
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for a valid stop bit
        end
        DONE: begin
            done_reg = 1'b1;
            next_state = IDLE;
        end
    endcase
end

// Output logic and shift register
always @(posedge clk) begin
    if (state == DATA) begin
        shift_reg <= {in, shift_reg[7:1]};
        bit_count <= bit_count + 1;
    end else if (state == DONE) begin
        bit_count <= 3'd0;
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011046949999999889,411
N/A,N/A,-1,47.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:``0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00;
localparam START = 2'b01;
localparam DATA = 2'b10;
localparam STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Datapath and control logic
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
    end else begin
        case (state)
            IDLE: begin
                bit_count <= 4'b0;
            end
            START: begin
                bit_count <= 4'b0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // Do nothing, wait for stop bit
            end
        endcase
    end
end

// Output logic
assign out_byte = shift_reg;
assign done = (state == STOP) && (in == 1);

endmodule",0.011553977999999354,437
N/A,N/A,-1,48.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [3:0] state, next_state;
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 4'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 4'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 4'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No action needed
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011240256999999865,497
N/A,N/A,-1,49.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````
```// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.01148723599999979,389
N/A,N/A,-1,50.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```````
``n// State encoding
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP,
        DONE
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011265021000000708,361
N/A,N/A,-1,51.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire[ [wire [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;
reg [7:0] data_byte;
reg done_reg;

// State encoding
localparam IDLE = 2'b00;
localparam START = 2'b01;
localparam DATA = 2'b10;
localparam STOP = 2'b11;

// Shift register to capture incoming bits
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
    end else if (state == DATA) begin
        shift_reg <= {in, shift_reg[7:1]};
    end
end

// Bit counter to count the number of data bits received
always @(posedge clk) begin
    if (reset) begin
        bit_count <= 4'b0;
    end else if (state == DATA) begin
        bit_count <= bit_count + 1;
    end else begin
        bit_count <= 4'b0;
    end
end

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) begin
                next_state = START;
            end else begin
                next_state = IDLE;
            end
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 8) begin
                next_state = STOP;
            end else begin
                next_state = DATA;
            end
        end
        STOP: begin
            if (in == 1) begin
                next_state = IDLE;
            end else begin
                next_state = STOP;
            end
        end
        default: begin
            next_state = IDLE;
        end
    endcase
end

// Output logic
always @(posedge clk) begin
    if (reset) begin
        done_reg <= 0;
        data_byte <= 8'b0;
    end else if (state == STOP && in == 1) begin
        done_reg <= 1;
        data_byte <= shift_reg;
    end else begin
        done_reg <= 0;
    end
end

assign done = done_reg;
assign out_byte = data_byte;

endmodule",0.011536512000000165,529
N/A,N/A,-1,52.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg    // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    logic [7:0] shift_reg;
    logic [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'b000;
            shift_reg <= 8'b00000000;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 1'b0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // All 8 data bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1'b1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE; // Return to IDLE after byte is done
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'bxxxxxxxx;
    assign done = (state == DONE);

endmodule",0.011261866999999981,404
N/A,N/A,-1,53.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
reg [7:0] shift_reg;
reg [3:0] state, next_state;
reg [2:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0;
localparam START = 4'd1;
localparam DATA = 4'd2;
localparam STOP = 4'd3;
localparam DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            shift_reg <= {in, shift_reg[7:1]};
            bit_count <= bit_count + 1;
        end
        if (state == DONE) begin
            done_reg <= 1'b1;
        end else begin
            done_reg <= 1'b0;
        end
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for a valid stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011264865000000235,408
N/A,N/A,-1,54.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
   reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg [1:0] state, next_state;

    // State encoding
    localparam IDLE = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
                else
                    next_state = STOP;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and bit counter
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_count <= 4'b0;
            done <= 0;
        end else begin
            case (state)
                IDLE: begin
                    bit_count <= 0;
                    done <= 0;
                end
                START: begin
                    bit_count <= 0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    if (in == 1) begin
                        out_byte <= shift_reg;
                        done <= 1;
                    end else begin
                        done <= 0;
                    end
                end
            endcase
        end
    end

endmodule",0.011504260999999794,457
N/A,N/A,-1,55.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
`new
    // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // All 8 data bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE; // Return to IDLE after done
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.01162484799999941,392
N/A,N/A,-1,56.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``````// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 data bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.010956877000000809,390
N/A,N/A,-1,57.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
nput// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 data bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011103513999999315,390
N/A,N/A,-1,58.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```````
// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011039939000000665,390
N/A,N/A,-1,59.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
``// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011320335000000625,391
N/A,N/A,-1,60.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`timescale 1ns / 1ps

    // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'b000;
            shift_reg <= 8'b00000000;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // All 8 data bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'bxxxxxxxx;
    assign done = (state == DONE);

endmodule",0.010753161999999428,397
N/A,N/A,-1,61.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg[ [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Datapath to shift in bits and count them
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
    end else if (state == DATA) begin
        shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
        bit_count <= bit_count + 1;
    end else if (state == STOP) begin
        bit_count <= 4'b0; // Reset bit count after stop bit
    end
end

// Output logic
assign out_byte = shift_reg;
assign done = (state == STOP) && (in == 1);

endmodule",0.011503632000000152,410
N/A,N/A,-1,62.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
 reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg [1:0] state, next_state;

    localparam IDLE = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
                else
                    next_state = STOP;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and shift register
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_count <= 4'b0;
            done <= 0;
        end else begin
            case (state)
                IDLE: begin
                    bit_count <= 4'b0;
                    done <= 0;
                end
                START: begin
                    bit_count <= 4'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    if (in == 1) begin
                        out_byte <= shift_reg;
                        done <= 1;
                    end else begin
                        done <= 0;
                    end
                end
            endcase
        end
    end

endmodule",0.011430037000000226,461
N/A,N/A,-1,63.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [7:0data_shift;
reg [3:0] bit_count;
reg [7:0] shift_reg;
reg [2:0] state, next_state;

// State encoding
localparam IDLE = 3'd0,
           START = 3'd1,
           DATA = 3'd2,
           STOP = 3'd3,
           DONE = 3'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and data path
always @(posedge clk) begin
    if (reset) begin
        bit_count <= 4'd0;
        shift_reg <= 8'd0;
    end else begin
        case (state)
            IDLE: begin
                bit_count <= 4'd0;
            end
            START: begin
                bit_count <= 4'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // Do nothing
            end
            DONE: begin
                // Do nothing
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = (state == DONE);

endmodule",0.011637306999999986,473
N/A,N/A,-1,64.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            shift_reg <= {in, shift_reg[7:1]};
            bit_count <= bit_count + 1;
        end else if (state == IDLE) begin
            bit_count <= 4'b0;
        end
    end
end

always @(*) begin
    next_state = state;
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP; // Wait for stop bit
        end
    endcase
end

assign done = (state == STOP) && (in == 1);
assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.01110514900000048,337
N/A,N/A,-1,65.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:``0reg [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Datapath to shift in bits
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
    end else if (state == DATA) begin
        shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
        bit_count <= bit_count + 1;
    end else if (state == STOP) begin
        bit_count <= 4'b0; // Reset bit count after stop bit
    end
end

// Output logic
assign out_byte = shift_reg;
assign done = (state == STOP) && (in == 1);

endmodule",0.011856127000000605,407
N/A,N/A,-1,66.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````
   reg [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and datapath
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'd0;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    shift_reg <= 8'd0;
                    bit_count <= 3'd0;
                    done_reg <= 1'b0;
                end
                START: begin
                    bit_count <= 3'd0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    // No action needed, just wait for stop bit
                end
                DONE: begin
                    done_reg <= 1'b1;
                end
            endcase
        end
    end

    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011202230000000313,523
N/A,N/A,-1,67.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```````reg [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 4'd0;
            shift_reg <= 8'd0;
            done_reg <= 1'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
            if (state == DONE) begin
                done_reg <= 1'b1;
            end else begin
                done_reg <= 1'b0;
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 1'b0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 4'd8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1'b1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.01113359100000011,428
N/A,N/A,-1,68.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

   wire [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [3:0] bit_count;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 4'd0;
            shift_reg <= 8'd0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 4'd8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'd0;

endmodule",0.01117823000000051,389
N/A,N/A,-1,69.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire shift_reg;reg [3:0] state, next_state;
reg [7:0] shift_reg;
reg [2:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           RECEIVE = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = RECEIVE;
        end
        RECEIVE: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = RECEIVE;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and shift register
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 3'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 3'd0;
            end
            RECEIVE: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in LSB first
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No operation, just wait for stop bit
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011222794000000036,508
N/A,N/A,-1,70.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
   reg[ [reg [3:0] state, next_state;
   reg [7:0] shift_reg;
   reg [2:0] bit_count;
   reg done_reg;

   // State encoding
   localparam IDLE = 4'd0,
              START = 4'd1,
              DATA = 4'd2,
              STOP = 4'd3,
              DONE = 4'd4;

   // State transition logic
   always @(posedge clk) begin
       if (reset) begin
           state <= IDLE;
           bit_count <= 3'd0;
           shift_reg <= 8'd0;
           done_reg <= 1'b0;
       end else begin
           state <= next_state;
           if (state == DATA) begin
               shift_reg <= {in, shift_reg[7:1]};
               bit_count <= bit_count + 1;
           end
           if (state == DONE) begin
               done_reg <= 1'b1;
           end else begin
               done_reg <= 1'b0;
           end
       end
   end

   // Next state logic
   always @(*) begin
       case (state)
           IDLE: begin
               if (in == 1'b0) // Start bit detected
                   next_state = START;
               else
                   next_state = IDLE;
           end
           START: begin
               next_state = DATA;
           end
           DATA: begin
               if (bit_count == 3'd7)
                   next_state = STOP;
               else
                   next_state = DATA;
           end
           STOP: begin
               if (in == 1'b1) // Stop bit detected
                   next_state = DONE;
               else
                   next_state = IDLE; // Wait for a valid stop bit
           end
           DONE: begin
               next_state = IDLE;
           end
           default: next_state = IDLE;
       endcase
   end

   // Output logic
   assign out_byte = shift_reg;
   assign done = done_reg;

endmodule",0.011354034000000013,438
N/A,N/A,-1,71.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
      // State encoding
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP,
        DONE
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011121040999999998,358
N/A,N/A,-1,72.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire Fsm_serial fsm (
    .clk(clk),
    .in(in),
    .reset(reset),
    .done(done)
);

reg [7:0] shift_reg;
reg [3:0] bit_count;

always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
    end else if (done) begin
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
    end else begin
        shift_reg <= {in, shift_reg[7:1]};
        bit_count <= bit_count + 1;
    end
end

assign out_byte = shift_reg;

endmodule",0.011083712000000467,148
N/A,N/A,-1,73.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``````````// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'b000;
            shift_reg <= 8'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.010945754999999835,392
N/A,N/A,-1,74.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
``new// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always_comb begin
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and datapath
    always_ff @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            case (state)
                START: begin
                    bit_count <= 3'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    // Do nothing, just wait for stop bit
                end
                DONE: begin
                    // Latch the output byte
                end
            endcase
        end
    end

    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.011205640000000017,500
N/A,N/A,-1,75.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:0` reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg [1:0] state, next_state;

    localparam IDLE = 2'b00;
    localparam START = 2'b01;
    localparam DATA = 2'b10;
    localparam STOP = 2'b11;

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 4'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end else if (state == IDLE) begin
                bit_count <= 4'b0;
            end
        end
    end

    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 8)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
            end
        endcase
    end

    assign done = (state == STOP) && (in == 1);
    assign out_byte = shift_reg;

endmodule",0.011552320999999921,328
N/A,N/A,-1,76.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
   reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg [1:0] state, next_state;

    // State encoding
    localparam IDLE = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 4'd0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end else if (state == IDLE) begin
                bit_count <= 4'd0;
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 4'd8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
                else
                    next_state = STOP;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    assign done = (state == STOP) && (in == 1);
    assign out_byte = shift_reg;

endmodule",0.011475047000000238,365
N/A,N/A,-1,77.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```````
``// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011336972999999695,390
N/A,N/A,-1,78.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [7:0 data;
reg [3:0] state, next_state;
reg [7:0] shift_reg;
reg [2:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Detect start bit
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Detect stop bit
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 3'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 3'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the serial data
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No operation needed
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011569018999999514,499
N/A,N/A,-1,79.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
 reg [[7:0] shift_reg;
    reg [3:0] bit_count;
    reg [1:0] state, next_state;

    localparam IDLE = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
                else
                    next_state = STOP;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and shift register
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_count <= 4'b0;
            done <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    bit_count <= 4'b0;
                    done <= 1'b0;
                end
                START: begin
                    bit_count <= 4'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]};
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    if (in == 1) begin
                        done <= 1'b1;
                    end else begin
                        done <= 1'b0;
                    end
                end
            endcase
        end
    end

    assign out_byte = shift_reg;

endmodule",0.011741001999999945,462
N/A,N/A,-1,80.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
``newline    // State encoding
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP
    } state_t;

    state_t state, next_state;
    logic [7:0] shift_reg;
    logic [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == STOP) && (in == 1);
    assign out_byte = (done) ? shift_reg : 8'bx;

endmodule",0.011266827000000035,324
N/A,N/A,-1,81.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``````wire [7:0] shift_reg;
reg [3:0] state, next_state;
reg [2:0] bit_count;
reg [7:0] data_byte;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            bit_count <= bit_count + 1;
        end else if (state == DONE) begin
            bit_count <= 3'd0;
        end
    end
end

// Next state logic
always @(*) begin
    next_state = state;
    done_reg = 1'b0;
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
        end
        STOP: begin
            if (in == 1'b1) begin // Stop bit detected
                next_state = DONE;
                done_reg = 1'b1;
            end else begin
                next_state = IDLE; // Error, wait for next start bit
            end
        end
        DONE: begin
            next_state = IDLE;
        end
    endcase
end

// Shift register to capture data bits
always @(posedge clk) begin
    if (state == DATA) begin
        data_byte <= {in, data_byte[7:1]};
    end
end

// Output logic
assign out_byte = data_byte;
assign done = done_reg;

endmodule",0.011193758999999304,436
N/A,N/A,-0.1,82.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`include """"fsm_serial.v""

    // State encoding
    localparam IDLE = 2'b00;
    localparam START = 2'b01;
    localparam DATA = 2'b10;
    localparam STOP = 2'b11;

    reg [1:0] state, next_state;
    reg [2:0] bit_count;
    reg [7:0] shift_reg;
    reg done_reg;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'b000;
            shift_reg <= 8'b00000000;
            done_reg <= 1'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
            if (state == STOP && in == 1'b1) begin
                done_reg <= 1'b1;
            end else begin
                done_reg <= 1'b0;
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 1'b0) begin
                    next_state = START;
                end else begin
                    next_state = IDLE;
                end
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) begin
                    next_state = STOP;
                end else begin
                    next_state = DATA;
                end
            end
            STOP: begin
                if (in == 1'b1) begin
                    next_state = IDLE;
                end else begin
                    next_state = STOP;
                end
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011200778000000078,431
N/A,N/A,-1,83.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
reg [3:0] state, next_state;
reg [7:0] shift_reg;
reg [2:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 3'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 3'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the LSB first
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No action needed
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.01082563599999986,502
N/A,N/A,-1,84.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [[7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Datapath to shift in bits and count them
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'd0;
    end else if (state == DATA) begin
        shift_reg <= {in, shift_reg[7:1]};
        bit_count <= bit_count + 1;
    end else if (state == STOP) begin
        bit_count <= 4'd0;
    end
end

// Output logic
assign out_byte = shift_reg;
assign done = (state == STOP) && (in == 1);

endmodule",0.011536040000000192,395
N/A,N/A,-1,85.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Datapath to shift in bits and count them
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
    end else if (state == DATA) begin
        shift_reg <= {in, shift_reg[7:1]};
        bit_count <= bit_count + 1;
    end else if (state == STOP) begin
        bit_count <= 4'b0;
    end
end

// Output logic
assign out_byte = shift_reg;
assign done = (state == STOP) && (in == 1);

endmodule",0.01142321699999993,395
N/A,N/A,-1,86.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````
`n    // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    logic [7:0] shift_reg;
    logic [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'b000;
            shift_reg <= 8'b00000000;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // All 8 data bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE; // Return to IDLE after done
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'bxxxxxxxx;

endmodule",0.011290892999999969,395
N/A,N/A,-1,87.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`
n// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Error, wait for next start bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.010767635999999747,388
N/A,N/A,-1,88.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
nput;// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Detect stop bit
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign out_byte = (state == DONE) ? shift_reg : 8'b0;
    assign done = (state == DONE);

endmodule",0.010882258999999728,393
N/A,N/A,-1,89.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````` reg [7:0] shift_reg;
    reg [3:0] state, next_state;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
            if (state == DONE) begin
                done_reg <= 1'b1;
            end else begin
                done_reg <= 1'b0;
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 1'b0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1'b1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.010930263999999745,420
N/A,N/A,-1,90.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire[ [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and bit counter
always @(posedge clk) begin
    if (reset) begin
        bit_count <= 4'd0;
        shift_reg <= 8'd0;
    end else begin
        case (state)
            IDLE: begin
                bit_count <= 4'd0;
            end
            START: begin
                bit_count <= 4'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                bit_count <= bit_count + 1;
            end
            STOP: begin
                if (in == 1) begin
                    out_byte <= shift_reg;
                end
            end
        endcase
    end
end

// Done signal
assign done = (state == STOP) && (in == 1);

endmodule",0.01170042699999918,444
N/A,N/A,-1,91.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```````
```   verilog
    // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.01130538800000025,390
N/A,N/A,-1,92.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg[3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and datapath
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'd0;
            bit_count <= 3'd0;
            done_reg <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    shift_reg <= 8'd0;
                    bit_count <= 3'd0;
                    done_reg <= 1'b0;
                end
                START: begin
                    bit_count <= 3'd0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    // No action needed, just wait for stop bit
                end
                DONE: begin
                    done_reg <= 1'b1;
                end
            endcase
        end
    end

    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011154930999999202,530
N/A,N/A,-1,93.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00;
localparam START = 2'b01;
localparam DATA = 2'b10;
localparam STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 4'd0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            shift_reg <= {in, shift_reg[7:1]};
            bit_count <= bit_count + 1;
        end else if (state == IDLE) begin
            bit_count <= 4'd0;
        end
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
assign done = (state == STOP) && (in == 1'b1);
assign out_byte = shift_reg;

endmodule",0.01110034800000026,361
N/A,N/A,-1,94.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``````
 reg [3:0] state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 4'd0,
               START = 4'd1,
               DATA = 4'd2,
               STOP = 4'd3,
               DONE = 4'd4;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'd0;
            shift_reg <= 8'd0;
            done_reg <= 1'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
            if (state == DONE) begin
                done_reg <= 1'b1;
            end else begin
                done_reg <= 1'b0;
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 1'b0) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1'b1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011355561000000236,430
N/A,N/A,-1,95.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

````      ``// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for a valid stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.01272442200000068,389
N/A,N/A,-1,96.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [2:0] state, next_state;
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 3'b000,
           START = 3'b001,
           DATA = 3'b010,
           STOP = 3'b011,
           DONE = 3'b100;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'b0;
        bit_count <= 4'b0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'b0;
                bit_count <= 4'b0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 4'b0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the LSB first
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No action needed
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011401013999999599,496
N/A,N/A,-1,97.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

`````
reg [3:0] state, next_state;
reg [7:0] shift_reg;
reg [2:0] bit_count;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
    end else begin
        state <= next_state;
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for a valid stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic and datapath
always @(posedge clk) begin
    if (reset) begin
        shift_reg <= 8'd0;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        case (state)
            IDLE: begin
                shift_reg <= 8'd0;
                bit_count <= 3'd0;
                done_reg <= 1'b0;
            end
            START: begin
                bit_count <= 3'd0;
            end
            DATA: begin
                shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                bit_count <= bit_count + 1;
            end
            STOP: begin
                // No action needed
            end
            DONE: begin
                done_reg <= 1'b1;
            end
        endcase
    end
end

assign out_byte = shift_reg;
assign done = done_reg;

endmodule",0.011094389999999343,504
N/A,N/A,-1,98.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
reg [7:0] shift_reg;
reg [3:0] bit_count;
reg [1:0] state, next_state;

// State encoding
localparam IDLE = 2'b00,
           START = 2'b01,
           DATA = 2'b10,
           STOP = 2'b11;

// FSM state transition
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 4'd0;
        shift_reg <= 8'd0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            shift_reg <= {in, shift_reg[7:1]};
            bit_count <= bit_count + 1;
        end
    end
end

// FSM next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 4'd8)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1) // Stop bit detected
                next_state = IDLE;
            else
                next_state = STOP;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
assign done = (state == STOP) && (in == 1);
assign out_byte = shift_reg;

endmodule",0.010985385999999764,339
N/A,N/A,-1,99.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
wire [7:0] shift_reg;
reg [3:0] state, next_state;
reg [2:0] bit_count;
reg [7:0] data_byte;
reg done_reg;

// State encoding
localparam IDLE = 4'd0,
           START = 4'd1,
           DATA = 4'd2,
           STOP = 4'd3,
           DONE = 4'd4;

// State transition logic
always @(posedge clk) begin
    if (reset) begin
        state <= IDLE;
        bit_count <= 3'd0;
        done_reg <= 1'b0;
    end else begin
        state <= next_state;
        if (state == DATA) begin
            bit_count <= bit_count + 1;
        end else if (state == DONE) begin
            bit_count <= 3'd0;
        end
    end
end

// Next state logic
always @(*) begin
    case (state)
        IDLE: begin
            if (in == 1'b0) // Start bit detected
                next_state = START;
            else
                next_state = IDLE;
        end
        START: begin
            next_state = DATA;
        end
        DATA: begin
            if (bit_count == 3'd7)
                next_state = STOP;
            else
                next_state = DATA;
        end
        STOP: begin
            if (in == 1'b1) // Stop bit detected
                next_state = DONE;
            else
                next_state = IDLE; // Wait for stop bit
        end
        DONE: begin
            next_state = IDLE;
        end
        default: next_state = IDLE;
    endcase
end

// Output logic
always @(posedge clk) begin
    if (state == DATA) begin
        data_byte <= {in, data_byte[7:1]}; // Shift in the data bits
    end
    if (state == DONE) begin
        done_reg <= 1'b1;
    end else begin
        done_reg <= 1'b0;
    end
end

assign out_byte = data_byte;
assign done = done_reg;

endmodule",0.011632116000000359,466
N/A,N/A,-1,100.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

``
   reg [7:0:0] state, next_state;
    reg [7:0] shift_reg;
    reg [3:0] bit_count;
    reg done_reg;

    // State encoding
    localparam IDLE = 2'b00,
               START = 2'b01,
               DATA = 2'b10,
               STOP = 2'b11;

    // State transition logic
    always @(*) begin
        case (state)
            IDLE: next_state = (in == 0) ? START : IDLE;
            START: next_state = DATA;
            DATA: next_state = (bit_count == 8) ? STOP : DATA;
            STOP: next_state = (in == 1) ? IDLE : STOP;
            default: next_state = IDLE;
        endcase
    end

    // State register
    always @(posedge clk) begin
        if (reset)
            state <= IDLE;
        else
            state <= next_state;
    end

    // Output logic and shift register
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_count <= 4'b0;
            done_reg <= 1'b0;
        end
        else begin
            case (state)
                IDLE: begin
                    shift_reg <= 8'b0;
                    bit_count <= 4'b0;
                    done_reg <= 1'b0;
                end
                START: begin
                    bit_count <= 4'b0;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]};
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    if (in == 1) begin
                        done_reg <= 1'b1;
                    end
                end
            endcase
        end
    end

    // Assign outputs
    assign out_byte = shift_reg;
    assign done = done_reg;

endmodule",0.011698250999999438,419
N/A,N/A,-1,101.0,1,"// Assume you have a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte.
// Now that you have a finite state machine that can identify when bytes are correctly received in a serial bitstream, add a datapath that will output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.

// Note that the serial protocol sends the least significant bit first.

// Hint: The serial bitstream needs to be shifted in one bit at a time, then read out in parallel. 
// Use FSM from Fsm_serial
// New: Datapath to latch input bits.

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

```
`new_// State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;

    state_t state, next_state;
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[7:1]};
                bit_count <= bit_count + 1;
            end
        end
    end

    // Next state logic
    always_comb begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) // 8 bits received
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1) // Stop bit detected
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait for stop bit
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end

    // Output logic
    assign done = (state == DONE);
    assign out_byte = (done) ? shift_reg : 8'b0;

endmodule",0.011207896000000162,1152
