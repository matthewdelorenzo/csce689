Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-0.1,2.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule",0.01037374900000021,14
N/A,N/A,-0.1,3.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule",0.010976730999999962,13
N/A,N/A,-0.1,4.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule",0.010243056999999833,12
N/A,N/A,-0.1,5.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
    q <= d;
end

endmodule",0.011203625999999911,11
N/A,N/A,-0.1,6.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule",0.01037140400000025,16
N/A,N/A,-0.1,7.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
    q <= d;
end

endmodule",0.01058798300000019,10
N/A,N/A,-0.1,8.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule",0.010511263999999798,10
N/A,N/A,-0.1,9.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule",0.01082566000000007,10
N/A,N/A,-0.1,10.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
    q <= d;
end

endmodule",0.01534652000000003,9
N/A,N/A,-0.1,11.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule",0.010426985000000055,15
N/A,N/A,-0.1,12.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule",0.011203522000000188,9
N/A,N/A,-0.1,13.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
       q <= d;
end

endmodule",0.011164541999999944,9
N/A,N/A,-0.1,14.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin       
    q <= d;
end

endmodule",0.010686785999999948,10
N/A,N/A,-0.1,15.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
       q <= d;
end

endmodule",0.010920215000000066,9
N/A,N/A,-0.1,16.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule",0.010859573000000289,7
N/A,N/A,-0.1,17.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule",0.0104679889999999,14
N/A,N/A,-0.1,18.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
          q <= d;
end

endmodule",0.011272881000000012,9
N/A,N/A,-0.1,19.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule",0.010782956999999982,9
N/A,N/A,-0.1,20.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule",0.011417992999999793,6
N/A,N/A,-0.1,21.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d;
end

endmodule",0.01080881499999986,9
N/A,N/A,-0.1,22.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule",0.010264316000000218,17
N/A,N/A,-0.1,23.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
       q <= d;
end

endmodule",0.010925833000000384,9
N/A,N/A,-0.1,24.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
    q <= d;
end

endmodule",0.010774152999999842,9
N/A,N/A,-0.1,25.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule",0.011299183999999851,5
N/A,N/A,-0.1,26.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule",0.011525505999999908,4
N/A,N/A,-0.1,27.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
q <= d;
end

endmodule",0.011155336999999932,15
N/A,N/A,-0.1,28.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
       q <= d;

endmodule",0.010338972000000002,8
N/A,N/A,-0.1,29.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
 end

endmodule",0.01119091800000005,7
N/A,N/A,-1,30.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.011219827000000127,2
N/A,N/A,-0.1,31.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
 end

endmodule",0.01128142100000007,6
N/A,N/A,-0.1,32.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule",0.011126160999999968,7
N/A,N/A,-0.1,33.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)

       q <= d;

endmodule",0.010369037999999886,8
N/A,N/A,-0.1,34.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
       q <= d;
end

endmodule",0.010994944000000118,9
N/A,N/A,-0.1,35.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
       q <= d;
end

endmodule",0.011059675999999907,9
N/A,N/A,-0.1,36.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
       q <= d;
end

endmodule",0.01094288600000004,9
N/A,N/A,-0.1,37.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
       q <= d;
end

endmodule",0.010817893000000023,9
N/A,N/A,-1,38.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.011391720000000216,1
N/A,N/A,-0.1,39.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
    q <= d;
end

endmodule",0.011028225000000003,10
N/A,N/A,-0.1,40.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   begin
       q <= d;
   end

endmodule",0.010976011999999535,11
N/A,N/A,-0.1,41.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule",0.011020691999999777,6
N/A,N/A,-1,42.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.002770725000000418,0
N/A,N/A,-0.1,43.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
                q <= d;
end

endmodule",0.011208471000000664,9
N/A,N/A,-0.1,44.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule",0.010704035999999917,16
N/A,N/A,-0.1,45.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q <= d;
end

endmodule",0.011085650000000058,6
N/A,N/A,-0.1,46.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
          q <= d;
end

endmodule",0.011457613000000144,9
N/A,N/A,-0.1,47.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
 end

endmodule",0.011367865000000421,5
N/A,N/A,-1,48.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.0029610289999997264,0
N/A,N/A,-0.1,49.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d;
end

endmodule",0.011031487999999534,7
N/A,N/A,-0.1,50.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
    q <= d;
end

endmodule",0.011034251999999967,9
N/A,N/A,-0.1,51.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule",0.011376001000000358,5
N/A,N/A,-0.1,52.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
 end

endmodule",0.011342076000000034,7
N/A,N/A,-1,53.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.002793352999999499,0
N/A,N/A,-0.1,54.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always@(posedge clk) begin
    q <= d;
end

endmodule",0.010179820000000284,13
N/A,N/A,-0.1,55.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
       q <= d;
end

endmodule",0.011375267000000022,9
N/A,N/A,-0.1,56.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <= d;
end

endmodule",0.011724635000000205,7
N/A,N/A,-0.1,57.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
   q <= d;
 end

endmodule",0.01132773800000031,6
N/A,N/A,-1,58.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.0027685529999992298,0
N/A,N/A,-0.1,59.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
         
    q <= d;
end

endmodule",0.011152118000000044,10
N/A,N/A,-0.1,60.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin q <= d; end endmodule",0.011325089999999705,6
N/A,N/A,-0.1,61.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
 begin
    q <= d;
end

endmodule",0.010782344999999971,9
N/A,N/A,-0.1,62.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin    
   
    q <= d;
end

endmodule",0.011069953999999882,10
N/A,N/A,-0.1,63.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d;
end

endmodule",0.011123245000000281,6
N/A,N/A,-0.1,64.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
      
    q <= d;
end

endmodule",0.010917485000000227,10
N/A,N/A,-0.1,65.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule",0.011280726999999935,4
N/A,N/A,-0.1,66.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(posedge clk) begin
        q <= d;
    end

endmodule",0.010617604999999308,16
N/A,N/A,-0.1,67.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;

 end

endmodule",0.011531301999999855,5
N/A,N/A,-1,68.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.0027663860000002316,0
N/A,N/A,-0.1,69.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d;
end

endmodule",0.011391036000000021,6
N/A,N/A,-0.1,70.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
 end

endmodule",0.011571255000000669,6
N/A,N/A,-0.1,71.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(posedge clk) begin
        q <= d;
    end

endmodule",0.010306255000000597,14
N/A,N/A,-1,72.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.0028096300000006735,0
N/A,N/A,-0.1,73.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   begin
    q <= d;
   end

endmodule",0.010953069000000148,10
N/A,N/A,-1,74.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule",0.011120770999999863,2
N/A,N/A,-0.1,75.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
       
       q <= d;
end

endmodule",0.011460795000000523,9
N/A,N/A,-0.1,76.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
    q <= d;
 end

endmodule",0.011232371000000185,6
N/A,N/A,-0.1,77.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)

       begin
        q <= d;
    end

endmodule",0.010936693000000552,13
N/A,N/A,-0.1,78.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q <= d;
end

endmodule",0.010962965000000047,5
N/A,N/A,-0.1,79.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <= d;
end

endmodule",0.011536693000000042,6
N/A,N/A,-0.1,80.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin         
    q <= d;
end

endmodule",0.011015018999999349,9
N/A,N/A,-0.1,81.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
               
    q <= d;
end

endmodule",0.01132089599999997,10
N/A,N/A,-0.1,82.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(posedge clk) begin
        q <= d;
    end

endmodule",0.010976538999999619,15
N/A,N/A,-0.1,83.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d;
end

endmodule",0.011324590000000079,5
N/A,N/A,-1,84.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.0027271360000007405,0
N/A,N/A,-0.1,85.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
 end

endmodule",0.011439414999999897,5
N/A,N/A,-1,86.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.0027107270000001904,0
N/A,N/A,-1,87.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule",0.011650995999999303,1
N/A,N/A,-0.1,88.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
    begin
        q <= d;
    end

endmodule",0.010757178000000422,11
N/A,N/A,-0.1,89.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin       
       q <= d;
end

endmodule",0.010978162999999874,9
N/A,N/A,-1,90.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
endendmodule",0.011474544999999559,2
N/A,N/A,-1,91.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule",0.0029038950000002117,0
N/A,N/A,-0.1,92.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <= d;
end

endmodule",0.011310980000000193,5
N/A,N/A,-0.1,93.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin   

    q <= d;
end

endmodule",0.010929691000000297,10
N/A,N/A,-0.1,94.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
                      q <= d;
end

endmodule",0.011590475000000211,9
N/A,N/A,-0.1,95.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d;
end

endmodule",0.011306631000000067,5
N/A,N/A,-1,96.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule",0.0028562110000001084,0
N/A,N/A,-0.1,97.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
         
    q <= d;
end

endmodule",0.011091325999999846,10
N/A,N/A,-0.1,98.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule",0.01032738600000016,16
N/A,N/A,-0.1,99.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
 end

endmodule",0.011141034999999633,5
N/A,N/A,-0.1,100.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;end
endmodule",0.012061236000000086,3
N/A,N/A,-0.1,101.0,1,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d;

end

endmodule",0.013152477000000218,5
