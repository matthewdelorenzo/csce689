/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/miniconda3/envs/rltf/lib/python3.10/site-packages/bitsandbytes/libbitsandbytes_cpu.so: undefined symbol: cadam32bit_grad_fp32
[2024-10-24 16:30:03,630] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Using CPU
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_prompts/Dff_1.v
Prompt str:  // Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );


********-- EPISODE-1--************
ORIG MODILE:  top_module
--------MCTS-------
Initializing MCTS tree.
Initialize search (creating root node)

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );


Tokens: ['always', '   ', '\\n', '    \n', '\n']
Probs: [81.4, 18.16, 0.12, 0.07, 0.07]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  always

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always
API response time: 0.561736 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   @(posedge clk) begin
    q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.35324315e+02 3.01251247e+01 1.99064700e-01 1.16121075e-01
 1.16770271e-01]  taking action:  0  corresponding to token:  always
Adding child.
Leaf selection - depth:  1
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always
Tokens: [' @(', '@(', ' @', '@', '_ff']
Probs: [97.44, 2.29, 0.19, 0.07, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   @(

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(
API response time: 0.513659 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  posedge clk) begin
    q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  2.0
Iteration TIME (sec):  0.01037374900000021
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [82.81888023 36.89559192  0.24380347  0.14221869  0.14301379]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [1.90165337e+02 4.46919768e+00 3.70806795e-01 1.36613030e-01
 1.95161471e-02]  taking action:  0  corresponding to token:   @(
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(
Tokens: ['posedge', ' pos', 'posed', '*)', '*']
Probs: [99.99, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  posedge

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge
API response time: 0.539130 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   clk) begin
    q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  3.0
Iteration TIME (sec):  0.010976730999999962
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [63.72582708 42.60335985  0.28152     0.16422     0.1651381 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [1.16402011e+02 5.47362694e+00 4.54143720e-01 1.67316107e-01
 2.39023011e-02]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.95141955e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge
Tokens: [' clk', 'clk', '(clk', ')', '``']
Probs: [99.72, 0.25, 0.02, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   clk

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk
API response time: 0.708238 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ) begin
    q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  4.0
Iteration TIME (sec):  0.010243056999999833
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [53.41663217 47.63200435  0.31474893  0.18360354  0.18463001]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [8.95781330e+01 6.32039998e+00 5.24399998e-01 1.93199999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [1.19449554e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.94615019e+02 4.87903677e-01 3.90322942e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   clk
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk
Tokens: [')\n', ')', ' or', 'begin', ')\\']
Probs: [73.07, 26.88, 0.01, 0.01, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  )


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)

API response time: 0.493025 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  begin
    q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  5.0
Iteration TIME (sec):  0.011203625999999911
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [46.79771773 52.17824648  0.34479018  0.2011276   0.20225204]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  1
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   
Tokens: ['always', 'a', 'alwa', 'al', '\\n']
Probs: [65.99, 24.27, 5.42, 3.29, 0.35]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  always

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always
API response time: 0.519781 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   @(posedge clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  6.0
Iteration TIME (sec):  0.01037140400000025
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [50.55372219 28.1294738   0.37241595  0.21724264  0.21845717]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [7.50944497e+01 7.06642200e+00 5.86297022e-01 2.16004166e-01
 3.08577380e-02]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [9.19241330e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.19126873e+02 5.97557527e-01 4.78046021e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.42604487e+02 5.24594034e+01 1.95161471e-02 1.95161471e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  )

Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)

Tokens: ['begin', ' begin', '   ', '\\n', '\n']
Probs: [58.69, 35.6, 4.82, 0.31, 0.19]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  begin

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
API response time: 0.450267 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  7.0
Iteration TIME (sec):  0.01058798300000019
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [45.02477158 30.07512465  0.3981294   0.23224215  0.23354054]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [6.57952052e+01 7.74087746e+00 6.42256208e-01 2.36620708e-01
 3.38029583e-02]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [7.70616305e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [9.16757330e+01 6.89999998e-01 5.51999998e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [8.72770569e+01 6.42493853e+01 2.39023011e-02 2.39023011e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [114.54026729  69.47748365   9.4067829    0.60500056   0.37080679]  taking action:  0  corresponding to token:  begin
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
Tokens: ['   ', '\n', '    \n', ' q', '\\n']
Probs: [89.7, 9.45, 0.47, 0.22, 0.07]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
API response time: 0.425002 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  8.0
Iteration TIME (sec):  0.010511263999999798
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [40.92374598 31.90251989  0.42228     0.24633     0.24770715]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [5.92111282e+01 8.36110326e+00 6.93715991e-01 2.55579576e-01
 3.65113680e-02]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [6.75191561e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [7.68533408e+01 7.71443450e-01 6.17154760e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [6.71577331e+01 7.41887997e+01 2.75999999e-02 2.75999999e-02
 2.75999999e-02]  taking action:  1  corresponding to token:  )
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
Tokens: [' begin', 'begin', '    \n', ' \n', '\n']
Probs: [92.65, 2.8, 1.7, 1.03, 0.8]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   begin

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
API response time: 0.469777 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  9.0
Iteration TIME (sec):  0.01082566000000007
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [37.73679584 33.63091328  0.4451222   0.25965462  0.26110626]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [5.42472392e+01 8.93839537e+00 7.41613590e-01 2.73226059e-01
 3.90322942e-02]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [6.07628614e+01 3.65113680e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [67.3366201   0.84507396  0.06760592  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [7.50924971e+01 4.14227998e+01 3.08577380e-02 3.08577380e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [70.09130247 85.09219178 11.52090911  0.74097133  0.45414372]  taking action:  1  corresponding to token:   begin
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
Tokens: ['\n', '   ', '    \n', ' q', '     \n']
Probs: [57.58, 27.2, 7.79, 1.35, 1.05]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin

API response time: 0.485201 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  10.0
Iteration TIME (sec):  0.01534652000000003
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [35.1737388  35.27483986  0.4668481   0.27232806  0.27385056]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [128.78705467  47.365689    10.57775172   6.42081239   0.68306515]  taking action:  0  corresponding to token:  always
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always
Tokens: [' @(', '@(', '@', ' @', '_ff']
Probs: [86.09, 11.65, 1.58, 0.58, 0.1]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   @(

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(
API response time: 0.544902 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  posedge clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  11.0
Iteration TIME (sec):  0.010426985000000055
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [36.74172454 24.53039461  0.48760694  0.28443738  0.28602758]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [5.03376998e+01 9.48059997e+00 7.86599997e-01 2.89799999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [5.56691299e+01 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [60.59856022  0.9127842   0.07302274  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [6.16745541e+01 4.53811760e+01 3.38029583e-02 3.38029583e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [80.94219972 49.07799983 13.30319995  0.8556      0.5244    ]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [1.75059839e+02 1.84427590e+01 9.17258913e-01 4.29355236e-01
 1.36613030e-01]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
Tokens: ['\n', '   ', '    \n', '  \n', ' q']
Probs: [73.6, 21.09, 3.66, 0.5, 0.3]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   

API response time: 0.475049 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  12.0
Iteration TIME (sec):  0.011203522000000188
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [34.41106607 25.53476641  0.5075174   0.29605181  0.29770694]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [4.71580690e+01 9.99342983e+00 8.29149200e-01 3.05476021e-01
 4.36394316e-02]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [5.16573248e+01 4.13999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [55.5185768   0.97580735  0.07806459  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [5.32777131e+01 4.90212785e+01 3.65113680e-02 3.65113680e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [60.30135474 54.87677361 14.87342971  0.95658988  0.58629702]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [107.15182026  22.5876745    1.12340815   0.52585062   0.16731611]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [143.63884261  41.15955422   7.14290984   0.97580735   0.58548441]  taking action:  0  corresponding to token:  

Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   

Tokens: ['   ', ' q', '\n', '    ', 'q']
Probs: [86.72, 11.74, 1.24, 0.08, 0.08]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
   
API response time: 0.502450 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  13.0
Iteration TIME (sec):  0.011164541999999944
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [32.45768028 26.50119601  0.52667569  0.30722749  0.3089451 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [44.50772474 10.48119763  0.86961902  0.32038595  0.04576942]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [4.83945196e+01 4.36394316e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [51.51759982  1.035       0.0828      0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [4.74514956e+01 5.24094034e+01 3.90322942e-02 3.90322942e-02
 3.90322942e-02]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [180.81710282   5.46452119   3.31774501   2.01016315   1.56129177]  taking action:  0  corresponding to token:   begin
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
Tokens: ['   ', ' q', '\n', '    \n', '    ']
Probs: [88.23, 9.3, 1.26, 0.59, 0.28]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
API response time: 0.456599 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin       
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      
    q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  14.0
Iteration TIME (sec):  0.010686785999999948
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [30.79174156 27.43368386  0.54516113  0.31801066  0.31978856]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [42.25527663 10.94725389  0.90828744  0.33463221  0.0478046 ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [45.674845    0.04576942  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [48.26360127  1.09098579  0.08727886  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [5.03349665e+01 3.70277332e+01 4.13999999e-02 4.13999999e-02
 4.13999999e-02]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [49.52239061 60.11926583 16.29302592  1.04789171  0.64225621]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [112.37397496  53.08392009  15.20307859   2.63467986   2.04919544]  taking action:  0  corresponding to token:  

Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin

Tokens: ['   ', ' q', '       ', ' ', '    ']
Probs: [95.12, 3.69, 0.3, 0.24, 0.18]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
   
API response time: 0.507133 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  15.0
Iteration TIME (sec):  0.010920215000000066
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [29.35038172 28.33557323  0.56304     0.32844     0.3302762 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [40.31069856 11.3942631   0.94537554  0.34829625  0.04975661]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [43.36347423  0.0478046   0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [45.55126756  1.14423555  0.09153884  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [4.54676181e+01 3.90342640e+01 4.36394316e-02 4.36394316e-02
 4.36394316e-02]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [53.49630465 43.26015665 17.59847936  1.13185241  0.69371599]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [82.45733304 26.08199991  1.2972      0.6072      0.1932    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [87.91046791 50.40995294  8.74824219  1.19511505  0.71706903]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [1.69244028e+02 2.29119567e+01 2.42000224e+00 1.56129177e-01
 1.56129177e-01]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
   
Tokens: [' q', '   ', '    \n', '\n', 'q']
Probs: [78.86, 8.31, 6.47, 3.06, 1.85]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   q

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q
API response time: 0.738947 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  16.0
Iteration TIME (sec):  0.010859573000000289
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [28.08819889 29.20969211  0.58036835  0.3385482   0.34044092]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [78.81564235 58.01088468 12.95504718  7.86385705  0.83658054]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [168.01451033  22.73631136   3.08355124   1.13193653   0.19516147]  taking action:  0  corresponding to token:   @(
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(
Tokens: ['posedge', ' pos', 'posed', '*)', '*']
Probs: [99.97, 0.03, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  posedge

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge
API response time: 0.492692 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  17.0
Iteration TIME (sec):  0.0104679889999999
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [28.90521029 22.51884349  0.5971941   0.34836323  0.35031081]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [38.61001464 11.82438563  0.98106256  0.3614441   0.05163487]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [41.36802646  0.04975661  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [43.24613566  1.19511505  0.0956092   0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [41.71714577 40.9427354   0.04576942  0.04576942  0.04576942]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [45.73610692 46.25165576 18.8135658   1.21000112  0.74161359]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [68.76472476 65.01425889 18.61989253  3.22681064  2.50974161]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [185.63759115   7.20145828   0.58548441   0.46838753   0.35129065]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
   
Tokens: ['   ', 'q', ' q', ' ', '    ']
Probs: [69.34, 15.47, 12.05, 0.99, 0.6]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      
API response time: 0.431622 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
          q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  18.0
Iteration TIME (sec):  0.011272881000000012
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [27.71317001 23.13796753  0.61355861  0.35790919  0.35991015]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [37.10637316 12.23940193  1.01549623  0.37413019  0.05344717]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [39.62285251  0.05163487  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [41.2560741   1.24391519  0.09951321  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [38.7231364  42.76625683  0.0478046   0.0478046   0.0478046 ]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [110.67740967   6.6926443    4.06339118   2.46193701   1.91218408]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [172.1909658   18.1500168    2.45903453   1.15145268   0.54645212]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
Tokens: ['\n', '   ', ' q', '    \n', 'q']
Probs: [48.57, 48.57, 1.14, 0.69, 0.42]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   

API response time: 0.861707 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  19.0
Iteration TIME (sec):  0.010782956999999982
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [26.65206607 23.74100217  0.62949785  0.36720708  0.36926002]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [35.76458653 12.64079996  1.0488      0.3864      0.0552    ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [38.07987518  0.05344717  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [39.51561085  1.29087179  0.10326974  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [40.30794782 33.36144019  0.04975661  0.04975661  0.04975661]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [48.51531983 36.77099987 19.95479993  1.2834      0.7866    ]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [69.12347742 29.16056239  1.45031369  0.67887024  0.21600417]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [67.6453331  58.2083998  10.10159997  1.38        0.828     ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [103.5903774   28.06130145   2.96388533   0.19121841   0.19121841]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [153.90433598  16.21791823  12.62694717   5.97194101   3.61048721]  taking action:  0  corresponding to token:   q
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q
Tokens: [' <=', '<=', ' =', '=', '    ']
Probs: [99.65, 0.32, 0.03, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <=
API response time: 0.437031 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  20.0
Iteration TIME (sec):  0.011417992999999793
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [25.70005275 24.32914017  0.64504335  0.37627529  0.37837892]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [34.55765416 13.02983835  1.08107829  0.398292    0.05689886]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [36.70298652  0.0552      0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [37.9767985   1.33617925  0.10689434  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [37.63960078 34.62363382  0.05163487  0.05163487  0.05163487]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [42.60330397 38.76409409 21.03420601  1.35282238  0.8291492 ]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [60.56250725 31.94379563  1.58873904  0.74366508  0.23662071]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [56.70323789 65.07896941 11.2939321   1.5428869   0.92573214]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
Tokens: ['\n', '   ', '    \n', '  \n', '   \n']
Probs: [73.29, 21.0, 4.69, 0.38, 0.3]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      

API response time: 0.461399 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  21.0
Iteration TIME (sec):  0.01080881499999986
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [24.83999871 24.90343381  0.66022292  0.38513004  0.38728317]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [60.64413312 66.98519977 14.95919995  9.08039997  0.966     ]  taking action:  1  corresponding to token:  a
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   a
Tokens: ['l', 'lw', 'lwa', 'always', 'ways']
Probs: [98.59, 1.41, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  l

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   al
API response time: 0.492624 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ways @(posedge clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  19
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  22.0
Iteration TIME (sec):  0.010264316000000218
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [25.40039324 20.35185362  0.67506124  0.39378573  0.39598725]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [33.46447127 13.40759305  1.11242038  0.40983909  0.05854844]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [35.4644797   0.05689886  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [36.60362652  1.38        0.1104      0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [35.41258828 35.84149823  0.05344717  0.05344717  0.05344717]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [85.17133304  7.72799997  4.69199998  2.84279999  2.20799999]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [105.39500113  22.22913999   3.01168993   1.41023576   0.66926443]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [94.78992643 94.78992643  2.22484077  1.34661415  0.81967818]  taking action:  0  corresponding to token:  

Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   

Tokens: ['   ', ' q', 'q', '\n', '``']
Probs: [91.58, 7.52, 0.37, 0.23, 0.11]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
   
API response time: 0.489045 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  23.0
Iteration TIME (sec):  0.010925833000000384
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [24.57774616 20.7912986   0.68958035  0.4022552   0.40450408]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [32.46827409 13.77499239  1.1429033   0.42106964  0.06015281]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [34.34269789  0.05854844  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [35.36846288  1.42247144  0.11379771  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [36.57694532 29.5955199   0.0552      0.0552      0.0552    ]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [38.28867677 40.65978553 22.06086138  1.41885208  0.86961902]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [52.90693315 75.07199974 21.50039993  3.72599999  2.89799999]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
Tokens: ['\n', '   ', 'q', ' q', '    \n']
Probs: [64.96, 11.29, 5.33, 5.33, 4.15]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   

API response time: 0.464271 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  24.0
Iteration TIME (sec):  0.010774152999999842
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [23.82718514 21.22167993  0.7038      0.41055     0.41284525]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [31.55555776 14.132844    1.17259404  0.43200833  0.06171548]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [33.32043883  0.06015281  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [34.24970919  1.46371103  0.11709688  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [34.55499593 30.50882576  0.05689886  0.05689886  0.05689886]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [39.99502998 33.95687671 23.04181822  1.48194267  0.90828744]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [54.50116177 34.50324273  1.71603429  0.8032501   0.25557958]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [62.12244333 35.59521956 12.37188275  1.69014792  1.01408875]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [79.71573305 32.40239989  3.42239999  0.2208      0.2208    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [94.19677309 19.86281218 15.46478879  7.31410412  4.4219257 ]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [1.94478406e+02 6.24516707e-01 5.85484413e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <=
Tokens: [' d', '    ', '   ', 'd', ' ']
Probs: [99.98, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   d

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d
API response time: 0.986803 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  25.0
Iteration TIME (sec):  0.011299183999999851
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [23.13898835 21.64353633  0.71773798  0.41868049  0.4210212 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [30.715306   14.48185566  1.20155134  0.44267681  0.06323954]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [32.38384441  0.06171548  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [33.23020963  1.50382013  0.12030561  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [32.81642002 31.39564203  0.05854844  0.05854844  0.05854844]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [36.41519112 35.34670449 23.98268478  1.54245483  0.94537554]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [49.93138269 36.88551801  1.83451783  0.85871047  0.27322606]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [53.66473365 38.45123752 13.36316068  1.8255684   1.09534104]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [66.82457594 36.22698439  3.82635951  0.2468619   0.2468619 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [72.48453308 22.93559992 17.85719994  8.44559997  5.10599998]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [1.19043215e+02 7.64873634e-01 7.17069032e-02 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.95122439e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d
Tokens: [';\n', ';', ';\\', ';\n\n', ' ;\n']
Probs: [92.4, 7.58, 0.01, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;

API response time: 0.831685 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  26.0
Iteration TIME (sec):  0.011525505999999908
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.50514915 22.05735515  0.73141041  0.42665607  0.42904137]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [29.93843199 14.82265183  1.22982701  0.45309416  0.06472774]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [31.5216102   0.06323954  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [32.29614347  1.5428869   0.12343095  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [31.30261053 32.25814808  0.06015281  0.06015281  0.06015281]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [71.3992356   8.64016664  5.24581546  3.17834701  2.46861904]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [81.10493305 25.66799991  3.47759999  1.62839999  0.7728    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [ 57.99673813 116.09347626   2.72486232   1.64925877   1.00389664]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
Tokens: ['\n', '   ', '    \n', '  \n', ' q']
Probs: [88.91, 9.37, 0.99, 0.28, 0.22]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      

API response time: 0.979472 seconds
trimming text between  ```
trimming text with ```verilog
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  q <= d;
end

endmodule
Depth of rollout:  23
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  27.0
Iteration TIME (sec):  0.011155336999999932
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [21.91900964 22.46357904  0.74483191  0.43448528  0.43691435]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [67.81007098 37.39586504 16.72489399 10.1521958   1.08002083]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [102.83745492  27.84618074   3.77656357   1.38633346   0.23902301]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.95102922e+02 5.85484413e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge
Tokens: [' clk', 'clk', '(clk', ' ', '   ']
Probs: [99.27, 0.67, 0.04, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   clk

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk
API response time: 0.439359 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
       q <= d;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  )
       q <= d;

endmodule
Depth of rollout:  12
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  28.0
Iteration TIME (sec):  0.010338972000000002
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.30867993 19.03550951  0.7580158   0.44217588  0.44464794]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [29.21736519 15.15578673  1.25746702  0.46327732  0.06618247]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [30.72441165  0.06472774  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [31.43623681  1.58098861  0.12647909  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [32.11821305 27.5651999   0.06171548  0.06171548  0.06171548]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [33.5827847  36.68402869 24.88800819  1.60068102  0.98106256]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [59.15961843 41.91652366 24.03817789  4.16579463  3.24006249]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [113.62934385   8.81994909   0.71706903   0.57365523   0.43024142]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [135.32496395  30.19147955  23.51695725   1.93209856   1.17096883]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      
Tokens: ['q', '   ', ' q', ' ', '  ']
Probs: [55.6, 33.73, 7.53, 1.31, 0.62]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  q

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q
API response time: 0.821621 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   <= d;
 end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  29.0
Iteration TIME (sec):  0.01119091800000005
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [21.74203406 19.36235101  0.77097427  0.44973499  0.45224931]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [28.54574139 15.48175492  1.28451242  0.47324142  0.06760592]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [29.98448024  0.06618247  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [30.64119028  1.61819343  0.12945547  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [30.7127567  28.24798254  0.06323954  0.06323954  0.06323954]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [34.76460451 31.62865419 25.76153594  1.65686227  1.01549623]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [46.33224983 39.12299986  1.94579999  0.9108      0.2898    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [47.79628087 41.10955422 14.28581967  1.95161471  1.17096883]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [58.54785094 39.68467308  4.19156683  0.27042367  0.27042367]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [60.76103043 25.64278026 19.96495647  9.44246782  5.70868153]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [9.16113330e+01 8.83199997e-01 8.27999997e-02 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.19437603e+02 2.39023011e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.80329199e+02 1.47932395e+01 1.95161471e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;

Tokens: ['end', '    \n', 'endmodule', '\n', '   ']
Probs: [99.97, 0.02, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  end

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end
API response time: 0.578913 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Rollout trimmed response:  endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  30.0
Iteration TIME (sec):  0.011219827000000127
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [21.1788944  19.68378906  0.78371851  0.45716913  0.45972502]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [27.88066656 15.80099995  1.311       0.483       0.069     ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [29.25615481  0.06760592  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [29.86234721  1.65456187  0.13236495  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [29.4103485  28.91469296  0.06472774  0.06472774  0.06472774]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [32.21687988 32.66866655 26.60639991  1.71119999  1.0488    ]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [48.58435852 45.92202333 26.33250454  4.56339938  3.54931063]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [87.44373303 10.18439996  0.828       0.6624      0.4968    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [82.81927778 36.97685974 28.80227278  2.36632781  1.43413806]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [108.50977784  65.82796415  14.69565876   2.55661527   1.21000112]  taking action:  0  corresponding to token:  q
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q
Tokens: [' <=', '<=', ' =', '=', '   ']
Probs: [98.53, 1.41, 0.04, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <=
API response time: 0.826929 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
 end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  31.0
Iteration TIME (sec):  0.01128142100000007
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [20.68835612 20.0000831   0.7962588   0.4644843   0.46708108]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [27.29403498 16.11392141  1.33696291  0.49256528  0.07036647]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [28.61379156  0.069       0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [29.17679134  1.69014792  0.13521183  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [28.29972607 29.56641537  0.06618247  0.06618247  0.06618247]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [62.55688179  9.46482833  5.74650292  3.48170471  2.70423667]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [67.98945555 28.69769632  3.88807499  1.82060654  0.86401666]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [66.97659977 66.97659977  3.14639999  1.90439999  1.1592    ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [178.72887508  14.67614261   0.72209744   0.44887138   0.21467762]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
   
Tokens: [' q', 'q', '   ', '\n', '    \n']
Probs: [77.54, 10.49, 8.17, 2.34, 0.67]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   q

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q
API response time: 0.541766 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  32.0
Iteration TIME (sec):  0.011126160999999968
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [20.22925797 20.31147247  0.80860464  0.47168604  0.47432308]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [55.69143051 40.96988994 18.32120342 11.12117329  1.18310354]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [79.13613306 32.15399989  4.36079998  1.60079999  0.276     ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.19425652e+02 7.17069032e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.93736792e+02 1.30758186e+00 7.80645884e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   clk
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk
Tokens: [')\n', ')', '\\n', ')\\', ' )\n']
Probs: [91.43, 7.5, 0.79, 0.11, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  )


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)

API response time: 0.452051 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)

       q <= d;

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
       q <= d;

endmodule
Depth of rollout:  13
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  33.0
Iteration TIME (sec):  0.010369037999999886
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [20.53542383 17.6584387   0.82076479  0.47877946  0.48145616]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [26.74277172 16.42088083  1.36243116  0.50194832  0.0717069 ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [28.01177296  0.07036647  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [28.53616656  1.72499999  0.138       0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [28.91155488 25.87495771  0.06760592  0.06760592  0.06760592]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [33.21393942 28.85141892 27.42524928  1.76386458  1.08107829]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [43.3050779  41.23926282  2.05105328  0.96006749  0.30547602]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [43.31485699 43.60629985 15.15239995  2.06999999  1.242     ]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [143.03384205  40.9839089    9.15307299   0.74161359   0.58548441]  taking action:  0  corresponding to token:  

Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      

Tokens: ['   ', ' q', '       ', '    ', ' ']
Probs: [99.74, 0.19, 0.02, 0.01, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
   
API response time: 0.796986 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  34.0
Iteration TIME (sec):  0.010994944000000118
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [20.08936514 17.91749113  0.83274739  0.48576931  0.48848509]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [26.22346441 16.72220653  1.38743198  0.51115915  0.07302274]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [27.44605097  0.0717069   0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [27.93577717  1.75916173  0.14073294  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [27.86572213 26.41028562  0.069       0.069       0.069     ]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [31.06552743 29.69035013 28.2203487   1.81500168  1.11242038]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [40.87517148 43.25210374  2.15116283  1.00692728  0.32038595]  taking action:  1  corresponding to token:  

Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin

Tokens: ['   ', ' q', '    ', '\n', ' ']
Probs: [96.11, 3.73, 0.05, 0.04, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
   
API response time: 0.436964 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  35.0
Iteration TIME (sec):  0.011059675999999907
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [19.67008429 18.17286851  0.84456     0.49266     0.4954143 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [25.73314396 17.01819776  1.41199021  0.52020692  0.07431527]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [26.91312358  0.07302274  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [27.37158611  1.79267258  0.14341381  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [26.91935734 26.93500983  0.07036647  0.07036647  0.07036647]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [56.29630403 10.22318303  6.20693255  3.7606709   2.92090944]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [59.56870028 31.43675125  4.25917275  1.99437454  0.94648283]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [49.89201112 74.88801669  3.51778213  2.12918392  1.296025  ]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [173.51806381  18.28662983   1.93209856   0.54645212   0.42935524]  taking action:  0  corresponding to token:  

Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      

Tokens: ['   ', ' q', '\n', '    \n', 'q']
Probs: [91.03, 7.47, 1.3, 0.05, 0.04]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
   
API response time: 0.451460 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  36.0
Iteration TIME (sec):  0.01094288600000004
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [19.27506288 18.42472292  0.85620965  0.49945563  0.50224793]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [25.26921327 17.3091282   1.43612854  0.52909999  0.07558571]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [26.40994378  0.07431527  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [26.84010084  1.8255684   0.14604547  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [27.43486009 24.00601946  0.0717069   0.0717069   0.0717069 ]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [29.25306781 30.50628379 28.99365211  1.86473696  1.1429033 ]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [41.96649135 49.60546043 28.44235565  4.92903468  3.83369364]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [126.77689152  22.03373007  10.4021064   10.4021064    8.09920104]  taking action:  0  corresponding to token:  

Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   

Tokens: ['   ', ' q', '       ', '      ', '    ']
Probs: [97.6, 1.08, 0.84, 0.19, 0.09]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   
API response time: 0.398561 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  37.0
Iteration TIME (sec):  0.010817893000000023
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.9020972  18.67319629  0.86770291  0.50616003  0.50898981]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [24.8293894  17.59524888  1.45986781  0.53784604  0.07683515]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [25.93384626  0.07558571  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [26.33828262  1.85788185  0.14863055  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [26.53885659 24.44813927  0.07302274  0.07302274  0.07302274]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [30.01734403 27.3758868  29.74685942  1.91317975  1.17259404]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [42.7007281  22.5376745   2.2468163   1.05170125  0.33463221]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [45.66945947 30.61185372 15.97203195  2.18197158  1.30918295]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [52.53776383 42.86434599  4.52740963  0.29209094  0.29209094]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [53.05402589 28.09025838 21.87051404 10.34370525  6.25354729]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [7.65743397e+01 9.87447615e-01 9.25732139e-02 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [9.16149330e+01 2.75999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.09928631e+02 1.81179442e+01 2.39023011e-02 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.95102922e+02 3.90322942e-02 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Adding child.
Leaf selection - depth:  14
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end
Tokens: ['endmodule', ' \n', '\n', '\\n', '\n\n']
Probs: [99.62, 0.06, 0.05, 0.05, 0.04]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  endmodule

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
API response time: 0.383128 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Rollout trimmed response:  
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  38.0
Iteration TIME (sec):  0.011391720000000216
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.52112481 18.91842121  0.87904592  0.51277678  0.51564355]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [48.10770344 44.25654503 19.78916144 12.01224006  1.27789788]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [66.33856657 35.94926475  4.8755226   1.7897488   0.30857738]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [9.19057330e+01 8.27999997e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [1.18589071e+02 1.60145417e+00 9.56092042e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [1.78436133e+02 1.46371103e+01 1.54177562e+00 2.14677618e-01
 5.85484413e-02]  taking action:  0  corresponding to token:  )

Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)

Tokens: ['begin', ' begin', '\\n', '    ', '   ']
Probs: [34.97, 16.52, 16.52, 12.86, 11.35]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  begin

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
API response time: 0.452071 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  39.0
Iteration TIME (sec):  0.011028225000000003
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.75902294 16.75295663  0.8902444   0.51930924  0.52221253]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [24.38262419 17.87679074  1.48322718  0.54645212  0.07806459]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [25.45248814  0.07683515  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [25.83243887  1.88964282  0.15117143  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [25.67722419 24.88243209  0.07431527  0.07431527  0.07431527]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [28.31945276 28.05409724 30.48146039  1.96042588  1.20155134]  taking action:  2  corresponding to token:     
Adding child.
Leaf selection - depth:  6
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   
Tokens: ['begin', ' q', ' begin', 'q', '   ']
Probs: [86.13, 9.08, 4.29, 0.21, 0.21]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  begin

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   begin
API response time: 0.887110 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   begin
       q <= d;
   end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
       q <= d;
   end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  40.0
Iteration TIME (sec):  0.010976011999999535
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.41536044 16.96216287  0.90130376  0.52576053  0.52869989]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [23.98610164 18.15396681  1.50622432  0.55492475  0.07927496]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [25.02476837  0.07806459  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [25.38333652  1.9208787   0.1536703   0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [24.92749104 25.30929945  0.07558571  0.07558571  0.07558571]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [51.57631509 10.92904237  6.63549001  4.0203263   3.12258353]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [53.60663326 33.95557221  4.60043236  2.15417071  1.0223183 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [54.66032287 54.66032287  3.85353725  2.33240413  1.41972425]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [109.39863656  17.9745304    0.88438514   0.54975292   0.26292531]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [151.32820456  20.4724383   15.94469218   4.56677842   1.30758186]  taking action:  0  corresponding to token:   q
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q
Tokens: [' <=', '<=', '=', ' =', '    ']
Probs: [97.68, 2.3, 0.01, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <=
API response time: 0.394521 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  41.0
Iteration TIME (sec):  0.011020691999999777
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.08923284 17.168833    0.91222906  0.53213362  0.5351086 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [23.60823554 18.42697411  1.52887558  0.56326995  0.08046714]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [24.617824    0.07927496  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [24.95677665  1.95161471  0.15612918  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [25.34247393 22.85920862  0.07683515  0.07683515  0.07683515]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [28.99131461 28.71634308 15.54938468  2.00655986  1.22982701]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [40.31970621 23.45999701  2.33856055  1.09464536  0.34829625]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [41.79536819 32.10923696 16.75160843  2.2884711   1.37308266]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [48.0125793  45.82391338  4.84000448  0.31225835  0.31225835]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [47.60477464 30.34094678 23.62285507 11.1724786   6.75460307]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [6.69292960e+01 1.08169467e+00 1.01408875e-01 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [7.66039161e+01 3.08577380e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [8.43413330e+01 2.09207999e+01 2.75999999e-02 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.18975652e+02 4.78046021e-02 2.39023011e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [1.94419857e+02 1.17096883e-01 9.75807355e-02 9.75807355e-02
 7.80645884e-02]  taking action:  0  corresponding to token:  endmodule
Adding child.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  42.0
Iteration TIME (sec):  0.002770725000000418
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.75351528 17.37305707  0.92302504  0.53843128  0.54144147]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [23.22113769 18.69599527  1.55119611  0.57149331  0.0816419 ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [24.2027543   0.08046714  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [24.52281076  1.98187411  0.15854993  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [24.58773685 23.2264015   0.07806459  0.07806459  0.07806459]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [27.4589246  29.36370128 15.89997642  2.05165672  1.25746702]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [44.86958999 35.32261339 30.40615717  5.26935972  4.09839089]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [73.30470092 11.38650532  0.92573214  0.74058571  0.55543928]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [63.72613311 42.69719985 33.25799989  2.73239999  1.65599999]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [66.39839695 80.62246148 17.9984327   3.13120144  1.48194267]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
         
Tokens: ['   ', 'q', ' q', '\n', ' ']
Probs: [70.97, 20.33, 5.83, 1.01, 0.79]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
            
API response time: 0.456334 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
                q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  19
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  43.0
Iteration TIME (sec):  0.011208471000000664
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.45909165 17.57491992  0.93369621  0.54465612  0.54770112]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [42.84568489 47.31568899 21.15550345 12.84162479  1.3661303 ]  taking action:  1  corresponding to token:  a
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [192.40969419   2.75177674   0.           0.           0.        ]  taking action:  0  corresponding to token:  l
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   al
Tokens: ['ways', 'w', 'way', 'wa', '```']
Probs: [99.92, 0.06, 0.01, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ways

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always
API response time: 0.496174 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   @(posedge clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  19
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  44.0
Iteration TIME (sec):  0.010704035999999917
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.65832186 15.78844589  0.94424678  0.55081062  0.55389003]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [22.87723424 18.96119993  1.57319999  0.5796      0.0828    ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [23.83345193  0.0816419   0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [24.13691756  2.0116784   0.16093427  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [23.92759018 23.58790042  0.07927496  0.07927496  0.07927496]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [28.05565177 26.65300703 16.24302592  2.09578342  1.28451242]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [38.28039995 24.34747691  2.42683897  1.13596718  0.3614441 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [38.7046524  33.53996862 17.49648438  2.39023011  1.43413806]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [44.45259983 48.60359983  5.13359998  0.3312      0.3312    ]  taking action:  1  corresponding to token:   q
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q
Tokens: [' <=', '<=', ' =', '=', '   ']
Probs: [93.77, 5.99, 0.11, 0.09, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q <=
API response time: 1.010164 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  45.0
Iteration TIME (sec):  0.011085650000000058
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.37007068 15.96389137  0.95468077  0.55689711  0.56001055]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [22.54811233 19.22274608  1.59490033  0.58759486  0.08394212]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [23.48049137  0.0828      0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [23.76861867  2.04104752  0.1632838   0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [23.31493449 23.94396235  0.08046714  0.08046714  0.08046714]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [47.85887483 11.59199996  7.03799998  4.26419999  3.31199999]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [49.11170451 36.30003359  4.91806907  2.30290536  1.09290424]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [44.25892855 59.04523807  4.16229595  2.51928439  1.53347745]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [106.20767937  22.39645609   2.36632781   0.66926443   0.52585062]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.77655487e+02 1.45785619e+01 2.53709912e+00 9.75807355e-02
 7.80645884e-02]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
   
Tokens: ['   ', ' q', '\n', 'q', '    \n']
Probs: [48.99, 38.15, 6.63, 5.16, 0.42]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      
API response time: 0.683310 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
          q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  19
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  46.0
Iteration TIME (sec):  0.011457613000000144
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.09497252 16.13743999  0.96500194  0.5629178   0.56606489]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [22.23274295 19.48078106  1.61630935  0.59548239  0.08506891]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [23.14270236  0.08394212  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [23.4166171   2.06999999  0.1656      0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [23.65829476 21.8553429   0.0816419   0.0816419   0.0816419 ]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [26.72406657 27.20444434 16.57899994  2.13899999  1.311     ]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [39.64686653 37.4693332  32.25059989  5.58899998  4.34699998]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [64.22674794 12.47329163  1.01408875  0.811271    0.60845325]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [53.41688879 47.73692066 37.18357427  3.05491606  1.85146428]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [76.67799973 46.49739984 20.78279993  3.61559999  1.71119999]  taking action:  0  corresponding to token:  q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [1.92292597e+02 2.75177674e+00 7.80645884e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <=
Tokens: [' d', 'd', ' q', ' `', '      ']
Probs: [99.85, 0.09, 0.02, 0.02, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   d

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d
API response time: 0.474908 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ;
 end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  47.0
Iteration TIME (sec):  0.011367865000000421
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.83207802 16.30915195  0.97521388  0.56887477  0.57205516]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [21.93019456 19.73544261  1.63743847  0.6032668   0.08618097]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [22.81902868  0.08506891  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [23.07974577  2.09855307  0.16788425  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [23.06998456 22.16663991  0.0828      0.0828      0.0828    ]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [27.25872045 24.96046297 16.90831904  2.18136054  1.33696291]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [36.57854728 25.20378782  2.51201699  1.17583774  0.37413019]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [36.26086308 34.91222835 18.21091832  2.48783037  1.49269822]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [46.8801438  25.56634632  5.41128951  0.34911545  0.34911545]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [43.50123885 32.43583647 25.25389434 11.94388202  7.22097442]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [6.01059636e+01 1.16836377e+00 1.09534104e-01 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [6.69723955e+01 3.38029583e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [7.05313747e+01 2.33901654e+01 3.08577380e-02 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [9.13057330e+01 5.51999998e-02 2.75999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [1.18557362e+02 1.43413806e-01 1.19511505e-01 1.19511505e-01
 9.56092042e-02]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  48.0
Iteration TIME (sec):  0.0029610289999997264
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.55802964 16.47908438  0.98532     0.57477     0.57798335]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [21.61654471 19.98685965  1.6582984   0.61095204  0.08727886]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [22.48483001  0.08618097  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [22.73262706  2.12672282  0.17013783  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [22.48759595 22.47364255  0.08394212  0.08394212  0.08394212]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [25.98423843 25.43765752 17.23136367  2.222914    1.36243116]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [35.01742846 26.03199991  2.59439999  1.2144      0.3864    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [34.13024148 36.23264818 18.89836306  2.58174359  1.54904615]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [87.53998224 50.19483223 11.2101792   0.90828744  0.71706903]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.94654051e+02 3.70806795e-01 3.90322942e-02 1.95161471e-02
 1.95161471e-02]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
   
Tokens: [' q', '   ', '\n', 'q', '    \n']
Probs: [74.78, 12.99, 6.14, 4.78, 0.83]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   q

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q
API response time: 0.410456 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  49.0
Iteration TIME (sec):  0.011031487999999534
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.31759939 16.64729146  0.9953235   0.58060538  0.58385135]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [45.44976651 33.42593321 22.43879992 13.62059995  1.44899999]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [58.12193366 39.38044646  5.34086742  1.96057158  0.33802958]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [77.04620165  0.09257321  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [91.26173301  1.84919999  0.1104      0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [1.09219369e+02 1.79267258e+01 1.88828178e+00 2.62925312e-01
 7.17069032e-02]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [68.24796639 32.240675   32.240675   25.09776516 22.15082695]  taking action:  0  corresponding to token:  begin
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
Tokens: ['\n', '   ', '\\n', ' q', '    \n']
Probs: [58.48, 35.47, 3.74, 0.65, 0.51]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin

API response time: 0.598924 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  50.0
Iteration TIME (sec):  0.011034251999999967
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.48181204 15.12244225  1.00522746  0.58638269  0.58966096]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [21.33775464 20.23515315  1.67889917  0.6185418   0.08836311]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [22.18721419  0.08727886  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [22.42359618  2.1545243   0.17236194  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [21.97494812 22.77652379  0.08506891  0.08506891  0.08506891]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [44.83548148 12.21904084  7.41870337  4.49486145  3.49115452]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [45.57152484 38.50199987  5.21639998  2.44259999  1.1592    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [47.31996321 47.31996321  4.44968154  2.6932283   1.63935636]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [84.18693304 20.75519993  1.0212      0.6348      0.3036    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [92.61922122 25.07351381 19.52817997  5.59313845  1.60145417]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [1.90633725e+02 4.48871383e+00 1.95161471e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <=
Tokens: [' d', 'd', ' q', ' `', '    ']
Probs: [99.97, 0.02, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   d

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d
API response time: 0.459290 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  51.0
Iteration TIME (sec):  0.011376001000000358
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.24574578 15.27085983  1.01503479  0.59210363  0.59541389]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [21.06944035 20.48043668  1.69925021  0.62603955  0.08943422]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [21.90106949  0.08836311  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [22.12679038  2.18197158  0.17455773  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [22.26515584 20.96858662  0.08618097  0.08618097  0.08618097]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [24.90414338 25.90609398 17.54847936  2.26370481  1.38743198]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [35.81083527 39.49975128 33.99511718  5.89132326  4.58214031]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [77.58467385 26.9856979  12.73992647 12.73992647  9.91945494]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [1.90477596e+02 2.10774389e+00 1.63935636e+00 3.70806795e-01
 1.75645324e-01]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   
Tokens: ['q', ' q', '   ', '\n', '`']
Probs: [97.23, 1.78, 0.66, 0.11, 0.07]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  q

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q
API response time: 0.462953 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   <= d;
 end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  52.0
Iteration TIME (sec):  0.011342076000000034
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.01917554 15.41785706  1.02474826  0.59776982  0.60111176]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.81096181 20.72281715  1.71936038  0.63344856  0.09049265]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [21.62567757  0.08943422  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [21.84142439  2.20907785  0.17672623  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [21.77057427 21.23687127  0.08727886  0.08727886  0.08727886]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [25.35037317 23.96021597 17.85998105  2.3037735   1.41199021]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [33.6921834  26.83471014  2.6742463   1.25177486  0.398292  ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [35.34283375 28.10502038 19.56166422  2.6723585   1.6034151 ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [43.6124919  26.81665068  5.67540832  0.36615538  0.36615538]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [40.27254984 34.40339988 26.78579991 12.66839996  7.65899997]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [5.49652588e+01 1.24903341e+00 1.17096883e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [6.01567762e+01 3.65113680e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [6.16678670e+01 2.56226424e+01 3.38029583e-02 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [7.63712017e+01 6.17154760e-02 3.08577380e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [90.983733  0.1656    0.138     0.138     0.1104  ]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  53.0
Iteration TIME (sec):  0.002793352999999499
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.78104015 15.56347393  1.03437053  0.60338281  0.60675613]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.54080224 20.96239525  1.73923803  0.64077191  0.09153884]  taking action:  1  corresponding to token:  @(
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always@(
Tokens: ['posedge', ' pos', 'posed', 'pos', '*)']
Probs: [99.99, 0.01, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  posedge

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always@(posedge
API response time: 0.520334 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always@(posedge clk) begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   clk) begin
    q <= d;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  54.0
Iteration TIME (sec):  0.010179820000000284
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.57214876 15.70774863  1.0439041   0.60894406  0.61234847]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [41.05380126 35.23763346 23.65257191 14.35737298  1.5273801 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [52.30439447 42.53574368  5.76879614  2.11765934  0.36511368]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [67.50563489  0.10140888  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [76.50619124  2.06746844  0.12343095  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [8.40489330e+01 2.06999999e+01 2.18039999e+00 3.03599999e-01
 8.27999997e-02]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [41.74317341 39.48660135 39.48660135 30.73835917 27.12911171]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [114.1304282   69.22377374   7.29903901   1.26854956   0.9953235 ]  taking action:  0  corresponding to token:  

Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin

Tokens: ['   ', '       ', ' q', '  ', '      ']
Probs: [97.63, 1.08, 0.66, 0.19, 0.15]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
   
API response time: 0.562441 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  55.0
Iteration TIME (sec):  0.011375267000000022
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.71486593 14.40065236  1.05335138  0.61445497  0.61789019]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.7751953  10.549633    1.75889107  0.6480125   0.09257321]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [21.33895291  0.09049265  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [21.54483066  2.23585553  0.17886844  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [21.27564253 21.5018228   0.08836311  0.08836311  0.08836311]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [42.31536942 12.81543815  7.78080173  4.71425046  3.66155376]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [42.69230051 40.58467135  5.49856838  2.57472646  1.22190408]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [40.13595986 50.19494982  4.71959998  2.85659999  1.73879999]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [81.73053305 25.86119991  2.73239999  0.7728      0.6072    ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.08741323e+02 1.78550189e+01 3.10729914e+00 1.19511505e-01
 9.56092042e-02]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [95.60960461 74.45410116 12.93920552 10.0703319   0.81967818]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      
Tokens: ['q', '   ', ' q', '  ', ' ']
Probs: [85.05, 11.51, 3.3, 0.06, 0.06]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  q

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q
API response time: 0.514252 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   <= d;
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  56.0
Iteration TIME (sec):  0.011724635000000205
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.50943802 14.52946878  1.06271469  0.6199169   0.62338266]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.52729363 10.66675957  1.77832692  0.65517307  0.09359615]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [21.08364887  0.09153884  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [21.28077907  2.26231628  0.1809853   0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [21.53652853 19.9415989   0.08943422  0.08943422  0.08943422]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [24.30069711 24.37137609 18.16615675  2.34315709  1.43612854]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [37.56290451 31.04820692 35.6543797   6.17887196  4.8057893 ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [57.79935535 13.47269478  1.09534104  0.87627283  0.65720462]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [46.79794262 52.29317654 40.73256479  3.34649288  2.0281775 ]  taking action:  1  corresponding to token:  q
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
   q
Tokens: [' <=', '<=', '=', ' =', ' ']
Probs: [99.14, 0.86, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
   q <=
API response time: 0.835701 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
   q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
 end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  57.0
Iteration TIME (sec):  0.01132773800000031
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.31156887 14.65716009  1.07199622  0.62533113  0.62882715]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.28801502 10.7826198   1.79755263  0.66225623  0.09460803]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [20.83726288  0.09257321  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [21.02617099  2.2884711   0.18307769  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [21.08805821 20.17868722  0.09049265  0.09049265  0.09049265]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [24.70808242 22.70276055 18.46727065  2.38188959  1.45986781]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [32.44871989 27.6141385   2.75177674  1.28806571  0.40983909]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [33.38933321 29.0291999  20.20319993  2.75999999  1.65599999]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [40.91615094 28.01130145  5.92777066  0.38243682  0.38243682]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [37.64895081 36.26436763 28.23471222 13.35366606  8.07329484]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [5.09188748e+01 1.32480000e+00 1.24200000e-01 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [5.50206968e+01 3.90322942e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [5.53941734e+01 2.76756169e+01 3.65113680e-02 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [6.67856349e+01 6.76059167e-02 3.38029583e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [76.10119645  0.18514643  0.15428869  0.15428869  0.12343095]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  58.0
Iteration TIME (sec):  0.0027685529999992298
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.10206589 14.78375528  1.08119807  0.63069888  0.63422491]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [20.03730623 10.89725389  1.81657488  0.66926443  0.0956092 ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [20.57928754  0.09359615  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [20.76000207  2.31433035  0.18514643  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [20.63669792 20.41303436  0.09153884  0.09153884  0.09153884]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [23.73479313 23.06749454 18.7635658   2.42000224  1.48322718]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [31.32768604 28.37220046  2.82718185  1.32336171  0.42106964]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [31.7058147  29.92492258 20.82498182  2.84494287  1.70696572]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [38.6444818  29.15712856  6.16981932  0.39805286  0.39805286]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [35.46376615 38.03438964 29.612816   14.00544312  8.46734306]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
      
Tokens: ['   ', ' q', 'q', '\n', '  ']
Probs: [90.55, 5.79, 2.73, 0.61, 0.11]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
         
API response time: 0.451128 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
         
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  20
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  59.0
Iteration TIME (sec):  0.011152118000000044
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.91840402 14.9092821   1.09032227  0.63602132  0.63957711]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [19.81426376 11.01069996  1.83539999  0.6762      0.0966    ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [20.34968965  0.09460803  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [20.52312984  2.33990384  0.18719231  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [20.23734772 20.64473325  0.09257321  0.09257321  0.09257321]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [40.17360351 13.38528859  8.12678236  4.92387402  3.82436817]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [40.29236097 42.56556241  5.76694717  2.70039589  1.28154381]  taking action:  1  corresponding to token:   q
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin q
Tokens: [' <=', '<=', ' =', '=', '   ']
Probs: [95.24, 4.74, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin q <=
API response time: 0.470284 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin q <= d; end endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d; end endmodule
Depth of rollout:  13
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  60.0
Iteration TIME (sec):  0.011325089999999705
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.74105908 15.03376715  1.09937074  0.6412996   0.6448849 ]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [37.66655192 36.96079569 24.8070267  15.05813982  1.60192977]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [47.91843152 45.47262273  6.16710248  2.26387306  0.39032294]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [60.75069092  0.1095341   0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [67.03239348  2.26479821  0.13521183  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [70.45807459 23.14330349  2.4377613   0.33943512  0.09257321]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [32.10573322 45.59519984 45.59519984 35.49359988 31.32599989]  taking action:  1  corresponding to token:   begin
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
 begin
Tokens: ['\n', '   ', '    \n', '     \n', '\\n']
Probs: [78.51, 6.44, 3.91, 3.91, 1.85]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
 begin

API response time: 0.832740 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
 begin
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  61.0
Iteration TIME (sec):  0.010782344999999971
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.86307791 13.88579961  1.10834534  0.64653478  0.65014935]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [19.59847263 11.12299421  1.85403397  0.68306515  0.09758074]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [20.12758368  0.0956092   0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [20.29415885  2.36520083  0.18921607  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [20.46385132 19.26049695  0.09359615  0.09359615  0.09359615]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [22.89823828 23.42657272 19.05526638  2.45752389  1.50622432]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [34.31986237 32.43212944 37.23978505  6.45362129  5.01948322]  taking action:  2  corresponding to token:      

Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin    

Tokens: ['   ', '       ', '      ', ' q', '    ']
Probs: [95.31, 2.88, 1.36, 0.3, 0.09]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin    
   
API response time: 0.871993 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin    
   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  62.0
Iteration TIME (sec):  0.011069953999999882
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.68834963 13.99807022  1.11724786  0.65172792  0.65537152]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [19.38954859 11.23417102  1.87248253  0.68986198  0.09855171]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [19.91257076  0.0966      0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [20.07265925  2.39023011  0.19121841  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [20.07649701 19.46972254  0.09460803  0.09460803  0.09460803]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [23.24808104 21.94330797 19.34257974  2.49448121  1.52887558]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [30.36043442 29.11056239  2.90062737  1.35774047  0.43200833]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [30.30118057 30.79466566 21.42872951  2.92742206  1.75645324]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [67.3601331  57.9599998  12.94439996  1.0488      0.828     ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.19150775e+02 4.54143720e-01 4.78046021e-02 2.39023011e-02
 2.39023011e-02]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [145.94174796  25.35147507  11.98291432   9.32871831   1.61984021]  taking action:  0  corresponding to token:   q
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q
Tokens: [' <=', ' =', '<=', '=', '   ']
Probs: [99.83, 0.09, 0.07, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <=
API response time: 0.421198 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  63.0
Iteration TIME (sec):  0.011123245000000281
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.51942159 14.10945327  1.12608     0.65688     0.6605524 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [19.18713528 11.3442631   1.89075108  0.6965925   0.09951321]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [19.70428109  0.09758074  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [19.85823326  2.41499999  0.1932      0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [19.70904158 19.67673391  0.0956092   0.0956092   0.0956092 ]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [22.46458647 22.2650128  19.62569807  2.53089892  1.55119611]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [29.47677439 29.83068471  2.97225859  1.39126998  0.44267681]  taking action:  1  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [1.87569690e+02 7.27952287e+00 9.75807355e-02 7.80645884e-02
 3.90322942e-02]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
   
Tokens: ['   ', ' q', '\n', 'q', '    \n']
Probs: [60.09, 36.45, 1.41, 0.67, 0.67]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
      
API response time: 0.461688 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
      
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  64.0
Iteration TIME (sec):  0.010917485000000227
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.35598657 14.21996949  1.1348434   0.66199198  0.66569297]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.99090171 11.4533016   1.90884481  0.70325861  0.10046552]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [19.50237133  0.09855171  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [19.65051211  2.43951839  0.19516147  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [19.35989435 19.88159992  0.0966      0.0966      0.0966    ]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [38.32458064 13.93185008  8.45862326  5.12493057  3.98052859]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [42.08800044 22.17913999  6.02337987  2.82047153  1.33852886]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [42.31134382 42.31134382  4.9748952   3.01112078  1.83285613]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [70.57379111 23.20501896  1.14173631  0.70972797  0.33943512]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [71.27013308 28.9523999  22.54919992  6.45839998  1.84919999]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [1.16688838e+02 5.49752924e+00 2.39023011e-02 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.95102922e+02 3.90322942e-02 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d
Tokens: [';\n', ';', ';\\', ';\n\n', ';\\\n']
Probs: [90.3, 9.52, 0.17, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;

API response time: 0.377120 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  65.0
Iteration TIME (sec):  0.011280726999999935
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.19775928 14.32963881  1.14353964  0.66706479  0.67079414]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [34.9625077  38.60725645 25.91009435 15.7277141   1.67316107]  taking action:  1  corresponding to token:  a
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [117.77639308   3.37022445   0.           0.           0.        ]  taking action:  0  corresponding to token:  l
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.95005342e+02 1.17096883e-01 1.95161471e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ways
Adding child.
Leaf selection - depth:  4
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always
Tokens: ['@', '@(', ' @(', ' @', '_ff']
Probs: [37.98, 37.98, 23.04, 0.89, 0.11]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  @

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@
API response time: 0.563115 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  (posedge clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  20
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  66.0
Iteration TIME (sec):  0.010617604999999308
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.30640918 13.32013575  1.15217025  0.67209931  0.6758568 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.80053992 11.56131619  1.92676863  0.70986213  0.10140888]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [19.30652223  0.09951321  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [19.44915341  2.4637928   0.19710342  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [19.55895648 18.64264405  0.09758074  0.09758074  0.09758074]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [21.74787268 22.58215376 19.90479993  2.56679999  1.57319999]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [35.72481819 33.75949305 19.33019859  6.717142    5.22444378]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [52.95359747 14.40291655  1.17096883  0.93677506  0.7025813 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [50.5539651  28.19154312 43.9961984   3.61462543  2.19068208]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [57.12300772 51.99157511 23.2358767   4.04236368  1.91317975]  taking action:  0  corresponding to token:  q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [1.17704686e+02 3.37022445e+00 9.56092042e-02 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.94868729e+02 1.75645324e-01 3.90322942e-02 3.90322942e-02
 1.95161471e-02]  taking action:  0  corresponding to token:   d
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d
Tokens: [';\n', ';', ';\n\n', ';\\', ' ;\n']
Probs: [98.87, 1.1, 0.03, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;

API response time: 0.435307 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;

 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
 end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  67.0
Iteration TIME (sec):  0.011531301999999855
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.15035576 13.41985789  1.16073669  0.6770964   0.68088183]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.615763   11.66833519  1.94452724  0.71640477  0.10234354]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [19.11643642  0.10046552  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [19.25383876  2.48783037  0.19902643  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [19.21938807 18.82907154  0.09855171  0.09855171  0.09855171]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [22.05255992 21.25242545 20.18005155  2.6022058   1.59490033]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [30.17935809 20.32257057  3.04220365  1.42401022  0.45309416]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [31.14461761 25.29245324 22.01592671  3.00764026  1.80458416]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [36.77313397 30.25966972  6.4027241   0.41307897  0.41307897]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [37.06870924 19.81281218 30.92957757 14.62820825  8.84385139]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [4.76296595e+01 1.39646181e+00 1.30918295e-01 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [5.09771498e+01 4.13999999e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [5.06654855e+01 2.95864790e+01 3.90322942e-02 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [6.00006909e+01 7.30227359e-02 3.65113680e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [66.54901417  0.20281775  0.16901479  0.16901479  0.13521183]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  68.0
Iteration TIME (sec):  0.0027663860000002316
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.98304238 13.51884944  1.16924037  0.68205688  0.68587004]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.41963664 11.77438563  1.96212513  0.7228882   0.10326974]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [18.91485545  0.10140888  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [19.04696395  2.5116379   0.20093103  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [18.87218578 19.01368009  0.09951321  0.09951321  0.09951321]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [36.70746821 14.45776409  8.7779282   5.31839179  4.13078974]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [39.81841339 23.08682245  6.26933254  2.93563984  1.39318501]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [36.96701373 44.38041648  5.2177141   3.15809011  1.92231572]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [68.5140371  28.91370049  3.05491606  0.86401666  0.67887024]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [83.68093304 20.61719993  3.58799999  0.138       0.1104    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [58.49868645 91.18727855 15.8472256  12.33358735  1.00389664]  taking action:  1  corresponding to token:   q
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q
Tokens: [' <=', '<=', ' =', '=', '    ']
Probs: [99.87, 0.09, 0.03, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <=
API response time: 0.427002 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  69.0
Iteration TIME (sec):  0.011391036000000021
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.83665683 13.61712622  1.17768265  0.68698155  0.69082224]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.2455471  11.87949335  1.97956658  0.729314    0.10418771]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [18.73579707  0.10234354  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [18.86319433  2.53522188  0.20281775  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [19.05530329 17.91008714  0.10046552  0.10046552  0.10046552]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [21.33780218 21.53895213 20.45160802  2.6371363   1.61630935]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [32.94595461 35.03671279 20.06178255  6.97070769  5.42166153]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [59.69653312 31.16039989 14.71079995 14.71079995 11.45399996]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [116.59322918   2.58144851   2.00779329   0.45414372   0.21512071]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.89755498e+02 3.47387418e+00 1.28806571e+00 2.14677618e-01
 1.36613030e-01]  taking action:  0  corresponding to token:  q
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q
Tokens: [' <=', '<=', ' =', ' ', '=']
Probs: [99.47, 0.52, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <=
API response time: 0.409040 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
 end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  70.0
Iteration TIME (sec):  0.011571255000000669
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.69461476 13.71470349  1.18606484  0.69187116  0.69573918]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [36.39376137 30.11482155 26.96808123 16.36992384  1.74148126]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [44.46407484 48.23099983  6.54119998  2.40119999  0.414     ]  taking action:  1  corresponding to token:  @(
Adding child.
Leaf selection - depth:  3
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(
Tokens: ['posedge', ' pos', 'posed', '*)', '*']
Probs: [99.8, 0.19, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  posedge

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(posedge
API response time: 0.479605 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  71.0
Iteration TIME (sec):  0.010306255000000597
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.79217043 12.81791055  1.1943882   0.69672645  0.70062162]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [18.07627998 11.98368304  1.9968557   0.73568368  0.10509767]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [18.56171205  0.10326974  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [18.6846253   2.55858847  0.20468708  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [18.74088841 18.07913705  0.10140888  0.10140888  0.10140888]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [21.62157066 20.36028403 20.71961427  2.67161013  1.63743847]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [29.27283995 20.78081289  3.11057632  1.45601445  0.46327732]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [29.76839355 25.95158776 22.5878642   3.0857738   1.85146428]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [35.07645063 31.32348879  6.62744908  0.42757736  0.42757736]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [35.00732781 20.62387039 32.19252501 15.22552187  9.20497237]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [44.889229    1.4646215   0.13730827  0.04576942  0.        ]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [4.76896708e+01 4.36394316e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [4.69419998e+01 3.13811999e+01 4.13999999e-02 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [5.48865493e+01 7.80645884e-02 3.90322942e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [59.78770797  0.21906821  0.18255684  0.18255684  0.14604547]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  72.0
Iteration TIME (sec):  0.0028096300000006735
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.63669415 12.90725949  1.20265396  0.70154815  0.70547027]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.89582728 12.08697835  2.01399641  0.74199868  0.10599981]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [18.37630282  0.10418771  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [18.49465237  2.58174359  0.20653949  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [18.41810591 18.2466288   0.10234354  0.10234354  0.10234354]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [20.94748531 20.62085016 20.98420601  2.70564476  1.6582984 ]  taking action:  2  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [168.09257491  17.72066156   8.3724271    0.40983909   0.40983909]  taking action:  0  corresponding to token:  begin
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   begin
Tokens: ['\n', '   ', '   \n', '    \n', '\\n']
Probs: [96.73, 1.77, 0.4, 0.24, 0.19]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   begin

API response time: 0.509023 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   begin
    q <= d;
   end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
   end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  73.0
Iteration TIME (sec):  0.010953069000000148
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.50076111 12.99599852  1.2108633   0.70633693  0.71028583]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.73583526 12.18940193  2.03099246  0.74826038  0.10689434]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [18.21178218  0.10509767  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [18.32606946  2.60469287  0.20837543  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [18.13151255 18.41260469  0.10326974  0.10326974  0.10326974]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [35.27771641 14.9652076   9.0860189   5.50505851  4.2757736 ]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [37.87287278 23.96021537  6.50599384  3.04645743  1.44577641]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [38.61449208 38.61449208  5.44972464  3.29851755  2.00779329]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [61.83349849 25.41982467  1.25070946  0.77746804  0.37183254]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [59.74272508 32.36976714 25.21077193  7.22071069  2.06746844]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [8.97989330e+01 6.34799998e+00 2.75999999e-02 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.19425652e+02 4.78046021e-02 2.39023011e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [176.23080825  18.57937203   0.3317745    0.           0.        ]  taking action:  0  corresponding to token:  ;

Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;

Tokens: ['end', '    \n', ';\n', 'endmodule', '   \n']
Probs: [99.67, 0.19, 0.03, 0.03, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  end

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end
API response time: 0.803190 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:13: syntax error\nI give up.\n'
Rollout trimmed response:  endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  74.0
Iteration TIME (sec):  0.011120770999999863
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.35391472 13.08413995  1.21901735  0.71109346  0.71506895]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.56478641 12.29097547  2.04784746  0.75447012  0.10778145]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [18.0360708   0.10599981  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [18.14620961  2.62744171  0.21019534  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [18.29511295 17.35353609  0.10418771  0.10418771  0.10418771]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [21.21262987 20.87817908 14.13034034  2.73925654  1.67889917]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [28.43928916 21.22919708  3.17747808  1.48733017  0.47324142]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [28.54644042 26.59443982 23.14567324  3.16197722  1.89718633]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [33.58531416 32.35239989  6.84479998  0.4416      0.4416    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [33.24104989 21.40428922 33.40776203 15.80027076  9.55245128]  taking action:  2  corresponding to token:      

Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
       

Tokens: ['   ', '       ', ' q', '      ', '    ']
Probs: [99.93, 0.03, 0.02, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
       
   
API response time: 0.501687 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
       
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  19
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  75.0
Iteration TIME (sec):  0.011460795000000523
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.22572735 13.17169572  1.22711723  0.71581838  0.71982029]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.41326307 12.3917198   2.06456486  0.76062916  0.10866131]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [17.8802797   0.10689434  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [17.98672606  2.64999527  0.21199962  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [18.01544432 17.5064083   0.10509767  0.10509767  0.10509767]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [20.6115778  21.13238851 14.30243156  2.77246086  1.69925021]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [34.10542275 28.99526048 20.76767271  7.21536795  5.61195285]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [49.13709982 15.27659995  1.242       0.9936      0.7452    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [45.02498798 30.14147955 47.03391449  3.86419712  2.34193765]  taking action:  2  corresponding to token:   q
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
    q
Tokens: [' <=', '<=', ' =', '=', '    ']
Probs: [99.66, 0.32, 0.02, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
    q <=
API response time: 0.985928 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
    q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
 end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  76.0
Iteration TIME (sec):  0.011232371000000185
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.10103629 13.25867732  1.23516398  0.72051232  0.72454048]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [33.98385186 31.25445844 27.98610049 16.98787281  1.80722051]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [46.87398328 25.36996888  6.89503019  2.53108703  0.43639432]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [55.65797785  0.11709688  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [60.32472496  2.44626165  0.14604547  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [61.73208961 25.35221875  2.67043371  0.37183254  0.10140888]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [35.90316991 25.43849157 50.97698315 39.68305105 35.02353261]  taking action:  2  corresponding to token:  \n
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
\n
Tokens: ['   ', '       ', '      ', ' begin', 'begin']
Probs: [76.4, 13.28, 4.88, 1.8, 1.4]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
\n   
API response time: 0.865048 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)

       begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      begin
        q <= d;
    end

endmodule
Depth of rollout:  20
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  77.0
Iteration TIME (sec):  0.010936693000000552
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.1873027  12.4487562   1.24315866  0.72517588  0.72923011]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.26557875 12.4916549   2.08114797  0.76673873  0.1095341 ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [17.72844444  0.10778145  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [17.83136195  2.6723585   0.21378868  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [17.74745619 17.65796823  0.10599981  0.10599981  0.10599981]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [20.86005482 20.0408649  14.47248598  2.80527219  1.71936038]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [27.71045443 21.66833325  3.24299999  1.51799999  0.483     ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [27.50565563 27.22215958 23.69035184  3.23638686  1.94183212]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [32.32179273 33.34962931  7.05545832  0.45519086  0.45519086]  taking action:  1  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [1.83002911e+02 1.16901721e+01 2.14677618e-01 1.75645324e-01
 1.95161471e-02]  taking action:  0  corresponding to token:   <=
Adding child.
Leaf selection - depth:  10
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q <=
Tokens: [' d', ' ', '   ', 'd', ' q']
Probs: [100.0, 0.0, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   d

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q <= d
API response time: 0.408272 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ;
end

endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  78.0
Iteration TIME (sec):  0.010962965000000047
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.06406445 12.52889816  1.25110224  0.72980964  0.73388977]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [17.12157405 12.59079996  2.09759999  0.7728      0.1104    ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [17.58040028  0.10866131  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [17.67994279  2.69453613  0.21556289  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [17.49038497 17.80824911  0.10689434  0.10689434  0.10689434]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [33.94186653 15.45599995  9.38399997  5.68559998  4.41599998]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [36.11264468 24.80293405  6.73434342  3.15338303  1.49652076]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [34.30969175 40.19464038  5.67225325  3.43320591  2.08977751]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [60.02842051 31.67337196  3.34649288  0.94648283  0.74366508]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [70.14949721 23.05073027  4.01150594  0.15428869  0.12343095]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [67.55619977 52.59699982 18.29879994 14.24159995  1.1592    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.65984831e+02 2.24630853e+01 6.44032854e+00 1.17096883e-01
 1.17096883e-01]  taking action:  0  corresponding to token:  q
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q
Tokens: [' <=', '<=', '=', ' =', '      ']
Probs: [92.37, 7.58, 0.03, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   <=

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <=
API response time: 0.837582 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   d;
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  79.0
Iteration TIME (sec):  0.011536693000000042
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.94409398 12.60853448  1.25899571  0.73441416  0.73852004]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.98109868 12.68917342  2.11392397  0.7788141   0.11125916]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [17.43599193  0.1095341   0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [17.53230429  2.71653271  0.21732262  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [17.63770492 16.89508967  0.10778145  0.10778145  0.10778145]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [20.2900567  20.27364275 14.64057425  2.83770416  1.73923803]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [27.03422726 22.09877108  3.30722405  1.54806232  0.49256528]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [26.56683409 27.83576787 24.22278577  3.30912374  1.98547424]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [56.46409042 64.80124976 14.47227911  1.17259404  0.92573214]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin         
Tokens: ['\n', '   ', '    \n', '\\n', ' q']
Probs: [76.83, 22.01, 0.66, 0.24, 0.09]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin         

API response time: 0.495417 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin         
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  80.0
Iteration TIME (sec):  0.011015018999999349
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.82725242 12.68767461  1.26684     0.73899     0.74312145]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.84401075 12.78679304  2.13012286  0.78478211  0.11211173]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [17.29507288  0.1104      0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [17.3882916   2.7383526   0.21906821  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [17.38640393 17.03421156  0.10866131  0.10866131  0.10866131]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [19.75971081 20.50379009 14.80676304  2.86976963  1.75889107]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [31.69415988 29.9487999  21.45039992  7.45199997  5.79599998]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [46.03314143 16.10295025  1.30918295  1.04734636  0.78550977]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [47.7612665  31.97289989 24.89349991  4.09859999  2.48399999]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [46.91111208 56.95868923 25.45362763  4.42818754  2.09578342]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [138.50609592  39.67632704  11.37791376   1.97113086   1.54177562]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
            
Tokens: ['   ', 'q', '\n', ' q', '\\n']
Probs: [76.69, 10.38, 8.08, 1.8, 0.85]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
               
API response time: 0.585652 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
               
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  21
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  81.0
Iteration TIME (sec):  0.01132089599999997
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.71340885 12.76632771  1.27463601  0.74353767  0.74769455]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [31.97253406 32.35407039 28.96836614 17.58411893  1.87065095]  taking action:  1  corresponding to token:  a
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [90.63613302  3.89159999  0.          0.          0.        ]  taking action:  0  corresponding to token:  l
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [1.19365896e+02 1.43413806e-01 2.39023011e-02 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ways
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [74.12232666 74.12232666 44.9652029   1.73693709  0.21467762]  taking action:  0  corresponding to token:  @
Adding child.
Leaf selection - depth:  5
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@
Tokens: ['(', ' (', '(pos', 'posedge', '(*)']
Probs: [90.79, 7.45, 1.01, 0.42, 0.23]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  (

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(
API response time: 0.585488 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  posedge clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  20
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  82.0
Iteration TIME (sec):  0.010976538999999619
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.79202849 12.03547124  1.28238463  0.7480577   0.75223985]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.71017629 12.88367587  2.14619949  0.79070508  0.11295787]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [17.1575047   0.11125916  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [17.24775859  2.75999999  0.2208      0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [17.1449064  17.17221595  0.1095341   0.1095341   0.1095341 ]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [32.79799463 15.93168008  9.67280576  5.86058232  4.55190859]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [34.63068559 25.61799991  6.95519998  3.25679999  1.54559999]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [35.61293887 35.7415103   5.88637538  3.56280615  2.16866461]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [54.02042876 34.21115178  3.61462543  1.0223183   0.8032501 ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [61.46166594 25.25080988  4.39438458  0.16901479  0.13521183]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [50.32401946 58.8111352  20.45868028 15.9225928   1.296025  ]  taking action:  1  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.94907761e+02 1.75645324e-01 5.85484413e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <=
Tokens: [' d', 'd', ' q', '    ', ' `']
Probs: [99.97, 0.01, 0.01, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   d

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d
API response time: 0.420271 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  83.0
Iteration TIME (sec):  0.011324590000000079
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.67943804 12.10832007  1.29008671  0.75255058  0.75675785]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.57946861 12.97983835  2.16215658  0.796584    0.11379771]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [17.02315659  0.11211173  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [17.11056725  2.78147891  0.22251831  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [17.28245205 16.34195551  0.1104      0.1104      0.1104    ]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [19.98206755 19.506018   14.97111532  2.90148076  1.77832692]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [26.40462169 22.52100783  3.37022445  1.57755187  0.50194832]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [27.14886366 23.68014637 24.7437655   3.38029583  2.0281775 ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [33.27547214 22.84529002  7.26000672  0.46838753  0.46838753]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [34.43203188 22.15729913 17.24015949 16.35483402  9.88772645]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [42.5611691   1.52974727  0.14341381  0.0478046   0.        ]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [44.950268    0.04576942  0.          0.          0.        ]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [4.39142608e+01 3.30786891e+01 4.36394316e-02 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [5.08594748e+01 8.27999997e-02 4.13999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [54.6913878   0.23419377  0.19516147  0.19516147  0.15612918]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  84.0
Iteration TIME (sec):  0.0027271360000007405
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.55661726 12.18073655  1.29774307  0.75701679  0.76124903]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.43833495 13.07529632  2.17799677  0.80241986  0.11463141]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [16.87826841  0.11295787  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [16.96274096  2.80279324  0.22422346  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [17.02703519 16.47025627  0.11125916  0.11125916  0.11125916]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [19.4448052  19.71791752 15.13369066  2.93284903  1.79755263]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [29.69305646 30.87297845 22.11210497  7.68134575  5.97438003]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [50.03796648 34.83838618 16.44717434 16.44717434 12.80596126]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [89.72533302  2.98079999  2.31839999  0.5244      0.2484    ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [116.15103661   4.25460959   1.57755187   0.26292531   0.16731611]  taking action:  0  corresponding to token:  q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [194.12711514   1.01483965   0.           0.           0.        ]  taking action:  0  corresponding to token:   <=
Adding child.
Leaf selection - depth:  11
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <=
Tokens: [' d', 'd', ' ', '   ', ' `']
Probs: [99.95, 0.02, 0.02, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   d

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d
API response time: 0.398078 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ;
 end

endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  85.0
Iteration TIME (sec):  0.011439414999999897
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.44972668 12.25272829  1.30535453  0.76145681  0.76571387]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.31372501 13.17006503  2.19372258  0.80821358  0.11545908]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [16.75019917  0.11379771  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [16.83205837  2.8239467   0.22591574  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [16.80000843 16.59757385  0.11211173  0.11211173  0.11211173]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [19.65465781 18.81493149 15.29454548  2.96388533  1.81657488]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [25.78055761 22.93549515  3.43206859  1.60650019  0.51115915]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [26.2073683  24.17016658 25.25399991  3.44999999  2.06999999]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [32.0028204  23.4731311   7.45894785  0.48122244  0.48122244]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [32.76978451 22.88559992 17.80719994 16.89119994 10.21199996]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [40.55204944  1.59221144  0.14926982  0.04975661  0.        ]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [42.62276468  0.0478046   0.          0.          0.        ]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [41.3909459  34.69322184  0.04576942  0.04576942  0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [4.75848219e+01 8.72788631e-02 4.36394316e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [50.67834982  0.2484      0.207       0.207       0.1656    ]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  86.0
Iteration TIME (sec):  0.0027107270000001904
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.33274856 12.32430268  1.31292187  0.76587109  0.77015283]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.17885154 13.26415921  2.20933646  0.81396607  0.11628087]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [16.61175664  0.11463141  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [16.69090756  2.84494287  0.22759543  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [16.56292117 16.7239305   0.11295787  0.11295787  0.11295787]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [31.76184167 16.39356356  9.95323502  6.03048945  4.6838753 ]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [33.31457461 26.40796871  7.16925604  3.35703259  1.59316801]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [36.87041495 32.36161308  6.09297738  3.68785473  2.24478114]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [55.49518464 27.45654871  1.35092061  0.83976146  0.40162505]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [52.16162779 35.45930329 27.61701696  7.90989225  2.26479821]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [7.50545961e+01 7.09727974e+00 3.08577380e-02 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [9.16057330e+01 5.51999998e-02 2.75999999e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [107.41888929  22.75499061   0.40633912   0.           0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.94517438e+02 3.70806795e-01 5.85484413e-02 5.85484413e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  end
Adding child.
Leaf selection - depth:  14
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end
Tokens: ['endmodule', ' \n', '   \n', '\n', '  \n']
Probs: [85.42, 9.0, 2.01, 1.22, 0.58]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  endmodule

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule
API response time: 0.798826 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:13: syntax error\nI give up.\n'
Rollout trimmed response:  
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  87.0
Iteration TIME (sec):  0.011650995999999303
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.21861037 12.39546689  1.32044584  0.77026007  0.77456635]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [33.0240726  26.71407991 29.9183999  18.16079994  1.93199999]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [43.69210594 26.61068828  7.23156867  2.65462647  0.45769422]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [51.64697482  0.1242      0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [55.26765491  2.61516371  0.15612918  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [55.55390622 27.38352597  2.88439807  0.40162505  0.1095341 ]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [39.33631509 27.87124358 27.87124358 43.47060442 38.36635771]  taking action:  3  corresponding to token:      
Adding child.
Leaf selection - depth:  7
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
    
Tokens: ['begin', '      ', ' begin', ' q', '\n']
Probs: [73.33, 7.73, 4.69, 3.65, 3.65]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  begin

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
    begin
API response time: 0.558330 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
    begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
        q <= d;
    end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  88.0
Iteration TIME (sec):  0.010757178000000422
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.28924675 11.72703801  1.32792718  0.77462419  0.77895486]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [16.04702881 13.35759305  2.22484077  0.81967818  0.11709688]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [16.47645459  0.11545908  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [16.55300593  2.86578522  0.22926282  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [16.68816121 15.9099083   0.11379771  0.11379771  0.11379771]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [19.14294472 19.01088881 15.45373328  2.99459999  1.83539999]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [25.19646182 23.34264467  3.49281788  1.63493603  0.52020692]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [25.34986059 24.65048053 25.75412767  3.51832345  2.11099407]  taking action:  2  corresponding to token:      

Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin       

Tokens: ['   ', ' q', '\n', '    ', ' ']
Probs: [94.29, 4.69, 0.39, 0.18, 0.14]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin       
   
API response time: 0.509391 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin       
       q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  89.0
Iteration TIME (sec):  0.010978162999999874
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.18880949 11.79326349  1.33536661  0.77896385  0.78331879]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.93082042 13.45038027  2.24023777  0.82535076  0.11790725]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [16.35703396  0.11628087  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [16.43127495  2.88647708  0.23091817  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [16.47423401 16.02785407  0.11463141  0.11463141  0.11463141]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [18.69337784 19.20485655 15.61130483  3.0250028   1.85403397]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [30.55653862 26.45862671 22.75461788  7.90403957  6.14758633]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [43.44587415 16.8889167   1.37308266  1.09846613  0.8238496 ]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [43.14225977 33.70510031 26.24275751  4.32030372  2.61836589]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [50.67580147 40.98428138 27.49306008  4.7829892   2.26370481]  taking action:  0  corresponding to token:  q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [9.05809330e+01 3.89159999e+00 1.10400000e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.19282238e+02 2.15120710e-01 4.78046021e-02 4.78046021e-02
 2.39023011e-02]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.92956146e+02 2.14677618e+00 5.85484413e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ;

Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;

Tokens: ['end', ' end', '\n', '\\n', '   ']
Probs: [58.15, 35.27, 1.76, 1.76, 1.07]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  end

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
end
API response time: 0.760772 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Rollout trimmed response:  endmodule
Depth of rollout:  15
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  90.0
Iteration TIME (sec):  0.011474544999999559
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.07854594 11.85912206  1.34276482  0.78327948  0.78765854]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.80459141 13.54253411  2.25552968  0.83098462  0.11871209]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [16.22748904  0.11709688  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [16.29932563  2.90702166  0.23256173  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [16.25018662 16.14494821  0.11545908  0.11545908  0.11545908]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [18.88333321 18.32337338 15.76730839  3.05510307  1.87248253]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [24.68162375 23.74283282  3.5525285   1.66288568  0.52909999]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [25.84314036 25.12164313 13.07236328  3.58534516  2.1512071 ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [30.85862395 24.08465626  7.65271902  0.49372381  0.49372381]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [31.31459924 23.59147526 18.35678038 17.41105038 10.52628863]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [38.79549976  1.6523159   0.15490462  0.05163487  0.        ]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [40.61388006  0.04975661  0.          0.          0.        ]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [39.24677485 36.23588841  0.0478046   0.0478046   0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [44.85569115  0.09153884  0.04576942  0.          0.        ]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [47.41511302  0.26183659  0.21819716  0.21819716  0.17455773]  taking action:  0  corresponding to token:  endmodule
Child already created - returning child node.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  91.0
Iteration TIME (sec):  0.0029038950000002117
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.97085533 11.92461976  1.35012249  0.78757145  0.79197451]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.68109728 13.63406736  2.2707186   0.83658054  0.11951151]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [16.10075833  0.11790725  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [16.17028318  2.92742206  0.23419377  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [16.03392858 16.26120891  0.11628087  0.11628087  0.11628087]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [30.76754112 16.84278546 10.22597689  6.19573894  4.81222442]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [32.07955609 27.17502519  7.3771036   3.45435804  1.63935636]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [33.20079988 33.42579988  6.29279998  3.80879999  2.31839999]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [49.49087537 36.57325965  3.86419712  1.09290424  0.85871047]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [55.3104971  27.27399187  4.74647784  0.18255684  0.14604547]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [55.13356429 42.91942868 22.41136138 17.4423265   1.41972425]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [101.59453526  27.51154852   7.88775935   0.14341381   0.14341381]  taking action:  0  corresponding to token:  q
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.80270651e+02 1.47932395e+01 5.85484413e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <=
Tokens: [' d', ' q', ' `', '`', '``']
Probs: [94.78, 2.23, 1.05, 0.82, 0.39]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   d

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <= d
API response time: 0.387832 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ;
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  92.0
Iteration TIME (sec):  0.011310980000000193
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.87748405 11.98976244  1.35744028  0.79184016  0.79626708]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [31.19796334 27.5387054  30.83918073 18.7197241   1.99146001]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [41.06498196 27.79618074  7.55312714  2.77266692  0.47804602]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [48.38482191  0.13091829  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [51.28472482  2.77379999  0.1656      0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [50.89603796 29.27422064  3.08355124  0.42935524  0.11709688]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [42.49341792 30.10838994 30.10838994 23.4268096  41.44040264]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [69.8403283  84.78146187  8.9394606   1.55364957  1.21901735]  taking action:  1  corresponding to token:     
Adding child.
Leaf selection - depth:  8
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin   
Tokens: ['\n', '   ', '    \n', '   \n', '       ']
Probs: [82.4, 14.32, 1.94, 0.56, 0.16]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin   

API response time: 0.892702 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin   

    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  93.0
Iteration TIME (sec):  0.010929691000000297
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.94258885 11.37930273  1.36471883  0.79608598  0.80053664]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.57240352 13.72499239  2.2858066   0.84213927  0.12030561]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [15.98907075  0.11871209  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [16.05654311  2.94768128  0.2358145   0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [16.14859454 15.55282103  0.11709688  0.11709688  0.11709688]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [18.42396956 18.50352866 15.92178985  3.08490966  1.89075108]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [28.69665436 27.18593836 23.37951763  8.1206287   6.31604455]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [41.16521593 17.63989818  1.43413806  1.14731045  0.86048284]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [39.47064647 35.35264788 27.52607672  4.53117277  2.74616532]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [43.14391115 43.81864276 29.39131752  5.11323054  2.42000224]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [84.76731532 48.59337806 13.93504152  2.41413241  1.88828178]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [149.66933206  20.25776068  15.76904685   3.51290648   1.6588725 ]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
               
Tokens: ['   ', 'q', ' q', ' ', '  ']
Probs: [70.81, 26.05, 1.67, 0.79, 0.37]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
                  
API response time: 0.435605 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
                      q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:      q <= d;
end

endmodule
Depth of rollout:  21
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  94.0
Iteration TIME (sec):  0.011590475000000211
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.85010997 11.44017184  1.37195877  0.80030928  0.80478355]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.46593173 13.81532118  2.30079565  0.84766156  0.12109451]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [15.87966938  0.11951151  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [15.94516353  2.96780221  0.23742418  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [15.95374116 15.66173458  0.11790725  0.11790725  0.11790725]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [18.6042617  17.74286185 16.07479292  3.114431    1.90884481]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [24.16468842 24.13640493  3.61125195  1.69037325  0.53784604]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [25.02606359 25.58415834 13.31316068  3.6511368   2.19068208]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [61.8604704  35.44310625 15.85358746  1.28451242  1.01408875]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [9.16941330e+01 5.24399998e-01 5.51999998e-02 2.75999999e-02
 2.75999999e-02]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [89.32070367 31.04908908 14.67601285 11.42529991  1.98389099]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.94829696e+02 1.75645324e-01 1.36613030e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <=
Tokens: [' d', 'd', ' `', '`', ' ']
Probs: [99.88, 0.12, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:   d

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d
API response time: 0.457208 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  ;
end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  95.0
Iteration TIME (sec):  0.011306631000000067
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.75967109 11.50072142  1.3791607   0.80451041  0.80900817]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.36160713 13.9050653   2.31568769  0.8531481   0.1218783 ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [15.77247721  0.12030561  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [15.83606383  2.98778763  0.23902301  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [15.76535603 15.76990468  0.11871209  0.11871209  0.11871209]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [29.90494132 17.28033327 10.49163091  6.35669402  4.93723808]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [31.01930592 27.92105442  7.57925346  3.54901551  1.68427855]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [34.23221882 30.61752783  6.48646975  3.92602116  2.38975201]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [50.72253573 29.35228523  1.44419488  0.89774277  0.42935524]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [46.80152454 38.300425   29.82978763  8.5436601   2.44626165]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [6.55974594e+01 7.77468042e+00 3.38029583e-02 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [7.65962017e+01 6.17154760e-02 3.08577380e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [82.40933303 26.27519991  0.4692      0.          0.        ]  taking action:  0  corresponding to token:  ;

Child already created - returning child node.
Leaf selection - depth:  13
Leaf selection - action scores:  [1.18617117e+02 4.54143720e-01 7.17069032e-02 7.17069032e-02
 4.78046021e-02]  taking action:  0  corresponding to token:  end
Child already created - returning child node.
Leaf selection - depth:  14
Leaf selection - action scores:  [166.70692847  17.56453238   3.92274557   2.38096995   1.13193653]  taking action:  0  corresponding to token:  endmodule
Adding child.
Leaf selection - depth:  15
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:13: syntax error\nI give up.\n'
Leaf is terminal - getting return value.
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:13: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  96.0
Iteration TIME (sec):  0.0028562110000001084
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.65980748 11.56095646  1.38632522  0.80868971  0.81321083]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.2476702  13.99423595  2.33048457  0.85859958  0.12265708]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [15.65557867  0.12109451  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [15.7171672   3.00764026  0.24061122  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [15.87352899 15.07366317  0.11951151  0.11951151  0.11951151]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [18.19277142 17.91077973 16.22635925  3.14367513  1.92676863]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [23.70825366 24.52367867  3.66903565  1.71742094  0.54645212]  taking action:  1  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [1.14812508e+02 8.91555830e+00 1.19511505e-01 9.56092042e-02
 4.78046021e-02]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [117.27252788  71.13635616   2.75177674   1.30758186   1.30758186]  taking action:  0  corresponding to token:     
Adding child.
Leaf selection - depth:  9
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
      
Tokens: ['   ', 'q', ' q', '\n', '  ']
Probs: [55.73, 33.8, 9.69, 0.29, 0.18]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:     

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
         
API response time: 0.451405 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
         
    q <= d;
end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
    q <= d;
end

endmodule
Depth of rollout:  19
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  97.0
Iteration TIME (sec):  0.011091325999999846
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.57337744 11.62088179  1.3934529   0.81284753  0.8173919 ]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [29.62778184 28.3394134  31.73325517 19.26243718  2.04919544]  taking action:  2  corresponding to token:  alwa
Adding child.
Leaf selection - depth:  2
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   alwa
Tokens: ['ys', '@(', '`', ' ys', 'ays']
Probs: [99.99, 0.0, 0.0, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ys

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always
API response time: 0.854165 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk) begin
        q <= d;
    end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:   @(posedge clk) begin
        q <= d;
    end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  98.0
Iteration TIME (sec):  0.01032738600000016
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.63363675 11.06047573  1.40054431  0.81698418  0.82155168]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.14757933 14.082844    2.34518809  0.86401666  0.12343095]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [15.55274169  0.1218783   0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [15.61255825  3.0273627   0.24218902  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [15.68860166 15.17530862  0.12030561  0.12030561  0.12030561]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [17.80467354 18.07714989 16.37652856  3.1726497   1.94452724]  taking action:  1  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [27.17367006 27.8943491  23.98817789  8.33158926  6.48012498]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [43.83680347 38.16353996 18.01697679 18.01697679 14.02822771]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [75.21788068  3.3326357   2.59204999  0.58629702  0.27771964]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [89.38493302  4.91279998  1.82159999  0.3036      0.1932    ]  taking action:  0  corresponding to token:  q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [118.82809433   1.24291966   0.           0.           0.        ]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.95063890e+02 3.90322942e-02 3.90322942e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Adding child.
Leaf selection - depth:  12
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d
Tokens: [';', ';\n', ';\\', ';\n\n', ' ;\n']
Probs: [49.99, 49.99, 0.02, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
API response time: 0.417203 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d;
 end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
 end

endmodule
Depth of rollout:  17
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  99.0
Iteration TIME (sec):  0.011141034999999633
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.54799256 11.11667363  1.4076      0.8211      0.8256905 ]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [15.04942769 14.17089995  2.35979999  0.8694      0.1242    ]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [15.45189949  0.12265708  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [15.51000514  3.04695749  0.2437566   0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [15.5095994  15.27628753  0.12109451  0.12109451  0.12109451]  taking action:  0  corresponding to token:  )

Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [17.96939765 17.36858508 16.52533879  3.20136205  1.96212513]  taking action:  0  corresponding to token:  begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [24.08263544 18.6537103   3.72592332  1.74404921  0.55492475]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [25.47906743 22.30441615 13.54969516  3.7157637   2.22945822]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [29.82296269 24.68107503  7.8417035   0.50591635  0.50591635]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [30.02753387 24.27687735 18.89042075 17.91582303 10.83146164]  taking action:  0  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [37.24293206  1.71030944  0.16034151  0.05344717  0.        ]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [38.8573421   0.05163487  0.          0.          0.        ]  taking action:  0  corresponding to token:   d
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [37.39592103 37.71550843  0.04975661  0.04975661  0.        ]  taking action:  1  corresponding to token:  ;
Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
Tokens: ['end', '\n', '    \n', ' \n', '   \n']
Probs: [67.31, 24.76, 7.09, 0.58, 0.07]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  end

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;end
API response time: 2.481702 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;end
endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
endmodule
Depth of rollout:  16
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  100.0
Iteration TIME (sec):  0.012061236000000086
ROBUST FINAL VALUE, ITERATION:  1.0
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.46414552 11.17259123  1.41462049  0.82519528  0.82980869]  taking action:  0  corresponding to token:  always
Child already created - returning child node.
Leaf selection - depth:  1
Leaf selection - action scores:  [14.9531534  14.25841401  2.37432198  0.8747502   0.12496431]  taking action:  0  corresponding to token:   @(
Child already created - returning child node.
Leaf selection - depth:  2
Leaf selection - action scores:  [15.35298835  0.12343095  0.          0.          0.        ]  taking action:  0  corresponding to token:  posedge
Child already created - returning child node.
Leaf selection - depth:  3
Leaf selection - action scores:  [15.40944127  3.06642706  0.24531417  0.          0.        ]  taking action:  0  corresponding to token:   clk
Child already created - returning child node.
Leaf selection - depth:  4
Leaf selection - action scores:  [15.33622332 15.37661283  0.1218783   0.1218783   0.1218783 ]  taking action:  1  corresponding to token:  )
Child already created - returning child node.
Leaf selection - depth:  5
Leaf selection - action scores:  [29.06571894 17.70707242 10.75072254  6.51367307  5.05916355]  taking action:  0  corresponding to token:   begin
Child already created - returning child node.
Leaf selection - depth:  6
Leaf selection - action scores:  [30.00642471 28.64769632  7.77614997  3.64121308  1.72803333]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  7
Leaf selection - action scores:  [31.20775325 31.50775325  6.67452231  4.03984245  2.45903453]  taking action:  1  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  8
Leaf selection - action scores:  [45.92342484 38.79179987  4.09859999  1.1592      0.9108    ]  taking action:  0  corresponding to token:  

Child already created - returning child node.
Leaf selection - depth:  9
Leaf selection - action scores:  [50.67299628 29.15712376  5.07419824  0.19516147  0.15612918]  taking action:  0  corresponding to token:     
Child already created - returning child node.
Leaf selection - depth:  10
Leaf selection - action scores:  [44.64229791 46.36362293 24.20703696 18.83986587  1.53347745]  taking action:  1  corresponding to token:   q
Child already created - returning child node.
Leaf selection - depth:  11
Leaf selection - action scores:  [1.19306140e+02 2.15120710e-01 7.17069032e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:   <=
Child already created - returning child node.
Leaf selection - depth:  12
Leaf selection - action scores:  [1.95102922e+02 1.95161471e-02 1.95161471e-02 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:   d
Adding child.
Leaf selection - depth:  13
State does not end with endmodule - not complete.
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d
Tokens: [';\n', ';', ';\\', ';\n\n', ';\r\n']
Probs: [88.07, 11.92, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ;


MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d;

API response time: 0.412189 seconds
No trimming of ``` needed.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d;

end

endmodule
Compilation check...
Output Verilog module compiles successfully.
Functionality check...
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 0 passed!\nTest 1 passed!\nTest 2 passed!\nTest 3 passed!\nMismatch at index 4: Inputs = [1, 1], Generated = [1], Reference = [0]\nMismatch at index 5: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 6 passed!\nTest 7 passed!\nMismatch at index 8: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 9 passed!\nTest 10 passed!\nMismatch at index 11: Inputs = [0, 0], Generated = [0], Reference = [1]\nTest 12 passed!\nTest 13 passed!\nTest 14 passed!\nMismatch at index 15: Inputs = [0, 1], Generated = [1], Reference = [0]\nTest 16 passed!\nTest 17 passed!\nMismatch at index 18: Inputs = [1, 0], Generated = [0], Reference = [1]\nTest 19 passed!\n6 mismatches out of 20 total tests.\n'

Rollout trimmed response:  
end

endmodule
Depth of rollout:  18
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  101.0
Iteration TIME (sec):  0.013152477000000218
TOTAL GENERATED TOKENS:  783
MCTS EXECUTION TIME (sec):  1.0426464380000002
----
 Tree depth: 0
 Node: action=None
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );


• Child Action scores:[11.38203491 11.2282327   1.42160631  0.82927035  0.83390653]
• Child averaged monte carlo:-0.23137254901960794
• Child probablities:[6.93396674e+01 1.54360000e+01 1.02000000e-01 5.95000000e-02
 5.98326453e-02]
• Child visitation:[1 1 0 0 0]
• N=101.0,Q=-0.23137254901960794,M=-0.23137254901960794
----
 Tree depth: 1
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always
• Child Action scores:[14.8586973  14.34539605  2.38875568  0.88006788  0.12572398]
• Child averaged monte carlo:-0.26144590722509176
• Child probablities:[9.744e+01 2.290e+00 1.900e-01 7.000e-02 1.000e-02]
• Child visitation:[1 1 0 0 0]
• N=82.0,Q=-0.26144590722509176,M=-0.26144590722509176
----
 Tree depth: 1
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   
• Child Action scores:[30.44218165 29.11817165 16.25141021 19.79027292  2.10534818]
• Child averaged monte carlo:-0.0947368584181133
• Child probablities:[65.99 24.27  5.42  3.29  0.35]
• Child visitation:[1 1 1 0 0]
• N=18.0,Q=-0.0947368584181133,M=-0.0947368584181133
----
 Tree depth: 2
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(
• Child Action scores:[15.25594734  0.1242      0.          0.          0.        ]
• Child averaged monte carlo:-0.265432216503002
• Child probablities:[9.999e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=80.0,Q=-0.265432216503002,M=-0.265432216503002
----
 Tree depth: 2
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always@(
• Child Action scores:[1.95141955e+02 1.95161471e-02 0.00000000e+00 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.999e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 2
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always
• Child Action scores:[38.8504212  28.93322383  7.86154397  2.88588323  0.49756607]
• Child averaged monte carlo:-0.0923077051456158
• Child probablities:[86.09 11.65  1.58  0.58  0.1 ]
• Child visitation:[1 1 0 0 0]
• N=12.0,Q=-0.0923077051456158,M=-0.0923077051456158
----
 Tree depth: 2
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   a
• Child Action scores:[75.98160969  4.35094106  0.          0.          0.        ]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[98.59  1.41  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 2
 Node: action=2
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   alwa
• Child Action scores:[195.14195479   0.           0.           0.           0.        ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[99.99  0.    0.    0.    0.  ]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge
• Child Action scores:[15.31080309  3.0857738   0.2468619   0.          0.        ]
• Child averaged monte carlo:-0.267500114440918
• Child probablities:[9.972e+01 2.500e-01 2.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=79.0,Q=-0.267500114440918,M=-0.267500114440918
----
 Tree depth: 3
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(
• Child Action scores:[45.66569111  0.13730827  0.          0.          0.        ]
• Child averaged monte carlo:-0.09090910174629906
• Child probablities:[9.997e+01 3.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=10.0,Q=-0.09090910174629906,M=-0.09090910174629906
----
 Tree depth: 3
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@(
• Child Action scores:[194.77114799   0.37080679   0.           0.           0.        ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[99.8   0.19  0.    0.    0.  ]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   al
• Child Action scores:[9.18597330e+01 1.65599999e-01 2.75999999e-02 2.75999999e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.992e+01 6.000e-02 1.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 4
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk
• Child Action scores:[15.43605783 14.76828355  0.12265708  0.12265708  0.12265708]
• Child averaged monte carlo:-0.26962036422536345
• Child probablities:[7.307e+01 2.688e+01 1.000e-02 1.000e-02 1.000e-02]
• Child visitation:[1 1 0 0 0]
• N=78.0,Q=-0.26962036422536345,M=-0.26962036422536345
----
 Tree depth: 4
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge
• Child Action scores:[48.04540411  2.92384191  0.17455773  0.          0.        ]
• Child averaged monte carlo:-0.09000000953674317
• Child probablities:[9.927e+01 6.700e-01 4.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=9.0,Q=-0.09000000953674317,M=-0.09000000953674317
----
 Tree depth: 4
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always
• Child Action scores:[45.34046972 90.78093943 55.07090165  2.12730479  0.26292531]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[37.98 37.98 23.04  0.89  0.11]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 5
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)

• Child Action scores:[17.59640283 17.52420308 16.67282618  3.22981916  1.97956658]
• Child averaged monte carlo:-0.28771939193993284
• Child probablities:[58.69 35.6   4.82  0.31  0.19]
• Child visitation:[1 1 1 0 0]
• N=56.0,Q=-0.28771939193993284,M=-0.28771939193993284
----
 Tree depth: 5
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
• Child Action scores:[28.33345171 18.12376643 11.00371533  6.66695694  5.17821898]
• Child averaged monte carlo:-0.21818180517716843
• Child probablities:[92.65  2.8   1.7   1.03  0.8 ]
• Child visitation:[1 0 0 0 0]
• N=21.0,Q=-0.21818180517716843,M=-0.21818180517716843
----
 Tree depth: 5
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk
• Child Action scores:[47.22752483 31.04999989  3.27059999  0.4554      0.1242    ]
• Child averaged monte carlo:-0.08888889683617486
• Child probablities:[9.143e+01 7.500e+00 7.900e-01 1.100e-01 3.000e-02]
• Child visitation:[1 0 0 0 0]
• N=8.0,Q=-0.08888889683617486,M=-0.08888889683617486
----
 Tree depth: 5
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always@
• Child Action scores:[177.18709946  14.53952958   1.97113086   0.81967818   0.44887138]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[90.79  7.45  1.01  0.42  0.23]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
• Child Action scores:[23.63300689 18.93536085  3.78195539  1.77027699  0.56326995]
• Child averaged monte carlo:-0.38823537265553193
• Child probablities:[8.97e+01 9.45e+00 4.70e-01 2.20e-01 7.00e-02]
• Child visitation:[1 1 0 0 0]
• N=33.0,Q=-0.38823537265553193,M=-0.38823537265553193
----
 Tree depth: 6
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
• Child Action scores:[27.84871512 24.48736581 24.58180253  8.53733849  6.64015216]
• Child averaged monte carlo:-0.13809524263654435
• Child probablities:[57.58 27.2   7.79  1.35  1.05]
• Child visitation:[1 1 1 0 0]
• N=20.0,Q=-0.13809524263654435,M=-0.13809524263654435
----
 Tree depth: 6
 Node: action=2
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   
• Child Action scores:[102.88525952  21.70328936  10.25408716   0.50194832   0.50194832]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[86.13  9.08  4.29  0.21  0.21]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 6
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
• Child Action scores:[29.12960529 29.35638813  7.96818259  3.73113312  1.77070724]
• Child averaged monte carlo:-0.22380951472691127
• Child probablities:[88.23  9.3   1.26  0.59  0.28]
• Child visitation:[1 1 0 0 0]
• N=20.0,Q=-0.22380951472691127,M=-0.22380951472691127
----
 Tree depth: 6
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)

• Child Action scores:[34.04898319 32.190675   32.190675   25.04776516 44.3016539 ]
• Child averaged monte carlo:-0.08750000596046448
• Child probablities:[34.97 16.52 16.52 12.86 11.35]
• Child visitation:[1 1 1 1 0]
• N=7.0,Q=-0.08750000596046448,M=-0.08750000596046448
----
 Tree depth: 7
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
• Child Action scores:[24.74140204 22.68718114 13.78218542  3.77928563  2.26757138]
• Child averaged monte carlo:-0.4266667366027832
• Child probablities:[73.6  21.09  3.66  0.5   0.3 ]
• Child visitation:[1 1 1 0 0]
• N=29.0,Q=-0.4266667366027832,M=-0.4266667366027832
----
 Tree depth: 7
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin

• Child Action scores:[8.83545330e+01 1.02948000e+01 1.38000000e-01 1.10400000e-01
 5.51999998e-02]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.611e+01 3.730e+00 5.000e-02 4.000e-02 2.000e-02]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 7
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin

• Child Action scores:[39.27373748 18.36018814  1.49269822  1.19415858  0.89561893]
• Child averaged monte carlo:-0.16153845420250526
• Child probablities:[95.12  3.69  0.3   0.24  0.18]
• Child visitation:[1 0 0 0 0]
• N=12.0,Q=-0.16153845420250526,M=-0.16153845420250526
----
 Tree depth: 7
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
• Child Action scores:[39.44630772 41.22133443 19.46055913 19.46055913 15.15221771]
• Child averaged monte carlo:-0.08571428912026542
• Child probablities:[64.96 11.29  5.33  5.33  4.15]
• Child visitation:[1 0 0 0 0]
• N=6.0,Q=-0.08571428912026542,M=-0.08571428912026542
----
 Tree depth: 7
 Node: action=2
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin    

• Child Action scores:[1.86008398e+02 5.62065036e+00 2.65419600e+00 5.85484413e-01
 1.75645324e-01]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.531e+01 2.880e+00 1.360e+00 3.000e-01 9.000e-02]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
   begin
• Child Action scores:[188.77969083   3.45435804   0.78064588   0.46838753   0.37080679]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[96.73  1.77  0.4   0.24  0.19]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
• Child Action scores:[32.07357498 29.12621748  6.85741979  4.15054356  2.52641782]
• Child averaged monte carlo:-0.23684208016646535
• Child probablities:[48.57 48.57  1.14  0.69  0.42]
• Child visitation:[1 1 0 0 0]
• N=18.0,Q=-0.23684208016646535,M=-0.23684208016646535
----
 Tree depth: 7
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin q
• Child Action scores:[1.85871785e+02 9.25065372e+00 1.95161471e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.524e+01 4.740e+00 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin
• Child Action scores:[80.65239972 48.89859983 10.32239996  1.79399999  1.4076    ]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[58.48 35.47  3.74  0.65  0.51]
• Child visitation:[1 1 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 7
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
 begin
• Child Action scores:[153.22127083  12.56839873   7.63081351   7.63081351   3.61048721]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[78.51  6.44  3.91  3.91  1.85]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 7
 Node: action=2
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
\n
• Child Action scores:[149.10336379  25.91744334   9.52387978   3.51290648   2.73226059]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[76.4  13.28  4.88  1.8   1.4 ]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 7
 Node: action=3
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
    
• Child Action scores:[143.11190664  15.0859817    9.15307299   7.12339369   7.12339369]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[73.33  7.73  4.69  3.65  3.65]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 8
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   

• Child Action scores:[28.92731244 25.26345451  8.02623942  0.5178219   0.5178219 ]
• Child averaged monte carlo:-0.545454588803378
• Child probablities:[8.672e+01 1.174e+01 1.240e+00 8.000e-02 8.000e-02]
• Child visitation:[1 1 0 0 0]
• N=21.0,Q=-0.545454588803378,M=-0.545454588803378
----
 Tree depth: 8
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
• Child Action scores:[53.43836317 38.28693636 17.12383158  1.38743198  1.09534104]
• Child averaged monte carlo:-0.08571428912026542
• Child probablities:[73.29 21.    4.69  0.38  0.3 ]
• Child visitation:[1 1 0 0 0]
• N=6.0,Q=-0.08571428912026542,M=-0.08571428912026542
----
 Tree depth: 8
 Node: action=2
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin       

• Child Action scores:[184.01775094   9.15307299   0.76112974   0.35129065   0.27322606]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[94.29  4.69  0.39  0.18  0.14]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 8
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
   
• Child Action scores:[71.76446354 87.12388737  3.37022445  1.60145417  1.60145417]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[60.09 36.45  1.41  0.67  0.67]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 8
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
   
• Child Action scores:[36.64190123 36.92685974 28.75227278  4.73265561  2.86827613]
• Child averaged monte carlo:-0.16666666666666666
• Child probablities:[69.34 15.47 12.05  0.99  0.6 ]
• Child visitation:[1 1 1 0 0]
• N=11.0,Q=-0.16666666666666666,M=-0.16666666666666666
----
 Tree depth: 8
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   

• Child Action scores:[65.90337467  3.6507195   2.8394485   0.64225621  0.30422663]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[9.76e+01 1.08e+00 8.40e-01 1.90e-01 9.00e-02]
• Child visitation:[1 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 8
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   

• Child Action scores:[46.96764982 31.13279989  1.53179999  0.9522      0.4554    ]
• Child averaged monte carlo:-0.3888888888888889
• Child probablities:[91.58  7.52  0.37  0.23  0.11]
• Child visitation:[1 0 0 0 0]
• N=8.0,Q=-0.3888888888888889,M=-0.3888888888888889
----
 Tree depth: 8
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
• Child Action scores:[43.02202066 40.89014737  4.32030372  1.22190408  0.96006749]
• Child averaged monte carlo:-0.09000000953674317
• Child probablities:[88.91  9.37  0.99  0.28  0.22]
• Child visitation:[1 0 0 0 0]
• N=9.0,Q=-0.09000000953674317,M=-0.09000000953674317
----
 Tree depth: 8
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin

• Child Action scores:[190.53614407   2.10774389   1.28806571   0.37080679   0.29274221]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[97.63  1.08  0.66  0.19  0.15]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 8
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

   always @(posedge clk)
begin   
• Child Action scores:[160.81305205  27.94712264   3.78613254   1.09290424   0.31225835]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[82.4  14.32  1.94  0.56  0.16]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
   
• Child Action scores:[28.93531383 24.94349057 19.40943249 18.4067584  11.12826896]
• Child averaged monte carlo:-0.6157895138389186
• Child probablities:[78.86  8.31  6.47  3.06  1.85]
• Child visitation:[1 1 1 0 0]
• N=18.0,Q=-0.6157895138389186,M=-0.6157895138389186
----
 Tree depth: 9
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q
• Child Action scores:[1.12015939e+02 1.43174783e+01 2.62925312e-01 2.15120710e-01
 2.39023011e-02]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.377e+01 5.990e+00 1.100e-01 9.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 9
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      

• Child Action scores:[7.68687697e+01 5.86297022e-01 6.17154760e-02 3.08577380e-02
 3.08577380e-02]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.974e+01 1.900e-01 2.000e-02 1.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 9
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin         
• Child Action scores:[149.94255812  42.95503975   1.28806571   0.46838753   0.17564532]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[76.83 22.01  0.66  0.24  0.09]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin
      
• Child Action scores:[108.76348775  65.96457718  18.91114653   0.56596827   0.35129065]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[55.73 33.8   9.69  0.29  0.18]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      
• Child Action scores:[45.77679985 34.83554988 31.17419989  5.42339998  2.56679999]
• Child averaged monte carlo:-0.18888889418707955
• Child probablities:[55.6  33.73  7.53  1.31  0.62]
• Child visitation:[1 1 0 0 0]
• N=8.0,Q=-0.18888889418707955,M=-0.18888889418707955
----
 Tree depth: 9
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
   q
• Child Action scores:[193.48308228   1.67838865   0.           0.           0.        ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[99.14  0.86  0.    0.    0.  ]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=2
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
    q
• Child Action scores:[1.94497922e+02 6.24516707e-01 3.90322942e-02 1.95161471e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.966e+01 3.200e-01 2.000e-02 1.000e-02 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   
• Child Action scores:[74.9324466   5.49267736  2.03661071  0.33943512  0.21600417]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.723e+01 1.780e+00 6.600e-01 1.100e-01 7.000e-02]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 9
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
   
• Child Action scores:[42.7652013  40.9448766  31.88938435  9.13355684  2.61516371]
• Child averaged monte carlo:-0.42500001192092896
• Child probablities:[77.54 10.49  8.17  2.34  0.67]
• Child visitation:[1 0 0 0 0]
• N=7.0,Q=-0.42500001192092896,M=-0.42500001192092896
----
 Tree depth: 9
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      

• Child Action scores:[47.02052483 30.92579989  5.38199998  0.207       0.1656    ]
• Child averaged monte carlo:-0.08888889683617486
• Child probablities:[9.103e+01 7.470e+00 1.300e+00 5.000e-02 4.000e-02]
• Child visitation:[1 0 0 0 0]
• N=8.0,Q=-0.08888889683617486,M=-0.08888889683617486
----
 Tree depth: 10
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q
• Child Action scores:[35.91786654  1.76639999  0.1656      0.0552      0.        ]
• Child averaged monte carlo:-0.7125000357627869
• Child probablities:[9.965e+01 3.200e-01 3.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=15.0,Q=-0.7125000357627869,M=-0.7125000357627869
----
 Tree depth: 10
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
      
• Child Action scores:[176.71871193  11.29984917   5.32790816   1.19048497   0.21467762]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[90.55  5.79  2.73  0.61  0.11]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=2
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
       

• Child Action scores:[1.95024858e+02 5.85484413e-02 3.90322942e-02 1.95161471e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.993e+01 3.000e-02 2.000e-02 1.000e-02 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
 q <=
• Child Action scores:[195.16147093   0.           0.           0.           0.        ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[100.   0.   0.   0.   0.]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
   
• Child Action scores:[68.73093309 35.85239988 16.94639994 13.19279995  2.29079999]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[74.78 12.99  6.14  4.78  0.83]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 10
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q
• Child Action scores:[7.57103231e+01 4.35094106e+00 1.23430952e-01 3.08577380e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.25999999046325684
• Child probablities:[9.853e+01 1.410e+00 4.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=-0.25999999046325684,M=-0.25999999046325684
----
 Tree depth: 10
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
         
• Child Action scores:[65.2257331  56.11079981 16.09079994  2.78759999  2.18039999]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[70.97 20.33  5.83  1.01  0.79]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 10
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q
• Child Action scores:[91.44573301  1.4352      0.          0.          0.        ]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[99.47  0.52  0.    0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 10
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q
• Child Action scores:[5.89071737e+01 8.39761463e+00 3.65113680e-02 3.65113680e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.47142856461661203
• Child probablities:[9.768e+01 2.300e+00 1.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=6.0,Q=-0.47142856461661203,M=-0.47142856461661203
----
 Tree depth: 10
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
   
• Child Action scores:[47.7298023  37.15205058 25.87841105 20.1406638   1.63935636]
• Child averaged monte carlo:-0.08750000596046448
• Child probablities:[48.99 38.15  6.63  5.16  0.42]
• Child visitation:[1 1 0 0 0]
• N=7.0,Q=-0.08750000596046448,M=-0.08750000596046448
----
 Tree depth: 11
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <=
• Child Action scores:[37.36891461  0.05344717  0.          0.          0.        ]
• Child averaged monte carlo:-0.7533333460489909
• Child probablities:[9.998e+01 1.000e-02 0.000e+00 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=14.0,Q=-0.7533333460489909,M=-0.7533333460489909
----
 Tree depth: 11
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q
• Child Action scores:[1.19258336e+02 2.15120710e-01 1.67316107e-01 2.39023011e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.983e+01 9.000e-02 7.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 11
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <=
• Child Action scores:[9.14953330e+01 2.48399999e-01 5.51999998e-02 5.51999998e-02
 2.75999999e-02]
• Child averaged monte carlo:-0.30000001192092896
• Child probablities:[9.985e+01 9.000e-02 2.000e-02 2.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.30000001192092896,M=-0.30000001192092896
----
 Tree depth: 11
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
            
• Child Action scores:[91.60337342 24.8105885  19.31305926  4.30241419  2.03169559]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[76.69 10.38  8.08  1.8   0.85]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 11
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <=
• Child Action scores:[1.19401750e+02 4.78046021e-02 4.78046021e-02 2.39023011e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.995e+01 2.000e-02 2.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 11
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <=
• Child Action scores:[6.69656349e+01 6.76059167e-02 3.38029583e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.5333333412806193
• Child probablities:[9.997e+01 2.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=5.0,Q=-0.5333333412806193,M=-0.5333333412806193
----
 Tree depth: 11
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      
• Child Action scores:[78.17933306 31.76759989  9.10799997  0.1656      0.1656    ]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[8.505e+01 1.151e+01 3.300e+00 6.000e-02 6.000e-02]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 11
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q
• Child Action scores:[9.18137330e+01 2.48399999e-01 8.27999997e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.987e+01 9.000e-02 3.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 12
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d
• Child Action scores:[38.84218457 19.5196164   0.05163487  0.05163487  0.        ]
• Child averaged monte carlo:-0.8000000544956752
• Child probablities:[9.24e+01 7.58e+00 1.00e-02 1.00e-02 0.00e+00]
• Child visitation:[1 1 0 0 0]
• N=13.0,Q=-0.8000000544956752,M=-0.8000000544956752
----
 Tree depth: 12
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin      
    q <=
• Child Action scores:[194.92727717   0.23419377   0.           0.           0.        ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[99.88  0.12  0.    0.    0.  ]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 12
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d
• Child Action scores:[1.17661025e+02 2.62925312e+00 7.17069032e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.36666667461395264
• Child probablities:[9.887e+01 1.100e+00 3.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.36666667461395264,M=-0.36666667461395264
----
 Tree depth: 12
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
               
• Child Action scores:[138.19383757  50.83956318   3.25919656   1.54177562   0.72209744]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[70.81 26.05  1.67  0.79  0.37]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 12
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin   
   q <= d
• Child Action scores:[9.75612193e+01 9.75612193e+01 3.90322942e-02 1.95161471e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[4.999e+01 4.999e+01 2.000e-02 1.000e-02 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 12
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d
• Child Action scores:[68.9113435  29.37656656  0.52458155  0.          0.        ]
• Child averaged monte carlo:-0.6199999809265136
• Child probablities:[90.3   9.52  0.17  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=-0.6199999809265136,M=-0.6199999809265136
----
 Tree depth: 12
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q
• Child Action scores:[1.10342777e+02 1.81179442e+01 7.17069032e-02 2.39023011e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.237e+01 7.580e+00 3.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 12
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <=
• Child Action scores:[1.19425652e+02 2.39023011e-02 2.39023011e-02 2.39023011e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.997e+01 1.000e-02 1.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 13
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;

• Child Action scores:[42.53660065  0.0956092   0.0478046   0.          0.        ]
• Child averaged monte carlo:-0.9166666666666666
• Child probablities:[9.997e+01 2.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=11.0,Q=-0.9166666666666666,M=-0.9166666666666666
----
 Tree depth: 13
 Node: action=1
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
• Child Action scores:[131.36318609  48.3219802   13.83694829   1.13193653   0.13661303]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[67.31 24.76  7.09  0.58  0.07]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 13
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
 begin
      q <= d;

• Child Action scores:[113.48639535  68.8334508    3.43484189   3.43484189   2.08822774]
• Child averaged monte carlo:-0.5
• Child probablities:[58.15 35.27  1.76  1.76  1.07]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 13
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;

• Child Action scores:[9.10297330e+01 5.24399998e-01 8.27999997e-02 8.27999997e-02
 5.51999998e-02]
• Child averaged monte carlo:-0.75
• Child probablities:[9.967e+01 1.900e-01 3.000e-02 3.000e-02 2.000e-02]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 13
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
      q <=
• Child Action scores:[184.97404215   4.3521008    2.04919544   1.60032406   0.76112974]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[94.78  2.23  1.05  0.82  0.39]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 13
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin      
    q <= d
• Child Action scores:[1.71878707e+02 2.32632473e+01 1.95161471e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[8.807e+01 1.192e+01 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 14
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
end
• Child Action scores:[44.69549817  0.27461653  0.22884711  0.22884711  0.18307769]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[9.962e+01 6.000e-02 5.000e-02 5.000e-02 4.000e-02]
• Child visitation:[1 0 0 0 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 14
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
end
• Child Action scores:[101.58672784  21.51207096   4.80436251   2.91608073   1.38633346]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[85.42  9.    2.01  1.22  0.58]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 15
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
• Child Action scores:[0. 0. 0. 0. 0.]
• Child averaged monte carlo:-0.9
• Child probablities:[0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0]
• N=9.0,Q=-0.9,M=-0.9
----
 Tree depth: 15
 Node: action=0
• state:// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin   
    q <= d;
endendmodule
• Child Action scores:[0. 0. 0. 0. 0.]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
END ROBUST/MAX VALUES:
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
Child already created - returning child node.
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Getting return based on tokens - no rollout needed!
State ends with endmodule
Initiating comile/functionality check.
VERILOG CODE:
// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk)
begin   
    q <= d;
endendmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump/1282230_top_module/1282230_top_module.v:14: syntax error\nI give up.\n'
Running getPromptScore: 
MCTS Total Time:  111.565623
