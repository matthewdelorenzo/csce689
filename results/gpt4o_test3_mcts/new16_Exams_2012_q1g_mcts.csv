Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-0.1,2.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1]) | (~x[4] & x[3] & x[2] & x[1]);

endmodule",0.010573993000000392,75
N/A,N/A,-0.1,3.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & x[2]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (~x[4] & x[3] & x[2] & ~x[1]);

endmodule",0.010581811999999857,80
N/A,N/A,-1,4.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (`x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (~x[4] & x[3] & x[2] & x[1]);

endmodule",0.010460308999999945,81
N/A,N/A,-0.1,5.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1]);

endmodule",0.011617062000000011,67
N/A,N/A,-0.1,6.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (~x[4] & x[3] & x[2] & x[1]);

endmodule",0.010585275000000394,82
N/A,N/A,-0.1,7.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1]);

endmodule",0.01099485199999961,66
N/A,N/A,-0.1,8.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & ~x[2] & ~x[3] & ~x[4]) |  // x_1x_2'x_3'x_4'
           (~x[1] & ~x[2] & ~x[3] & ~x[4]) | // x_1'x_2'x_3'x_4'
           (x[1] & x[2] & x[3] & ~x[4]) |   // x_1x_2x_3x_4'
           (~x[1] & x[2] & x[3] & x[4]) |   // x_1'x_2x_3x_4
           (x[1] & x[2] & ~x[3] & x[4]);    // x_1x_2x_3'x_4

endmodule",0.011235118999999738,188
N/A,N/A,-0.1,9.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & ~x[2] & ~x[3] & ~x[4]) | 
           (~x[1] & ~x[2] & ~x[3] & ~x[4]) | 
           (x[1] & x[2] & x[3] & ~x[4]) | 
           (x[1] & x[2] & ~x[3] & x[4]) | 
           (~x[1] & x[2] & x[3] & x[4]);

endmodule",0.011313212000000128,117
N/A,N/A,-0.1,10.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (x[4] & ~x[3] & x[2] & ~x[1]);

endmodule",0.011048567000000009,70
N/A,N/A,-0.1,11.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & ~x[2]) | (~x[4] & x[3] & x[2]) | (~x[4] & ~x[3] & x[1]);

endmodule",0.01029495200000019,70
N/A,N/A,-0.1,12.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] &    ~x[2] & ~x[3] & ~x[4]) |  // x_1x_2'x_3'x_4'
             (~x[1] & ~x[2] & x[3] & ~x[4]) |  // x_1'x_2'x_3x_4'
             (x[1] & x[2] & x[3] & ~x[4]) |  // x_1x_2x_3x_4'
             (~x[1] & x[2] & x[3] & x[4]) |  // x_1'x_2x_3x_4
             (x[1] & ~x[2] & x[3] & x[4]);   // x_1x_2'x_3x_4

endmodule",0.011212791000000166,187
N/A,N/A,-1,13.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &`x[1] & ~x[2]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (x[3] & x[4] & x[2]) | (~x[3] & ~x[4] & x[1]);

endmodule",0.01135192500000004,69
N/A,N/A,-0.1,14.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3]) & (~x[2] & ~x[1] | x[2] & x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (x[4] & x[3] & ~x[2] & x[1]);

endmodule",0.01117500600000021,70
N/A,N/A,-0.1,15.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[4] & ~x[2]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[3] & x[4] & (x[1] | x[2])) | (~x[3] & ~x[4] & x[1]);
endmodule",0.01169540700000038,80
N/A,N/A,-1,16.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` x[1] & ~x[2]) | (~x[4] & ~x[3] & ~x[1]) | (x[3] & x[4] & x[2]) | (~x[3] & ~x[4] & x[1]);

endmodule",0.01072927499999965,63
N/A,N/A,-0.1,17.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & x[2]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & x[1]);

endmodule",0.010798890000000227,76
N/A,N/A,-0.1,18.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2] & ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]) | (x[1] & ~x[2] & x[3] & ~x[4]);

endmodule",0.011654955000000022,84
N/A,N/A,-1,19.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` (~x[3] & ~x[2] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1]);

endmodule",0.011319352000000116,73
N/A,N/A,-0.1,20.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = x[1] & ~x[2] & ~x[3] & ~x[4] |  // x_1'x_2'x_3'x_4'
            x[1] & ~x[2] & x[3] & x[4] |   // x_1'x_2x_3x_4
            x[1] & x[2] & x[3] & x[4] |    // x_1x_2x_3x_4
            x[1] & x[2] & ~x[3] & ~x[4] |  // x_1x_2x_3'x_4'
            ~x[1] & x[2] & x[3] & ~x[4];   // x_1'x_2x_3x_4'

endmodule",0.011255762000000225,186
N/A,N/A,-1,21.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2) | (~x[1] & ~x[2] & ~x[3]) | (x[3] & x[4]) | (~x[3] & ~x[4] & x[1]);

endmodule",0.011296300000000148,49
N/A,N/A,-0.1,22.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & ~x[3] & ~x[1]) | 
              (x[4] & x[3] & ~x[2]) | 
              (~x[4] & x[3] & x[2]) | 
              (~x[4] & ~x[3] & ~x[2] & ~x[1]) | 
              (~x[4] & ~x[3] & x[2] & x[1]);

endmodule",0.010800906000000055,105
N/A,N/A,-1,23.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` ( `x[3] & ~x[2] & ~x[1]) | 
            (x[4] & x[3] & x[2]) | 
            (~x[4] & ~x[3] & ~x[2] & x[1]) | 
            (~x[4] & ~x[3] & x[2] & ~x[1]) | 
            (x[4] & ~x[3] & ~x[2] & x[1]));

endmodule",0.011717356000000123,111
N/A,N/A,-0.1,24.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3]) & (x[4] & x[1] | x[2]) | (~x[3] & ~x[4] & (x[1] | ~x[2]));

endmodule",0.011405872000000095,41
N/A,N/A,-1,25.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x2) & ~x[3] & ~x[4]) | (~x[1] & ~x[2] & x[3] & x[4]) | (~x[1] & x[2] & x[3] & x[4]) | (x[1] & x[2] & x[3] & x[4]) | (~x[1] & x[2] & ~x[3] & x[4]) | (x[1] & ~x[2] & ~x[3] & ~x[4]);

endmodule",0.011236735999999858,124
N/A,N/A,-1,26.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4& x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[1]);

endmodule",0.011243841000000199,81
N/A,N/A,-1,27.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2]) & x[3]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[3] & x[4] & ~x[1]) | (x[3] & ~x[4] & x[1] & ~x[2]);

endmodule",0.011321741000000163,71
N/A,N/A,-0.1,28.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & ~x[3] & ~x[2] & ~x[1]) |  // x_3'x_4'
              (x[4] & x[3] & x[2] & ~x[1]) |  // x_3x_4
              (x[4] & x[3] & ~x[2] & x[1]) |  // x_3x_4'
              (~x[4] & x[3] & x[2] & x[1]) |  // x_1x_2
              (~x[4] & ~x[3] & ~x[2] & x[1]); // x_1'x_2'x_4'

endmodule",0.011202048999999992,162
N/A,N/A,-0.1,29.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (x[4] & ~x[3] & x[1]) | (x[4] & x[3] & x[2]);

endmodule",0.011723522000000042,73
N/A,N/A,-1,30.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x2) |(~x[1] & ~x[2] & ~x[3] & ~x[4]) | 
           (x[3] & x[4] & ~x[1]) | 
           (x[3] & x[4] & x[2]) | 
           (x[3] & ~x[4] & x[1] & ~x[2]);

endmodule",0.011597633000000052,94
N/A,N/A,-1,31.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` ( `(x[3] & ~x[2] & ~x[1])) | 
            (x[4] & x[3] & x[2]) | 
            (~x[4] & ~x[3] & ~x[2] & x[1]) | 
            (~x[4] & ~x[3] & x[2] & ~x[1]);

endmodule",0.011504641000000149,86
N/A,N/A,-0.1,32.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3] &x[4] & x[1]) | (x[3] & x[4] & x[2]) | (~x[3] & ~x[4] & x[1]) | (~x[3] & ~x[4] & ~x[2] & ~x[1]) | (x[3] & ~x[4] & x[1]);

endmodule",0.010882062000000303,91
N/A,N/A,-0.1,33.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1]);

endmodule",0.010904730000000029,66
N/A,N/A,-0.1,34.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] &x[2] & ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]) | (x[1] & ~x[2] & x[3] & ~x[4]) | (x[1] & x[2] & x[3] & x[4]);

endmodule",0.01142605200000002,99
N/A,N/A,-0.1,35.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = x[1] & ~x[2] & ~x[3] & ~x[4] |  // x_1'x_2'x_3'x_4'
            x[1] & ~x[2] & x[3] & x[4] |   // x_1'x_2x_3x_4
            ~x[1] & x[2] & x[3] & x[4] |   // x_1x_2x_3x_4
            ~x[1] & x[2] & x[3] & ~x[4] |  // x_1x_2x_3x_4'
            x[1] & x[2] & ~x[3] & ~x[4];   // x_1x_2'x_3'x_4'

endmodule",0.011241529999999944,186
N/A,N/A,-1,36.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` (x[3] | ~x[2])) | (~x[4] & ~x[3] & x[1]);

endmodule",0.011407366000000252,33
N/A,N/A,-1,37.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x```[2] & ~x[3]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[3] & x[4] & (x[1] | x[2])) | (~x[1] & ~x[2] & x[3] & ~x[4]);

endmodule",0.011804887999999902,85
N/A,N/A,-0.1,38.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1]);

endmodule",0.01121377499999987,65
N/A,N/A,-1,39.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3& ~x[2]) | (~x[4] & ~x[3] & ~x[1]) | (x[4] & ~x[3] & x[1]) | (x[3] & x[2] & x[1]);

endmodule",0.01154059899999993,63
N/A,N/A,-0.1,40.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = ((x[3] & ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (~x[1] & ~x[2] & x[3] & x[4]));

endmodule",0.010771063000000414,78
N/A,N/A,-0.1,41.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = ((x[3] & ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (~x[1] & ~x[2] & x[3] & x[4]));

endmodule",0.010421541000000367,36
N/A,N/A,-0.1,42.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2]) &(x[3] | x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]) | (x[1] & ~x[2] & ~x[3] & x[4]);

endmodule",0.011541138999999756,86
N/A,N/A,-1,43.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4& x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (x[4] & x[3] & x[2] & ~x[1]) | (x[4] & x[3] & ~x[2] & x[1]);

endmodule",0.011671605000000085,91
N/A,N/A,-0.1,44.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1] & ~x[2]);

endmodule",0.011061478999999874,70
N/A,N/A,-1,45.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x2) | (x[3] & x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[3] & ~x[4] & x[1]);

endmodule",0.011366642000000038,58
N/A,N/A,-1,46.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` ( `(x[3] & ~x[2] & ~x[1])) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[1]);

endmodule",0.011464805000000133,77
N/A,N/A,-0.1,47.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2]) & (    x[3] | x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & ~x[2] & x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]);

endmodule",0.011607643000000056,80
N/A,N/A,-0.1,48.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &x[3] & ~x[2]) | (~x[4] & ~x[3] & ~x[1]) | (x[4] & ~x[3] & x[1]) | (x[4] & x[3] & x[2] & ~x[1]);

endmodule",0.011541921999999705,73
N/A,N/A,-0.1,49.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] &~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1] & ~x[2]);

endmodule",0.011033079999999806,76
N/A,N/A,-0.1,50.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3]) & (x[1]) | (~x[2] & ~x[4]) | (x[1] & x[2] & x[3]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]);

endmodule",0.011749838000000068,57
N/A,N/A,-0.1,51.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = x[1] & ~x[2] & ~x[3] & ~x[4] |  // x_1'x_2'x_3'x_4'
            x[1] & ~x[2] & x[3] & x[4] |   // x_1'x_2x_3x_4
            x[1] & x[2] & x[3] & ~x[4] |   // x_1x_2x_3x_4'
            ~x[1] & x[2] & x[3] & ~x[4] |  // x_1'x_2x_3x_4'
            x[1] & x[2] & ~x[3] & ~x[4];   // x_1x_2x_3'x_4'

endmodule",0.01093411799999977,185
N/A,N/A,-1,52.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2]) & (x[3] | (x[1] & ~x[2] & ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[3] & x[4] & ~x[1]);

endmodule",0.01189437499999979,70
N/A,N/A,-1,53.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` ( `x[1] & ~x[2] & ~x[3])) | 
           (~x[4] & ~x[3] & ~x[2] & x[1]) | 
           (x[4] & x[3] & x[2]) | 
           (x[4] & ~x[3] & x[2] & x[1]);

endmodule",0.011389183999999997,89
N/A,N/A,-0.1,54.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[1] & ~x[2] & ~x[3] & ~x[4]) | 
              (~x[1] & ~x[2] & ~x[3] & x[4]) | 
              (x[1] & x[2] & x[3] & ~x[4]) | 
              (~x[1] & x[2] & x[3] & x[4]) | 
              (x[1] & ~x[2] & x[3] & x[4]);

endmodule",0.011605893000000034,116
N/A,N/A,-1,55.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x2) | ((x[4] & x[3]) & ~x[2]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & ~x[2] & ~x[3] & x[4]);

endmodule",0.011356704000000217,63
N/A,N/A,-1,56.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3)& ~x[2]) | (~x[4] & ~x[3] & ~x[1]) | (x[4] & ~x[3] & x[1]) | (~x[4] & x[3] & x[2] & x[1]);

endmodule",0.011508431999999846,70
N/A,N/A,-0.1,57.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3] & x[4] & ~x[2]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (~x[1] & x[3] & x[4]);

endmodule",0.011257593000000288,79
N/A,N/A,-1,58.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] &x[2) & x[3]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & ~x[2] & x[3] & ~x[4]) | (~x[1] & ~x[2] & x[3] & x[4]);

endmodule",0.011473084999999994,77
N/A,N/A,-0.1,59.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & x[1] & ~x[2]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (x[3] & x[2] & ~x[1]) | (x[3] & x[4] & x[1]);

endmodule",0.011507764000000087,73
N/A,N/A,-1,60.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` (x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (x[4] & x[3] & x[2] & ~x[1]) | (x[4] & x[3] & ~x[2] & x[1]) | (~x[4] & ~x[3] & x[2] & x[1]);

endmodule",0.012998893000000233,109
N/A,N/A,-1,61.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1&])assign f = (x[1] & ~x[2] & ~x[3] & ~x[4]) | 
           (x[1] & ~x[2] & x[3] & x[4]) | 
           (~x[1] & ~x[2] & ~x[3] & x[4]) | 
           (~x[1] & x[2] & x[3] & x[4]) | 
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",0.010866612000000053,130
N/A,N/A,-1,62.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4& x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (x[4] & x[3] & x[2] & ~x[1]) | (x[4] & x[3] & ~x[2] & x[1]);

endmodule",0.01158396599999989,91
N/A,N/A,-0.1,63.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1]) & (x[4] | x[3]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & ~x[2] & ~x[3] & x[4]);

endmodule",0.011116920000000086,59
N/A,N/A,-1,64.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` ( x[3] & ~x[2] & ~x[1])) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (x[4] & x[3] & x[2] & ~x[1]) | (x[4] & ~x[3] & x[2] & x[1]);

endmodule",0.011492357999999925,87
N/A,N/A,-0.1,65.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | (x[4] & x[3] & x[2]) | (~x[4] & x[3] & x[2] & ~x[1]) | (x[4] & ~x[3] & x[2] & x[1]);

endmodule",0.011143135000000193,98
N/A,N/A,-0.1,66.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3]) & (x[1] | x[2]) | (~x[3] & ~x[4] & (x[1] | ~x[2]));

endmodule",0.011189940000000398,39
N/A,N/A,-0.1,67.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = x[3] & x[4] | x[1] & ~x[2] & ~x[3] & ~x[4] | x[1] & x[2] & x[3] & ~x[4] | ~x[1] & ~x[2] & ~x[3] & x[4];

endmodule",0.01113355299999963,74
N/A,N/A,-1,68.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x```[2]) | (~x[1] & ~x[2] & ~x[3]) | (x[3] & x[4] & ~x[2]) | (~x[4] & x[1] & ~x[2]);

endmodule",0.011403494999999708,55
N/A,N/A,-1,69.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3) &(x[1] | x[2])) | (x[4] & ~x[3] & ~x[1] & x[2]) | (~x[4] & ~x[3] & (x[1] ^ x[2]));
endmodule",0.011526567999999848,63
N/A,N/A,-1,70.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4&xassign f = (x[4] & ~x[3] & ~x[2] & ~x[1]) | 
              (x[4] & x[3] & x[2] & ~x[1]) | 
              (x[4] & x[3] & ~x[2] & x[1]) | 
              (~x[4] & ~x[3] & ~x[2] & x[1]) | 
              (~x[4] & ~x[3] & x[2] & ~x[1]);

endmodule",0.011380105999999834,133
N/A,N/A,-0.1,71.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1]&x[4]) | (~x[1]&~x[2]&x[3]) | (x[2]&x[3]&x[4]) | (~x[2]&x[3]&~x[4]);

endmodule",0.011389316999999899,55
N/A,N/A,-1,72.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` ( `(x[3] | ~x[2]) & x[1]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (x[4] & x[3] & x[2] & ~x[1]) | (~x[4] & x[3] & x[2] & x[1]);

endmodule",0.012055499999999775,87
N/A,N/A,-0.1,73.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2]) & (x[3] | x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]) | (x[1] & ~x[2] & ~x[3] & x[4]);

endmodule",0.01221661900000015,83
N/A,N/A,-0.1,74.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f =(x[1] & ~x[2] & ~x[3] & ~x[4]) |  // x_1'x_2'x_3'x_4'
          (x[1] & ~x[2] & x[3] & x[4]) |   // x_1'x_2x_3x_4
          (x[1] & x[2] & x[3] & x[4]) |    // x_1x_2x_3x_4
          (x[1] & x[2] & ~x[3] & ~x[4]) |  // x_1x_2x_3'x_4'
          (~x[1] & x[2] & x[3] & ~x[4]);   // x_1'x_2x_3x_4'

endmodule",0.011033958999999705,189
N/A,N/A,-0.1,75.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = ((x[1] & ~x[2] & x[3]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]));

endmodule",0.011413840999999536,81
10.108,85.21,0.1,76.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[1] &    ~x[2] & ~x[3] & ~x[4]) | 
              (~x[1] & ~x[2] & x[3] & ~x[4]) | 
              (x[1] & x[2] & x[3] & x[4]) | 
              (~x[1] & x[2] & x[3] & x[4]) | 
              (x[1] & ~x[2] & x[3] & ~x[4]);

endmodule",0.012910053000000588,116
N/A,N/A,-0.1,77.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3] & x[4] & ~x[2]) | (~x[3] & ~x[4] & ~x[1]) | (x[3] & ~x[4] & x[1]) | (x[3] & x[4] & x[2] & ~x[1]);

endmodule",0.012149285999999648,73
N/A,N/A,-1,78.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` (x[3`] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (x[4] & x[3] & x[2]) | (x[4] & ~x[3] & x[2] & ~x[1]);

endmodule",0.011480858000000538,81
N/A,N/A,-1,79.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x2) | ((x[1] & x[4]) & x[3]) | ((~x[1] & ~x[2]) & x[3]) | ((~x[1] & ~x[4]) & ~x[3]);

endmodule",0.01116023300000002,57
N/A,N/A,-1,80.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4& x    [3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[1]);

endmodule",0.010917886000000543,74
N/A,N/A,-0.1,81.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] & x[1] & ~x[2]) | (~x[4] & ~x[3] & x[1]) | (x[3] & x[2] & x[1]) | (x[4] & ~x[3] & ~x[1]);
   
endmodule",0.011419103999999791,68
N/A,N/A,-1,82.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[3)& ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]);

endmodule",0.01134561100000031,81
N/A,N/A,-1,83.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3) & x[2]) | (x[4] & ~x[3] & ~x[1]) | (~x[4] & ~x[3] & x[1]) | (~x[4] & x[3] & x[2]);

endmodule",0.01139284700000065,62
N/A,N/A,-0.1,84.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = x[4] & (~x[3] & ~x[1] | x[3] & x[2] | ~x[2] & x[1]); 

endmodule",0.010900211000000049,36
N/A,N/A,-0.1,85.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3]) &(x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (~x[1] & ~x[2] & x[3] & x[4]);

endmodule",0.011481529000000101,78
N/A,N/A,-0.1,86.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[4] &x[3] & ~x[2]) | (~x[4] & ~x[3] & ~x[1]) | (x[4] & ~x[3] & x[1]) | (x[4] & x[3] & x[2] & ~x[1]);

endmodule",0.011537521000000162,73
N/A,N/A,-1,87.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x2) & (`x[3] | x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & ~x[2] & ~x[3] & x[4]) | (~x[1] & x[2] & x[3] & x[4]);

endmodule",0.011642396000000055,80
N/A,N/A,-1,88.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` ( `x[3] & ~x[2] & ~x[1]) |  // x_3x_4x_1'x_2'
            (x[4] & x[3] & x[2] & ~x[1]) |  // x_3x_4x_1x_2'
            (~x[4] & ~x[3] & ~x[2] & ~x[1]) |  // x_3'x_4'x_1'x_2'
            (~x[4] & ~x[3] & x[2] & x[1]) |  // x_3'x_4'x_1x_2
            (x[4] & ~x[3] & ~x[2] & x[1]));  // x_3x_4'x_1'x_2

endmodule",0.011678204999999942,192
N/A,N/A,-1,89.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2]) | ((~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[3] & x[4] & ~x[1]) | (x[3] & x[4] & x[2]) | (~x[3] & ~x[4] & x[1] & ~x[2]);

endmodule",0.011547946000000309,83
N/A,N/A,-1,90.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &x[3& ~x[2] & ~x[1]) | (x[4] & x[3] & x[2]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (~x[4] & ~x[3] & x[2] & ~x[1]);

endmodule",0.011336962999999756,82
N/A,N/A,-0.1,91.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[1] & x[4] & ~x[2]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[3] & x[4] & (x[1] | x[2])) | (~x[3] & x[4] & x[1]);

endmodule",0.011224142999999742,79
N/A,N/A,-1,92.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] &x[2]) & x[3] & ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & ~x[2] & x[3] & x[4]) | (~x[1] & x[2] & x[3] & x[4]) | (~x[1] & ~x[2] & x[3] & x[4]) | (x[1] & x[2] & x[3] & x[4]);

endmodule",0.01174224800000001,123
N/A,N/A,-0.1,93.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3]) & (x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (x[1] & ~x[2] & ~x[3] & ~x[4]);

endmodule",0.011802917999999885,94
N/A,N/A,-1,94.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] &` ( `(x[3assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & x[2]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (~x[4] & x[3] & x[2] & ~x[1]);

endmodule",0.011785265000000322,83
N/A,N/A,-1,95.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x```[2]) & ~x[3] & ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (~x[1] & x[2] & x[3] & x[4]) | (x[1] & ~x[2] & x[3] & x[4]);

endmodule",0.011426079000000477,103
N/A,N/A,-0.1,96.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


   assign f = (x[3] &x[4] & x[1]) | (x[3] & x[4] & x[2]) | (~x[3] & ~x[4] & x[1]) | (~x[3] & ~x[4] & ~x[2] & x[1]);
   
endmodule",0.01110901799999997,74
N/A,N/A,-0.1,97.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3]) & (x[1] | x[2]) | (~x[4] & ~x[3] & (x[1] ^ x[2]));

endmodule",0.011361683999999705,35
N/A,N/A,-0.1,98.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[1] & x[2]) & (x[3] | ~x[4]) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (~x[1] & ~x[2] & x[3] & x[4]) | (x[1] & ~x[2] & x[3] & ~x[4]);

endmodule",0.012043202000000086,78
N/A,N/A,-0.1,99.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = x[1] &x[4] | (~x[1] & ~x[2] & x[3]) | (x[2] & x[3] & x[4]) | (~x[3] & ~x[4] & x[1]);

endmodule",0.01117724299999967,62
N/A,N/A,-1,100.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4& x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & x[1]) | (x[4] & x[3] & x[2] & ~x[1]) | (x[4] & ~x[3] & x[2] & x[1]);

endmodule",0.01086763500000032,90
N/A,N/A,-1,101.0,1,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[3] & x[4) | (~x[1] & ~x[2] & ~x[3] & ~x[4]) | (x[1] & x[2] & x[3] & ~x[4]) | (~x[1] & ~x[2] & x[3] & x[4]) | (~x[1] & x[2] & x[3] & x[4]);

endmodule",0.011532301999999994,289
