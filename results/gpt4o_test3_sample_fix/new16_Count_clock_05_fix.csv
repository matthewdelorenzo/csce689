Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-0.1,0,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // Representing 12
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 0; // AM
        end
        else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",4.861693,278
N/A,N/A,-0.1,1,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",6.312066,544
N/A,N/A,-0.1,2,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hours <= 8'h12; // BCD for 12
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment the seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment the minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment the hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 8'h01;
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule",5.695136,851
N/A,N/A,-0.1,3,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_r;
    reg [7:0] hh_r, mm_r, ss_r;

    assign hh = hh_r;
    assign mm = mm_r;
    assign ss = ss_r;
    assign pm = pm_r;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_r <= 8'b0001_0010; // BCD for 12
            mm_r <= 8'b0000_0000; // BCD for 00
            ss_r <= 8'b0000_0000; // BCD for 00
            pm_r <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_r == 8'b0101_1001) begin // BCD for 59 seconds
                ss_r <= 8'b0000_0000;      // Reset to 00 seconds
                // Increment minutes
                if (mm_r == 8'b0101_1001) begin // BCD for 59 minutes
                    mm_r <= 8'b0000_0000;      // Reset to 00 minutes
                    // Increment hours
                    if (hh_r == 8'b0001_0010) begin // BCD for 12 hours
                        hh_r <= 8'b0000_0001;       // Reset to 01 hour
                        pm_r <= ~pm_r;             // Toggle AM/PM
                    end else if (hh_r == 8'b0001_0001) begin // BCD for 11 hours
                        hh_r <= 8'b0001_0010;              // Advance to 12 hour
                    end else begin
                        hh_r <= hh_r + 1'b1; // Increment hour
                    end
                end else begin
                    mm_r <= mm_r + 1'b1; // Increment minute
                end
            end else begin
                ss_r <= ss_r + 1'b1; // Increment second
            end
        end
    end

endmodule",10.964066,1298
N/A,N/A,-0.1,4,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hour;
    reg [7:0] minute;
    reg [7:0] second;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hour <= 8'b0001_0010; // 12:00:00 AM
            minute <= 8'b0000_0000;
            second <= 8'b0000_0000;
            pm_reg <= 0;
        end 
        else if (ena) begin
            if (second == 8'b0101_1001) begin // 59 seconds
                second <= 8'b0000_0000; // reset seconds
                if (minute == 8'b0101_1001) begin // 59 minutes
                    minute <= 8'b0000_0000; // reset minutes
                    if (hour == 8'b0001_0010) begin // 12
                        hour <= 8'b0000_0001; // 1
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end
                    else if (hour == 8'b0001_0001) begin // 11
                        hour <= 8'b0001_0010; // 12
                    end
                    else begin
                        hour <= hour + 1; // increment hours
                    end
                end 
                else begin
                    minute <= minute + 1; // increment minutes
                end
            end 
            else begin
                second <= second + 1; // increment seconds
            end
        end
    end

    assign hh = hour;
    assign mm = minute;
    assign ss = second;
    assign pm = pm_reg;

endmodule",10.651499,1676
N/A,N/A,-0.1,5,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0; // 00 seconds
            minutes <= 8'd0; // 00 minutes
            hours <= 8'd12;  // 12 hours
            pm_reg <= 1'b0;  // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end
                    else begin
                        hours <= hours + 8'd1;
                    end
                end
                else begin
                    minutes <= minutes + 8'd1;
                end
            end
            else begin
                seconds <= seconds + 8'd1;
            end
        end
    end
endmodule",5.598146,1992
N/A,N/A,-0.1,6,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg, mm_reg, ss_reg;
    
    assign pm = pm_reg;
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'h12; // 12 in BCD
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg;
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end
endmodule",6.101079,2291
N/A,N/A,-0.1,7,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;

    assign pm = pm_reg;
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12:00:00 AM
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12; // 11:XX -> 12:XX
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end

endmodule",8.076069,2623
N/A,N/A,-0.1,8,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12:00:00 AM
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg;
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end
endmodule",8.989077,2908
N/A,N/A,-0.1,9,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg, mm_reg, ss_reg;

    assign pm = pm_reg;
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12 o'clock
            mm_reg <= 8'h00; // 00 minutes
            ss_reg <= 8'h00; // 00 seconds
            pm_reg <= 0;     // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 8'h01;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'h01;
                end
            end else begin
                ss_reg <= ss_reg + 8'h01;
            end
        end
    end
endmodule",14.798081,3231
N/A,N/A,-0.1,10,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hours <= 8'h12;    // ""12"" in BCD
            minutes <= 8'h00;  // ""00"" in BCD
            seconds <= 8'h00;  // ""00"" in BCD
            am_pm <= 0;        // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;

                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;

                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end

                end else begin
                    minutes <= minutes + 1;
                end

            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    // Assign outputs
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

endmodule",13.522066,3570
N/A,N/A,-0.1,11,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end
        else if (ena) begin
            // Increment seconds
            if (seconds[3:0] == 9) begin
                if (seconds[7:4] == 5) begin
                    seconds <= 8'h00; // 59 -> 00
                    // Increment minutes
                    if (minutes[3:0] == 9) begin
                        if (minutes[7:4] == 5) begin
                            minutes <= 8'h00; // 59 -> 00
                            // Increment hours
                            if (hours == 8'h12) begin
                                hours <= 8'h01;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                            else if (hours[3:0] == 9) begin
                                if (hours[7:4] == 1) begin
                                    hours <= 8'h10; // 19 -> 20
                                end
                            end
                            else begin
                                hours <= hours + 8'h01;
                            end
                        end
                        else begin
                            minutes <= {minutes[7:4] + 1'b1, 4'h0}; // e.g., 09 -> 10
                        end
                    end
                    else begin
                        minutes <= minutes + 8'h01;
                    end
                end
                else begin
                    seconds <= {seconds[7:4] + 1'b1, 4'h0}; // e.g., 09 -> 10
                end
            end
            else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

endmodule",12.086074,4032
N/A,N/A,-0.1,12,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12
            minutes <= 8'b0000_0000; // 00
            seconds <= 8'b0000_0000; // 00
            pm_reg <= 1'b0; // AM
        end
        else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12
                        hours <= 8'b0000_0001; // 1
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // 11
                        hours <= 8'b0001_0010; // 12
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end
    
endmodule",6.424077,4398
N/A,N/A,-0.1,13,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12;  // 12 in BCD
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12; // 11:59 -> 12:00
                    end
                    else begin
                        hours <= hours + 8'h1; // BCD increment
                    end
                end
                else begin
                    minutes <= minutes + 8'h1; // BCD increment
                end
            end
            else begin
                seconds <= seconds + 8'h1; // BCD increment
            end
        end
    end

endmodule",10.809084,4735
N/A,N/A,-0.1,14,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds; 
    reg pm_flag;

    always @(posedge clk) begin
        if (reset) begin
            // Reset the time to 12:00:00 AM
            hours <= 8'b00010010; // 12 in BCD
            minutes <= 8'b00000000; // 00 in BCD
            seconds <= 8'b00000000; // 00 in BCD
            pm_flag <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b01011001) begin // 59 in BCD
                seconds <= 8'b00000000; // Reset seconds to 00

                // Increment minutes
                if (minutes == 8'b01011001) begin // 59 in BCD
                    minutes <= 8'b00000000; // Reset minutes to 00

                    // Increment hours
                    if (hours == 8'b00010010) begin // 12 in BCD
                        hours <= 8'b00000001; // Set hours to 01
                        pm_flag <= ~pm_flag; // Toggle AM/PM
                    end else if (hours == 8'b00010001) begin // 11 in BCD
                        hours <= 8'b00010010; // Set hours to 12
                    end else begin
                        hours <= hours + 1'b1; // Increment hours
                    end
                end else begin
                    minutes <= minutes + 1'b1; // Increment minutes
                end
            end else begin
                seconds <= seconds + 1'b1; // Increment seconds
            end
        end
    end

    // Assigning outputs
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_flag;
endmodule",22.261067,5144
N/A,N/A,-0.1,15,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0;
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 8'h01;
                    end
                end
                else begin
                    minutes <= minutes + 8'h01;
                end
            end
            else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

endmodule",9.913065,5433
N/A,N/A,-0.1,16,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12
            minutes <= 8'b0000_0000; // 00
            seconds <= 8'b0000_0000; // 00
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin
                seconds <= 8'b0000_0000;

                // Increment minutes
                if (minutes == 8'b0101_1001) begin
                    minutes <= 8'b0000_0000;

                    // Increment hours
                    if (hours == 8'b0001_0010) begin
                        hours <= 8'b0000_0001; // 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin
                        hours <= 8'b0001_0010; // 12
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",9.222072,5794
N/A,N/A,-0.1,17,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hour;
    reg [7:0] minute;
    reg [7:0] second;
    reg pm_reg;
    
    assign hh = hour;
    assign mm = minute;
    assign ss = second;
    assign pm = pm_reg;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hour <= 8'b0001_0010;  // 12 in BCD
            minute <= 8'b0000_0000;  // 00 in BCD
            second <= 8'b0000_0000;  // 00 in BCD
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            // Increment seconds
            if (second == 8'b0101_1001) begin
                second <= 8'b0000_0000;
                // Increment minutes
                if (minute == 8'b0101_1001) begin
                    minute <= 8'b0000_0000;
                    // Increment hours
                    if (hour == 8'b0001_0010) begin
                        hour <= 8'b0000_0001;  // Wrap around to 1
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hour == 8'b0001_0001) begin
                        hour <= 8'b0001_0010;  // 11 to 12
                    end else begin
                        hour <= hour + 1'b1;  // Increment hour
                    end
                end else begin
                    minute <= minute + 1'b1;  // Increment minute
                end
            end else begin
                second <= second + 1'b1;  // Increment second
            end
        end
    end
endmodule",15.764064,6208
N/A,N/A,-0.1,18,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg pm_reg;
    reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;

    assign pm = pm_reg;
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'h12;
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;

                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;

                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12; // Transition from 11 to 12
                    end else begin
                        hh_reg <= hh_reg + 8'h01;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'h01;
                end
            end else begin
                ss_reg <= ss_reg + 8'h01;
            end
        end
    end

endmodule",19.33708,6540
N/A,N/A,-0.1,19,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12;    // Reset to 12:00:00 AM
            minutes <= 0;
            seconds <= 0;
            pm_reg <= 0;
        end 
        else if (ena) begin
            // Increment Seconds
            if (seconds == 8'h59) begin
                seconds <= 0;

                // Increment Minutes
                if (minutes == 8'h59) begin
                    minutes <= 0;

                    // Increment Hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end 
                    else if (hours == 8'h11) begin
                        // Transition from 11 to 12
                        hours <= 8'h12;
                    end 
                    else begin
                        hours <= hours + 1;
                    end
                end 
                else begin
                    minutes <= minutes + 1;
                end
            end 
            else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",14.561068,6848
N/A,N/A,-0.1,20,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12;  // 12:00
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 1'b0;  // AM
        end
        else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm;  // Toggle AM/PM
                    end 
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 8'h01;
                    end
                end 
                else begin
                    minutes <= minutes + 8'h01;
                end
            end 
            else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

endmodule",8.034076,7146
N/A,N/A,-0.1,21,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [3:0] sh, sl; // sh: high digit of hour, sl: low digit of hour
    reg [3:0] mh, ml; // mh: high digit of minute, ml: low digit of minute
    reg [3:0] sth, stl; // sth: high digit of second, stl: low digit of second

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            sh <= 4'd1;
            sl <= 4'd2;
            mh <= 4'd0;
            ml <= 4'd0;
            sth <= 4'd0;
            stl <= 4'd0;
            pm_reg <= 1'b0;
        end
        else if (ena) begin
            // Increment seconds
            if (stl == 4'd9) begin
                stl <= 4'd0;
                if (sth == 4'd5) begin
                    sth <= 4'd0;
                    // Increment minutes
                    if (ml == 4'd9) begin
                        ml <= 4'd0;
                        if (mh == 4'd5) begin
                            mh <= 4'd0;
                            // Increment hours
                            if (sl == 4'd9) begin
                                sl <= 4'd0;
                                if (sh == 4'd1) begin
                                    sh <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end else begin
                                    sh <= 4'd1;
                                end
                            end else begin
                                sl <= sl + 4'd1;
                                if (sh == 4'd1 && sl == 4'd2) begin
                                    sl <= 4'd1;
                                    sh <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end
                            end
                        end else begin
                            mh <= mh + 4'd1;
                        end
                    end else begin
                        ml <= ml + 4'd1;
                    end
                end else begin
                    sth <= sth + 4'd1;
                end
            end else begin
                stl <= stl + 4'd1;
            end
        end
    end

    assign hh = {sh, sl};
    assign mm = {mh, ml};
    assign ss = {sth, stl};
    assign pm = pm_reg;

endmodule",16.012089,7690
N/A,N/A,-0.1,22,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg am_pm;
    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset time to 12:00:00 AM
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

endmodule",20.043075,7994
N/A,N/A,-0.1,23,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b00010010; // 12
            minutes <= 8'b00000000; // 00
            seconds <= 8'b00000000; // 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b01011001) begin // 59
                seconds <= 8'b00000000;
                
                // Increment minutes
                if (minutes == 8'b01011001) begin // 59
                    minutes <= 8'b00000000;
                    
                    // Increment hours
                    if (hours == 8'b00010010) begin // 12
                        hours <= 8'b00000001; // 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b00001001) begin // 09, next is 10
                        hours <= 8'b00010000; // 10
                    end else if (hours == 8'b00011001) begin // 19, next is 20
                        hours <= 8'b00100000; // 20
                    end else if (hours == 8'b00100000) begin // 20, next is 21
                        hours <= 8'b00100001; // 21
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule",20.127152,8403
N/A,N/A,-0.1,24,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg, mm_reg, ss_reg;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12 hours for BCD
            mm_reg <= 8'h00; // 00 minutes for BCD
            ss_reg <= 8'h00; // 00 seconds for BCD
            pm_reg <= 0;     // AM
        end
        else if (ena) begin
            // Seconds Counter
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Minutes Counter
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Hours Counter
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end
                    else begin
                        hh_reg <= hh_reg + 8'h01; // Increment hour
                    end
                end
                else begin
                    mm_reg <= mm_reg + 8'h01; // Increment minute
                end
            end
            else begin
                ss_reg <= ss_reg + 8'h01; // Increment second
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",29.37808,8755
N/A,N/A,-0.1,25,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end
        else if (ena) begin
            if (ss_reg == 8'b0101_1001) begin
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                if (mm_reg == 8'b0101_1001) begin
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    if (hh_reg == 8'b0001_0010) begin
                        hh_reg <= 8'b0000_0001; // Roll over from 12 to 01
                        pm_reg <= ~pm_reg;      // Toggle AM/PM
                    end else if (hh_reg == 8'b0000_1001) begin
                        hh_reg <= 8'b0001_0000; // 09 to 10
                    end else begin
                        hh_reg[3:0] <= hh_reg[3:0] + 1;
                    end
                end else if (mm_reg[3:0] == 4'b1001) begin
                    mm_reg[3:0] <= 4'b0000; // Roll over ones place
                    mm_reg[7:4] <= mm_reg[7:4] + 1; // Increment tens place
                end else begin
                    mm_reg[3:0] <= mm_reg[3:0] + 1;
                end
            end else if (ss_reg[3:0] == 4'b1001) begin
                ss_reg[3:0] <= 4'b0000; // Roll over ones place
                ss_reg[7:4] <= ss_reg[7:4] + 1; // Increment tens place
            end else begin
                ss_reg[3:0] <= ss_reg[3:0] + 1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",16.009135,9316
N/A,N/A,-0.1,26,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hour, minute, second;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hour <= 8'b0001_0010; // 12 in BCD
            minute <= 8'b0000_0000; // 00 in BCD
            second <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (second == 8'b0101_1001) begin // 59 in BCD
                second <= 8'b0000_0000;
                // Increment minutes
                if (minute == 8'b0101_1001) begin // 59 in BCD
                    minute <= 8'b0000_0000;
                    // Increment hours
                    if (hour == 8'b0001_0010) begin // 12 in BCD
                        hour <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hour == 8'b0001_0001) begin // 11 in BCD
                        hour <= 8'b0001_0010; // 12 in BCD
                    end
                    else begin
                        // General hour increment
                        if (hour[3:0] == 4'b1001) begin
                            hour <= {hour[7:4] + 1'b1, 4'b0000};
                        end else begin
                            hour <= hour + 1'b1;
                        end
                    end
                end
                else begin
                    // General minute increment
                    if (minute[3:0] == 4'b1001) begin
                        minute <= {minute[7:4] + 1'b1, 4'b0000};
                    end else begin
                        minute <= minute + 1'b1;
                    end
                end
            end
            else begin
                // General second increment
                if (second[3:0] == 4'b1001) begin
                    second <= {second[7:4] + 1'b1, 4'b0000};
                end else begin
                    second <= second + 1'b1;
                end
            end
        end
    end

    // Outputs
    assign hh = hour;
    assign mm = minute;
    assign ss = second;
    assign pm = pm_reg;

endmodule",12.72416,9886
N/A,N/A,-0.1,27,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    // Assign outputs
    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    // Sequential logic to handle the clock functionality
    always @(posedge clk) begin
        if (reset) begin
            // Reset state: 12:00:00 AM
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;

                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;

                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",8.165132,10213
N/A,N/A,-0.1,28,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    // Assign outputs
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12:00
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 0;    // AM
        end
        else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 8'h01;
                    end
                end
                else begin
                    minutes <= minutes + 8'h01;
                end
            end
            else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

endmodule",9.103062,10503
N/A,N/A,-0.1,29,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh_reg <= 8'h12; // 12 in BCD
            mm_reg <= 8'h00; // 00 in BCD
            ss_reg <= 8'h00; // 00 in BCD
            pm_reg <= 1'b0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;

                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;

                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12; // Advance from 11 to 12
                    end
                    else begin
                        hh_reg <= hh_reg + 1'b1;
                    end
                end
                else begin
                    mm_reg <= mm_reg + 1'b1;
                end
            end
            else begin
                ss_reg <= ss_reg + 1'b1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",8.415083,10860
N/A,N/A,-0.1,30,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hour, minute, second;
    reg pm_reg;

    assign hh = hour;
    assign mm = minute;
    assign ss = second;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hour <= 8'b0001_0010;  // 12
            minute <= 8'b0000_0000; // 00
            second <= 8'b0000_0000; // 00
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            if (second == 8'b0101_1001) begin // 59
                second <= 8'b0000_0000;       // Reset to 00
                if (minute == 8'b0101_1001) begin // 59
                    minute <= 8'b0000_0000;   // Reset to 00
                    if (hour == 8'b0001_0010) begin // 12
                        hour <= 8'b0000_0001;  // Reset to 1
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hour == 8'b0001_0001) begin // 11
                        hour <= 8'b0001_0010;  // Advance to 12
                    end else begin
                        hour[3:0] <= hour[3:0] + 1'b1;
                    end
                end else if (minute[3:0] == 4'b1001) begin
                    minute[3:0] <= 4'b0000;
                    minute[7:4] <= minute[7:4] + 1'b1;
                end else begin
                    minute[3:0] <= minute[3:0] + 1'b1;
                end
            end else if (second[3:0] == 4'b1001) begin
                second[3:0] <= 4'b0000;
                second[7:4] <= second[7:4] + 1'b1;
            end else begin
                second[3:0] <= second[3:0] + 1'b1;
            end
        end
    end

endmodule",18.038065,11367
N/A,N/A,-0.1,31,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Resetting all counters and the PM indicator
            hours <= 8'b0001_0010; // 12
            minutes <= 8'b0000_0000; // 00
            seconds <= 8'b0000_0000; // 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment the seconds
            if (seconds == 8'b0101_1001) begin
                seconds <= 8'b0000_0000;
                
                // Increment the minutes
                if (minutes == 8'b0101_1001) begin
                    minutes <= 8'b0000_0000;
                    
                    // Increment the hours
                    if (hours == 8'b0001_0010) begin
                        hours <= 8'b0000_0001; // 12 -> 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin
                        hours <= 8'b0001_0010; // 11 -> 12
                    end else begin
                        hours <= hours + 1; // General case
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",11.844152,11743
N/A,N/A,-0.1,32,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12
                        hh_reg <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11
                        hh_reg <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hour
                    end
                end else begin
                    mm_reg <= mm_reg + ((mm_reg[3:0] == 4'b1001) ? 4'b0110 : 4'b0001); // Increment BCD minutes
                end
            end else begin
                ss_reg <= ss_reg + ((ss_reg[3:0] == 4'b1001) ? 4'b0110 : 4'b0001); // Increment BCD seconds
            end
        end
    end
endmodule",11.294081,12220
N/A,N/A,-0.1,33,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg am_pm;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'b0001_0010;  // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            am_pm <= 1'b0; // 0 for AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin  // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin  // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin  // 12 in BCD
                        hours <= 8'b0000_0001;  // 1 in BCD
                        am_pm <= ~am_pm;  // Toggle AM/PM
                    end else if (hours == 8'b0000_1001) begin  // 9 in BCD
                        hours <= 8'b0001_0000;  // 10 in BCD
                    end else if (hours == 8'b0001_0000) begin  // 10 in BCD
                        hours <= 8'b0001_0001;  // 11 in BCD
                    end else if (hours == 8'b0001_0001) begin  // 11 in BCD
                        hours <= 8'b0001_0010;  // 12 in BCD
                    end else begin
                        hours <= hours + 8'b0000_0001;  // Increment hours
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes <= {minutes[7:4] + 4'b0001, 4'b0000};  // Increment tens digit of minutes
                    end else begin
                        minutes <= minutes + 8'b0000_0001;  // Increment minutes
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds <= {seconds[7:4] + 4'b0001, 4'b0000};  // Increment tens digit of seconds
                end else begin
                    seconds <= seconds + 8'b0000_0001;  // Increment seconds
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

endmodule",11.986087,12840
N/A,N/A,-0.1,34,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    // Assign outputs
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12
            mm_reg <= 8'b0000_0000; // 00
            ss_reg <= 8'b0000_0000; // 00
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59
                ss_reg <= 8'b0000_0000; // roll over to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59
                    mm_reg <= 8'b0000_0000; // roll over to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12
                        hh_reg <= 8'b0000_0001; // roll over to 01
                        pm_reg <= ~pm_reg;     // toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11
                        hh_reg <= 8'b0001_0010; // 12
                    end else begin
                        hh_reg <= hh_reg + 1'b1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1'b1;
                end
            end else begin
                ss_reg <= ss_reg + 1'b1;
            end
        end
    end

endmodule",7.638064,13260
N/A,N/A,-0.1,35,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;
    
    assign pm = pm_reg;
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'b0001_0010; // 12
            mm_reg <= 8'b0000_0000; // 00
            ss_reg <= 8'b0000_0000; // 00
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            if (ss_reg == 8'b0101_1001) begin
                ss_reg <= 8'b0000_0000;
                if (mm_reg == 8'b0101_1001) begin
                    mm_reg <= 8'b0000_0000;
                    if (hh_reg == 8'b0001_0010) begin
                        hh_reg <= 8'b0000_0001; // 1
                        pm_reg <= ~pm_reg;
                    end else if (hh_reg == 8'b0000_1001) begin // 9
                        hh_reg <= 8'b0001_0000; // 10
                    end else if (hh_reg == 8'b0001_0000) begin // 10
                        hh_reg <= 8'b0001_0001; // 11
                    end else if (hh_reg == 8'b0001_0001) begin // 11
                        hh_reg <= 8'b0001_0010; // 12
                    end else begin
                        hh_reg <= hh_reg + 8'b0000_0001;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'b0000_0001;
                end
            end else begin
                ss_reg <= ss_reg + 8'b0000_0001;
            end
        end
    end

endmodule",10.898069,13720
N/A,N/A,-0.1,36,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] mins;
    reg [7:0] secs;
    reg is_pm;

    assign hh = hours;
    assign mm = mins;
    assign ss = secs;
    assign pm = is_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00 AM
            mins <= 8'h00;
            secs <= 8'h00;
            is_pm <= 1'b0;  // AM
        end
        else if (ena) begin
            // Increment seconds
            if (secs == 8'h59) begin
                secs <= 8'h00;
                // Increment minutes
                if (mins == 8'h59) begin
                    mins <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        is_pm <= ~is_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 8'h01;
                    end
                end
                else begin
                    mins <= mins + 8'h01;
                end
            end
            else begin
                secs <= secs + 8'h01;
            end
        end
    end
endmodule",5.264079,14039
N/A,N/A,-0.1,37,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'b00010010; // 12 in BCD
            mm_reg <= 8'b00000000; // 00 in BCD
            ss_reg <= 8'b00000000; // 00 in BCD
            pm_reg <= 1'b0;        // 0 for AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b01011001) begin // 59 in BCD
                ss_reg <= 0;

                // Increment minutes
                if (mm_reg == 8'b01011001) begin // 59 in BCD
                    mm_reg <= 0;

                    // Increment hours
                    if (hh_reg == 8'b00010010) begin // 12 in BCD
                        hh_reg <= 8'b00000001; // 1 in BCD
                        pm_reg <= ~pm_reg;    // Toggle AM/PM
                    end else if (hh_reg == 8'b00010001) begin // 11 in BCD
                        hh_reg <= 8'b00010010; // 12 in BCD
                    end else begin
                        hh_reg <= hh_reg + 8'b00000001;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'b00000001;
                end
            end else begin
                ss_reg <= ss_reg + 8'b00000001;
            end
        end
    end

endmodule",7.390068,14440
N/A,N/A,-0.1,38,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12; // 12 in BCD
            minutes <= 8'h00; // 00 in BCD
            seconds <= 8'h00; // 00 in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;

                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;

                    // Increment hours
                    if (hours == 8'h11) begin
                        hours <= 8'h12;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'h12) begin
                        hours <= 8'h01;
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule",5.295071,14744
N/A,N/A,-0.1,39,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hr, min, sec;
    reg am_pm;

    assign hh = hr;
    assign mm = min;
    assign ss = sec;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hr <= 8'd12;         // Reset to 12:00:00 AM
            min <= 8'd0;
            sec <= 8'd0;
            am_pm <= 1'b0;       // AM
        end else if (ena) begin
            if (sec == 8'd59) begin
                sec <= 8'd0;
                if (min == 8'd59) begin
                    min <= 8'd0;
                    if (hr == 8'd12) begin
                        hr <= 8'd1;
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end else if (hr == 8'd11) begin
                        hr <= hr + 1; // Advance to 12
                    end else begin
                        hr <= hr + 1;
                    end
                end else begin
                    min <= min + 1;
                end
            end else begin
                sec <= sec + 1;
            end
        end
    end

endmodule",4.330309,15022
N/A,N/A,-0.1,40,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12;  // 12:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 0;  // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",6.389577,15307
N/A,N/A,-0.1,41,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;  // Wrap around to 1
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'h11) begin
                            hours <= 8'h12;  // Transition from 11 to 12
                        end else begin
                            hours <= hours + 8'h01;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end
endmodule",5.896136,15619
N/A,N/A,-0.1,42,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0;            // AM
        end else if (ena) begin
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000;
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000;
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg;
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end
endmodule",9.763086,16016
N/A,N/A,-0.1,43,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] h_reg, m_reg, s_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            h_reg <= 8'd12;
            m_reg <= 8'd0;
            s_reg <= 8'd0;
            pm_reg <= 1'b0;
        end
        else if (ena) begin
            // Increment seconds
            if (s_reg == 8'd59) begin
                s_reg <= 8'd0;
                // Increment minutes
                if (m_reg == 8'd59) begin
                    m_reg <= 8'd0;
                    // Increment hours
                    if (h_reg == 8'd12) begin
                        h_reg <= 8'd1;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (h_reg == 8'd11) begin
                        h_reg <= h_reg + 8'd1;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else begin
                        h_reg <= h_reg + 8'd1;
                    end
                end
                else begin
                    m_reg <= m_reg + 8'd1;
                end
            end
            else begin
                s_reg <= s_reg + 8'd1;
            end
        end
    end

    // Output the clock values
    assign hh = h_reg;
    assign mm = m_reg;
    assign ss = s_reg;
    assign pm = pm_reg;

endmodule",7.003074,16367
N/A,N/A,-0.1,44,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;   // BCD hours (01-12)
    reg [7:0] minutes; // BCD minutes (00-59)
    reg [7:0] seconds; // BCD seconds (00-59)
    reg am_pm;         // AM/PM flag

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 1'b0;  // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds[3:0] == 4'h9) begin
                seconds[3:0] <= 4'h0;
                if (seconds[7:4] == 4'h5) begin
                    seconds[7:4] <= 4'h0;
                    
                    // Increment minutes
                    if (minutes[3:0] == 4'h9) begin
                        minutes[3:0] <= 4'h0;
                        if (minutes[7:4] == 4'h5) begin
                            minutes[7:4] <= 4'h0;
                            
                            // Increment hours
                            if (hours == 8'h12) begin
                                hours <= 8'h01;
                                am_pm <= ~am_pm; // Toggle AM/PM
                            end else if (hours[3:0] == 4'h9) begin
                                hours[3:0] <= 4'h0;
                                hours[7:4] <= hours[7:4] + 1;
                            end else begin
                                hours[3:0] <= hours[3:0] + 1;
                            end
                        end else begin
                            minutes[7:4] <= minutes[7:4] + 1;
                        end
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 1;
                    end
                end else begin
                    seconds[7:4] <= seconds[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= seconds[3:0] + 1;
            end
        end
    end

endmodule",17.864079,16893
N/A,N/A,-0.1,45,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] current_hh;
    reg [7:0] current_mm;
    reg [7:0] current_ss;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            current_hh <= 8'h12; // 12 in BCD is 0001 0010
            current_mm <= 8'h00;
            current_ss <= 8'h00;
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (current_ss == 8'h59) begin
                current_ss <= 8'h00;

                // Increment minutes
                if (current_mm == 8'h59) begin
                    current_mm <= 8'h00;

                    // Increment hours
                    if (current_hh == 8'h11) begin
                        current_hh <= 8'h12; // Advance to 12
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (current_hh == 8'h12) begin
                        current_hh <= 8'h01;
                    end else begin
                        current_hh <= current_hh + 1;
                    end
                end else begin
                    current_mm <= current_mm + 1;
                end
            end else begin
                current_ss <= current_ss + 1;
            end
        end
    end

    // Output assignments
    assign hh = current_hh;
    assign mm = current_mm;
    assign ss = current_ss;
    assign pm = pm_reg;

endmodule",15.847131,17251
N/A,N/A,-0.1,46,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hour;
    reg [7:0] minute;
    reg [7:0] second;
    reg is_pm;
    
    assign hh = hour;
    assign mm = minute;
    assign ss = second;
    assign pm = is_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hour <= 8'h12;  // 12 in BCD (AM)
            minute <= 8'h00;
            second <= 8'h00;
            is_pm <= 1'b0;  // AM
        end else if (ena) begin
            if (second == 8'h59) begin
                second <= 8'h00;
                if (minute == 8'h59) begin
                    minute <= 8'h00;
                    if (hour == 8'h12) begin
                        hour <= 8'h01;
                        is_pm <= ~is_pm;  // Toggle AM/PM
                    end else if (hour == 8'h11) begin
                        hour <= 8'h12;  // Next hour after 11 is 12
                    end else begin
                        hour <= hour + 8'h01;
                    end
                end else begin
                    minute <= minute + 8'h01;
                end
            end else begin
                second <= second + 8'h01;
            end
        end
    end

endmodule",5.93809,17553
N/A,N/A,-0.1,47,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            pm_reg <= 0;
            hours <= 8'h12;   // 12:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
        end
        else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;           // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;       // Increment hours
                    if (hours == 8'h11) begin
                        hours <= 8'h12;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'h12) begin
                        hours <= 8'h01;
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",5.187078,17830
N/A,N/A,-0.1,48,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
    
    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'b00010010;  // 12 in BCD
            minutes <= 8'b00000000; // 00 in BCD
            seconds <= 8'b00000000; // 00 in BCD
            pm_reg <= 1'b0;          // AM
        end
        else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'b00000000;
                if (minutes == 8'h59) begin
                    minutes <= 8'b00000000;
                    if (hours == 8'h12) begin
                        hours <= 8'b00000001; // 01 in BCD
                        pm_reg <= ~pm_reg;
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'b00010010; // 12 in BCD
                    end
                    else begin
                        if (hours[3:0] == 4'h9) begin
                            hours <= {hours[7:4] + 1'b1, 4'b0000};
                        end
                        else begin
                            hours <= hours + 1'b1;
                        end
                    end
                end 
                else begin
                    if (minutes[3:0] == 4'h9) begin
                        minutes <= {minutes[7:4] + 1'b1, 4'b0000};
                    end
                    else begin
                        minutes <= minutes + 1'b1;
                    end
                end
            end 
            else begin
                if (seconds[3:0] == 4'h9) begin
                    seconds <= {seconds[7:4] + 1'b1, 4'b0000};
                end
                else begin
                    seconds <= seconds + 1'b1;
                end
            end
        end
    end

endmodule",7.103083,18308
N/A,N/A,-0.1,49,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [5:0] sec, min;
    reg [4:0] hour;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec <= 6'd0;
            min <= 6'd0;
            hour <= 5'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Seconds counter
            if (sec == 6'd59) begin
                sec <= 6'd0;
                // Minutes counter
                if (min == 6'd59) begin
                    min <= 6'd0;
                    // Hour counter
                    if (hour == 5'd12) begin
                        hour <= 5'd1;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else begin
                        hour <= hour + 5'd1;
                    end
                end else begin
                    min <= min + 6'd1;
                end
            end else begin
                sec <= sec + 6'd1;
            end
        end
    end

    // Output logic for BCD encoding
    assign ss = {sec[5:4], sec[3:0]};
    assign mm = {min[5:4], min[3:0]};
    assign hh = (hour == 5'd0 || hour > 5'd12) ? 8'd1 : {hour[4:4], hour[3:0]};
    assign pm = pm_reg;

endmodule",4.380068,18632
N/A,N/A,-0.1,50,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] second_counter;
    reg [7:0] minute_counter;
    reg [7:0] hour_counter;
    reg pm_reg;

    assign ss = second_counter;
    assign mm = minute_counter;
    assign hh = hour_counter;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            second_counter <= 8'b00000000; // 00 seconds
            minute_counter <= 8'b00000000; // 00 minutes
            hour_counter <= 8'b00010010;   // 12 hours
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (second_counter == 8'b01011001) begin // 59 seconds
                second_counter <= 8'b00000000;
                // Increment minutes
                if (minute_counter == 8'b01011001) begin // 59 minutes
                    minute_counter <= 8'b00000000;
                    // Increment hours
                    if (hour_counter == 8'b00010001) begin // 11 hours
                        hour_counter <= 8'b00010010; // 12 hours
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hour_counter == 8'b00010010) begin // 12 hours
                        hour_counter <= 8'b00000001; // 01 hour
                    end else begin
                        hour_counter <= hour_counter + 1;
                    end
                end else begin
                    minute_counter <= minute_counter + 1;
                end
            end else begin
                second_counter <= second_counter + 1;
            end
        end
    end

endmodule",5.390068,19012
N/A,N/A,-0.1,51,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg;
                    end else if (hours == 8'b0000_1001) begin
                        hours <= 8'b0001_0000; // 10 in BCD
                    end else if (hours == 8'b0001_0000) begin
                        hours <= 8'b0001_0001; // 11 in BCD
                    end else if (hours == 8'b0001_0001) begin
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 8'b0000_0001;
                    end
                end else begin
                    minutes <= minutes + 8'b0000_0001;
                end
            end else begin
                seconds <= seconds + 8'b0000_0001;
            end
        end
    end

endmodule",6.015069,19447
N/A,N/A,-0.1,52,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b00010010; // BCD for 12
            minutes <= 8'b00000000; // BCD for 00
            seconds <= 8'b00000000; // BCD for 00
            am_pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b01011001) begin // BCD for 59
                seconds <= 8'b00000000;
                // Increment minutes
                if (minutes == 8'b01011001) begin // BCD for 59
                    minutes <= 8'b00000000;
                    // Increment hours
                    if (hours == 8'b00010010) begin // BCD for 12
                        hours <= 8'b00000001; // BCD for 01
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'b00010001) begin // BCD for 11
                        hours <= 8'b00010010; // BCD for 12
                    end
                    else begin
                        if (hours[3:0] == 4'b1001) begin // BCD 9
                            hours[3:0] <= 4'b0000; // Reset lower BCD digit
                            hours[7:4] <= hours[7:4] + 1; // Increment upper BCD digit
                        end
                        else begin
                            hours <= hours + 1;
                        end
                    end
                end
                else begin
                    if (minutes[3:0] == 4'b1001) begin // BCD 9
                        minutes[3:0] <= 4'b0000; // Reset lower BCD digit
                        minutes[7:4] <= minutes[7:4] + 1; // Increment upper BCD digit
                    end
                    else begin
                        minutes <= minutes + 1;
                    end
                end
            end
            else begin
                if (seconds[3:0] == 4'b1001) begin // BCD 9
                    seconds[3:0] <= 4'b0000; // Reset lower BCD digit
                    seconds[7:4] <= seconds[7:4] + 1; // Increment upper BCD digit
                end
                else begin
                    seconds <= seconds + 1;
                end
            end
        end
    end
endmodule",9.507091,20074
N/A,N/A,-0.1,53,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours, minutes, seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12;  // 12 in BCD
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 1'b0;  // AM
        end
        else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;  // Wrap from 12 to 01
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12; // 11 to 12, no toggle AM/PM
                    end
                    else begin
                        hours <= hours + 8'h01;
                    end
                end
                else begin
                    minutes <= minutes + 8'h01;
                end
            end
            else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

endmodule",5.351133,20380
N/A,N/A,-0.1,54,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours, minutes, seconds;
    reg am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            am_pm <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // reset seconds to 00
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // reset minutes to 00
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // advance hours to 01
                        am_pm <= ~am_pm; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // advance hours to 12
                    end else begin
                        hours <= hours + 1; // increment hours
                    end
                end else begin
                    minutes <= minutes + 1; // increment minutes
                end
            end else begin
                seconds <= seconds + 1; // increment seconds
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;
    
endmodule",5.04908,20766
N/A,N/A,-0.1,55,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours, minutes, seconds;
    reg am_pm; // 0 for AM, 1 for PM
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 0;
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 8'h01;
                    end
                end
                else begin
                    minutes <= minutes + 8'h01;
                end
            end
            else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

endmodule",5.172081,21074
N/A,N/A,-0.1,56,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12 in BCD
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment the seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment the minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment the hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12; // Go to 12
                    end else begin
                        hours <= hours + 8'h01;
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end
endmodule",5.035067,21389
N/A,N/A,-0.1,57,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'h12; // 12 in BCD
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        // Toggle AM/PM
                        pm_reg <= ~pm_reg;
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",4.206061,21702
N/A,N/A,-0.1,58,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
    
    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12;  // 12 in BCD
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 8'h01;
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end
endmodule",5.587673,22009
N/A,N/A,-0.1,59,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Resetting the clock to 12:00:00 AM
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 8'h01;
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end
endmodule",5.512151,22317
N/A,N/A,-0.1,60,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] sec, min, hour;
    reg pm_reg;

    assign ss = sec;
    assign mm = min;
    assign hh = hour;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            sec <= 8'd0;
            min <= 8'd0;
            hour <= 8'd12; // start at 12:00:00 AM
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (sec == 8'd59) begin
                sec <= 8'd0;
                if (min == 8'd59) begin
                    min <= 8'd0;
                    if (hour == 8'd11) begin
                        hour <= 8'd12;
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hour == 8'd12) begin
                        hour <= 8'd1;
                    end else begin
                        hour <= hour + 8'd1;
                    end
                end else begin
                    min <= min + 8'd1;
                end
            end else begin
                sec <= sec + 8'd1;
            end
        end
    end
endmodule",4.376627,22592
N/A,N/A,-0.1,61,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;

    // Assign internal registers to outputs
    assign pm = pm_reg;
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // On reset, set the time to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment the seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Wrap to 00
                // Increment the minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Wrap to 00
                    // Increment the hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Wrap to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end 
                    else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Go to 12
                    end
                    else begin
                        // Increment hour normally
                        hh_reg <= hh_reg + 1;
                    end
                end 
                else begin
                    mm_reg <= mm_reg + 1;
                end
            end 
            else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end
endmodule",7.87509,23063
N/A,N/A,-0.1,62,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours, minutes, seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // BCD for 12
            minutes <= 8'h00; // BCD for 00
            seconds <= 8'h00; // BCD for 00
            am_pm <= 1'b0; // 0 for AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",5.163093,23370
N/A,N/A,-0.1,63,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12
            minutes <= 8'b0000_0000; // 00
            seconds <= 8'b0000_0000; // 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin
                seconds <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin
                    minutes <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin
                        hours <= 8'b0000_0001; // Roll over to 01
                    end else if (hours == 8'b0001_0001) begin
                        hours <= 8'b0001_0010; // Advance from 11 to 12
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else begin
                        hours <= hours + 1; // Increment hours normally
                    end
                end else begin
                    minutes <= minutes + 1; // Increment minutes normally
                end
            end else begin
                seconds <= seconds + 1; // Increment seconds normally
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule",7.385077,23770
N/A,N/A,-0.1,64,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;       // BCD for 12
            minutes <= 8'd0;      // BCD for 00
            seconds <= 8'd0;      // BCD for 00
            am_pm <= 1'b0;        // AM
        end
        else if (ena) begin
            if(seconds == 8'd59) begin
                seconds <= 8'd0;
                if(minutes == 8'd59) begin
                    minutes <= 8'd0;
                    if(hours == 8'd12) begin
                        hours <= 8'd1;  // Reset hours and toggle am/pm
                        am_pm <= ~am_pm;
                    end
                    else if (hours == 8'd11) begin
                        hours <= hours + 8'd1;
                        am_pm <= ~am_pm;
                    end
                    else begin
                        hours <= hours + 8'd1;
                    end
                end
                else begin
                    minutes <= minutes + 8'd1;
                end
            end
            else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",4.441079,24082
N/A,N/A,-0.1,65,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] sec, min, hrs;
    reg pm_reg;

    assign ss = sec;
    assign mm = min;
    assign hh = hrs;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            sec <= 8'h00; // Reset seconds to 00
            min <= 8'h00; // Reset minutes to 00
            hrs <= 8'h12; // Reset hours to 12
            pm_reg <= 0;  // Reset to AM
        end else if (ena) begin
            // Increment seconds
            if (sec == 8'h59) begin
                sec <= 8'h00;

                // Increment minutes
                if (min == 8'h59) begin
                    min <= 8'h00;

                    // Increment hours
                    if (hrs == 8'h12) begin
                        hrs <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hrs == 8'h11) begin
                        hrs <= 8'h12; // Transition from 11 to 12
                    end else begin
                        hrs <= hrs + 1;
                    end
                end else begin
                    min <= min + 1;
                end
            end else begin
                sec <= sec + 1;
            end
        end
    end

endmodule",4.737085,24388
N/A,N/A,-0.1,66,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset time to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00
            seconds <= 8'b0000_0000; // 00
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end
                    else begin
                        hours <= hours + 8'b0000_0001;
                    end
                end
                else begin
                    minutes <= minutes + 8'b0000_0001;
                end
            end
            else begin
                seconds <= seconds + 8'b0000_0001;
            end
        end
    end
endmodule",6.16309,24819
N/A,N/A,-0.1,67,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    
    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    
                    // Increment hours
                    if (hours == 8'd11) begin
                        hours <= 8'd12;
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'd12) begin
                        hours <= 8'd1;
                    end else begin
                        hours <= hours + 8'd1;
                    end

                end else begin
                    minutes <= minutes + 8'd1;
                end
                
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end
endmodule",4.517071,25113
N/A,N/A,-1,68,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_flag;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_flag;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            seconds <= 8'b0;
            minutes <= 8'b0;
            hours <= 8'b0001_0010; // 12 in BCD
            pm_flag <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds[3:0] == 4'd9) begin
                if (seconds[7:4] == 4'd5) begin
                    seconds <= 8'b0;
                    // Increment minutes
                    if (minutes[3:0] == 4'd9) begin
                        if (minutes[7:4] == 4'd5) begin
                            minutes <= 8'b0;
                            // Increment hours
                            if (hours == 8'b0001_0010) begin // 12
                                hours <= 8'b0_001_0001; // 01 in BCD
                                pm_flag <= ~pm_flag; // Toggle AM/PM
                            end else if (hours == 8'b0000_1001) begin // 09
                                hours <= 8'b0001_0000; // 10
                            end else if (hours[3:0] == 4'd9) begin
                                hours <= {hours[7:4] + 1, 4'd0}; // Move from 09 to 10
                            end else begin
                                hours <= hours + 8'd1;
                            end
                        end else begin
                            minutes <= {minutes[7:4] + 1, 4'd0};
                        end
                    end else begin
                        minutes <= minutes + 8'd1;
                    end
                end else begin
                    seconds <= {seconds[7:4] + 1, 4'd0};
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",7.059078,25602
N/A,N/A,-0.1,69,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg pm_reg; // PM indicator register
    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    
    assign pm = pm_reg;
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b00010010;  // 12
            minutes <= 8'b00000000; // 00
            seconds <= 8'b00000000; // 00
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b01011001) begin
                seconds <= 8'b00000000;
                // Increment minutes
                if (minutes == 8'b01011001) begin
                    minutes <= 8'b00000000;
                    // Increment hours
                    if (hours == 8'b00010010) begin
                        hours <= 8'b00000001;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b00010001) begin
                        hours <= 8'b00010010; // 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",5.048085,25944
N/A,N/A,-0.1,70,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg pm_reg;
    reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;

    assign pm = pm_reg;
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            ss_reg <= 8'h00; // 00 in BCD
            mm_reg <= 8'h00; // 00 in BCD
            hh_reg <= 8'h12; // 12 in BCD
            pm_reg <= 1'b0;  // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;

                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg;
                    end
                    else if (hh_reg == 8'h11) begin
                        hh_reg <= hh_reg + 1'b1;
                    end
                    else begin
                        hh_reg <= hh_reg + 1'b1;
                    end
                end
                else begin
                    mm_reg <= mm_reg + 1'b1;
                end
            end
            else begin
                ss_reg <= ss_reg + 1'b1;
            end
        end
    end

endmodule",7.371146,26290
N/A,N/A,-0.1,71,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00
            seconds <= 8'b0000_0000; // 00
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule",8.644076,26683
N/A,N/A,-0.1,72,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg, mm_reg, ss_reg;
    
    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0; // 0 for AM
        end else if (ena) begin
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000;
                
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000;

                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hh_reg[3:0] <= (hh_reg[3:0] == 4'b1001) ? 4'b0000 : hh_reg[3:0] + 1; // Increment hours
                        if (hh_reg[3:0] == 4'b0000) hh_reg[7:4] <= hh_reg[7:4] + 1; // Handle BCD carry
                    end
                    
                end else begin
                    mm_reg[3:0] <= (mm_reg[3:0] == 4'b1001) ? 4'b0000 : mm_reg[3:0] + 1; // Increment minutes
                    if (mm_reg[3:0] == 4'b0000) mm_reg[7:4] <= mm_reg[7:4] + 1; // Handle BCD carry
                end
                
            end else begin
                ss_reg[3:0] <= (ss_reg[3:0] == 4'b1001) ? 4'b0000 : ss_reg[3:0] + 1; // Increment seconds
                if (ss_reg[3:0] == 4'b0000) ss_reg[7:4] <= ss_reg[7:4] + 1; // Handle BCD carry
            end
        end
    end

    // Assign outputs
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",11.201072,27325
N/A,N/A,-0.1,73,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds; 

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'b0001_0010;  // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 01 in BCD
                        pm_reg <= ~pm_reg;
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 8'b0000_0001;
                    end
                end else begin
                    minutes <= minutes + 8'b0000_0001;
                end
            end else begin
                seconds <= seconds + 8'b0000_0001;
            end
        end
    end
endmodule",5.715534,27702
N/A,N/A,-0.1,74,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;
    reg pm_reg;
    
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Reset hours to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Advance to 12
                    end
                    else begin
                        // Increment hour by one
                        if (hh_reg[3:0] == 4'b1001) begin // If the lower BCD digit is 9
                            hh_reg <= {hh_reg[7:4] + 1'b1, 4'b0000}; // Carry over
                        end
                        else begin
                            hh_reg <= hh_reg + 8'b0000_0001; // Increment lower BCD digit
                        end
                    end
                end
                else begin
                    // Increment minute by one
                    if (mm_reg[3:0] == 4'b1001) begin // If the lower BCD digit is 9
                        mm_reg <= {mm_reg[7:4] + 1'b1, 4'b0000}; // Carry over
                    end
                    else begin
                        mm_reg <= mm_reg + 8'b0000_0001; // Increment lower BCD digit
                    end
                end
            end
            else begin
                // Increment second by one
                if (ss_reg[3:0] == 4'b1001) begin // If the lower BCD digit is 9
                    ss_reg <= {ss_reg[7:4] + 1'b1, 4'b0000}; // Carry over
                end
                else begin
                    ss_reg <= ss_reg + 8'b0000_0001; // Increment lower BCD digit
                end
            end
        end
    end

endmodule",13.071429,28418
N/A,N/A,-0.1,75,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hour;
    reg [7:0] min;
    reg [7:0] sec;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hour <= 8'b0001_0010; // BCD for 12
            min <= 8'b0000_0000;  // BCD for 00
            sec <= 8'b0000_0000;  // BCD for 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (sec == 8'b0101_1001) begin // BCD for 59
                sec <= 8'b0000_0000; // Reset seconds to 00
                if (min == 8'b0101_1001) begin // BCD for 59
                    min <= 8'b0000_0000; // Reset minutes to 00
                    if (hour == 8'b0001_0010) begin // If hour is 12
                        hour <= 8'b0000_0001; // BCD for 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hour == 8'b0001_0001) begin // If hour is 11
                        hour <= 8'b0001_0010; // BCD for 12
                    end else begin
                        hour[3:0] <= (hour[3:0] == 9) ? 4'b0000 : hour[3:0] + 1;
                        if (hour[3:0] == 4'b0000) begin // Reset lower BCD digit if it wraps around
                            hour[7:4] <= hour[7:4] + 1;
                        end
                    end
                end else begin
                    min[3:0] <= (min[3:0] == 9) ? 4'b0000 : min[3:0] + 1;
                    if (min[3:0] == 4'b0000) begin // Reset lower BCD digit if it wraps around
                        min[7:4] <= min[7:4] + 1;
                    end
                end
            end else begin
                sec[3:0] <= (sec[3:0] == 9) ? 4'b0000 : sec[3:0] + 1;
                if (sec[3:0] == 4'b0000) begin // Reset lower BCD digit if it wraps around
                    sec[7:4] <= sec[7:4] + 1;
                end
            end
        end
    end

    assign hh = hour;
    assign mm = min;
    assign ss = sec;
    assign pm = pm_reg;

endmodule",9.076039,29040
N/A,N/A,-0.1,76,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Set to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Roll over to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Roll over to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Roll over to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Go to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 8'b0000_0001; // Increment minutes BCD
                end
            end else begin
                seconds <= seconds + 8'b0000_0001; // Increment seconds BCD
            end
        end
    end
endmodule",7.722069,29484
N/A,N/A,-1,77,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;   // BCD hours
    reg [7:0] minutes; // BCD minutes
    reg [7:0] seconds; // BCD seconds
    reg am_pm;         // AM/PM indicator

    always @(posedge clk) begin
        if (reset) begin
            // Reset the time to 12:00:00 AM
            hours <= 8'b0001_0010;  // 12 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            seconds <= 8'b0000_0000; // 00 in BCD
            am_pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // Wrap to 00
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // Wrap to 00
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // Wrap to 01
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // Go to 12
                    end
                    else begin
                        if (hours[3:0] == 4'b1001) begin // If ones digit is 9
                            hours <= {hours[7:4] + 1, 4'b0000}; // Increment tens digit and reset ones
                        end
                        else begin
                            hours <= hours + 1; // Normal increment
                        end
                    end
                end
                else begin
                    if (minutes[3:0] == 4'b1001) begin // If ones digit is 9
                        minutes <= {minutes[7:4] + 1, 4'b0000}; // Increment tens digit and reset ones
                    end
                    else begin
                        minutes <= minutes + 1; // Normal increment
                    end
                end
            end
            else begin
                if (seconds[3:0] == 4'b1001) begin // If ones digit is 9
                    seconds <= {seconds[7:4] + 1, 4'b0000}; // Increment tens digit and reset ones
                end
                else begin
                    seconds <= seconds + 1; // Normal increment
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

endmodule",8.105065,30131
N/A,N/A,-0.1,78,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg am_pm;

    // Assign outputs
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset condition
            seconds <= 8'b0000_0000; // 00 in BCD
            minutes <= 8'b0000_0000; // 00 in BCD
            hours <= 8'b0001_0010;   // 12 in BCD
            am_pm <= 0;              // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds[3:0] == 4'd9) begin
                if (seconds[7:4] == 4'd5) begin
                    seconds <= 8'b0000_0000;
                    // Increment minutes
                    if (minutes[3:0] == 4'd9) begin
                        if (minutes[7:4] == 4'd5) begin
                            minutes <= 8'b0000_0000;
                            // Increment hours
                            if (hours[3:0] == 4'd9) begin
                                hours[3:0] <= 4'd0;
                                hours[7:4] <= hours[7:4] + 1;
                            end else if ((hours == 8'b0001_0010) && (hours[3:0] == 4'd9)) begin
                                hours <= 8'b0001_0001; // Roll over to 01
                                am_pm <= ~am_pm;       // Toggle AM/PM
                            end else begin
                                hours <= hours + 1;
                            end
                        end else begin
                            minutes[3:0] <= 4'd0;
                            minutes[7:4] <= minutes[7:4] + 1;
                        end
                    end else begin
                        minutes <= minutes + 1;
                    end
                end else begin
                    seconds[3:0] <= 4'd0;
                    seconds[7:4] <= seconds[7:4] + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",7.981204,30641
N/A,N/A,-0.1,79,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [3:0] hours_tens, hours_units;
    reg [3:0] minutes_tens, minutes_units;
    reg [3:0] seconds_tens, seconds_units;
    reg pm_reg;
    
    assign hh = {hours_tens, hours_units};
    assign mm = {minutes_tens, minutes_units};
    assign ss = {seconds_tens, seconds_units};
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours_tens <= 4'd1;
            hours_units <= 4'd2;
            minutes_tens <= 4'd0;
            minutes_units <= 4'd0;
            seconds_tens <= 4'd0;
            seconds_units <= 4'd0;
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds_units == 4'd9) begin
                seconds_units <= 4'd0;
                if (seconds_tens == 4'd5) begin
                    seconds_tens <= 4'd0;
                    // Increment minutes
                    if (minutes_units == 4'd9) begin
                        minutes_units <= 4'd0;
                        if (minutes_tens == 4'd5) begin
                            minutes_tens <= 4'd0;
                            // Increment hours
                            if ({hours_tens, hours_units} == 8'd11) begin
                                hours_tens <= 4'd1;
                                hours_units <= 4'd2;
                                pm_reg <= ~pm_reg;
                            end else if ({hours_tens, hours_units} == 8'd12) begin
                                hours_tens <= 4'd0;
                                hours_units <= 4'd1;
                            end else if (hours_units == 4'd9) begin
                                hours_units <= 4'd0;
                                hours_tens <= hours_tens + 1;
                            end else begin
                                hours_units <= hours_units + 1;
                            end
                        end else begin
                            minutes_tens <= minutes_tens + 1;
                        end
                    end else begin
                        minutes_units <= minutes_units + 1;
                    end
                end else begin
                    seconds_tens <= seconds_tens + 1;
                end
            end else begin
                seconds_units <= seconds_units + 1;
            end
        end
    end
    
endmodule",6.400922,31154
N/A,N/A,-0.1,80,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_register;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_register;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_register <= 0;
        end 
        else if (ena) begin
            // Update seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;

                // Update minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;

                    // Update hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_register <= ~pm_register;  // Toggle AM/PM
                    end
                    else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end
                    else begin
                        hours <= hours + 1;
                    end
                end
                else begin
                    minutes <= minutes + 1;
                end
            end
            else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",4.100075,31439
N/A,N/A,-0.1,81,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12
            minutes <= 8'h00; // 00
            seconds <= 8'h00; // 00
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00; // Reset seconds
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00; // Reset minutes
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01; // Wrap around to 1
                        // Toggle am/pm
                        pm_reg <= ~pm_reg;
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12; // Next hour is 12
                    end else begin
                        hours <= hours + 8'h01; // Regular increment
                    end
                end else begin
                    minutes <= minutes + 8'h01; // Regular increment
                end
            end else begin
                seconds <= seconds + 8'h01; // Regular increment
            end
        end
    end

endmodule",5.431077,31772
N/A,N/A,-0.1,82,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg is_pm;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            is_pm <= 1'b0;
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        is_pm <= ~is_pm; // Toggle AM/PM
                    end
                    else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end
                    else begin
                        hours <= hours + 1'b1;
                    end
                end
                else begin
                    minutes <= minutes + 1'b1;
                end
            end
            else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = is_pm;

endmodule",4.561085,32080
N/A,N/A,-0.1,83,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;
    
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
    
    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'b00010010; // 12
            minutes <= 8'b00000000; // 00
            seconds <= 8'b00000000; // 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b01011001) begin // 59
                seconds <= 8'b00000000;
                if (minutes == 8'b01011001) begin // 59
                    minutes <= 8'b00000000;
                    if (hours == 8'b00010010) begin // 12
                        hours <= 8'b00000001; // 01
                        pm_reg <= ~pm_reg; // toggle am/pm
                    end else if (hours == 8'b00001001) begin // 09
                        hours <= 8'b00010000; // 10
                    end else if (hours == 8'b00000010) begin // 02
                        hours <= 8'b00000011; // 03
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
    
endmodule",6.182082,32441
N/A,N/A,-0.1,84,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, mins, secs;
    reg pm_reg;

    assign hh = hours;
    assign mm = mins;
    assign ss = secs;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b00010010;  // 12:00:00
            mins  <= 8'b00000000;
            secs  <= 8'b00000000;
            pm_reg <= 0;           // AM
        end else if (ena) begin
            // Increment seconds
            if (secs == 8'b01011001) begin
                secs <= 8'b00000000;
                // Increment minutes
                if (mins == 8'b01011001) begin
                    mins <= 8'b00000000;
                    // Increment hours
                    if (hours == 8'b00010010) begin
                        hours <= 8'b00000001; // 1
                    end else if (hours == 8'b00010001) begin
                        hours <= 8'b00010010; // 12
                        pm_reg <= ~pm_reg; // Flip AM/PM
                    end else begin
                        hours <= hours + 8'b00000001;
                    end
                end else begin
                    mins <= mins + 8'b00000001;
                end
            end else begin
                secs <= secs + 8'b00000001;
            end
        end
    end
endmodule",5.287149,32770
N/A,N/A,-0.1,85,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hh_reg;
    reg [7:0] mm_reg;
    reg [7:0] ss_reg;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'h12;
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment the second counter
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment the minute counter
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment the hour counter
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle am/pm
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 8'h01;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'h01;
                end
            end else begin
                ss_reg <= ss_reg + 8'h01;
            end
        end
    end

endmodule",4.872085,33107
N/A,N/A,-1,86,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b00010010;    // 12 in BCD
            minutes <= 8'b00000000;  // 00 in BCD
            seconds <= 8'b00000000;  // 00 in BCD
            am_pm <= 0;              // AM
        end else if (ena) begin
            if (seconds == 8'b01011001) begin  // 59 in BCD
                seconds <= 8'b00000000;       // reset to 00
                if (minutes == 8'b01011001) begin  // 59 in BCD
                    minutes <= 8'b00000000;   // reset to 00
                    if (hours == 8'b00010010) begin  // 12 in BCD
                        hours <= 8'b00000001;  // reset to 01
                        am_pm <= ~am_pm;      // toggle AM/PM
                    end else if (hours == 8'b00001001) begin  // 09 in BCD
                        hours <= 8'b00010000; // advance to 10
                    end else if (hours == 8'b00010001) begin  // 11 in BCD
                        hours <= 8'b00010010; // advance to 12
                    end else begin
                        hours <= hours + 1;   // increment hour
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin  // check BCD unit digit
                        minutes <= {minutes[7:4] + 1, 4'b0000};  // increment tens digit
                    end else begin
                        minutes <= minutes + 1;  // increment minute
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin  // check BCD unit digit
                    seconds <= {seconds[7:4] + 1, 4'b0000}; // increment tens digit
                end else begin
                    seconds <= seconds + 1;  // increment second
                end
            end
        end
    end

endmodule",8.635062,33644
N/A,N/A,-0.1,87,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] r_hh, r_mm, r_ss;
    reg r_pm;

    assign hh = r_hh;
    assign mm = r_mm;
    assign ss = r_ss;
    assign pm = r_pm;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            r_hh <= 8'b0001_0010; // 12 in BCD
            r_mm <= 8'b0000_0000; // 00 in BCD
            r_ss <= 8'b0000_0000; // 00 in BCD
            r_pm <= 1'b0;         // AM
        end
        else if (ena) begin
            // Increment seconds
            if (r_ss == 8'b0101_1001) begin
                r_ss <= 8'b0000_0000; // wrap to 00
                // Increment minutes
                if (r_mm == 8'b0101_1001) begin
                    r_mm <= 8'b0000_0000; // wrap to 00
                    // Increment hours
                    if (r_hh == 8'b0001_0010) begin // 12 in BCD
                        r_hh <= 8'b0000_0001; // wrap to 01
                        r_pm <= ~r_pm;       // Toggle AM/PM
                    end
                    else if (r_hh == 8'b0000_1001) begin // 09 in BCD
                        r_hh <= 8'b0001_0000; // 10 in BCD
                    end
                    else if (r_hh == 8'b0001_0000) begin // 10 in BCD
                        r_hh <= 8'b0001_0001; // 11 in BCD
                    end
                    else if (r_hh == 8'b0001_0001) begin // 11 in BCD
                        r_hh <= 8'b0001_0010; // 12 in BCD
                    end
                    else begin
                        r_hh <= r_hh + 1; // Increment hours in BCD
                    end
                end
                else begin
                    r_mm <= r_mm + 1; // Increment minutes
                end
            end
            else begin
                r_ss <= r_ss + 1; // Increment seconds
            end
        end
    end

endmodule",7.142084,34184
N/A,N/A,-0.1,88,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12 in BCD
            mm_reg <= 8'h00; // 00 in BCD
            ss_reg <= 8'h00; // 00 in BCD
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1'b1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1'b1;
                end
            end else begin
                ss_reg <= ss_reg + 1'b1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule",3.794075,34510
N/A,N/A,-0.1,89,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // Reset the time to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end
                    else begin
                        hours <= hours + 8'b0000_0001; // Increment hours
                    end
                end
                else begin
                    minutes <= minutes + 8'b0000_0001; // Increment minutes
                end
            end
            else begin
                seconds <= seconds + 8'b0000_0001; // Increment seconds
            end
        end
    end

endmodule",5.75708,34922
N/A,N/A,-0.1,90,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours, minutes, seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            am_pm <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        am_pm <= ~am_pm; // Toggle AM/PM at hour 12 rollover
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 8'd1;
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",4.988138,35219
N/A,N/A,-0.1,91,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset time to 12:00:00 AM
            hours <= 8'h12;   // 12 in BCD
            minutes <= 8'h00; // 00 minutes
            seconds <= 8'h00; // 00 seconds
            pm_reg <= 0;      // AM
        end else if (ena) begin
            // Increment the seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment the minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment the hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 8'h01;
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule",6.13508,35537
N/A,N/A,-0.1,92,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    
    reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12
            minutes <= 8'b0000_0000; // 00
            seconds <= 8'b0000_0000; // 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59
                seconds <= 8'b0000_0000; // Reset seconds to 00
                if (minutes == 8'b0101_1001) begin // 59
                    minutes <= 8'b0000_0000; // Reset minutes to 00
                    if (hours == 8'b0001_0010) begin // 12
                        hours <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg; // Toggle am/pm
                    end else if (hours == 8'b0001_0001) begin // 11
                        hours <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
    
endmodule",6.338142,35898
N/A,N/A,-0.1,93,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg _pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = _pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b0001_0010;  // 12 in BCD
            minutes <= 8'b0000_0000;  // 00 in BCD
            seconds <= 8'b0000_0000;  // 00 in BCD
            _pm <= 1'b0;  // AM
        end
        else if (ena) begin
            if (seconds == 8'b0101_1001) begin  // 59 in BCD
                seconds <= 8'b0000_0000;  // reset to 00
                if (minutes == 8'b0101_1001) begin  // 59 in BCD
                    minutes <= 8'b0000_0000;  // reset to 00
                    if (hours == 8'b0001_0010) begin  // 12 in BCD
                        hours <= 8'b0000_0001;  // reset to 01
                        _pm <= ~_pm;  // toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin  // 11 in BCD
                        hours <= 8'b0001_0010;  // increment to 12
                    end
                    else begin
                        hours <= hours + 1;  // increment hour
                    end
                end
                else begin
                    minutes <= minutes + 1;  // increment minute
                end
            end
            else begin
                seconds <= seconds + 1;  // increment second
            end
        end
    end

endmodule",5.247073,36313
N/A,N/A,-0.1,94,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12;    // Reset to 12:00:00
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 1'b0;     // AM
        end else if (ena) begin
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule",4.099126,36588
N/A,N/A,-0.1,95,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'b00010010;  // 12 in BCD
            minutes <= 8'b00000000; // 00 in BCD
            seconds <= 8'b00000000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b01011001) begin // 59 in BCD
                seconds <= 8'b00000000; // reset to 00

                // Increment minutes
                if (minutes == 8'b01011001) begin // 59 in BCD
                    minutes <= 8'b00000000; // reset to 00

                    // Increment hours
                    if (hours == 8'b00010010) begin // 12 in BCD
                        hours <= 8'b00000001; // set to 01
                        pm_reg <= ~pm_reg;    // toggle am/pm
                    end else if (hours == 8'b00010001 && pm_reg == 1'b1) begin // 11 in BCD and PM
                        hours <= 8'b00010010; // set to 12
                    end else begin
                        hours <= hours + 8'b00000001; // increment hours
                    end
                end else begin
                    minutes <= minutes + 8'b00000001; // increment minutes
                end
            end else begin
                seconds <= seconds + 8'b00000001; // increment seconds
            end
        end
    end

endmodule",5.865075,36995
N/A,N/A,-0.1,96,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hh_reg, mm_reg, ss_reg;

    assign pm = pm_reg;
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;

    always @(posedge clk) begin
        if (reset) begin
            hh_reg <= 8'h12;  // Set to 12
            mm_reg <= 8'h00;  // Set to 00
            ss_reg <= 8'h00;  // Set to 00
            pm_reg <= 0;      // Set to AM
        end else if (ena) begin
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end
endmodule",4.181087,37301
N/A,N/A,-0.1,97,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg am_pm;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'd12;  // Reset to 12:00 AM
            minutes <= 8'd0;
            seconds <= 8'd0;
            am_pm <= 0; // AM
        end else if (ena) begin
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        am_pm <= ~am_pm;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= hours + 8'd1;  // Increment to 12
                    end else begin
                        hours <= hours + 8'd1;
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",4.177073,37603
N/A,N/A,-0.1,98,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hh_reg <= 8'h12;     // 12
            mm_reg <= 8'h00;     // 00
            ss_reg <= 8'h00;     // 00
            pm_reg <= 1'b0;      // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;

                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;

                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;   // 11 -> 12
                    end else begin
                        hh_reg <= hh_reg + 1'b1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1'b1;
                end
            end else begin
                ss_reg <= ss_reg + 1'b1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;
endmodule",5.361143,37931
N/A,N/A,-0.1,99,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hour;
    reg [7:0] minute;
    reg [7:0] second;
    reg pm_reg;

    assign hh = hour;
    assign mm = minute;
    assign ss = second;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hour <= 8'b00010010;  // 12 in BCD
            minute <= 8'b00000000; // 00 in BCD
            second <= 8'b00000000; // 00 in BCD
            pm_reg <= 0;           // AM
        end else if (ena) begin
            if (second == 8'b01011001) begin  // 59 in BCD
                second <= 8'b00000000;        // reset seconds
                if (minute == 8'b01011001) begin // 59 in BCD
                    minute <= 8'b00000000;       // reset minutes
                    if (hour == 8'b00010010) begin // 12 in BCD
                        hour <= 8'b00000001;       // rollover hour to 01
                        pm_reg <= ~pm_reg;         // toggle AM/PM
                    end else if (hour == 8'b00001001) begin // 9 in BCD
                        hour <= 8'b00010000;       // switch to 10 in BCD
                    end else if (hour == 8'b00010000) begin // 10 in BCD
                        hour <= 8'b00010001;       // switch to 11 in BCD
                    end else begin
                        hour <= hour + 1;
                    end
                end else begin
                    minute <= minute + 1;
                end
            end else begin
                second <= second + 1;
            end
        end
    end

endmodule",6.42215,38339
