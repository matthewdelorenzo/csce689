Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
4.256,74.12,0.1,0,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;   // XOR for sum
    assign cout = a & b;  // AND for carry-out

endmodule",2.363993,31
4.256,74.12,0.1,1,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;      // XOR operation for the sum
    assign cout = a & b;     // AND operation for the carry-out

endmodule",1.963019,66
4.256,74.12,0.1,2,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // Sum is the XOR of a and b
    assign cout = a & b; // Carry-out is the AND of a and b
endmodule",1.998043,105
4.256,74.12,0.1,3,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // The sum is the XOR of the inputs a and b
    assign sum = a ^ b;
    
    // The carry-out is the AND of the inputs a and b
    assign cout = a & b;

endmodule",2.371029,153
4.256,74.12,0.1,4,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;   // Sum is the XOR of a and b
    assign cout = a & b;  // Carry-out is the AND of a and b
endmodule",2.14948,193
4.256,74.12,0.1,5,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b; // XOR produces sum
    assign cout = a & b; // AND produces carry-out
endmodule",2.173457,221
4.256,74.12,0.1,6,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;  // XOR gate for sum
    assign cout = a & b; // AND gate for carry-out

endmodule",2.790036,253
4.256,74.12,0.1,7,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // XOR operation for sum
    assign cout = a & b; // AND operation for carry-out
endmodule",2.029011,284
4.256,74.12,0.1,8,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;       // Sum is the XOR of inputs a and b
    assign cout = a & b;      // Carry-out is the AND of inputs a and b

endmodule",2.223029,327
4.256,74.12,0.1,9,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // The sum is the XOR of the two input bits
    assign sum = a ^ b;
    
    // The carry-out is the AND of the two input bits
    assign cout = a & b;
    
endmodule",1.931011,373
4.256,74.12,0.1,10,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Sum is the XOR of a and b
    assign sum = a ^ b;
    // Carry-out is the AND of a and b
    assign cout = a & b;

endmodule",2.645029,413
4.256,74.12,0.1,11,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // XOR gate for sum
    assign cout = a & b; // AND gate for carry-out
endmodule",2.896013,444
4.256,74.12,0.1,12,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // XOR gate for sum
    assign sum = a ^ b;
    // AND gate for carry-out
    assign cout = a & b;
endmodule",1.988032,476
4.256,74.12,0.1,13,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;
    assign cout = a & b;
endmodule",1.802441,493
4.256,74.12,0.1,14,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;  // Sum is the XOR of inputs a and b
    assign cout = a & b; // Carry-out is the AND of inputs a and b

endmodule",2.020225,535
4.256,74.12,0.1,15,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;   // XOR operation gives the sum
    assign cout = a & b;  // AND operation gives the carry-out

endmodule",2.011016,570
4.256,74.12,0.1,16,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    // Sum is the XOR of the two input bits
    assign sum = a ^ b;
    
    // Carry-out is the AND of the two input bits
    assign cout = a & b;

endmodule",2.183011,614
4.256,74.12,0.1,17,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Implement the logic for the sum and carry-out of the half adder
    assign sum = a ^ b;     // Sum is the XOR of inputs a and b
    assign cout = a & b;    // Carry-out is the AND of inputs a and b
endmodule",2.521021,673
4.256,74.12,0.1,18,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // Sum is the XOR of a and b
    assign cout = a & b; // Carry out is the AND of a and b
endmodule",2.066011,712
4.256,74.12,0.1,19,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Logic for sum: XOR operation between a and b
    assign sum = a ^ b;
    
    // Logic for cout: AND operation between a and b
    assign cout = a & b;

endmodule",3.62201,756
4.256,74.12,0.1,20,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;   // Sum is the XOR of a and b
    assign cout = a & b;  // Carry-out is the AND of a and b

endmodule",2.504015,797
4.256,74.12,0.1,21,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;  // XOR for sum
    assign cout = a & b; // AND for carry-out

endmodule",1.970018,827
4.256,74.12,0.1,22,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // Sum is the XOR of inputs a and b
    assign cout = a & b; // Carry-out is the AND of inputs a and b
endmodule",2.062009,868
4.256,74.12,0.1,23,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;

endmodule",2.001017,901
4.256,74.12,0.1,24,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.983022,941
4.256,74.12,0.1,25,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Sum is the XOR of a and b 
    assign sum = a ^ b;
    // Carry-out is the AND of a and b
    assign cout = a & b;
endmodule",2.34703,981
4.256,74.12,0.1,26,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b; // Sum is XOR of a and b
    assign cout = a & b; // Carry-out is AND of a and b
endmodule",2.130007,1017
4.256,74.12,0.1,27,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;  // Sum is the XOR of inputs
    assign cout = a & b; // Carry out is the AND of inputs

endmodule",2.186036,1053
4.256,74.12,0.1,28,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b; // Sum is the XOR of a and b
    assign cout = a & b; // Carry-out is the AND of a and b
endmodule",2.236016,1091
4.256,74.12,0.1,29,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;

endmodule",2.198044,1125
4.256,74.12,0.1,30,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;       // Sum is the XOR of input bits
    assign cout = a & b;      // Carry-out is the AND of input bits

endmodule",2.004024,1164
4.256,74.12,0.1,31,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;

endmodule",1.98597,1198
4.256,74.12,0.1,32,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;       // Sum is the XOR of a and b
    assign cout = a & b;      // Carry-out is the AND of a and b

endmodule",2.194017,1239
4.256,74.12,0.1,33,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;      // XOR gate for sum
    assign cout = a & b;     // AND gate for carry-out

endmodule",2.065017,1272
4.256,74.12,0.1,34,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;       // XOR gate for sum
    assign cout = a & b;      // AND gate for carry-out

endmodule",2.011035,1305
4.256,74.12,0.1,35,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;   // Sum is the XOR of inputs a and b
    assign cout = a & b;  // Carry-out is the AND of inputs a and b

endmodule",2.065008,1348
4.256,74.12,0.1,36,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // Sum is the XOR of the two inputs
    assign cout = a & b; // Carry out is the AND of the two inputs
endmodule",2.166009,1387
4.256,74.12,0.1,37,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // Sum is the XOR of the inputs
    assign sum = a ^ b;
    
    // Carry-out is the AND of the inputs
    assign cout = a & b;

endmodule",2.023012,1427
4.256,74.12,0.1,38,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;   // Sum is the result of XOR operation between a and b
    assign cout = a & b;  // Carry out is the result of AND operation between a and b
endmodule",2.272033,1473
4.256,74.12,0.1,39,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // Sum is the XOR of inputs a and b
    assign cout = a & b; // Carry-out is the AND of inputs a and b
endmodule",2.268034,1514
4.256,74.12,0.1,40,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // XOR operation for sum
    assign cout = a & b; // AND operation for carry-out
endmodule",2.409014,1545
4.256,74.12,0.1,41,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;   // Sum is the XOR of inputs a and b
    assign cout = a & b;  // Carry-out is the AND of inputs a and b

endmodule",2.154014,1588
4.256,74.12,0.1,42,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    // Sum is the XOR of a and b
    assign sum = a ^ b;
    
    // Carry-out is the AND of a and b
    assign cout = a & b;

endmodule",2.104029,1630
4.256,74.12,0.1,43,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;    // XOR for sum
    assign cout = a & b;   // AND for carry-out

endmodule",2.037017,1661
4.256,74.12,0.1,44,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b; // Sum is calculated using XOR operation
    assign cout = a & b; // Carry-out is calculated using AND operation
endmodule",2.085023,1695
4.256,74.12,0.1,45,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;   // XOR operation for sum
    assign cout = a & b;  // AND operation for carry-out
endmodule",2.246591,1727
4.256,74.12,0.1,46,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    // Assign the sum as the XOR of the inputs a and b
    assign sum = a ^ b;
    
    // Assign the carry out as the AND of the inputs a and b
    assign cout = a & b;

endmodule",5.661987,1777
4.256,74.12,0.1,47,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;   // Sum is the XOR of inputs a and b
    assign cout = a & b;  // Carry-out is the AND of inputs a and b

endmodule",2.193011,1820
4.256,74.12,0.1,48,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;  // Sum is the XOR of inputs a and b
    assign cout = a & b; // Carry-out is the AND of inputs a and b

endmodule",2.123009,1862
4.256,74.12,0.1,49,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out (cout)
    assign cout = a & b;

endmodule",1.998006,1898
4.256,74.12,0.1,50,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // XOR gate for sum: sum = a ^ b
    assign sum = a ^ b;

    // AND gate for carry-out: cout = a & b
    assign cout = a & b;

endmodule",2.186035,1942
4.256,74.12,0.1,51,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;
    assign cout = a & b;
endmodule",1.815006,1959
4.256,74.12,0.1,52,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum as XOR of inputs a and b
    assign sum = a ^ b;
    
    // Compute the carry out as AND of inputs a and b
    assign cout = a & b;

endmodule",2.046011,2004
4.256,74.12,0.1,53,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b; // XOR operation for the sum
    assign cout = a & b; // AND operation for the carry-out
endmodule",1.731034,2036
4.256,74.12,0.1,54,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b; // XOR for sum
    assign cout = a & b; // AND for carry-out
endmodule",1.901011,2064
4.256,74.12,0.1,55,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;   // XOR operation for sum
    assign cout = a & b;  // AND operation for carry-out
endmodule",1.928013,2096
4.256,74.12,0.1,56,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;   // Sum is the XOR of inputs a and b
    assign cout = a & b;  // Carry-out is the AND of inputs a and b

endmodule",3.527021,2139
4.256,74.12,0.1,57,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;      // Sum is the XOR of a and b
    assign cout = a & b;     // Carry-out is the AND of a and b
endmodule",2.067016,2179
4.256,74.12,0.1,58,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;   // Sum is the XOR of a and b
    assign cout = a & b;  // Carry-out is the AND of a and b

endmodule",2.477017,2220
4.256,74.12,0.1,59,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;     // XOR operation for sum
    assign cout = a & b;    // AND operation for carry-out

endmodule",2.047015,2253
4.256,74.12,0.1,60,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b; // Sum is the XOR of a and b
    assign cout = a & b; // Carry-out is the AND of a and b
    
endmodule",1.953013,2292
4.256,74.12,0.1,61,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // The sum of a and b can be calculated using XOR
    assign sum = a ^ b;
    
    // The carry-out is calculated using AND
    assign cout = a & b;

endmodule",2.289022,2334
4.256,74.12,0.1,62,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // Sum is the XOR of a and b
    assign sum = a ^ b;

    // Carry-out is the AND of a and b
    assign cout = a & b;

endmodule",2.118005,2375
4.256,74.12,0.1,63,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // XOR operation for sum
    assign cout = a & b; // AND operation for carry-out
endmodule",1.922023,2406
4.256,74.12,0.1,64,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Sum is the XOR of the two inputs
    assign sum = a ^ b;
    
    // Carry-out is the AND of the two inputs
    assign cout = a & b;

endmodule",2.19602,2447
4.256,74.12,0.1,65,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;
    assign cout = a & b;

endmodule",2.106015,2465
4.256,74.12,0.1,66,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Sum is the XOR of a and b
    assign sum = a ^ b;
    
    // Carry-out (cout) is the AND of a and b
    assign cout = a & b;

endmodule",2.030035,2509
4.256,74.12,0.1,67,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;   // XOR operation for sum
    assign cout = a & b;  // AND operation for carry-out

endmodule",2.200014,2542
4.256,74.12,0.1,68,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b; // XOR gate for sum
    assign cout = a & b; // AND gate for carry-out

endmodule",1.974013,2573
4.256,74.12,0.1,69,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    // Sum is XOR of the inputs
    assign sum = a ^ b;
    
    // Carry-out is AND of the inputs
    assign cout = a & b;

endmodule",2.282765,2611
4.256,74.12,0.1,70,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // Sum is calculated using XOR gate
    assign sum = a ^ b;
    // Carry-out is calculated using AND gate
    assign cout = a & b;

endmodule",2.100041,2648
4.256,74.12,0.1,71,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;  // Sum is XOR of inputs
    assign cout = a & b; // Carry-out is AND of inputs

endmodule",2.043185,2682
4.256,74.12,0.1,72,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // The sum is the XOR of the input bits
    assign sum = a ^ b;

    // The carry out is the AND of the input bits
    assign cout = a & b;

endmodule",2.137019,2725
4.256,74.12,0.1,73,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;
    assign cout = a & b;

endmodule",2.38501,2743
4.256,74.12,0.1,74,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;   // XOR operation for sum
    assign cout = a & b;  // AND operation for carry out
endmodule",1.911019,2775
4.256,74.12,0.1,75,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;
    
endmodule",2.024017,2810
4.256,74.12,0.1,76,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // The sum is the XOR of the two input bits
    assign sum = a ^ b;
    
    // The carry-out is the AND of the two input bits
    assign cout = a & b;

endmodule",2.078015,2855
4.256,74.12,0.1,77,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;   // Sum is the XOR of the inputs
    assign cout = a & b;  // Carry out is the AND of the inputs

endmodule",2.112002,2894
4.256,74.12,0.1,78,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;    // XOR operation for sum
    assign cout = a & b;   // AND operation for carry-out

endmodule",2.144118,2927
4.256,74.12,0.1,79,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b; // Sum is the XOR of a and b
    assign cout = a & b; // Carry-out is the AND of a and b
endmodule",2.151014,2965
4.256,74.12,0.1,80,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // Perform the sum operation using XOR
    assign sum = a ^ b;

    // Calculate the carry-out using AND
    assign cout = a & b;

endmodule",2.128018,3001
4.256,74.12,0.1,81,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // sum is the XOR of a and b
    assign sum = a ^ b;
    // cout is the AND of a and b
    assign cout = a & b;
endmodule",2.077008,3040
4.256,74.12,0.1,82,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;  // XOR operation for sum
    assign cout = a & b; // AND operation for carry-out

endmodule",1.98701,3072
4.256,74.12,0.1,83,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;    // XOR for sum
    assign cout = a & b;   // AND for carry-out
endmodule",1.925009,3102
4.256,74.12,0.1,84,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;     // Sum is the XOR of the two input bits
    assign cout = a & b;    // Carry-out is the AND of the two input bits

endmodule",2.208037,3145
4.256,74.12,0.1,85,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // The sum is the XOR of the two inputs
    assign sum = a ^ b;
    
    // The carry-out is the AND of the two inputs
    assign cout = a & b;

endmodule",2.359015,3189
4.256,74.12,0.1,86,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;   // Sum is the XOR of a and b
    assign cout = a & b;  // Carry-out is the AND of a and b
endmodule",2.223021,3229
4.256,74.12,0.1,87,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;       // XOR operation gives the sum of two bits
    assign cout = a & b;      // AND operation gives the carry-out
endmodule",1.980017,3266
4.256,74.12,0.1,88,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Using basic logic gates to create sum and carry-out
    assign sum = a ^ b;       // XOR gate for sum
    assign cout = a & b;      // AND gate for carry-out

endmodule",2.594011,3311
4.256,74.12,0.1,89,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;
    assign cout = a & b;
endmodule",2.162018,3328
4.256,74.12,0.1,90,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;   // Sum is the XOR of a and b
    assign cout = a & b;  // Carry-out is the AND of a and b
endmodule",2.341014,3368
4.256,74.12,0.1,91,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // Sum is the result of XORing the inputs
    assign cout = a & b; // Carry-out is the result of ANDing the inputs
endmodule",2.146044,3409
4.256,74.12,0.1,92,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // The sum is the XOR of the two inputs
    assign sum = a ^ b;
    
    // The carry out is the AND of the two inputs
    assign cout = a & b;

endmodule",2.117004,3453
4.256,74.12,0.1,93,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    assign sum = a ^ b;
    assign cout = a & b;

endmodule",1.847016,3471
4.256,74.12,0.1,94,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // A half adder's sum output is an XOR of the two input bits
    assign sum = a ^ b;
    // A half adder's carry-out output is an AND of the two input bits
    assign cout = a & b;

endmodule",2.256011,3525
4.256,74.12,0.1,95,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;

endmodule",2.144032,3558
4.256,74.12,0.1,96,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b; // Sum is the XOR of inputs a and b
    assign cout = a & b; // Carry-out is the AND of inputs a and b
endmodule",2.160017,3598
4.256,74.12,0.1,97,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;  // Sum is XOR of a and b
    assign cout = a & b; // Carry-out is AND of a and b
endmodule",2.358016,3635
4.256,74.12,0.1,98,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    
    assign sum = a ^ b;  // Sum is the XOR of the inputs
    assign cout = a & b; // Carry out is the AND of the inputs

endmodule",2.146018,3673
4.256,74.12,0.1,99,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;
    assign cout = a & b;
endmodule",1.900012,3690
