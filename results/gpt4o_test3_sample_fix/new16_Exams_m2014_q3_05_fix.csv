Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-1,0,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[3] & x[1] & x[2]) | (x[3] & ~x[4]) | (x[3] & x[2]);
endmodule",1.597288,44
N/A,N/A,-1,1,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & ~x[3] & x[1] & ~x[2]) | (x[4] & ~x[3]) | (x[3] & x[2]);
endmodule",1.837681,100
N/A,N/A,-1,2,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3]) | (x[4] & ~x[2]) | (x[3] & x[2] & ~x[1]) | (x[4] & x[3] & x[1]);

endmodule",1.30505,161
N/A,N/A,-1,3,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[1] & x[2] & x[3]) | (x[3] & x[4]) | (x[1] & ~x[2] & x[4]) | (x[1] & x[2] & ~x[3]);
endmodule",1.933045,232
N/A,N/A,-1,4,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (x[4] & x[3]) | (x[4] & x[1]) | (x[3] & x[2]);

endmodule",1.185055,270
N/A,N/A,-1,5,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] &  x[3] & ~x[1]) | ( x[4] & ~x[3]) | ( x[2] &  x[1] & x[3] & ~x[4]);

endmodule",1.41702,328
N/A,N/A,-1,6,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (x[4] & x[3]) | (x[4] & x[2] & x[1]) | (x[3] & ~x[2] & x[1]) | (~x[4] & x[3] & x[2]);
endmodule",1.65105,393
N/A,N/A,-1,7,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[2] & x[1]) | (x[3] & ~x[4]) | (x[3] & x[2]);
endmodule",0.999064,442
N/A,N/A,-1,8,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[1] &  x[2] &  x[3] & ~x[4]) |
               ( x[1] & ~x[2] &  x[3] & ~x[4]) |
               ( x[1] &  x[2] & ~x[3] & ~x[4]) |
               ( x[1] &  x[2] &  x[3]);
endmodule",1.729068,545
N/A,N/A,-1,9,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & ~x[3] & x[1]) |
               (x[3] & x[4]) |
               (x[3] & ~x[2]);

endmodule",1.213477,592
N/A,N/A,-1,10,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (x[4] & x[3]) | (~x[3] & x[2] & x[1]);

endmodule",1.215051,623
N/A,N/A,-1,11,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3]) | (x[4] & ~x[1]) | (x[3] & x[2]);
endmodule",1.195022,667
N/A,N/A,-1,12,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & ~x[2] & x[1]) | (x[3] & ~x[4]) | (x[3] & x[2]);
endmodule",1.231048,717
N/A,N/A,-1,13,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (~x[2] & x[1] & x[3]) | (x[4] & x[2] & ~x[1]);
endmodule",1.280114,771
N/A,N/A,-1,14,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[3] & x[1] & x[2]) |
               (x[3] & ~x[4] & x[1]) |
               (x[3] & x[4] & ~x[1]) |
               (x[3] & x[2] & x[4]);

endmodule",2.066048,845
N/A,N/A,-1,15,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & (x[2] | x[1])) |
               (x[4] & (x[3] | x[2])) |
               (x[4] & ~x[3] & x[1]);
endmodule",1.206054,908
N/A,N/A,-1,16,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & ~x[2]) | (x[4] & x[3]) | (x[1] & x[3] & x[2]);

endmodule",1.28029,957
N/A,N/A,-1,17,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (x[3] & x[4]) | (~x[1] & x[2] & ~x[3]) | (x[1] & x[2] & x[3] & ~x[4]);
endmodule",1.075268,1012
N/A,N/A,-1,18,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & ~x[1]) | (x[4] & ~x[3]) | (~x[4] & ~x[3] & x[1] & x[2]) | (x[4] & x[3] & ~x[2]);
endmodule",2.793064,1085
N/A,N/A,-1,19,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[4] & x[2]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);
endmodule",1.645051,1140
N/A,N/A,-1,20,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (x[4] & x[3]) | (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[3] & x[2] & x[1]);

endmodule",1.409053,1206
N/A,N/A,-1,21,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    
    assign f = (~x[4] & x[3] & x[1]) | (x[4] & x[3]) | (~x[3] & x[2] & ~x[1]);

endmodule",1.168135,1255
N/A,N/A,-1,22,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & ~x[3] & x[2]) | (x[4] & ~x[3]) | (x[4] & x[3] & ~x[1]);
endmodule",1.614055,1311
N/A,N/A,-1,23,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3]) | (~x[1] & x[3] & ~x[2]) | (x[1] & x[2] & ~x[4]) | (x[1] & ~x[2] & ~x[3]);
endmodule",1.462057,1382
N/A,N/A,-1,24,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    
    
    assign f = (~x[4] & x[3] & x[1]) | (x[4] & x[3]) | (x[2] & x[3]);
    
endmodule",0.930047,1426
N/A,N/A,-1,25,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (x[1] & x[2] & ~x[3]) | (x[1] & ~x[2] & ~x[3] & x[4]);
endmodule",1.097058,1487
N/A,N/A,-1,26,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    assign f = (x[4] & x[3] & x[2]) |
               (x[4] & x[3] & x[1]) |
               (x[3] & ~x[2] & x[1]) |
               (x[2] & x[1]);

endmodule",2.34906,1554
N/A,N/A,-1,27,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3]) | (x[3] & x[2]) | (x[1] & x[4] & ~x[2]);
endmodule",1.049051,1603
N/A,N/A,-1,28,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & ~x[3] & x[1]) | (x[4] & x[3] & (x[1] | x[2])) | (x[4] & ~x[3] & ~x[2]);
endmodule",1.26276,1665
N/A,N/A,-1,29,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[4] & x[1] & x[2]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);
endmodule",1.16286,1725
N/A,N/A,-1,30,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (x[4] & ~x[2]) | (~x[3] & x[2] & x[1]);
endmodule",1.013061,1774
N/A,N/A,-1,31,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & (~x[2] | x[1])) | (x[4] & (x[3] | (x[2] & ~x[1])));
endmodule",1.247054,1825
N/A,N/A,-1,32,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & x[1]) | (x[4] & ~x[3]) | (x[4] & x[2] & ~x[1]);
endmodule",1.296051,1875
N/A,N/A,-1,33,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[2] & x[1] & ~x[4]) |
               (x[3] & (x[2] | ~x[4]));

endmodule",0.977051,1924
N/A,N/A,-1,34,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[3] & x[2]) | (x[3] & ~x[4]) | (~x[1] & x[4]);
endmodule",1.068049,1968
N/A,N/A,-1,35,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3]) | (x[4] & ~x[3]) | (x[3] & x[2]);
endmodule",1.13305,2010
N/A,N/A,-1,36,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[4] & x[1] & x[2]) |  // x3'x4 + x1x2
               (x[3] & x[4]) |                // x3x4
               (x[3] & ~x[4] & ~x[1] & ~x[2]);// x3x4'x1'x2'
endmodule",2.11705,2107
N/A,N/A,-1,37,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & ~x[3] & x[2] & ~x[1]) | // 2nd row (d can be 1 in minimized expression)
               (x[4] & ~x[3] & ~x[2]) |       // 3rd row, col 1 and 2 (minterms 8 and 9)
               (x[3] & x[2]);                  // 3rd row, col 3 and 4 (minterms 10 and 11)
endmodule",2.178059,2225
N/A,N/A,-1,38,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (x[4] & x[1]) | (x[3] & x[2]) | (x[2] & x[1]);
endmodule",1.077061,2279
N/A,N/A,-1,39,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[2] & x[1]) | (x[3] & x[2]) | (x[3] & ~x[4]);
endmodule",1.236068,2326
N/A,N/A,-1,40,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (x[4] & x[3] & ~x[2]) | (x[3] & x[2]) | (x[4] & ~x[3] & x[2] & x[1]);
endmodule",1.720758,2381
N/A,N/A,-1,41,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & x[2]) | (x[4] & x[3]) | (x[4] & ~x[3] & x[1]);
endmodule",1.187065,2433
N/A,N/A,-1,42,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

\
    assign f = (x[3] & x[2]) | (x[1] & x[4]);
endmodule",0.816047,2460
N/A,N/A,-1,43,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (x[1] & ~x[2] & x[3]) | (x[4] & x[1] & x[2]);
endmodule",1.051625,2514
N/A,N/A,-1,44,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    assign f = (~x[4] & x[3]) | (x[4] & ~x[1]) | (x[3] & x[2]);
endmodule",1.813056,2552
N/A,N/A,-1,45,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & x[1]) | 
               (x[4] & ~x[3]) | 
               (x[4] & x[2]);

endmodule",1.082051,2600
N/A,N/A,-1,46,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (x[4] & ~x[3]) | (~x[4] & x[3] & x[2] & x[1]) | (x[4] & x[3] & x[1]);
endmodule",1.224042,2654
N/A,N/A,-1,47,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3]) | (x[3] & x[2]) | (x[4] & x[1] & ~x[2]);
endmodule",1.403062,2703
N/A,N/A,-1,48,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    assign f = (x[4] & x[3]) | (~x[4] & ~x[3] & x[2]) | (x[2] & x[1]);
endmodule",1.313095,2746
N/A,N/A,-1,49,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & ~x[2] & x[1]) |
               (x[3] & x[2]) |
               (x[3] & ~x[4] & ~x[1]);
endmodule",1.426056,2804
N/A,N/A,-1,50,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[2] & x[1]) | (x[3] & ~x[4]) | (x[3] & x[2]);
endmodule",1.604051,2851
N/A,N/A,-1,51,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3]) | (x[1] & x[2] & x[3]) | (x[1] & x[2] & ~x[4]);
endmodule",1.219056,2905
N/A,N/A,-1,52,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3]) | (x[4] & x[1]) | (x[4] & x[2] & ~x[1]) | (x[3] & ~x[2] & ~x[1]);
endmodule",1.410049,2972
N/A,N/A,-1,53,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    assign f = (~x[4] & ~x[3] & x[2]) | (x[4] & x[3]) | (x[3] & ~x[2] & ~x[1]);
endmodule",1.226048,3022
N/A,N/A,-1,54,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[3] & x[2] & x[1]) |
           (x[3] & x[4] & ~x[1]) |
           (x[3] & ~x[4] & x[2]);
endmodule",2.504121,3078
N/A,N/A,-1,55,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[2] & ~x[1] & x[4]) | (x[3] & x[2]) | (x[3] & ~x[1] & ~x[4]);
endmodule",1.184053,3139
N/A,N/A,-1,56,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & ~x[3] & x[2]) |
               (x[4] & ~x[3]) |
               (x[4] & x[3] & ~x[2] & ~x[1]);
endmodule",1.845071,3203
N/A,N/A,-1,57,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & ~x[2]) | (x[3] & ~x[1]) | (x[4] & x[3] & x[2] & ~x[1]);
endmodule",1.261066,3264
N/A,N/A,-1,58,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & ~x[1]) | (x[4] & x[3]) | (x[3] & ~x[2]) | (~x[4] & x[3] & x[2]);
endmodule",1.258054,3330
N/A,N/A,-1,59,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & ~x[3] & x[1] & x[2]) |
               ( x[4] & x[3] & ~x[2])        |
               ( x[4] & x[3] & ~x[1])        |
               ( x[4] & ~x[3] & ~x[1] & ~x[2]);
endmodule",1.634051,3420
N/A,N/A,-1,60,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & ~x[2]) | (x[3] & x[4] & ~x[1]) | (x[3] & x[2]);
endmodule",1.098053,3468
N/A,N/A,-1,61,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    assign f = (x[4] & ~x[3]) | (x[3] & x[2]) | (x[3] & x[1] & ~x[2]) | (x[2] & x[4]);
endmodule",1.045105,3523
N/A,N/A,-1,62,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & ~x[2]) | (x[4] & x[3]) | (x[4] & ~x[3] & ~x[2] & ~x[1]);
endmodule",1.434538,3585
N/A,N/A,-1,63,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (x[4] & ~x[1]) | (~x[3] & x[1] & x[2]);
endmodule",1.413053,3634
N/A,N/A,-1,64,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (~x[3] & x[2] & x[1]);
endmodule",1.223048,3671
N/A,N/A,-1,65,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] &  x[3] & ~x[2]) |
               (~x[4] &  x[3] & ~x[1]) |
               ( x[3] &  x[2])         |
               ( x[4] &  x[3] & ~x[1]);

endmodule",1.799062,3751
N/A,N/A,-1,66,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[2] & x[1] & x[4]) | (x[3] & ~x[1]) | (x[3] & x[2]);
endmodule",1.427145,3805
N/A,N/A,-1,67,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[2] & x[1] & x[4]) | (x[3] & x[4] & (~x[2] & ~x[1] | x[2] & ~x[1]));
endmodule",1.247061,3870
N/A,N/A,-1,68,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[3] & x[4]) | (~x[1] & x[2] & x[3]) | (x[1] & ~x[2] & ~x[3] & x[4]);
endmodule",1.315066,3930
N/A,N/A,-1,69,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & x[1]) | (x[4] & ~x[3]) | (x[4] & x[3] & ~x[2]) | (x[4] & x[3] & x[1]);
endmodule",1.352083,4001
N/A,N/A,-1,70,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[1] & ~x[2] & x[3] & x[4]) |
               (x[1] & ~x[2] & x[3]) |
               (x[1] & x[2] & x[3]);
endmodule",1.363088,4068
N/A,N/A,-1,71,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & ~x[2]) | (x[4] & x[3]) | (x[4] & ~x[3] & x[2] & ~x[1]) | (~x[4] & ~x[3] & x[2] & ~x[1]);

endmodule",1.371064,4147
N/A,N/A,-1,72,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[3] & x[2] & x[1]) |
               (x[3] & x[4]) |
               (x[3] & x[2]) |
               (x[4] & x[1]);

endmodule",1.78606,4204
N/A,N/A,-1,73,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[3] & x[2] & x[1]) |
               (x[3] & x[4]) |
               (x[3] & x[2]) |
               (x[4] & x[1]);

endmodule",1.053371,4276
N/A,N/A,-1,74,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & ~x[2]) | (x[4] & x[3]) | (x[3] & x[1]);
endmodule",1.261756,4325
N/A,N/A,-1,75,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

   
    assign f = (~x[4] & x[3] & ~x[2]) | // x3x2'x1
               (x[4] & x[3] & ~x[1]) | // x4x3x1'
               (~x[4] & x[2] & x[1]) | // x4'x2x1
               (x[4] & ~x[3]);        // x4x3'

endmodule",1.878063,4426
N/A,N/A,-1,76,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (x[4] & x[3] & (~x[1] | ~x[2])) |
               (~x[4] & ~x[3] & x[1] & x[2]) |
               (x[4] & ~x[3] & ~x[2]);

endmodule",1.29405,4496
N/A,N/A,-1,77,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[3] & x[4]) | (x[3] & ~x[4]) | (x[1] & x[2] & x[4]) | (x[1] & ~x[2] & x[3]);
endmodule",1.511066,4560
N/A,N/A,-1,78,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & ~x[3] & x[2]) |
               (x[4] & x[3] & ~x[1]) |
               (~x[4] & x[3] & x[2]) |
               (x[4] & x[3] & x[2]);

endmodule",1.691055,4639
N/A,N/A,-1,79,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (x[4] & x[3]) | (x[4] & ~x[1]) | (~x[4] & x[3] & x[1]);
endmodule",0.919055,4683
N/A,N/A,-1,80,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[3] & x[4]) | (x[4] & ~x[1]) | (x[3] & x[2]) | (x[1] & x[2] & x[3]);
endmodule",1.101057,4743
N/A,N/A,-1,81,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    // Extract inputs from the input vector x
    wire x1 = x[4];
    wire x2 = x[3];
    wire x3 = x[2];
    wire x4 = x[1];

    // Implement the function using a combination of logic gates
    assign f = (~x1 & x3 & x4) | (x1 & x3) | (x1 & x2 & ~x4);

endmodule",1.905086,4837
N/A,N/A,-1,82,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[4] & x[3] & x[1]) | (x[4] & x[3]) | (x[4] & ~x[3] & ~x[2]); 

endmodule",1.276063,4887
N/A,N/A,-1,83,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & ~x[2]) | (x[3] & x[2]) | (x[3] & x[1]);
endmodule",1.167064,4929
N/A,N/A,-1,84,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & x[2]) | (x[4] & x[3]) | (~x[1] & x[3] & x[2] & ~x[4]) | (x[1] & x[3] & ~x[2] & ~x[4]);

endmodule",1.557085,5006
N/A,N/A,-1,85,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & ~x[3] & x[2]) |
               (x[3] & x[2] & ~x[1]) |
               (x[4] & x[3] & ~x[1]) |
               (x[4] & x[3] & x[2]);

endmodule",1.473071,5086
N/A,N/A,-1,86,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    assign f = (x[3] & x[2]) | (x[3] & ~x[4]) | (~x[1] & x[2] & ~x[3]);
endmodule",1.132101,5130
N/A,N/A,-1,87,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[4] & x[3] & x[1]) | (x[4] & x[3]) | (x[3] & ~x[2]);

endmodule",1.05906,5174
N/A,N/A,-1,88,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (x[2] & ~x[1] & x[3]) | (~x[4] & x[2] & x[1]);
endmodule",1.263042,5228
N/A,N/A,-1,89,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & ~x[2]) |
               (x[4] & x[3]) |
               (x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",1.740065,5291
N/A,N/A,-1,90,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

    assign f = (x[4] & x[3]) | (~x[4] & x[3] & x[2]) | (x[4] & ~x[3] & ~x[2] & ~x[1]) | (~x[4] & x[3] & ~x[2] & x[1]);
endmodule",1.465055,5368
N/A,N/A,-1,91,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[3] & x[2] & x[1]) | (x[3] & ~x[2]) | (x[3] & x[4]);
endmodule",1.149116,5417
N/A,N/A,-1,92,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


    assign f = (~x[3] & x[2] & x[1] & x[4]) | 
               (x[3] & ~x[4]) | 
               (x[3] & x[2] & ~x[1]);

endmodule",1.350063,5476
N/A,N/A,-1,93,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & ~x[1]) | (x[4] & x[3]) | (x[4] & ~x[3] & x[1] & x[2]);
endmodule",1.091048,5536
N/A,N/A,-1,94,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3]) | (x[4] & ~x[3]) | (x[3] & x[2] & ~x[1]);

endmodule",1.296057,5586
N/A,N/A,-1,95,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & ~x[1]) | (x[4] & x[3]) | (x[4] & x[2]);
endmodule",1.040064,5635
N/A,N/A,-1,96,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

   
assign f = (~x[4] & x[3] & ~x[2]) | (~x[4] & x[3] & x[1]) | (x[4] & x[2]) | (x[4] & ~x[3] & x[1]);

endmodule",1.169269,5700
N/A,N/A,-1,97,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & ~x[2]) | (x[4] & ~x[3]) | (x[4] & x[3] & ~x[1]);
endmodule",1.575463,5756
N/A,N/A,-1,98,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (x[4] & x[3]) | (~x[4] & x[1] & ~x[2]);
endmodule",1.043044,5794
N/A,N/A,-1,99,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );

assign f = (~x[4] & x[3] & x[2]) | (x[4] & x[3]) | (x[4] & ~x[3] & ~x[2] & ~x[1]);
endmodule",2.13406,5853
