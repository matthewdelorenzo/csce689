Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-0.1,0,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) |
               (~x[4] & x[3] & ~x[2]) |
               (~x[3] & ~x[2] & ~x[1]) |
               (x[3] & x[2] & x[1]);
endmodule",2.445053,82
N/A,N/A,-0.1,1,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) |
               (x[3] & x[4] & ~x[2]) |
               (x[3] & ~x[4] & x[1]);

endmodule",2.559061,145
N/A,N/A,-0.1,2,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[1]) | (x[4] & x[3] & (~x[2] | x[1])) | (~x[3] & x[4] & ~x[2] & ~x[1]);
endmodule",2.119059,234
N/A,N/A,-0.1,3,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[1]) | (x[1] & x[3]) | (~x[2] & ~x[4]) & (x[3] ^ x[1]);
endmodule",3.978452,290
N/A,N/A,-0.1,4,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[1] & ~x[2] & ~x[4]) | (x[3] & ~x[2] & x[4]) | (x[3] & x[2] & ~x[4]) | (~x[1] & ~x[2] & ~x[4] & x[3]);

endmodule",2.086503,369
N/A,N/A,-0.1,5,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) | 
               (~x[4] & ~x[3] & x[2] & x[1])   | 
               (x[4] & x[3] & ~x[2] & ~x[1])   | 
               (x[4] & x[3] & x[2] & ~x[1])    | 
               (x[4] & ~x[3] & x[2] & x[1])    |
               (x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",3.823056,528
N/A,N/A,-0.1,6,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    // The Karnaugh map suggests the function can be simplified
    // using the following minterms:
    // m(0), m(8), m(9), m(12), m(13), m(14)
    
    assign f = (x[3] & x[4]) | (x[1] & x[4] & ~x[2]) | (x[3] & ~x[2] & ~x[1]) | (~x[1] & ~x[2] & ~x[3] & x[4]) | (~x[3] & ~x[4] & x[1] & ~x[2]);

endmodule",4.491541,672
N/A,N/A,-0.1,7,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    // The Karnaugh map suggests the function can be simplified
    // using the following minterms:
    // m(0), m(8), m(9), m(12), m(13), m(14)
    
    assign f = (x[3] & x[4]) | (x[1] & x[4] & ~x[2]) | (x[3] & ~x[2] & ~x[1]) | (~x[1] & ~x[2] & ~x[3] & x[4]) | (~x[3] & ~x[4] & x[1] & ~x[2]);

endmodule",1.833239,751
N/A,N/A,-0.1,8,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) | (x[3] & x[4] & (x[1] | x[2])) | (x[3] & ~x[4] & x[1]);

endmodule",1.88704,816
N/A,N/A,-0.1,9,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & x[3] & x[1]) | 
               (~x[4] & x[3] & x[2]) | 
               (x[4] & x[3] & ~x[2] & x[1]) | 
               (~x[4] & ~x[3] & x[1] & ~x[2]); 

endmodule",2.800058,924
N/A,N/A,-0.1,10,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & x[1] & ~x[2]) | // x_3'x_4'x_1x_2'
               (~x[3] & ~x[4] & x[1] & x[2])  | // x_3'x_4'x_1x_2
               (x[3] & x[4] & ~x[1] & x[2])   | // x_3x_4x_1'x_2
               (x[3] & ~x[4] & x[1] & ~x[2]);  // x_3x_4'x_1x_2'
endmodule",5.694063,1080
N/A,N/A,-0.1,11,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & ~x[1] & ~x[2]) |
               (~x[3] & ~x[4] & x[1] & ~x[2])  |
               (~x[3] & ~x[4] & x[1] & x[2])   |
               (~x[3] &  x[4] & ~x[1] & ~x[2]) |
               ( x[3] & ~x[4] & ~x[1] & ~x[2]) |
               ( x[3] & ~x[4] & x[1] & ~x[2])  |
               ( x[3] & ~x[4] & x[1] & x[2])   |
               ( x[3] & x[4] & ~x[1] & ~x[2])  |
               ( x[3] & x[4] & ~x[1] & x[2]);

endmodule",5.729006,1304
N/A,N/A,-0.1,12,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & x[3] & ~x[2]) | 
               (~x[4] & ~x[3] & ~x[1]) |
               (x[4] & x[2] & x[1]) |
               (x[4] & ~x[3] & x[1]);
endmodule",2.180111,1380
N/A,N/A,-0.1,13,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) | (x[3] & x[4] & (x[1] | x[2])) | (x[3] & ~x[4] & (x[1] | ~x[2]));
endmodule",2.260046,1457
N/A,N/A,-0.1,14,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[2]) | (~x[4] & x[3] & x[1]) | (~x[3] & x[1]) | (x[3] & ~x[2] & x[1]);
endmodule",2.691058,1517
N/A,N/A,-0.1,15,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | 
               (x[4] & x[3] & ~x[2]) | 
               (x[4] & x[3] & x[1]) | 
               (~x[4] & ~x[3] & x[1] & ~x[2]);

endmodule",2.870052,1601
N/A,N/A,-0.1,16,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & ~x[2]) | (x[4] & x[2] & x[1]) | (x[3] & ~x[2] & x[1]);
endmodule",1.904042,1677
N/A,N/A,-0.1,17,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[3] & ~x[4] & (~x[1] & ~x[2] | x[1] & x[2])) | 
               (x[3] & (x[4] & (~x[1] & x[2] | x[1] & ~x[2] | x[1] & x[2])) | 
               (~x[4] & (x[1] | ~x[2])));
endmodule",2.309054,1787
N/A,N/A,-0.1,18,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[3] & ~x[2] & ~x[4] &  x[1]) |
               (~x[3] &  x[2] &  x[4] & ~x[1]) |
               ( x[3] & ~x[4] &  x[1]) | 
               ( x[3] &  x[2]);
endmodule",2.49807,1879
N/A,N/A,-1,19,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3]' & x[1]') | (x[4]' & x[3]' & x[2]') | (x[4] & x[3] & (x[2] | x[1]')) | (x[4]' & x[3] & x[1]);
endmodule",2.166071,1962
N/A,N/A,-0.1,20,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) |
               (x[4] & x[3] & x[1]) |
               (x[4] & x[3] & x[2]) |
               (~x[3] & x[1] & ~x[2]) |
               (x[3] & ~x[2] & ~x[4]);

endmodule",2.597061,2055
N/A,N/A,-0.1,21,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) |
               (x[4] & x[3] & x[1]) |
               (x[4] & x[3] & x[2]) |
               (~x[3] & x[1] & ~x[2]) |
               (x[3] & ~x[2] & ~x[4]);

endmodule",2.104807,2126
N/A,N/A,-0.1,22,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[1]) | (~x[4] & ~x[3] & x[1]) | (x[3] & x[2]) | (~x[3] & ~x[2] & x[1]);

endmodule",1.925106,2187
N/A,N/A,-0.1,23,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


// The function is derived from the Karnaugh map by grouping the '1's.
    // We'll implement the expression:
    // f = x[4]'x[1]' + x[3]x[2] + x[3]x[1]'x[4]'
    
    assign f = (~x[4] & ~x[1]) | (x[3] & x[2]) | (x[3] & ~x[1] & ~x[4]);

endmodule",2.656071,2298
N/A,N/A,-0.1,24,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[1] & x[4]) | (~x[2] & ~x[4]) | (x[3] & ~x[2]) | (x[1] & ~x[3] & ~x[2]);
    
endmodule",1.618062,2356
N/A,N/A,-0.1,25,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[2] & ~x[1]) | 
               (~x[4] & ~x[3] & x[1]) | 
               (x[4] & x[3] & x[2]) | 
               (x[4] & ~x[3] & ~x[2] & ~x[1]);
endmodule",2.202056,2441
N/A,N/A,-0.1,26,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3] & ~x[2]) | (x[4] & x[3] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]) | 
               (~x[4] & x[3] & x[2]) | (~x[4] & x[3] & x[1]);
endmodule",3.448066,2543
N/A,N/A,-0.1,27,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[2]) | (~x[3] & ~x[4] & (x[1] ^ x[2])) | (x[3] & x[4] & (x[1] | x[2]));
endmodule",2.083071,2604
N/A,N/A,-0.1,28,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[2]) | (~x[3] & ~x[4] & (x[1] ^ x[2])) | (x[3] & x[4] & (x[1] | x[2]));
endmodule",2.197568,2705
N/A,N/A,-0.1,29,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3] & x[1]) |
               (x[4] & x[2] & x[1]) |
               (x[4] & x[3] & ~x[2]) |
               (~x[4] & ~x[3] & ~x[1]) |
               (~x[4] & x[3] & x[2]);
endmodule",6.874057,2800
N/A,N/A,-0.1,30,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | 
               (x[4] & x[3] & ~x[2]) |
               (~x[4] & ~x[3] & ~x[2] & x[1]) |
               (~x[4] & x[3] & x[2] & ~x[1]);
endmodule",2.215055,2888
N/A,N/A,-0.1,31,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & x[1]) | (~x[3] & ~x[2] & x[1]);
endmodule",2.152083,2967
N/A,N/A,-0.1,32,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               ( x[4] & x[3] & x[1] & ~x[2]) | 
               ( x[4] & ~x[3] & x[1]) | 
               ( x[1] & ~x[2] & ~x[4]);

endmodule",2.152055,3052
N/A,N/A,-0.1,33,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               ( x[4] &  x[3] & ~x[1] & ~x[2]) |
               ( x[4] &  x[3] & ~x[1] &  x[2]) |
               ( x[4] &  x[3] &  x[1] &  x[2]) |
               ( x[4] & ~x[3] &  x[1] & ~x[2]) |
               (~x[4] & ~x[3] &  x[1] & ~x[2]);

endmodule",7.138049,3209
N/A,N/A,-0.1,34,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & ~x[1] & ~x[2]) | // Corresponds to the 1 in the top-left corner (x_1'x_2'x_3'x_4')
               (~x[3] & ~x[4] & x[1] & x[2])   | // Corresponds to the 1 in the far-right corner of the first row (x_1x_2x_3'x_4')
               (x[3] & x[4] & ~x[1] & ~x[2])   | // Corresponds to the 1 in the bottom-left corner (x_1'x_2'x_3x_4)
               (x[3] & x[4] & x[1] & ~x[2])    | // Corresponds to the 1 in the bottom row, third column (x_1x_2'x_3x_4)
               (x[3] & x[4] & x[1] & x[2])     | // Corresponds to the 1 in the bottom row, second column (x_1x_2x_3x_4)
               (x[3] & ~x[4] & ~x[1] & x[2])   | // Corresponds to the 1 in the last row, first column (x_1'x_2x_3x_4')
               (x[3] & ~x[4] & x[1] & x[2])     // Corresponds to the 1 in the last row, second column (x_1x_2x_3x_4')
               ;
endmodule",10.654091,3578
4.256,65.53,0.1,35,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[2]) |
               (~x[1] & ~x[3] & x[4]) |
               (x[3] & x[4] & ~x[1]) |
               (x[4] & x[2] & ~x[1]) |
               (~x[4] & x[3] & x[2]) |
               (x[3] & ~x[4] & x[1] & ~x[2]);

endmodule",3.499009,3689
N/A,N/A,-0.1,36,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & ~x[1] & ~x[2]) | // x_3'x_4'x_1'x_2'
               (~x[3] & ~x[4] & x[1] & x[2]) |  // x_3'x_4'x_1x_2
               (x[3] & x[4] & ~x[1] & ~x[2]) |  // x_3x_4x_1'x_2'
               (x[3] & x[4] & x[1] & x[2]) |    // x_3x_4x_1x_2
               (x[3] & ~x[4] & ~x[1] & ~x[2]) | // x_3x_4'x_1'x_2'
               (x[3] & ~x[4] & ~x[1] & x[2]) |  // x_3x_4'x_1x_2
               (~x[3] & ~x[4] & x[1] & ~x[2]) | // x_3'x_4'x_1x_2'
               (x[3] & ~x[4] & x[1] & ~x[2]);   // x_3x_4'x_1x_2'

endmodule",7.849055,4000
N/A,N/A,-0.1,37,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[1]) | (~x[4] & x[1] & x[2]) | (~x[3] & ~x[4] & ~x[2]) | (x[3] & x[4] & ~x[1]);
endmodule",2.073054,4073
N/A,N/A,-0.1,38,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3] & ~x[2] & ~x[1]) |
           (x[4] & x[3] & x[2] & ~x[1])  |
           (x[4] & ~x[3] & ~x[2] & ~x[1]) |
           (~x[4] & ~x[3] & ~x[2] & x[1]) |
           (~x[4] & ~x[3] & x[2] & x[1]);
endmodule",3.74012,4199
N/A,N/A,-0.1,39,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[1] & x[2]) | (x[4] & x[3] & ~x[1]) | (~x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[1] & x[3]);
endmodule",2.113063,4277
N/A,N/A,-0.1,40,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & x[1]) | (~x[3] & ~x[2]) | (x[3] & x[2] & x[4]) | (~x[1] & x[4] & ~x[3]);
endmodule",1.683057,4337
N/A,N/A,-0.1,41,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[1]) | (~x[3] & ~x[2]) | (x[3] & ~x[1]) | (x[3] & ~x[4] & x[2]);

endmodule",2.520056,4399
N/A,N/A,-0.1,42,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & x[3] & ~x[2]) | (~x[4] & ~x[3] & ~x[1]) | (x[4] & ~x[3] & x[1]) | 
               (x[4] & ~x[3] & x[2]) | (~x[4] & x[3] & x[2] & x[1]);
endmodule",2.144075,4495
N/A,N/A,-0.1,43,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3] & x[2] & ~x[1]) |    // x_3x_4' group: covers 1001, 1011
               (~x[3] & ~x[4] & ~x[1]) |       // x_3'x_4' term: covers 0000, 0001
               (x[3] & ~x[4] & ~x[2] & ~x[1]) |// (implicit sum term in x_3x_4' group)
               (x[4] & x[3] & ~x[2]) |         // x_3x_4 term: covers 1100, 1101
               (~x[4] & ~x[2] & x[1] & x[3]);  // x_3x_4' term: covers 1110

endmodule",3.708123,4702
N/A,N/A,-0.1,44,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & x[3] & ~x[2]) | (~x[4] & x[3] & x[1]) | (x[4] & ~x[3] & ~x[2] & ~x[1]) | (~x[4] & ~x[3] & ~x[2] & x[1]);

endmodule",2.471057,4786
N/A,N/A,-0.1,45,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[1] & ~x[2] & ~x[3] & ~x[4]) | 
               (~x[1] &  x[2] &  x[3] &  x[4]) | 
               ( x[1] & ~x[2] &  x[3] & ~x[4]) | 
               ( x[1] & ~x[2] & ~x[3] &  x[4]) | 
               ( x[1] &  x[2] &  x[3] & ~x[4]);

endmodule",2.537092,4918
N/A,N/A,-0.1,46,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & ~x[1] & ~x[2]) |  // Term for x_1'x_2'x_3'x_4'
               (~x[3] & ~x[4] &  x[1] & x[2]) |  // Term for x_1x_2x_3'x_4'
               ( x[3] &  x[4] & ~x[1] & ~x[2]) | // Term for x_1'x_2'x_3x_4
               ( x[3] &  x[4] & ~x[1] &  x[2]) | // Term for x_1x_2'x_3x_4
               ( x[3] &  x[4] &  x[1] & x[2]) |  // Term for x_1x_2x_3x_4
               ( x[3] & ~x[4] &  x[1] & ~x[2]);  // Term for x_1x_2'x_3x_4'

endmodule",4.95206,5169
N/A,N/A,-0.1,47,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) | 
               (x[3] & x[4] & (x[2] | x[1])) | 
               (x[3] & ~x[4] & (x[1] ^ x[2]));
endmodule",2.867056,5245
N/A,N/A,-0.1,48,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) | 
               (x[3] & x[4] & (x[1] | x[2])) | 
               (~x[4] & x[3] & ~x[2]) |
               (x[3] & ~x[4] & x[1]);
endmodule",1.973063,5333
N/A,N/A,-0.1,49,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[1] & ~x[2] & ~x[3] & ~x[4]) |  // x_1'x_2'x_3'x_4'
               (~x[1] & x[2] & x[3] & x[4])  |   // x_1'x_2 x_3x_4
               (x[1] & x[2] & x[3] & x[4])   |   // x_1x_2 x_3x_4
               (x[1] & ~x[2] & ~x[3] & ~x[4]) | // x_1x_2'x_3'x_4'
               (x[1] & ~x[2] & x[3] & ~x[4]);   // x_1x_2'x_3x_4'
endmodule",3.553061,5530
N/A,N/A,-0.1,50,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) | (x[3] & x[4] & x[1]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.776056,5591
N/A,N/A,-0.1,51,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (~x[1] & ~x[2] | x[1] & x[2])) |
               (x[3] & x[4] & (~x[1] & ~x[2] | x[1] & x[2] | x[1] & ~x[2])) |
               (x[3] & ~x[4] & (x[1] & ~x[2] | ~x[1] & ~x[2]));
endmodule",2.974063,5711
N/A,N/A,-0.1,52,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & ~x[1] & ~x[2]) | 
               (~x[3] & ~x[4] & x[1] & ~x[2]) |
               (x[3] & x[4] & ~x[2]) |
               (x[3] & ~x[4] & x[1] & ~x[2]) |
               (x[3] & ~x[4] & ~x[1] & x[2]);

endmodule",2.609055,5830
N/A,N/A,-0.1,53,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = ((~x[3] & ~x[4] &  x[1] & ~x[2]) | 
                (~x[3] & ~x[4] & ~x[1] & ~x[2]) | 
                ( x[3] &  x[4] &  x[1] & ~x[2]) | 
                ( x[3] &  x[4] & ~x[1] &  x[2]) | 
                ( x[3] & ~x[4] &  x[1] & ~x[2]) | 
                (~x[3] & ~x[4] & ~x[1] & x[2]));

endmodule",4.236117,5988
N/A,N/A,-0.1,54,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] &  x[1] & ~x[2]) |
               ( x[4] &  x[3] & ~x[1] & ~x[2]) |
               ( x[4] &  x[3] &  x[1] & ~x[2]) |
               ( x[4] &  x[3] &  x[1] &  x[2]) |
               ( x[4] & ~x[3] & ~x[1] & ~x[2]) |
               ( x[4] & ~x[3] & ~x[1] &  x[2]);

endmodule",3.800075,6166
N/A,N/A,-0.1,55,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & ~x[2] & x[1]) | (x[4] & ~x[3] & x[2] & x[1]) | (~x[4] & ~x[3] & x[1] & x[2]) | (x[3] & x[4] & x[2] & ~x[1]) | (x[3] & ~x[4] & x[1] & ~x[2]) | (x[3] & ~x[4] & ~x[2] & x[1]) | (~x[3] & x[4] & x[2] & ~x[1]);

endmodule",3.482115,6344
N/A,N/A,-0.1,56,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[2] & ~x[1]) |   // Row 1, Col 1
               (x[4] & x[3] & x[2] & ~x[1])  |   // Row 3, Col 1
               (x[4] & x[3] & ~x[2] & x[1])  |   // Row 3, Col 2
               (x[4] & x[3] & x[2] & x[1])   |   // Row 3, Col 3
               (~x[4] & x[3] & ~x[2] & x[1]);    // Row 4, Col 2
endmodule",4.371059,6516
N/A,N/A,-0.1,57,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | (x[3] & x[2]) | (x[4] & ~x[1] & x[2]) | (~x[3] & ~x[4] & ~x[2] & x[1]);
endmodule",1.711057,6593
N/A,N/A,-0.1,58,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | 
               (x[4] & x[3] & ~x[2]) | 
               (x[4] & x[3] & x[1]) | 
               (~x[4] & ~x[3] & ~x[2] & ~x[1]) | 
               (~x[4] & x[3] & x[2]);
               
endmodule",2.185058,6697
N/A,N/A,-0.1,59,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) | 
               (x[3] & x[4] & x[1]) | 
               (x[3] & ~x[4] & (x[1] ^ ~x[2]));

endmodule",1.911514,6768
N/A,N/A,-0.1,60,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[2] & ~x[1]) | 
               (~x[3] & ~x[4] & x[1]) | 
               (x[3] & x[4] & ~x[1]) | 
               (x[3] & x[2] & x[1]);

endmodule",2.346055,6846
N/A,N/A,-0.1,61,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) | (x[3] & x[4] & x[2]) | (x[3] & ~x[4] & (x[1] | x[2]));
endmodule",1.969124,6912
N/A,N/A,-0.1,62,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[3] & ~x[4] & x[1]) |
               (x[3] & x[4] & (x[1] | x[2])) |
               (x[3] & ~x[4] & (~x[1] | x[2]));

endmodule",2.269048,6984
N/A,N/A,-0.1,63,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);



    assign f = (~x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (x[4] & ~x[3] & ~x[1]) | (x[4] & ~x[3] & x[2]);

endmodule",1.979119,7075
N/A,N/A,-0.1,64,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[1] & ~x[2] & ~x[3] & ~x[4]) |
               (~x[1] & x[2] & x[3] & ~x[4]) |
               (x[1] & x[2] & x[3] & x[4]) |
               (~x[1] & x[2] & ~x[3] & ~x[4]) |
               (x[1] & ~x[2] & x[3] & ~x[4]);
endmodule",2.633059,7196
N/A,N/A,-0.1,65,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = ~x[3] & ~x[2] & ~x[1] | x[4] & x[3] & ~x[1] | ~x[3] & x[4] & ~x[2] | x[3] & x[2] & x[1] | x[4] & x[2] & ~x[1];
endmodule",6.621312,7282
N/A,N/A,-0.1,66,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[2] & ~x[1]) | (x[4] & ~x[3]) | (x[4] & x[2] & x[1]);

endmodule",1.348051,7332
N/A,N/A,-0.1,67,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[1]) | (~x[3] & ~x[2] & ~x[1]) | (x[3] & x[4] & x[2]) | (x[3] & ~x[4] & ~x[1]) | (x[3] & ~x[4] & x[2]);
endmodule",2.26706,7417
N/A,N/A,-0.1,68,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[3] & ~x[2] & ~x[1] & ~x[4]) | 
               (~x[3] & ~x[2] & x[1] & x[4])  |
               (x[3] & x[2] & ~x[1] & ~x[4]) |
               (x[3] & x[2] & ~x[1] & x[4])  |
               (x[3] & x[2] & x[1] & ~x[4]);

endmodule",2.350114,7547
N/A,N/A,-0.1,69,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3]) | (~x[4] & x[1] & ~x[2]) | (~x[3] & ~x[2] & ~x[1]) | (x[3] & ~x[4] & x[2] & x[1]) | (~x[3] & x[4] & x[2] & x[1]);

endmodule",5.719088,7641
N/A,N/A,-0.1,70,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | 
               (x[4] & x[3] & ~x[2]) |
               (x[4] & x[3] & x[1]) |
               (~x[4] & ~x[3] & x[1]) |
               (~x[4] & x[3] & x[2] & ~x[1]);
endmodule",2.429059,7740
N/A,N/A,-0.1,71,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[2]) | (~x[3] & x[1]) | (x[4] & x[3] & x[2]) | (~x[2] & x[1] & ~x[3]);
endmodule",1.513072,7800
N/A,N/A,-0.1,72,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & x[1]) | 
               (x[3] & x[4] & (x[1] | x[2])) | 
               (x[3] & ~x[4] & (x[1] | x[2]));
endmodule",1.822097,7870
N/A,N/A,-0.1,73,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] | ~x[2])) | 
               (x[3] & ((x[4] & (x[1] ^ x[2])) | (~x[4] & (x[1] | ~x[2]))));

endmodule",1.912065,7942
N/A,N/A,-0.1,74,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | (~x[4] &  x[3] & ~x[2]) | (x[4] & x[3] & ~x[2]) | (x[4] & ~x[3] & ~x[1]);

endmodule",1.681124,8017
N/A,N/A,-0.1,75,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] &  x[3] & ~x[1]) | 
               ( x[4] & ~x[3] & ~x[2]) | 
               ( x[4] &  x[3] & ~x[2] &  x[1]) | 
               (~x[4] & ~x[3] & ~x[2] & ~x[1]);
endmodule",1.878073,8111
N/A,N/A,-0.1,76,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[3] & ~x[4] & x[1]) | (x[3] & x[4] & x[1]) | (x[3] & ~x[4] & ~x[2]) | (~x[3] & ~x[1] & x[4]) | (x[1] & x[4] & ~x[2]);
endmodule",2.146058,8206
N/A,N/A,-0.1,77,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & x[3] & x[1]) |
               (x[4] & x[3] & ~x[2]) |
               (x[4] & ~x[3] & ~x[2] & ~x[1]);
endmodule",2.187069,8295
N/A,N/A,-0.1,78,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | 
               (x[3] & ~x[2]) | 
               (~x[4] & x[3] & x[2]) |
               (x[4] & ~x[2] & x[1]) |
               (~x[4] & x[2] & ~x[1]);

endmodule",2.270067,8385
N/A,N/A,-0.1,79,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[3] & ~x[1]) | 
               (x[4] & x[3] & ~x[2])  | 
               (x[4] & x[3] & x[2] & x[1]) | 
               (~x[4] & ~x[3] & ~x[2] & x[1]) |
               (~x[4] & x[3] & ~x[2] & x[1]);
endmodule",5.32607,8504
N/A,N/A,-0.1,80,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) | (x[3] & x[4] & (x[1] | x[2])) | (x[3] & ~x[4] & ~x[2]) | (~x[3] & x[4] & x[1]);

endmodule",2.244062,8587
N/A,N/A,-0.1,81,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (~x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[2]) | (x[4] & x[3] & ~x[2]) | (x[4] & ~x[3] & x[1]) | (x[4] & x[3] & x[1]);
endmodule",2.498059,8681
N/A,N/A,-0.1,82,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[2] & ~x[1]) | (x[3] & ~x[1]) | (x[2] & x[4]) | (~x[1] & ~x[4]);

endmodule",1.769057,8738
N/A,N/A,-0.1,83,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[1]) | (x[3] & x[2]) | (~x[4] & ~x[3] & x[1]);
endmodule",1.281056,8782
N/A,N/A,-0.1,84,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & ~x[2]) | (~x[4] & x[3] & x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]);

endmodule",1.874051,8861
N/A,N/A,-0.1,85,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[1] & ~x[2] & ~x[3]) |  // 0000
               (~x[4] &  x[1] &  x[2] & ~x[3]) |  // 1100
               ( x[4] & ~x[1] & ~x[2] & ~x[3]) |  // 1000
               ( x[4] & ~x[1] &  x[2] & ~x[3]) |  // 1010
               ( x[4] &  x[1] & ~x[2] & ~x[3]) |  // 0100
               ( x[4] &  x[1] & ~x[2] &  x[3]);   // 0101

endmodule",7.234081,9050
N/A,N/A,-0.1,86,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3]) | (~x[3] & ~x[1] & ~x[2]) | (x[3] & (x[4] | ~x[2])) | (~x[4] & x[3] & x[1]);

endmodule",1.893075,9118
N/A,N/A,-0.1,87,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & ~x[2]) | (~x[4] & x[3] & ~x[2] & x[1]) | (~x[4] & ~x[3] & ~x[2] & ~x[1]);
endmodule",2.554109,9203
N/A,N/A,-0.1,88,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | (~x[4] & x[3] & x[1]) | (~x[4] & ~x[3] & ~x[2]) | (x[4] & x[3] & x[2]) | (x[4] & ~x[3] & ~x[2]);
endmodule",2.176113,9293
N/A,N/A,-0.1,89,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) |
               (x[3] & x[4] & ~x[1]) |
               (x[3] & ~x[4] & x[2]) |
               (~x[3] & x[4] & ~x[2]);
               
endmodule",1.877054,9375
N/A,N/A,-0.1,90,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (~x[1] & ~x[2] | x[1] & x[2])) |
               (x[3] & x[4] & x[1]) |
               (x[3] & ~x[4] & (~x[2] & ~x[1] | x[1]));
               
endmodule",1.93107,9461
N/A,N/A,-0.1,91,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[2] & ~x[1] & ~x[4]) | // x_3'x_2'x_1'x_4'
               (~x[3] & x[2] & x[1] & ~x[4]) |   // x_3'x_2x_1x_4'
               (x[3] & x[2] & x[1] & x[4]) |     // x_3x_2x_1x_4
               (x[3] & x[2] & ~x[1] & ~x[4]) |   // x_3x_2x_1'x_4'
               (x[3] & ~x[2] & ~x[1] & ~x[4]);   // x_3x_2'x_1'x_4'
endmodule",3.268067,9657
N/A,N/A,-0.1,92,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[4] & (x[1] ^ x[2])) |
               ( x[3] &  x[4] & (x[1] | x[2])) |
               ( x[3] & ~x[4] & ~x[2]) |
               (~x[3] & ~x[4] & x[1]);
endmodule",2.366047,9745
N/A,N/A,-0.1,93,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3] & ~x[2]) | (~x[3] & ~x[4] & ~x[2] & ~x[1]) | (~x[2] & x[1] & x[3] & x[4]) | (~x[4] & ~x[2] & ~x[3] & x[1]);
endmodule",1.886051,9838
N/A,N/A,-0.1,94,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & ~x[2]) | (x[3] & ~x[1]) | (x[4] & x[3] & ~x[1]) | (x[3] & x[2]);
endmodule",1.563058,9900
N/A,N/A,-0.1,95,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[3] & ~x[2] & ~x[4]) | (~x[3] & x[1] & ~x[4]) | (x[3] & x[2]) | (~x[4] & x[3] & x[1]);
    
endmodule",1.575051,9967
N/A,N/A,-0.1,96,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


assign f = (x[4] & x[3] & ~x[2]) |         // Row x_3x_4, terms x_1'x_2' & x_1'x_2
           (x[4] & x[2] & x[1]) |         // Row x_3x_4, term x_1x_2
           (x[3] & x[1] & ~x[2] & ~x[4]) | // Row x_3'x_4', term x_1x_2'
           (~x[3] & ~x[4] & ~x[1] & x[4]) |// Row x_3'x_4', term x_1'x_2'
           (~x[3] & ~x[4] & x[1] & x[4]);  // Row x_3'x_4', terms x_1'x_2'

endmodule",3.498119,10178
N/A,N/A,-0.1,97,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & x[1]) |    // x_3'x_4'x_1'x_2'
               (~x[4] & ~x[3] & x[2] & ~x[1]) |    // x_3'x_4'x_1x_2'
               (x[4] & x[3] & ~x[2] & x[1])  |     // x_3x_4x_1'x_2'
               (x[4] & x[3] & x[2] & x[1])   |     // x_3x_4x_1x_2
               (x[4] & x[3] & x[2] & ~x[1]) ;      // x_3x_4x_1x_2'
endmodule",3.442077,10375
N/A,N/A,-0.1,98,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) | 
               (~x[4] & ~x[3] & x[1] & x[2])  |
               (x[4] & x[3] & ~x[2]) |
               (x[4] & ~x[2] & ~x[1]) |
               (~x[1] & x[3] & x[2] & x[4]);

endmodule",4.638047,10487
N/A,N/A,-0.1,99,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (x[4] & ~x[3] & ~x[1]) | (x[3] & (x[1] | ~x[2])) | (~x[4] & ~x[2] & ~x[1]);
endmodule",1.461067,10545
