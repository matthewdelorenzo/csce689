Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-0.1,0,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.253074,279
N/A,N/A,-0.1,1,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.73884,558
N/A,N/A,-0.1,2,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        hours <= hours + 8'd1;
                        if (hours == 8'd11) begin
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when hour goes from 11 to 12
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end
endmodule",4.437707,854
N/A,N/A,-0.1,3,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.524728,1133
N/A,N/A,-0.1,4,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.137767,1412
N/A,N/A,-0.1,5,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.583859,1691
N/A,N/A,-0.1,6,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",7.0017,1998
N/A,N/A,-0.1,7,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.543705,2277
N/A,N/A,-0.1,8,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.526721,2556
N/A,N/A,-0.1,9,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.486854,2835
N/A,N/A,-0.1,10,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",5.795747,3114
N/A,N/A,-0.1,11,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.111853,3393
N/A,N/A,-0.1,12,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.980681,3672
N/A,N/A,-0.1,13,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.094776,3951
N/A,N/A,-0.1,14,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.195741,4230
N/A,N/A,-0.1,15,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.177693,4509
N/A,N/A,-0.1,16,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.565753,4788
N/A,N/A,-0.1,17,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.006823,5067
N/A,N/A,-0.1,18,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        hours <= hours + 8'd1;
                        if (hours == 8'd11) begin
                            pm_reg <= ~pm_reg;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end
endmodule",3.180713,5347
N/A,N/A,-0.1,19,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.543794,5626
N/A,N/A,-0.1,20,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.900812,5905
N/A,N/A,-0.1,21,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd11) begin
                        hours <= 8'd12;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd12) begin
                        hours <= 8'd1;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.289745,6184
N/A,N/A,-0.1,22,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.564795,6463
N/A,N/A,-0.1,23,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.90175,6742
N/A,N/A,-0.1,24,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.485825,7021
N/A,N/A,-0.1,25,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.065796,7300
N/A,N/A,-0.1,26,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.19366,7579
N/A,N/A,-0.1,27,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.8618,7858
N/A,N/A,-0.1,28,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",4.236158,8165
N/A,N/A,-0.1,29,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.002795,8444
N/A,N/A,-0.1,30,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.525794,8723
N/A,N/A,-0.1,31,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",3.561736,9030
N/A,N/A,-0.1,32,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.281672,9309
N/A,N/A,-0.1,33,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.912692,9588
N/A,N/A,-0.1,34,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",3.60382,9895
N/A,N/A,-0.1,35,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.616834,10174
N/A,N/A,-0.1,36,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.12577,10453
N/A,N/A,-0.1,37,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end
endmodule",3.057793,10753
N/A,N/A,-0.1,38,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",5.238693,11032
N/A,N/A,-0.1,39,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.251792,11311
N/A,N/A,-0.1,40,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.354775,11590
N/A,N/A,-0.1,41,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.116709,11869
N/A,N/A,-0.1,42,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.447718,12148
N/A,N/A,-0.1,43,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd11) begin
                        hours <= 8'd12;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd12) begin
                        hours <= 8'd1;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.509865,12427
N/A,N/A,-0.1,44,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.128804,12706
N/A,N/A,-0.1,45,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd11) begin
                        hours <= 8'd12;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd12) begin
                        hours <= 8'd1;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.772104,12985
N/A,N/A,-0.1,46,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.504711,13264
N/A,N/A,-0.1,47,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.356761,13543
N/A,N/A,-0.1,48,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.784651,13822
N/A,N/A,-0.1,49,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",3.14668,14129
N/A,N/A,-0.1,50,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.283786,14408
N/A,N/A,-0.1,51,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",5.35183,14687
N/A,N/A,-0.1,52,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.90171,14966
N/A,N/A,-0.1,53,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.017752,15245
N/A,N/A,-0.1,54,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.837701,15524
N/A,N/A,-0.1,55,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.002676,15803
N/A,N/A,-0.1,56,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.115659,16082
N/A,N/A,-0.1,57,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.004871,16361
N/A,N/A,-0.1,58,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.315821,16640
N/A,N/A,-0.1,59,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",3.911803,16947
N/A,N/A,-0.1,60,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.665711,17226
N/A,N/A,-0.1,61,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.945692,17505
N/A,N/A,-0.1,62,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",3.915713,17812
N/A,N/A,-0.1,63,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.03672,18091
N/A,N/A,-0.1,64,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.95372,18370
N/A,N/A,-0.1,65,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.504269,18649
N/A,N/A,-0.1,66,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.495791,18928
N/A,N/A,-0.1,67,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.91671,19207
N/A,N/A,-0.1,68,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.688749,19486
N/A,N/A,-0.1,69,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.239774,19765
N/A,N/A,-0.1,70,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.853818,20044
N/A,N/A,-0.1,71,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.967813,20323
N/A,N/A,-0.1,72,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.124777,20602
N/A,N/A,-0.1,73,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.694692,20881
N/A,N/A,-0.1,74,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.948773,21160
N/A,N/A,-0.1,75,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd11) begin
                        hours <= 8'd12;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd12) begin
                        hours <= 8'd1;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.623764,21439
N/A,N/A,-0.1,76,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.413735,21718
N/A,N/A,-0.1,77,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.332868,21997
N/A,N/A,-0.1,78,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.783876,22276
N/A,N/A,-0.1,79,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.013688,22555
N/A,N/A,-0.1,80,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",5.195849,22862
N/A,N/A,-0.1,81,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.357682,23141
N/A,N/A,-0.1,82,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.23771,23420
N/A,N/A,-0.1,83,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.980705,23699
N/A,N/A,-0.1,84,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.781713,23978
N/A,N/A,-0.1,85,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.050804,24257
N/A,N/A,-0.1,86,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.442704,24536
N/A,N/A,-0.1,87,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd11) begin
                        hours <= 8'd12;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd12) begin
                        hours <= 8'd1;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.606731,24815
N/A,N/A,-0.1,88,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.936832,25094
N/A,N/A,-0.1,89,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.322039,25373
N/A,N/A,-0.1,90,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.068848,25652
N/A,N/A,-0.1,91,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.773833,25931
N/A,N/A,-0.1,92,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.104744,26210
N/A,N/A,-0.1,93,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        if (hours == 8'd11) begin
                            hours <= 8'd12;
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when 11 turns to 12
                        end else begin
                            hours <= hours + 8'd1;
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end

endmodule",3.175742,26517
N/A,N/A,-0.1,94,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.762825,26796
N/A,N/A,-0.1,95,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",2.847869,27075
N/A,N/A,-0.1,96,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        hours <= hours + 8'd1;
                        if (hours == 8'd11) begin
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when hour goes from 11 to 12
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end
endmodule",3.183842,27371
N/A,N/A,-0.1,97,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",3.366778,27650
N/A,N/A,-0.1,98,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            hours <= 8'd12;
            minutes <= 8'd0;
            seconds <= 8'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else begin
                        hours <= hours + 8'd1;
                        if (hours == 8'd11) begin
                            pm_reg <= ~pm_reg;  // Toggle AM/PM when hour goes from 11 to 12
                        end
                    end
                end else begin
                    minutes <= minutes + 8'd1;
                end
            end else begin
                seconds <= seconds + 8'd1;
            end
        end
    end
endmodule",5.440888,27946
N/A,N/A,-0.1,99,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds, minutes, hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            seconds <= 8'd0;
            minutes <= 8'd0;
            hours <= 8'd12;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'd59) begin
                seconds <= 8'd0;
                // Increment minutes
                if (minutes == 8'd59) begin
                    minutes <= 8'd0;
                    // Increment hours
                    if (hours == 8'd12) begin
                        hours <= 8'd1;
                        pm_reg <= ~pm_reg;  // Toggle AM/PM
                    end else if (hours == 8'd11) begin
                        hours <= 8'd12;
                    end else begin
                        hours <= hours + 1'b1;
                    end
                end else begin
                    minutes <= minutes + 1'b1;
                end
            end else begin
                seconds <= seconds + 1'b1;
            end
        end
    end

endmodule",4.099649,28225
