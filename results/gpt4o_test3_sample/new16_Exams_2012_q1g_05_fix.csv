Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-0.1,0,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) ;
endmodule",3.247603,161
N/A,N/A,-0.1,1,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] & ~x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) | 
               (~x[3] &  x[2] & ~x[1]);

endmodule",2.871619,341
N/A,N/A,-0.1,2,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[3] &  x[2] & ~x[1]) | 
               ( x[3] &  x[2] & ~x[1]) | 
               ( x[4] & x[3] &  x[2] &  x[1]);
endmodule",2.424586,506
N/A,N/A,-0.1,3,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] & ~x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) | 
               (~x[3] &  x[2] & ~x[1]);

endmodule",2.51367,686
N/A,N/A,-0.1,4,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]) |
               ( x[4] & ~x[3] & x[2] & ~x[1]);
endmodule",2.777743,861
N/A,N/A,-0.1,5,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (~x[4] & x[3] & x[2] & x[1]);

endmodule",2.101655,1009
N/A,N/A,-0.1,6,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[3] &  x[2] & ~x[1]) | 
               ( x[3] &  x[4] & (x[2] | x[1])) | 
               (~x[4] &  x[3] &  x[2] & ~x[1]) ;
               
endmodule",3.123605,1182
N/A,N/A,-0.1,7,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",2.027574,1273
N/A,N/A,-0.1,8,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.035734,1400
N/A,N/A,-0.1,9,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",2.483739,1575
N/A,N/A,-0.1,10,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.051676,1702
N/A,N/A,-0.1,11,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])          |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.567553,1793
N/A,N/A,-0.1,12,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])          |
               (x[4] & ~x[3] & ~x[2]);        

endmodule",1.671694,1884
N/A,N/A,-0.1,13,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 
endmodule",1.545828,1975
N/A,N/A,-0.1,14,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               (~x[4] &  x[3] &  x[2] & ~x[1]);
endmodule",4.37168,2127
N/A,N/A,-0.1,15,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               (~x[4] &  x[3] &  x[2] & ~x[1]) ;
endmodule",3.16261,2279
N/A,N/A,-0.1,16,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",1.82757,2390
N/A,N/A,-0.1,17,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);

endmodule",2.206681,2501
N/A,N/A,-0.1,18,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.876635,2592
N/A,N/A,-0.1,19,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) |  // x_1'x_3'x_4'
               (~x[4] & ~x[3] & x[2]) |   // x_2x_3'x_4'
               (x[4] & x[3] & ~x[2]) |    // x_2'x_3x_4
               (x[4] & x[3] & x[1]);      // x_1x_3x_4

endmodule",1.767533,2715
N/A,N/A,-0.1,20,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])          |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.569558,2806
N/A,N/A,-0.1,21,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",1.732563,2917
N/A,N/A,-0.1,22,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);

endmodule",2.047575,3028
N/A,N/A,-0.1,23,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) ;
endmodule",2.400607,3189
N/A,N/A,-0.1,24,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) |  // x_1'x_3'x_4'
               (~x[4] & ~x[3] & x[2]) |   // x_2x_3'x_4'
               (x[4] & x[3] & ~x[2]) |    // x_2'x_3x_4
               (x[4] & x[3] & x[1]);      // x_1x_3x_4

endmodule",1.965574,3312
N/A,N/A,-0.1,25,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.690729,3439
N/A,N/A,-0.1,26,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])          |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",2.026659,3530
N/A,N/A,-0.1,27,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])          |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.761668,3621
N/A,N/A,-0.1,28,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (~x[4] & x[3] & x[2] & x[1]);

endmodule",2.232662,3769
N/A,N/A,-0.1,29,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])          |
               (x[4] & ~x[3] & ~x[2]);        

endmodule",1.81855,3860
N/A,N/A,-0.1,30,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) |  // x_1'x_3'x_4'
               (~x[4] & ~x[3] & x[2]) |   // x_2x_3'x_4'
               (x[4] & x[3] & ~x[2]) |    // x_2'x_3x_4
               (x[4] & x[3] & x[1]);      // x_1x_3x_4

endmodule",3.090691,3983
N/A,N/A,-0.1,31,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.258692,4110
N/A,N/A,-0.1,32,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.901713,4201
N/A,N/A,-0.1,33,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               (~x[4] &  x[3] & ~x[2] & ~x[1]);
endmodule",3.122598,4353
N/A,N/A,-0.1,34,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",4.808937,4444
N/A,N/A,-0.1,35,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.856644,4571
N/A,N/A,-0.1,36,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) ;
endmodule",5.850957,4732
N/A,N/A,-0.1,37,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);

endmodule",1.859533,4843
N/A,N/A,-0.1,38,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[2] & ~x[1]) | 
               ( x[4] & ~x[3] & ~x[2] &  x[1]);

endmodule",2.168654,4957
N/A,N/A,-0.1,39,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]);

endmodule",2.475563,5109
N/A,N/A,-0.1,40,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",3.787581,5200
N/A,N/A,-0.1,41,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);

endmodule",1.9386,5311
N/A,N/A,-0.1,42,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);

endmodule",2.376663,5422
N/A,N/A,-0.1,43,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[3] &  x[2] & ~x[1]) | 
               ( x[3] &  x[4] & ( x[2] | ~x[1]));
    
endmodule",2.828677,5569
N/A,N/A,-0.1,44,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (~x[4] & x[3] & x[2] & x[1]);

endmodule",2.86568,5717
N/A,N/A,-0.1,45,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]);

endmodule",2.851681,5868
N/A,N/A,-0.1,46,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.859599,5995
N/A,N/A,-0.1,47,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) ;
endmodule",3.092611,6156
N/A,N/A,-0.1,48,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.480594,6283
N/A,N/A,-0.1,49,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.153604,6410
N/A,N/A,-0.1,50,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",2.307632,6501
N/A,N/A,-0.1,51,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) ;
endmodule",4.148613,6662
N/A,N/A,-0.1,52,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]);

endmodule",3.103658,6813
N/A,N/A,-0.1,53,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.89758,6904
N/A,N/A,-0.1,54,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & x[3] & ~x[2]) | 
               (x[4] & x[3] & x[2]) | 
               (x[4] & ~x[3] & ~x[2]) | 
               (x[4] & ~x[3] & ~x[1]);
endmodule",2.264639,7003
N/A,N/A,-0.1,55,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);

endmodule",2.559589,7114
N/A,N/A,-0.1,56,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",3.929601,7241
N/A,N/A,-0.1,57,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (x[4] & ~x[3] & x[2] & ~x[1]);
endmodule",2.564664,7391
N/A,N/A,-0.1,58,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]) |
               ( x[4] & ~x[3] & x[2] & ~x[1]);
endmodule",2.669697,7566
N/A,N/A,-0.1,59,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",2.343621,7677
N/A,N/A,-0.1,60,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | (x[4] & x[3] & (~x[2] | ~x[1])) | (~x[4] & x[3] & x[2]);
endmodule",2.134533,7738
N/A,N/A,-0.1,61,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[4] &  x[3] &  x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] & ~x[2]) ;
endmodule",3.539651,7899
N/A,N/A,-0.1,62,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (x[4] & ~x[3] & x[2] & ~x[1]);
endmodule",2.356613,8049
N/A,N/A,-0.1,63,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & x[3] & ~x[2]) | 
               (x[4] & x[3] & x[2]) | 
               (x[4] & ~x[3] & ~x[2]) | 
               (x[4] & ~x[3] & ~x[1]);
endmodule",2.187563,8148
N/A,N/A,-0.1,64,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.740613,8239
N/A,N/A,-0.1,65,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (~x[4] & x[3] & x[2] & x[1]);

endmodule",2.722601,8387
N/A,N/A,-0.1,66,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]);

endmodule",4.209594,8538
N/A,N/A,-0.1,67,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) |  // x_1'x_3'x_4'
               (~x[4] & ~x[3] & x[2]) |   // x_2x_3'x_4'
               (x[4] & x[3] & ~x[2]) |    // x_2'x_3x_4
               (x[4] & x[3] & x[1]);      // x_1x_3x_4

endmodule",2.398632,8661
N/A,N/A,-0.1,68,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);

endmodule",2.02966,8772
N/A,N/A,-0.1,69,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",5.364637,8899
N/A,N/A,-0.1,70,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",2.986452,9010
N/A,N/A,-0.1,71,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",2.031689,9121
N/A,N/A,-0.1,72,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               (~x[4] &  x[3] &  x[2] & ~x[1]) ;
endmodule",2.459694,9273
N/A,N/A,-0.1,73,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",3.23957,9384
N/A,N/A,-0.1,74,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] & ~x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) ;
endmodule",2.899581,9545
N/A,N/A,-0.1,75,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] & ~x[1]) | 
               (~x[4] &  x[3] &  x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) | 
               (~x[3] &  x[2] & ~x[1]);

endmodule",3.563578,9725
N/A,N/A,-0.1,76,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] &  x[1] & x[2]) |
               ( x[4] &  x[3] & ~x[1] & ~x[2]) |
               ( x[4] &  x[3] & ~x[1] & x[2]) |
               ( x[4] &  x[3] &  x[1] & ~x[2]) |
               ( x[4] & ~x[3] & ~x[1] & ~x[2]) |
               ( x[4] & ~x[3] & ~x[1] & x[2]);
endmodule",3.000683,9900
N/A,N/A,-0.1,77,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & ~x[2] & x[1])    |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (x[4] & ~x[3] & x[2] & x[1]);

endmodule",2.455929,10048
N/A,N/A,-0.1,78,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (~x[4] & x[3] & x[2] & x[1]);

endmodule",4.299919,10196
N/A,N/A,-0.1,79,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] & ~x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) ;
endmodule",5.910615,10357
N/A,N/A,-0.1,80,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",1.973567,10468
N/A,N/A,-0.1,81,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & x[1]) | 
               ( x[4] &  x[3] & ~x[1]) | 
               ( x[4] &  x[3] &  x[2]) |
               ( x[4] & ~x[3] & ~x[2] & x[1]);
endmodule",2.084755,10579
N/A,N/A,-0.1,82,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.930681,10670
N/A,N/A,-0.1,83,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])          |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.901678,10761
N/A,N/A,-0.1,84,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",2.02766,10852
N/A,N/A,-0.1,85,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & x[3] & ~x[2]) | 
               (x[4] & x[3] & x[2]) | 
               (x[4] & ~x[3] & ~x[2]) | 
               (x[4] & ~x[3] & ~x[1]);
endmodule",1.91553,10951
N/A,N/A,-0.1,86,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] &  x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]);

endmodule",2.456385,11078
N/A,N/A,-0.1,87,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]) |
               ( x[4] & ~x[3] & x[2] & ~x[1]);
endmodule",2.693048,11253
N/A,N/A,-0.1,88,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]) |
               ( x[4] & ~x[3] & x[2] & ~x[1]);
endmodule",2.770809,11428
N/A,N/A,-0.1,89,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.529607,11519
N/A,N/A,-0.1,90,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] &  x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) ;
endmodule",2.564417,11680
N/A,N/A,-0.1,91,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]);

endmodule",2.482335,11831
N/A,N/A,-0.1,92,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) | 
               (~x[4] & ~x[3] &  x[2] & ~x[1]) | 
               ( x[4] &  x[3] & ~x[2] & ~x[1]) | 
               ( x[4] & ~x[3] &  x[2] & ~x[1]) | 
               (~x[4] &  x[3] & ~x[2]) | 
               ( x[4] &  x[3] &  x[2]) | 
               ( x[4] & ~x[3] &  x[2]) | 
               (~x[3] &  x[2] & ~x[1]);

endmodule",3.374846,12011
N/A,N/A,-0.1,93,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])          |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",3.834934,12102
N/A,N/A,-0.1,94,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (~x[4] & x[3] & x[2] & x[1]);

endmodule",2.376336,12250
N/A,N/A,-0.1,95,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.909412,12341
N/A,N/A,-0.1,96,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] & x[2] & x[1])   |
               (x[4] & x[3] & ~x[2] & ~x[1])   |
               (x[4] & x[3] & x[2] & ~x[1])    |
               (~x[4] & x[3] & ~x[2] & ~x[1])  |
               (x[4] & ~x[3] & x[2] & ~x[1]);
    
endmodule",2.671808,12492
N/A,N/A,-0.1,97,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1]) |  // x_1'x_3'x_4'
               (~x[4] & ~x[3] & x[1]) |   // x_1x_3'x_4'
               (x[4] & x[3] & ~x[2]) |    // x_2'x_3x_4
               (x[4] & x[3] & x[2] & ~x[1]) | // x_1'x_2x_3x_4
               (x[4] & x[3] & x[2] & x[1] & ~x[0]) | // x_0'x_1x_2x_3x_4
               (x[4] & ~x[3] & x[2] & ~x[1]);  // x_1'x_2x_3'x_4

endmodule",4.366861,12707
N/A,N/A,-0.1,98,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[2] & ~x[1]) |
               (~x[4] & ~x[3] &  x[2] & x[1]) |
               ( x[4] &  x[3] & ~x[2] & ~x[1]) |
               ( x[4] &  x[3] & ~x[2] & x[1]) |
               ( x[4] &  x[3] &  x[2] & ~x[1]) |
               ( x[4] & ~x[3] & ~x[2] & ~x[1]);

endmodule",2.970451,12858
N/A,N/A,-0.1,99,0,"// Consider the function f shown in the Karnaugh map below. Implement this function.
//         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'
// x_3'x_4'	1		0		0		1
// x_3'x_4		0		0		0		0
// x_3x_4  	1		1		1		0
// x_3x_4'		1		1		0		1

// Hint: Be careful of the ordering of the x[4:1] input bits in the Karnaugh map.

module top_module (
    input [4:1] x,
    output f
);


    assign f = (~x[4] & ~x[3] & ~x[1] & ~x[2]) |
               (~x[4] & ~x[3] & x[1] & x[2])   |
               (x[4] & x[3] & ~x[2])           |
               (x[4] & ~x[3] & ~x[2]); 

endmodule",1.840834,12949
