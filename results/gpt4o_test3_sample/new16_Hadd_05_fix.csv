Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
4.256,74.12,0.1,0,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.970163,40
4.256,74.12,0.1,1,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",2.316186,80
4.256,74.12,0.1,2,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.671173,120
4.256,74.12,0.1,3,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.577217,161
4.256,74.12,0.1,4,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;
    assign cout = a & b;
endmodule",1.471171,178
4.256,74.12,0.1,5,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.762159,218
4.256,74.12,0.1,6,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.677165,258
4.256,74.12,0.1,7,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.632166,298
4.256,74.12,0.1,8,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.889184,338
4.256,74.12,0.1,9,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.684187,378
4.256,74.12,0.1,10,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.596172,418
4.256,74.12,0.1,11,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.662166,458
4.256,74.12,0.1,12,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.971162,498
4.256,74.12,0.1,13,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.611156,539
4.256,74.12,0.1,14,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.550163,580
4.256,74.12,0.1,15,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.580151,621
4.256,74.12,0.1,16,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.61917,662
4.256,74.12,0.1,17,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.560167,702
4.256,74.12,0.1,18,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.634168,742
4.256,74.12,0.1,19,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.696156,782
4.256,74.12,0.1,20,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.556186,823
4.256,74.12,0.1,21,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.519166,863
4.256,74.12,0.1,22,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.568162,904
4.256,74.12,0.1,23,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.730159,944
4.256,74.12,0.1,24,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.654168,984
4.256,74.12,0.1,25,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.583163,1024
4.256,74.12,0.1,26,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.624177,1064
4.256,74.12,0.1,27,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.785196,1104
4.256,74.12,0.1,28,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.583175,1144
4.256,74.12,0.1,29,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.543165,1184
4.256,74.12,0.1,30,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.792195,1224
4.256,74.12,0.1,31,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",2.136162,1264
4.256,74.12,0.1,32,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.682128,1304
4.256,74.12,0.1,33,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.627172,1344
4.256,74.12,0.1,34,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.603178,1385
4.256,74.12,0.1,35,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.959162,1425
4.256,74.12,0.1,36,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.654171,1465
4.256,74.12,0.1,37,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.532192,1505
4.256,74.12,0.1,38,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.581018,1545
4.256,74.12,0.1,39,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // XOR gate for sum
    assign sum = a ^ b;
    // AND gate for carry-out
    assign cout = a & b;
endmodule",1.807194,1577
4.256,74.12,0.1,40,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.66919,1617
4.256,74.12,0.1,41,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.83417,1658
4.256,74.12,0.1,42,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.703195,1698
4.256,74.12,0.1,43,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.745186,1738
4.256,74.12,0.1,44,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.634188,1779
4.256,74.12,0.1,45,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.80421,1820
4.256,74.12,0.1,46,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;

endmodule",2.226182,1854
4.256,74.12,0.1,47,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.802195,1894
4.256,74.12,0.1,48,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.671185,1934
4.256,74.12,0.1,49,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.734161,1974
4.256,74.12,0.1,50,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.725159,2014
4.256,74.12,0.1,51,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.587203,2054
4.256,74.12,0.1,52,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.592164,2094
4.256,74.12,0.1,53,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.701158,2135
4.256,74.12,0.1,54,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;

endmodule",1.665143,2169
4.256,74.12,0.1,55,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;

endmodule",2.212162,2203
4.256,74.12,0.1,56,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",2.292175,2243
4.256,74.12,0.1,57,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.680152,2283
4.256,74.12,0.1,58,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",2.098186,2323
4.256,74.12,0.1,59,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.869329,2363
4.256,74.12,0.1,60,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.609164,2403
4.256,74.12,0.1,61,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.680168,2443
4.256,74.12,0.1,62,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.68017,2483
4.256,74.12,0.1,63,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.56618,2523
4.256,74.12,0.1,64,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.672702,2563
4.256,74.12,0.1,65,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.538196,2603
4.256,74.12,0.1,66,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",2.035164,2643
4.256,74.12,0.1,67,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",2.244192,2683
4.256,74.12,0.1,68,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.576167,2723
4.256,74.12,0.1,69,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.708187,2763
4.256,74.12,0.1,70,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.651142,2803
4.256,74.12,0.1,71,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.724164,2843
4.256,74.12,0.1,72,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.746207,2883
4.256,74.12,0.1,73,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.708198,2923
4.256,74.12,0.1,74,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // XOR gate for sum
    assign sum = a ^ b;
    // AND gate for carry-out
    assign cout = a & b;
endmodule",1.861186,2955
4.256,74.12,0.1,75,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.881185,2995
4.256,74.12,0.1,76,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",2.200181,3035
4.256,74.12,0.1,77,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.67717,3075
4.256,74.12,0.1,78,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.651146,3115
4.256,74.12,0.1,79,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.694172,3155
4.256,74.12,0.1,80,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.707212,3195
4.256,74.12,0.1,81,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.552187,3235
4.256,74.12,0.1,82,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.584182,3275
4.256,74.12,0.1,83,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.81321,3315
4.256,74.12,0.1,84,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // XOR gate for sum
    assign sum = a ^ b;
    // AND gate for carry-out
    assign cout = a & b;
endmodule",3.573169,3347
4.256,74.12,0.1,85,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.797193,3387
4.256,74.12,0.1,86,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.772179,3427
4.256,74.12,0.1,87,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    // Compute the sum by using an XOR gate
    assign sum = a ^ b;
    
    // Compute the carry-out by using an AND gate
    assign cout = a & b;

endmodule",1.812168,3468
4.256,74.12,0.1,88,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.663164,3508
4.256,74.12,0.1,89,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.66716,3548
4.256,74.12,0.1,90,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.641166,3588
4.256,74.12,0.1,91,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.582166,3628
4.256,74.12,0.1,92,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.581189,3668
4.256,74.12,0.1,93,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.711183,3708
4.256,74.12,0.1,94,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.682183,3748
4.256,74.12,0.1,95,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.681168,3788
4.256,74.12,0.1,96,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.621134,3828
4.256,74.12,0.1,97,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.827158,3868
4.256,74.12,0.1,98,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );
    assign sum = a ^ b;     // Sum is the XOR of a and b
    assign cout = a & b;    // Carry-out is the AND of a and b
endmodule",1.542189,3908
4.256,74.12,0.1,99,0,"// Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.

module top_module( 
    input a, b,
    output cout, sum );

    // XOR gate for sum
    assign sum = a ^ b;
    
    // AND gate for carry-out
    assign cout = a & b;

endmodule",1.687163,3942
