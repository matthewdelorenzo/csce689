Area,Delay,Score,Current Run,Episode,Verilog,Time,Tokens
N/A,N/A,-1,0,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.484655,67
N/A,N/A,-1,1,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.435171,134
N/A,N/A,-1,2,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & x[4]);

endmodule",2.634047,228
N/A,N/A,-1,3,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[1] & ~x[4]);

endmodule",1.14094,272
N/A,N/A,-1,4,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[3] & ~x[2]) | (x[3] & x[4]) | (x[1] & ~x[4]);

endmodule",1.084632,316
N/A,N/A,-1,5,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[3] & ~x[2]) | (x[3] & x[4]) | (x[1] & ~x[4]);

endmodule",1.795189,376
N/A,N/A,-1,6,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[3] & ~x[2]) | (x[3] & x[4]) | (x[1] & ~x[4]);

endmodule",1.16002,436
N/A,N/A,-1,7,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",1.528104,532
N/A,N/A,-1,8,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",1.207861,592
N/A,N/A,-1,9,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2]); 

endmodule",0.996062,654
N/A,N/A,-1,10,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.13509,721
N/A,N/A,-1,11,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.194079,781
N/A,N/A,-1,12,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.522224,841
N/A,N/A,-1,13,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.797245,901
N/A,N/A,-1,14,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.37578,961
N/A,N/A,-1,15,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",2.598551,1057
N/A,N/A,-1,16,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",1.610565,1153
N/A,N/A,-1,17,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[3] & x[4]) |                // third row, first and second columns
           (x[3] & ~x[4] & (x[1] | x[2])); // fourth row, first and second columns

endmodule",1.758039,1243
N/A,N/A,-1,18,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[3] & x[4]) |                // third row, first and second columns
           (x[3] & ~x[4] & (x[1] | x[2])); // fourth row, first and second columns

endmodule",1.504205,1303
N/A,N/A,-1,19,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[3] & x[4]) |                // third row, first and second columns
           (x[3] & ~x[4] & (x[1] | x[2])); // fourth row, first and second columns

endmodule",1.307188,1363
N/A,N/A,-1,20,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & x[4]);

endmodule",3.494272,1457
N/A,N/A,-1,21,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[1] & ~x[4]);

endmodule",1.166967,1501
N/A,N/A,-1,22,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[3] & x[4] & x[1] & x[2]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.13613,1555
N/A,N/A,-1,23,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[3] & x[4] & x[1] & x[2]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.079808,1615
N/A,N/A,-1,24,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",2.014135,1711
N/A,N/A,-1,25,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[4] & x[3] & ~x[2]) | (x[4] & x[3]) | (x[4] & ~x[3] & ~x[2]);

endmodule",1.042049,1761
N/A,N/A,-1,26,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[4] & x[3] & ~x[2]) | (x[4] & x[3]) | (x[4] & ~x[3] & ~x[2]);

endmodule",1.085182,1821
N/A,N/A,-1,27,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2]); 

endmodule",1.078114,1883
N/A,N/A,-1,28,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",2.451024,1979
N/A,N/A,-1,29,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[1] & x[2]) |                 // third row, second column
           (x[3]);                         // entire third row and fourth row
endmodule",1.701989,2049
N/A,N/A,-1,30,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & x[4]);

endmodule",2.038996,2143
N/A,N/A,-1,31,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[1] & ~x[4]);

endmodule",1.162679,2187
N/A,N/A,-1,32,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",2.177053,2254
N/A,N/A,-1,33,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.280054,2304
N/A,N/A,-1,34,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & x[4]);

endmodule",1.673699,2398
N/A,N/A,-1,35,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & x[4]);

endmodule",1.903045,2492
N/A,N/A,-1,36,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.073898,2542
N/A,N/A,-1,37,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",1.728986,2638
N/A,N/A,-1,38,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[1] & x[2]) |                 // third row, second column
           (x[3]);                         // entire third row and fourth row, second column

endmodule",1.724009,2711
N/A,N/A,-1,39,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.331015,2778
N/A,N/A,-1,40,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.390292,2845
N/A,N/A,-1,41,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2]); 

endmodule",1.629949,2907
N/A,N/A,-1,42,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[1] & x[3]) |                // third row, second column and fourth row, first/second columns
           (x[1] & x[4]);                 // third row, first column

endmodule",1.693887,2989
N/A,N/A,-1,43,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[3] & ~x[4]) |                // third row, first two columns
           (x[3] & x[4]);                  // third row, first two columns
endmodule",2.048118,3066
N/A,N/A,-1,44,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",2.475798,3162
N/A,N/A,-1,45,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3]) |
           (x[1] & x[2] & ~x[3] & ~x[4]);

endmodule",2.257359,3252
N/A,N/A,-1,46,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3]) |
           (x[1] & x[2] & ~x[3] & ~x[4]);

endmodule",1.60856,3312
N/A,N/A,-1,47,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3]) |
           (x[1] & x[2] & ~x[3] & ~x[4]);

endmodule",1.611296,3372
N/A,N/A,-1,48,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",1.908013,3468
N/A,N/A,-1,49,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.531002,3535
N/A,N/A,-1,50,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[3] & x[4]) |                // third row, first and second columns
           (x[3] & ~x[4] & (x[1] | x[2])); // fourth row, first and second columns
endmodule",1.835018,3625
N/A,N/A,-1,51,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.203088,3692
N/A,N/A,-1,52,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.715125,3759
N/A,N/A,-1,53,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",2.079976,3855
N/A,N/A,-1,54,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.163899,3922
N/A,N/A,-1,55,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.814067,3989
N/A,N/A,-1,56,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.550257,4056
N/A,N/A,-1,57,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & x[4]);

endmodule",2.232249,4150
N/A,N/A,-1,58,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3]) |
           (x[1] & x[2] & ~x[4]);

endmodule",1.549114,4234
N/A,N/A,-1,59,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]) |
           (x[1] & x[2] & x[3]);

endmodule",1.399935,4318
N/A,N/A,-1,60,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.540919,4385
N/A,N/A,-1,61,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.442477,4452
N/A,N/A,-1,62,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.672163,4519
N/A,N/A,-1,63,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[3] & x[4]) |                // third row, first and second columns
           (x[3] & ~x[4] & (x[1] | x[2])); // fourth row, first and second columns
endmodule",2.016393,4609
N/A,N/A,-1,64,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",0.993972,4659
N/A,N/A,-1,65,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.471991,4726
N/A,N/A,-1,66,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3]) |
           (x[1] & x[2] & ~x[3] & ~x[4]);

endmodule",1.97302,4816
N/A,N/A,-1,67,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]);
endmodule",1.888099,4907
N/A,N/A,-1,68,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & x[4]);

endmodule",1.869966,5001
N/A,N/A,-1,69,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.561161,5068
N/A,N/A,-1,70,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[3] & ~x[2]) | (x[3] & x[4]) | (x[1] & ~x[4]);

endmodule",1.619072,5112
N/A,N/A,-1,71,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",1.770093,5208
N/A,N/A,-1,72,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.765922,5275
N/A,N/A,-1,73,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.572785,5335
N/A,N/A,-1,74,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.379031,5402
N/A,N/A,-1,75,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.106141,5452
N/A,N/A,-1,76,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.445008,5512
N/A,N/A,-1,77,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.398263,5572
N/A,N/A,-1,78,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.874277,5632
N/A,N/A,-1,79,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & x[4]);

endmodule",1.786152,5726
N/A,N/A,-1,80,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.668989,5793
N/A,N/A,-1,81,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.330623,5853
N/A,N/A,-1,82,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.07888,5913
N/A,N/A,-1,83,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2] & ~x[3] & ~x[4]) |
           (x[1] & x[2] & x[3] & ~x[4]);

endmodule",2.041992,6009
N/A,N/A,-1,84,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[1] & x[2]) |                 // third row, second column
           (x[3] & ~x[4] & x[1]) |         // fourth row, first column
           (x[3] & x[4] & ~x[2]);          // third row, first column

endmodule",2.073965,6115
N/A,N/A,-1,85,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[1] & x[2]) |                 // third row, second column
           (x[3] & ~x[4] & x[1]) |         // fourth row, first column
           (x[3] & x[4] & ~x[2]);          // third row, first column

endmodule",1.768336,6175
N/A,N/A,-1,86,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[1] & x[2]) |                 // third row, second column
           (x[3] & ~x[4] & x[1]) |         // fourth row, first column
           (x[3] & x[4] & ~x[2]);          // third row, first column

endmodule",1.695164,6235
N/A,N/A,-1,87,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |  // second row, third column
           (x[1] & x[2]) |                 // third row, second column
           (x[3] & ~x[4] & x[1]) |         // fourth row, first column
           (x[3] & x[4] & ~x[2]);          // third row, first column

endmodule",1.953937,6295
N/A,N/A,-1,88,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.635151,6362
N/A,N/A,-1,89,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.233131,6429
N/A,N/A,-1,90,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.16695,6496
N/A,N/A,-1,91,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.847709,6563
N/A,N/A,-1,92,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.38655,6623
N/A,N/A,-1,93,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.123145,6690
N/A,N/A,-1,94,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.152313,6750
N/A,N/A,-1,95,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",0.958974,6800
N/A,N/A,-1,96,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3]) | (x[3] & x[4]) | (x[3] & ~x[4] & ~x[2]);

endmodule",1.008076,6850
N/A,N/A,-1,97,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & x[4]) |
           (x[1] & x[2]); 

endmodule",1.836732,6912
N/A,N/A,-1,98,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.113137,6979
N/A,N/A,-1,99,0,"// Consider the function f shown in the Karnaugh map below.

// Implement this function. d is don't-care, which means you may choose to output whatever value is convenient.

         x_1'x_2'	x_1'x_2 	x_1x_2		x_1x_2'

x_3'x_4'	d		0		d		d
x_3'x_4		0		d		1		0
x_3x_4  	1		1		d		d
x_3x_4'		1		1		0		d


module top_module (
    input [4:1] x, 
    output f );


assign f = (~x[1] & x[2] & ~x[3] & x[4]) |
           (x[1] & ~x[2] & x[3] & ~x[4]) |
           (x[1] & x[3] & x[4]);

endmodule",1.151965,7046
