Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,0,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours <= {hours[7:4] + 1, 4'b0000};
                        end else begin
                            hours[3:0] <= hours[3:0] + 1;
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin // '9' in the one's place
                        minutes <= {minutes[7:4] + 1, 4'b0000}; // increment the tens place
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 1; // increment the seconds
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin // '9' in the one's place
                    seconds <= {seconds[7:4] + 1, 4'b0000}; // increment the tens place
                end else begin
                    seconds[3:0] <= seconds[3:0] + 1; // increment the seconds
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,1,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,2,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours <= {hours[7:4] + 1, 4'b0000};
                        end else begin
                            hours[3:0] <= hours[3:0] + 1;
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin // '9' in the one's place
                        minutes <= {minutes[7:4] + 1, 4'b0000}; // increment the tens place
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 1; // increment the seconds
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin // '9' in the one's place
                    seconds <= {seconds[7:4] + 1, 4'b0000}; // increment the tens place
                end else begin
                    seconds[3:0] <= seconds[3:0] + 1; // increment the seconds
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,3,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-0.1,4,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,5,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,6,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,7,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,8,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,9,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                            hours[3:0] <= 4'b0000; // reset lower BCD digit
                            hours[7:4] <= hours[7:4] + 1'b1; // increment upper BCD digit
                        end else begin
                            hours[3:0] <= hours[3:0] + 1'b1; // increment BCD
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                        minutes[3:0] <= 4'b0000; // reset lower BCD digit
                        minutes[7:4] <= minutes[7:4] + 1'b1; // increment upper BCD digit
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 1'b1; // increment BCD
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                    seconds[3:0] <= 4'b0000; // reset lower BCD digit
                    seconds[7:4] <= seconds[7:4] + 1'b1; // increment upper BCD digit
                end else begin
                    seconds[3:0] <= seconds[3:0] + 1'b1; // increment BCD
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,10,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,11,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,12,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,13,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,14,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours[3:0] <= hours[3:0] + 1;
                        if (hours[3:0] == 4'b1001) begin // If low digit reaches 9
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 1; // Increment high digit
                        end
                    end
                end else begin
                    minutes[3:0] <= minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b1010) begin // If low digit reaches 10
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 1; // Increment high digit
                    end
                end
            end else begin
                seconds[3:0] <= seconds[3:0] + 1;
                if (seconds[3:0] == 4'b1010) begin // If low digit reaches 10
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 1; // Increment high digit
                end
            end
        end
    end

    // Assign outputs
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,15,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk) begin
        if (reset) begin
            // On reset, set time to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,16,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-1,17,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) // If lower BCD digit of hour is 9
                            hours <= {hours[7:4] + 1, 4'b0000}; // increment upper digit and reset lower
                        else
                            hours <= hours + 1; // simply increment
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) // If lower BCD digit of minute is 9
                        minutes <= {minutes[7:4] + 1, 4'b0000}; // increment upper digit and reset lower
                    else
                        minutes <= minutes + 1; // simply increment
                end
            end else begin
                if (seconds[3:0] == 4'b1001) // If lower BCD digit of second is 9
                    seconds <= {seconds[7:4] + 1, 4'b0000}; // increment upper digit and reset lower
                else
                    seconds <= seconds + 1; // simply increment
            end
        end
    end

    assign pm = pm_reg;
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
endmodule"
N/A,N/A,-0.1,18,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours[3:0] <= hours[3:0] + 1;
                        if (hours[3:0] == 4'b1001) begin // If low digit reaches 9
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 1; // Increment high digit
                        end
                    end
                end else begin
                    minutes[3:0] <= minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b1001) begin // If low digit reaches 9
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 1; // Increment high digit
                    end
                end
            end else begin
                seconds[3:0] <= seconds[3:0] + 1;
                if (seconds[3:0] == 4'b1001) begin // If low digit reaches 9
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 1; // Increment high digit
                end
            end
        end
    end

    // Assign outputs
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,19,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,20,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,21,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,22,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,23,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,24,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 1'b1; // Increment units
                        if ((hours[3:0] & 4'b1111) == 4'b1010) begin
                            hours[3:0] <= 4'b0000; // Reset units to 0
                            hours[7:4] <= hours[7:4] + 1'b1; // Increment tens
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 1'b1; // Increment units
                    if ((minutes[3:0] & 4'b1111) == 4'b1010) begin
                        minutes[3:0] <= 4'b0000; // Reset units to 0
                        minutes[7:4] <= minutes[7:4] + 1'b1; // Increment tens
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 1'b1; // Increment units
                if ((seconds[3:0] & 4'b1111) == 4'b1010) begin
                    seconds[3:0] <= 4'b0000; // Reset units to 0
                    seconds[7:4] <= seconds[7:4] + 1'b1; // Increment tens
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,25,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,26,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    // Assign output signals
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hours <= 8'b0001_0010; // BCD for 12
            minutes <= 8'b0000_0000; // BCD for 00
            seconds <= 8'b0000_0000; // BCD for 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12
                        hours <= 8'b0000_0001; // 1
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11
                        hours <= 8'b0001_0010; // 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,27,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,28,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,29,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,30,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,31,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,32,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-0.1,33,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,34,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-0.1,35,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,36,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,37,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,38,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,39,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,40,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,41,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,42,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
    
endmodule"
N/A,N/A,-0.1,43,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,44,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    // Assign output signals
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hours <= 8'b0001_0010; // BCD for 12
            minutes <= 8'b0000_0000; // BCD for 00
            seconds <= 8'b0000_0000; // BCD for 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12
                        hours <= 8'b0000_0001; // 1
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11
                        hours <= 8'b0001_0010; // 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,45,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,46,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 1'b1; // Increment units
                        if ((hours[3:0] & 4'b1111) == 4'b1010) begin
                            hours[3:0] <= 4'b0000; // Reset units to 0
                            hours[7:4] <= hours[7:4] + 1'b1; // Increment tens
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 1'b1; // Increment units
                    if ((minutes[3:0] & 4'b1111) == 4'b1010) begin
                        minutes[3:0] <= 4'b0000; // Reset units to 0
                        minutes[7:4] <= minutes[7:4] + 1'b1; // Increment tens
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 1'b1; // Increment units
                if ((seconds[3:0] & 4'b1111) == 4'b1010) begin
                    seconds[3:0] <= 4'b0000; // Reset units to 0
                    seconds[7:4] <= seconds[7:4] + 1'b1; // Increment tens
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,47,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 1'b1; // Increment units
                        if ((hours[3:0] & 4'b1111) == 4'b1010) begin
                            hours[3:0] <= 4'b0000; // Reset units to 0
                            hours[7:4] <= hours[7:4] + 1'b1; // Increment tens
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 1'b1; // Increment units
                    if ((minutes[3:0] & 4'b1111) == 4'b1010) begin
                        minutes[3:0] <= 4'b0000; // Reset units to 0
                        minutes[7:4] <= minutes[7:4] + 1'b1; // Increment tens
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 1'b1; // Increment units
                if ((seconds[3:0] & 4'b1111) == 4'b1010) begin
                    seconds[3:0] <= 4'b0000; // Reset units to 0
                    seconds[7:4] <= seconds[7:4] + 1'b1; // Increment tens
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,48,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 1'b1; // Increment units
                        if ((hours[3:0] & 4'b1111) == 4'b1010) begin
                            hours[3:0] <= 4'b0000; // Reset units to 0
                            hours[7:4] <= hours[7:4] + 1'b1; // Increment tens
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 1'b1; // Increment units
                    if ((minutes[3:0] & 4'b1111) == 4'b1010) begin
                        minutes[3:0] <= 4'b0000; // Reset units to 0
                        minutes[7:4] <= minutes[7:4] + 1'b1; // Increment tens
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 1'b1; // Increment units
                if ((seconds[3:0] & 4'b1111) == 4'b1010) begin
                    seconds[3:0] <= 4'b0000; // Reset units to 0
                    seconds[7:4] <= seconds[7:4] + 1'b1; // Increment tens
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,49,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours[3:0] <= hours[3:0] + 1;
                        if (hours[3:0] == 4'b1001) begin // If low digit reaches 9
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 1; // Increment high digit
                        end
                    end
                end else begin
                    minutes[3:0] <= minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b1001) begin // If low digit reaches 9
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 1; // Increment high digit
                    end
                end
            end else begin
                seconds[3:0] <= seconds[3:0] + 1;
                if (seconds[3:0] == 4'b1001) begin // If low digit reaches 9
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 1; // Increment high digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,50,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,51,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit past '09'
                            hours[3:0] <= 4'b0000; // reset lower digit
                            hours[7:4] <= hours[7:4] + 1; // increment upper digit
                        end else begin
                            hours[3:0] <= hours[3:0] + 1; // increment lower digit (0-9)
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin // if lower digit is '9'
                        minutes[3:0] <= 4'b0000; // reset lower digit
                        minutes[7:4] <= minutes[7:4] + 1; // increment upper digit
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 1; // normal increment lower digit
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin // if lower digit is '9'
                    seconds[3:0] <= 4'b0000; // reset lower digit
                    seconds[7:4] <= seconds[7:4] + 1; // increment upper digit
                end else begin
                    seconds[3:0] <= seconds[3:0] + 1; // normal increment lower digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,52,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-0.1,53,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    // Assign output signals
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hours <= 8'b0001_0010; // BCD for 12
            minutes <= 8'b0000_0000; // BCD for 00
            seconds <= 8'b0000_0000; // BCD for 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12
                        hours <= 8'b0000_0001; // 1
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11
                        hours <= 8'b0001_0010; // 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,54,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,55,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,56,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg am_pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            am_pm <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

endmodule"
N/A,N/A,-0.1,57,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,58,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,59,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,60,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                            hours[3:0] <= 4'b0000; // reset lower BCD digit
                            hours[7:4] <= hours[7:4] + 1'b1; // increment upper BCD digit
                        end else begin
                            hours[3:0] <= hours[3:0] + 1'b1; // increment BCD
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                        minutes[3:0] <= 4'b0000; // reset lower BCD digit
                        minutes[7:4] <= minutes[7:4] + 1'b1; // increment upper BCD digit
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 1'b1; // increment BCD
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                    seconds[3:0] <= 4'b0000; // reset lower BCD digit
                    seconds[7:4] <= seconds[7:4] + 1'b1; // increment upper BCD digit
                end else begin
                    seconds[3:0] <= seconds[3:0] + 1'b1; // increment BCD
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,61,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 1'b1; // Increment units
                        if ((hours[3:0] & 4'b1111) == 4'b1010) begin
                            hours[3:0] <= 4'b0000; // Reset units to 0
                            hours[7:4] <= hours[7:4] + 1'b1; // Increment tens
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 1'b1; // Increment units
                    if ((minutes[3:0] & 4'b1111) == 4'b1010) begin
                        minutes[3:0] <= 4'b0000; // Reset units to 0
                        minutes[7:4] <= minutes[7:4] + 1'b1; // Increment tens
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 1'b1; // Increment units
                if ((seconds[3:0] & 4'b1111) == 4'b1010) begin
                    seconds[3:0] <= 4'b0000; // Reset units to 0
                    seconds[7:4] <= seconds[7:4] + 1'b1; // Increment tens
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,62,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,63,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 1'b1; // Increment units
                        if ((hours[3:0] & 4'b1111) == 4'b1010) begin
                            hours[3:0] <= 4'b0000; // Reset units to 0
                            hours[7:4] <= hours[7:4] + 1'b1; // Increment tens
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 1'b1; // Increment units
                    if ((minutes[3:0] & 4'b1111) == 4'b1010) begin
                        minutes[3:0] <= 4'b0000; // Reset units to 0
                        minutes[7:4] <= minutes[7:4] + 1'b1; // Increment tens
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 1'b1; // Increment units
                if ((seconds[3:0] & 4'b1111) == 4'b1010) begin
                    seconds[3:0] <= 4'b0000; // Reset units to 0
                    seconds[7:4] <= seconds[7:4] + 1'b1; // Increment tens
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,64,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                            hours[3:0] <= 4'b0000; // reset lower BCD digit
                            hours[7:4] <= hours[7:4] + 1'b1; // increment upper BCD digit
                        end else begin
                            hours[3:0] <= hours[3:0] + 1'b1; // increment BCD
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                        minutes[3:0] <= 4'b0000; // reset lower BCD digit
                        minutes[7:4] <= minutes[7:4] + 1'b1; // increment upper BCD digit
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 1'b1; // increment BCD
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin // special case to increment the 10s digit past '9'
                    seconds[3:0] <= 4'b0000; // reset lower BCD digit
                    seconds[7:4] <= seconds[7:4] + 1'b1; // increment upper BCD digit
                end else begin
                    seconds[3:0] <= seconds[3:0] + 1'b1; // increment BCD
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,65,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) // If lower BCD digit is 9
                            hours <= hours + 8'b0001_0110; // increment to next ten (i.e., 10 -> 11)
                        else
                            hours <= hours + 1; // normal increment
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) // If lower BCD digit is 9
                        minutes <= minutes + 8'b0001_0110; // increment to next ten
                    else
                        minutes <= minutes + 1; // normal increment
                end
            end else begin
                if (seconds[3:0] == 4'b1001) // If lower BCD digit is 9
                    seconds <= seconds + 8'b0001_0110; // increment to next ten
                else
                    seconds <= seconds + 1; // normal increment
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-0.1,66,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    // Assign output signals
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hours <= 8'b0001_0010; // BCD for 12
            minutes <= 8'b0000_0000; // BCD for 00
            seconds <= 8'b0000_0000; // BCD for 00
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // 59
                seconds <= 8'b0000_0000;
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // 59
                    minutes <= 8'b0000_0000;
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // 12
                        hours <= 8'b0000_0001; // 1
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0000_1001) begin // 09
                        hours <= 8'b0001_0000; // 10
                    end else if (hours == 8'b0000_1000) begin // 08
                        hours <= 8'b0000_1001; // 09
                    end else begin
                        // For 01-08 and 10-11
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

endmodule"
N/A,N/A,-0.1,67,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-0.1,68,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,69,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,70,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,71,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);


    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            seconds <= 8'b00000000;
            minutes <= 8'b00000000;
            hours <= 8'b00010010;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b01011001) begin
                seconds <= 8'b00000000;
                // Increment minutes
                if (minutes == 8'b01011001) begin
                    minutes <= 8'b00000000;
                    // Increment hours
                    if (hours == 8'b00010010) begin
                        hours <= 8'b00000001; // roll over to 01
                    end else if (hours == 8'b00001011) begin
                        hours <= 8'b00010000; // next is 12
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else begin
                        hours <= hours + 8'b00000001;
                    end
                end else begin
                    minutes <= minutes + 8'b00000001;
                end
            end else begin
                seconds <= seconds + 8'b00000001;
            end
        end
    end

endmodule"
N/A,N/A,-0.1,72,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,73,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-0.1,74,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 1;
                        if (hours[3:0] == 4'b1001) begin // Reached '9'
                            hours[3:0] <= 4'b0000; // Reset to '0'
                            hours[7:4] <= hours[7:4] + 1; // Increment tens digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b1001) begin // Reached '9'
                        minutes[3:0] <= 4'b0000; // Reset to '0'
                        minutes[7:4] <= minutes[7:4] + 1; // Increment tens digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 1;
                if (seconds[3:0] == 4'b1001) begin // Reached '9'
                    seconds[3:0] <= 4'b0000; // Reset to '0'
                    seconds[7:4] <= seconds[7:4] + 1; // Increment tens digit
                end
            end
        end
    end

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,75,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,76,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,77,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,78,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,79,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,80,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) // if lower BCD digit is 9
                            hours <= hours + 8'b0001_0110; // increment to next ten (i.e., 10 -> 11)
                        else
                            hours <= hours + 1;
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) // if lower BCD digit is 9
                        minutes <= minutes + 8'b0001_0110; // carry
                    else
                        minutes <= minutes + 1;
                end
            end else begin
                if (seconds[3:0] == 4'b1001) // if lower BCD digit is 9
                    seconds <= seconds + 8'b0001_0110; // carry
                else
                    seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,81,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 4'b0001; // Increment lower BCD digit
                        if (hours[3:0] == 4'b1001) begin
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001; // Increment upper BCD digit
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 4'b0001; // Increment lower BCD digit
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001; // Increment upper BCD digit
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 4'b0001; // Increment lower BCD digit
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001; // Increment upper BCD digit
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,82,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,83,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,84,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit past '09'
                            hours[3:0] <= 4'b0000; // reset lower digit
                            hours[7:4] <= hours[7:4] + 1; // increment upper digit
                        end else begin
                            hours[3:0] <= hours[3:0] + 1; // increment lower digit
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin // same special case as for hours
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 1;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 1;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin // same special case as for hours
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 1;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 1;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,85,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000; // reset seconds
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000; // reset minutes
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 8'b0000_0001;
                    end
                end else begin
                    minutes <= minutes + 8'b0000_0001;
                end
            end else begin
                seconds <= seconds + 8'b0000_0001;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,86,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,87,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,88,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,89,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // Reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // Reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // Change to '01'
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end
                    else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // Change to '12'
                    end
                    else begin
                        hours[3:0] <= hours[3:0] + 1'b1; // Increment units
                        if ((hours[3:0] & 4'b1111) == 4'b1010) begin
                            hours[3:0] <= 4'b0000; // Reset units to 0
                            hours[7:4] <= hours[7:4] + 1'b1; // Increment tens
                        end
                    end
                end
                else begin
                    minutes[3:0] <= minutes[3:0] + 1'b1; // Increment units
                    if ((minutes[3:0] & 4'b1111) == 4'b1010) begin
                        minutes[3:0] <= 4'b0000; // Reset units to 0
                        minutes[7:4] <= minutes[7:4] + 1'b1; // Increment tens
                    end
                end
            end
            else begin
                seconds[3:0] <= seconds[3:0] + 1'b1; // Increment units
                if ((seconds[3:0] & 4'b1111) == 4'b1010) begin
                    seconds[3:0] <= 4'b0000; // Reset units to 0
                    seconds[7:4] <= seconds[7:4] + 1'b1; // Increment tens
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,90,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
    
endmodule"
N/A,N/A,-0.1,91,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg am_pm;

    always @(posedge clk) begin
        if (reset) begin
            // Reset clock to 12:00:00 AM
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            am_pm <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        am_pm <= ~am_pm; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12; // Transition from 11 to 12
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    // Assign outputs
    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = am_pm;

endmodule"
N/A,N/A,-0.1,92,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,93,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,94,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,95,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,96,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,97,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        hours[3:0] <= (hours[3:0] == 4'b1001) ? 4'b0000 : hours[3:0] + 1;
                        if (hours[3:0] == 4'b0000) hours[7:4] <= hours[7:4] + 1;
                    end
                end else begin
                    minutes[3:0] <= (minutes[3:0] == 4'b1001) ? 4'b0000 : minutes[3:0] + 1;
                    if (minutes[3:0] == 4'b0000) minutes[7:4] <= minutes[7:4] + 1;
                end
            end else begin
                seconds[3:0] <= (seconds[3:0] == 4'b1001) ? 4'b0000 : seconds[3:0] + 1;
                if (seconds[3:0] == 4'b0000) seconds[7:4] <= seconds[7:4] + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,98,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg pm_reg;
    reg [7:0] hours, minutes, seconds;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // '12' in BCD
            minutes <= 8'b0000_0000; // '00' in BCD
            seconds <= 8'b0000_0000; // '00' in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'b0101_1001) begin // '59' in BCD
                seconds <= 8'b0000_0000; // reset to '00'
                // Increment minutes
                if (minutes == 8'b0101_1001) begin // '59' in BCD
                    minutes <= 8'b0000_0000; // reset to '00'
                    // Increment hours
                    if (hours == 8'b0001_0010) begin // '12' in BCD
                        hours <= 8'b0000_0001; // reset to '01'
                        pm_reg <= ~pm_reg; // toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // '11' in BCD
                        hours <= 8'b0001_0010; // increment to '12'
                    end else begin
                        if (hours[3:0] == 4'b1001) begin // special case to increment the 10s digit
                            hours[3:0] <= 4'b0000;
                            hours[7:4] <= hours[7:4] + 4'b0001;
                        end else begin
                            hours[3:0] <= hours[3:0] + 4'b0001; // normal increment
                        end
                    end
                end else begin
                    if (minutes[3:0] == 4'b1001) begin
                        minutes[3:0] <= 4'b0000;
                        minutes[7:4] <= minutes[7:4] + 4'b0001;
                    end else begin
                        minutes[3:0] <= minutes[3:0] + 4'b0001;
                    end
                end
            end else begin
                if (seconds[3:0] == 4'b1001) begin
                    seconds[3:0] <= 4'b0000;
                    seconds[7:4] <= seconds[7:4] + 4'b0001;
                end else begin
                    seconds[3:0] <= seconds[3:0] + 4'b0001;
                end
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;
endmodule"
N/A,N/A,-0.1,99,0,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'b0001_0010; // 12 in BCD
            minutes <= 8'b0000_0000;
            seconds <= 8'b0000_0000;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            if (seconds == 8'b0101_1001) begin // 59 in BCD
                seconds <= 8'b0000_0000;
                if (minutes == 8'b0101_1001) begin // 59 in BCD
                    minutes <= 8'b0000_0000;
                    if (hours == 8'b0001_0010) begin // 12 in BCD
                        hours <= 8'b0000_0001; // 1 in BCD
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'b0001_0001) begin // 11 in BCD
                        hours <= 8'b0001_0010; // 12 in BCD
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
