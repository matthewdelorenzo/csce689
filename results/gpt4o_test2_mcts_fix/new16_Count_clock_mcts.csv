Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-0.1,2.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,3.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
    reg pm_reg;

    assign ss = {sec_tens, sec_ones};
    assign mm = {min_tens, min_ones};
    assign hh = {hour_tens, hour_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec_ones <= 4'd0;
            sec_tens <= 4'd0;
            min_ones <= 4'd0;
            min_tens <= 4'd0;
            hour_ones <= 4'd2;
            hour_tens <= 4'd1;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (sec_ones == 4'd9) begin
                sec_ones <= 4'd0;
                if (sec_tens == 4'd5) begin
                    sec_tens <= 4'd0;
                    // Increment minutes
                    if (min_ones == 4'd9) begin
                        min_ones <= 4'd0;
                        if (min_tens == 4'd5) begin
                            min_tens <= 4'd0;
                            // Increment hours
                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                                hour_ones <= 4'd1;
                                if (hour_tens == 4'd1) begin
                                    hour_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end
                            end else begin
                                hour_ones <= hour_ones + 4'd1;
                            end
                        end else begin
                            min_tens <= min_tens + 4'd1;
                        end
                    end else begin
                        min_ones <= min_ones + 4'd1;
                    end
                end else begin
                    sec_tens <= sec_tens + 4'd1;
                end
            end else begin
                sec_ones <= sec_ones + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,4.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,5.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 8'h01;
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,6.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,7.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] hours, minutes, seconds;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours <= 8'h12;
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-0.1,8.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0] seconds;
    reg [7:0] minutes;
    reg [7:0] hours;
    reg pm_reg;

    assign ss = seconds;
    assign mm = minutes;
    assign hh = hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            seconds <= 8'h00;
            minutes <= 8'h00;
            hours <= 8'h12;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 1;
                    end
                end else begin
                    minutes <= minutes + 1;
                end
            end else begin
                seconds <= seconds + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,9.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss];
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end
        else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end
                    else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end
                    else begin
                        hh <= hh + 1;
                    end
                end
                else begin
                    mm <= mm + 1;
                end
            end
            else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,10.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,11.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
reg pm_reg;

assign ss = {sec_tens, sec_ones};
assign mm = {min_tens, min_ones};
assign hh = {hour_tens, hour_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        sec_ones <= 4'd0;
        sec_tens <= 4'd0;
        min_ones <= 4'd0;
        min_tens <= 4'd0;
        hour_ones <= 4'd2;
        hour_tens <= 4'd1;
        pm_reg <= 1'b0; // AM
    end else if (ena) begin
        // Increment seconds
        if (sec_ones == 4'd9) begin
            sec_ones <= 4'd0;
            if (sec_tens == 4'd5) begin
                sec_tens <= 4'd0;
                // Increment minutes
                if (min_ones == 4'd9) begin
                    min_ones <= 4'd0;
                    if (min_tens == 4'd5) begin
                        min_tens <= 4'd0;
                        // Increment hours
                        if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                            hour_ones <= 4'd1;
                            if (hour_tens == 4'd1) begin
                                hour_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                        end else begin
                            hour_ones <= hour_ones + 4'd1;
                        end
                    end else begin
                        min_tens <= min_tens + 4'd1;
                    end
                end else begin
                    min_ones <= min_ones + 4'd1;
                end
            end else begin
                sec_tens <= sec_tens + 4'd1;
            end
        end else begin
            sec_ones <= sec_ones + 4'd1;
        end
    end
end

endmodule"
N/A,N/A,-0.1,12.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0] sec_ones;
    reg [3:0] sec_tens;
    reg [3:0] min_ones;
    reg [3:0] min_tens;
    reg [3:0] hour_ones;
    reg [3:0] hour_tens;
    reg pm_reg;

    assign ss = {sec_tens, sec_ones};
    assign mm = {min_tens, min_ones};
    assign hh = {hour_tens, hour_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec_ones <= 4'd0;
            sec_tens <= 4'd0;
            min_ones <= 4'd0;
            min_tens <= 4'd0;
            hour_ones <= 4'd2;
            hour_tens <= 4'd1;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (sec_ones == 4'd9) begin
                sec_ones <= 4'd0;
                if (sec_tens == 4'd5) begin
                    sec_tens <= 4'd0;
                    // Increment minutes
                    if (min_ones == 4'd9) begin
                        min_ones <= 4'd0;
                        if (min_tens == 4'd5) begin
                            min_tens <= 4'd0;
                            // Increment hours
                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                                hour_ones <= 4'd1;
                                if (hour_tens == 4'd1) begin
                                    hour_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end
                            end else begin
                                hour_ones <= hour_ones + 4'd1;
                            end
                        end else begin
                            min_tens <= min_tens + 4'd1;
                        end
                    end else begin
                        min_ones <= min_ones + 4'd1;
                    end
                end else begin
                    sec_tens <= sec_tens + 4'd1;
                end
            end else begin
                sec_ones <= sec_ones + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-1,13.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end
        else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end
                    else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end
                    else begin
                        hh <= hh + 8'h01;
                    end
                end
                else begin
                    mm <= mm + 8'h01;
                end
            end
            else begin
                ss <= ss + 8'h01;
            end
        end
    end

endmodule"
N/A,N/A,-1,14.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 8'h01;
                    end
                end else begin
                    mm <= mm + 8'h01;
                end
            end else begin
                ss <= ss + 8'h01;
            end
        end
    end
endmodule"
N/A,N/A,-1,15.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 ss_reg, mm_reg, hh_reg;
   reg pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           ss_reg <= 8'h00;
           mm_reg <= 8'h00;
           hh_reg <= 8'h12;
           pm_reg <= 1'b0;
       end else if (ena) begin
           // Increment seconds
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               // Increment minutes
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   // Increment hours
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end

   assign ss = ss_reg;
   assign mm = mm_reg;
   assign hh = hh_reg;
   assign pm = pm_reg;

endmodule"
N/A,N/A,-1,16.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[3::0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
    reg pm_reg;

    assign ss = {sec_tens, sec_ones};
    assign mm = {min_tens, min_ones};
    assign hh = {hour_tens, hour_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec_ones <= 4'd0;
            sec_tens <= 4'd0;
            min_ones <= 4'd0;
            min_tens <= 4'd0;
            hour_ones <= 4'd2;
            hour_tens <= 4'd1;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (sec_ones == 4'd9) begin
                sec_ones <= 4'd0;
                if (sec_tens == 4'd5) begin
                    sec_tens <= 4'd0;
                    // Increment minutes
                    if (min_ones == 4'd9) begin
                        min_ones <= 4'd0;
                        if (min_tens == 4'd5) begin
                            min_tens <= 4'd0;
                            // Increment hours
                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                                hour_ones <= 4'd1;
                                if (hour_tens == 4'd1) begin
                                    hour_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end
                            end else begin
                                hour_ones <= hour_ones + 4'd1;
                            end
                        end else begin
                            min_tens <= min_tens + 4'd1;
                        end
                    end else begin
                        min_ones <= min_ones + 4'd1;
                    end
                end else begin
                    sec_tens <= sec_tens + 4'd1;
                end
            end else begin
                sec_ones <= sec_ones + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,17.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0  ] ss_reg, mm_reg, hh_reg;
   reg pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           ss_reg <= 8'h00;
           mm_reg <= 8'h00;
           hh_reg <= 8'h12;
           pm_reg <= 1'b0;
       end else if (ena) begin
           // Increment seconds
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               // Increment minutes
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   // Increment hours
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end

   assign ss = ss_reg;
   assign mm = mm_reg;
   assign hh = hh_reg;
   assign pm = pm_reg;

endmodule"
N/A,N/A,-1,18.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0 ss_ones, ss_tens, mm_ones, mm_tens, hh_ones, hh_tens;
   reg pm_reg;

   assign ss = {ss_tens, ss_ones};
   assign mm = {mm_tens, mm_ones};
   assign hh = {hh_tens, hh_ones};
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           ss_ones <= 4'd0;
           ss_tens <= 4'd0;
           mm_ones <= 4'd0;
           mm_tens <= 4'd0;
           hh_ones <= 4'd2;
           hh_tens <= 4'd1;
           pm_reg <= 1'b0; // AM
       end else if (ena) begin
           // Increment seconds
           if (ss_ones == 4'd9) begin
               ss_ones <= 4'd0;
               if (ss_tens == 4'd5) begin
                   ss_tens <= 4'd0;
                   // Increment minutes
                   if (mm_ones == 4'd9) begin
                       mm_ones <= 4'd0;
                       if (mm_tens == 4'd5) begin
                           mm_tens <= 4'd0;
                           // Increment hours
                           if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                               hh_ones <= 4'd1;
                               if (hh_tens == 4'd1) begin
                                   hh_tens <= 4'd0;
                                   pm_reg <= ~pm_reg; // Toggle AM/PM
                               end
                           end else begin
                               hh_ones <= hh_ones + 4'd1;
                           end
                       end else begin
                           mm_tens <= mm_tens + 4'd1;
                       end
                   end else begin
                       mm_ones <= mm_ones + 4'd1;
                   end
               end else begin
                   ss_tens <= ss_tens + 4'd1;
               end
           end else begin
               ss_ones <= ss_ones + 4'd1;
           end
       end
   end
endmodule"
N/A,N/A,-1,19.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,20.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]   

    reg [7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end

endmodule"
N/A,N/A,-0.1,21.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
reg pm_reg;

assign ss = {sec_tens, sec_ones};
assign mm = {min_tens, min_ones};
assign hh = {hour_tens, hour_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        sec_ones <= 4'd0;
        sec_tens <= 4'd0;
        min_ones <= 4'd0;
        min_tens <= 4'd0;
        hour_ones <= 4'd2;
        hour_tens <= 4'd1;
        pm_reg <= 1'b0; // AM
    end else if (ena) begin
        // Increment seconds
        if (sec_ones == 4'd9) begin
            sec_ones <= 4'd0;
            if (sec_tens == 4'd5) begin
                sec_tens <= 4'd0;
                // Increment minutes
                if (min_ones == 4'd9) begin
                    min_ones <= 4'd0;
                    if (min_tens == 4'd5) begin
                        min_tens <= 4'd0;
                        // Increment hours
                        if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                            hour_ones <= 4'd1;
                            if (hour_tens == 4'd1) begin
                                hour_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                        end else begin
                            hour_ones <= hour_ones + 4'd1;
                        end
                    end else begin
                        min_tens <= min_tens + 4'd1;
                    end
                end else begin
                    min_ones <= min_ones + 4'd1;
                end
            end else begin
                sec_tens <= sec_tens + 4'd1;
            end
        end else begin
            sec_ones <= sec_ones + 4'd1;
        end
    end
end

endmodule"
N/A,N/A,-1,22.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 hhreg [7:0] mm;
   reg [7:0] ss;
   reg pm_reg;

   assign hh = hh_reg;
   assign mm = mm_reg;
   assign ss = ss_reg;
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_reg <= 8'h12; // 12 in BCD
           mm_reg <= 8'h00; // 00 in BCD
           ss_reg <= 8'h00; // 00 in BCD
           pm_reg <= 0;     // AM
       end else if (ena) begin
           // Increment seconds
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               // Increment minutes
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   // Increment hours
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end
endmodule"
N/A,N/A,-1,23.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] hh;
    reg[7:0] m;
    reg[7:0] s;
    reg pm_reg;

    assign hh = h;
    assign mm = m;
    assign ss = s;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            h <= 8'b0001_0010; // 12 in BCD
            m <= 8'b0000_0000; // 00 in BCD
            s <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (s == 8'b0101_1001) begin // 59 in BCD
                s <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (m == 8'b0101_1001) begin // 59 in BCD
                    m <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (h == 8'b0001_0010) begin // 12 in BCD
                        h <= 8'b0000_0001; // Reset hours to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (h == 8'b0001_0001) begin // 11 in BCD
                        h <= 8'b0001_0010; // Increment to 12
                    end else begin
                        h[3:0] <= h[3:0] + 1; // Increment hours
                        if (h[3:0] == 4'b1001) begin // If lower BCD digit is 9
                            h[3:0] <= 4'b0000; // Reset lower BCD digit
                            h[7:4] <= h[7:4] + 1; // Increment upper BCD digit
                        end
                    end
                end else begin
                    m[3:0] <= m[3:0] + 1; // Increment minutes
                    if (m[3:0] == 4'b1001) begin // If lower BCD digit is 9
                        m[3:0] <= 4'b0000; // Reset lower BCD digit
                        m[7:4] <= m[7:4] + 1; // Increment upper BCD digit
                    end
                end
            end else begin
                s[3:0] <= s[3:0] + 1; // Increment seconds
                if (s[3:0] == 4'b1001) begin // If lower BCD digit is 9
                    s[3:0] <= 4'b0000; // Reset lower BCD digit
                    s[7:4] <= s[7:4] + 1; // Increment upper BCD digit
                end
            end
        end
    end
endmodule"
N/A,N/A,-1,24.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]   
`
   reg [7:0] ss;
   reg [7:0] mm;
   reg [7:0] hh;
   reg pm;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset the clock to 12:00:00 AM
           ss <= 8'h00;
           mm <= 8'h00;
           hh <= 8'h12;
           pm <= 0;
       end else if (ena) begin
           // Increment seconds
           if (ss == 8'h59) begin
               ss <= 8'h00;
               // Increment minutes
               if (mm == 8'h59) begin
                   mm <= 8'h00;
                   // Increment hours
                   if (hh == 8'h12) begin
                       hh <= 8'h01;
                       pm <= ~pm; // Toggle AM/PM
                   end else if (hh == 8'h11) begin
                       hh <= 8'h12;
                   end else begin
                       hh <= hh + 1;
                   end
               end else begin
                   mm <= mm + 1;
               end
           end else begin
               ss <= ss + 1;
           end
       end
   end

endmodule"
N/A,N/A,-1,25.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0 hh_tens, h_units, m_tens, m_units, s_tens, s_units;
    reg pm_reg;

    assign hh = {h_tens, h_units};
    assign mm = {m_tens, m_units};
    assign ss = {s_tens, s_units};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            h_tens <= 4'd1;
            h_units <= 4'd2;
            m_tens <= 4'd0;
            m_units <= 4'd0;
            s_tens <= 4'd0;
            s_units <= 4'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (s_units == 4'd9) begin
                s_units <= 4'd0;
                if (s_tens == 4'd5) begin
                    s_tens <= 4'd0;
                    // Increment minutes
                    if (m_units == 4'd9) begin
                        m_units <= 4'd0;
                        if (m_tens == 4'd5) begin
                            m_tens <= 4'd0;
                            // Increment hours
                            if (h_units == 4'd9 || (h_tens == 4'd1 && h_units == 4'd2)) begin
                                h_units <= 4'd1;
                                h_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end else if (h_units == 4'd9) begin
                                h_units <= 4'd0;
                                h_tens <= h_tens + 4'd1;
                            end else begin
                                h_units <= h_units + 4'd1;
                            end
                        end else begin
                            m_tens <= m_tens + 4'd1;
                        end
                    end else begin
                        m_units <= m_units + 4'd1;
                    end
                end else begin
                    s_tens <= s_tens + 4'd1;
                end
            end else begin
                s_units <= s_units + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-1,26.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]`n/areg [7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,27.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0  ] hh;
    reg [7:0] mm;
    reg [7:0] ss;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12 in BCD
            mm_reg <= 8'h00; // 00 in BCD
            ss_reg <= 8'h00; // 00 in BCD
            pm_reg <= 0;     // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 8'h01;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'h01;
                end
            end else begin
                ss_reg <= ss_reg + 8'h01;
            end
        end
    end
endmodule"
N/A,N/A,-1,28.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 hh;reg [7:0] mm;
    reg [7:0] ss;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12:00:00 AM
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 8'h01;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'h01;
                end
            end else begin
                ss_reg <= ss_reg + 8'h01;
            end
        end
    end
endmodule"
N/A,N/A,-1,29.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end
                    else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end
                    else begin
                        hh <= hh + 1; // Increment hours
                    end
                end
                else begin
                    mm <= mm + 1; // Increment minutes
                end
            end
            else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule"
N/A,N/A,-0.1,30.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[3:0] hours_tens, hours_ones, minutes_tens, minutes_ones, seconds_tens, seconds_ones;
    reg pm_reg;

    assign hh = {hours_tens, hours_ones};
    assign mm = {minutes_tens, minutes_ones};
    assign ss = {seconds_tens, seconds_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hours_tens <= 4'd1;
            hours_ones <= 4'd2;
            minutes_tens <= 4'd0;
            minutes_ones <= 4'd0;
            seconds_tens <= 4'd0;
            seconds_ones <= 4'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (seconds_ones == 4'd9) begin
                seconds_ones <= 4'd0;
                if (seconds_tens == 4'd5) begin
                    seconds_tens <= 4'd0;
                    // Increment minutes
                    if (minutes_ones == 4'd9) begin
                        minutes_ones <= 4'd0;
                        if (minutes_tens == 4'd5) begin
                            minutes_tens <= 4'd0;
                            // Increment hours
                            if (hours_ones == 4'd9 || (hours_tens == 4'd1 && hours_ones == 4'd2)) begin
                                hours_ones <= 4'd1;
                                if (hours_tens == 4'd1) begin
                                    hours_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end else begin
                                    hours_tens <= 4'd1;
                                end
                            end else begin
                                hours_ones <= hours_ones + 4'd1;
                            end
                        end else begin
                            minutes_tens <= minutes_tens + 4'd1;
                        end
                    end else begin
                        minutes_ones <= minutes_ones + 4'd1;
                    end
                end else begin
                    seconds_tens <= seconds_tens + 4'd1;
                end
            end else begin
                seconds_ones <= seconds_ones + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,31.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
reg pm_reg;

assign ss = {sec_tens, sec_ones};
assign mm = {min_tens, min_ones};
assign hh = {hour_tens, hour_ones};
assign pm = pm_reg;

always @(posedge clk) begin
    if (reset) begin
        sec_ones <= 4'd0;
        sec_tens <= 4'd0;
        min_ones <= 4'd0;
        min_tens <= 4'd0;
        hour_ones <= 4'd2;
        hour_tens <= 4'd1;
        pm_reg <= 1'b0; // AM
    end else if (ena) begin
        // Increment seconds
        if (sec_ones == 4'd9) begin
            sec_ones <= 4'd0;
            if (sec_tens == 4'd5) begin
                sec_tens <= 4'd0;
                // Increment minutes
                if (min_ones == 4'd9) begin
                    min_ones <= 4'd0;
                    if (min_tens == 4'd5) begin
                        min_tens <= 4'd0;
                        // Increment hours
                        if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                            hour_ones <= 4'd1;
                            if (hour_tens == 4'd1) begin
                                hour_tens <= 4'd0;
                                pm_reg <= ~pm_reg; // Toggle AM/PM
                            end
                        end else begin
                            hour_ones <= hour_ones + 4'd1;
                        end
                    end else begin
                        min_tens <= min_tens + 4'd1;
                    end
                end else begin
                    min_ones <= min_ones + 4'd1;
                end
            end else begin
                sec_tens <= sec_tens + 4'd1;
            end
        end else begin
            sec_ones <= sec_ones + 4'd1;
        end
    end
end

endmodule"
N/A,N/A,-1,32.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3::0];
    reg [3:0] hh_tens, hh_ones;
    reg [3:0] mm_tens, mm_ones;
    reg [3:0] ss_tens, ss_ones;
    reg pm_reg;

    assign hh = {hh_tens, hh_ones};
    assign mm = {mm_tens, mm_ones};
    assign ss = {ss_tens, ss_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_tens <= 4'd1;
            hh_ones <= 4'd2;
            mm_tens <= 4'd0;
            mm_ones <= 4'd0;
            ss_tens <= 4'd0;
            ss_ones <= 4'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_ones == 4'd9) begin
                ss_ones <= 4'd0;
                if (ss_tens == 4'd5) begin
                    ss_tens <= 4'd0;
                    // Increment minutes
                    if (mm_ones == 4'd9) begin
                        mm_ones <= 4'd0;
                        if (mm_tens == 4'd5) begin
                            mm_tens <= 4'd0;
                            // Increment hours
                            if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                                hh_ones <= 4'd1;
                                if (hh_tens == 4'd1) begin
                                    hh_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end else begin
                                    hh_tens <= hh_tens + 4'd1;
                                end
                            end else begin
                                hh_ones <= hh_ones + 4'd1;
                            end
                        end else begin
                            mm_tens <= mm_tens + 4'd1;
                        end
                    end else begin
                        mm_ones <= mm_ones + 4'd1;
                    end
                end else begin
                    ss_tens <= ss_tens + 4'd1;
                end
            end else begin
                ss_ones <= ss_ones + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,33.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0   ] ss_reg, mm_reg, hh_reg;
   reg pm_reg;

   always @(posedge clk) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           ss_reg <= 8'h00;
           mm_reg <= 8'h00;
           hh_reg <= 8'h12;
           pm_reg <= 1'b0;
       end else if (ena) begin
           // Increment seconds
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               // Increment minutes
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   // Increment hours
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end

   assign ss = ss_reg;
   assign mm = mm_reg;
   assign hh = hh_reg;
   assign pm = pm_reg;

endmodule"
N/A,N/A,-1,34.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'h12;
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,35.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 hhreg [7:0] hh;
   reg [7:0] mm;
   reg [7:0] ss;
   reg pm;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh <= 8'b0001_0010; // 12 in BCD
           mm <= 8'b0000_0000; // 00 in BCD
           ss <= 8'b0000_0000; // 00 in BCD
           pm <= 0; // AM
       end else if (ena) begin
           if (ss == 8'b0101_1001) begin // 59 in BCD
               ss <= 8'b0000_0000;
               if (mm == 8'b0101_1001) begin // 59 in BCD
                   mm <= 8'b0000_0000;
                   if (hh == 8'b0001_0010) begin // 12 in BCD
                       hh <= 8'b0000_0001; // 01 in BCD
                       pm <= ~pm; // Toggle AM/PM
                   end else if (hh == 8'b0001_0001) begin // 11 in BCD
                       hh <= 8'b0001_0010; // 12 in BCD
                   end else begin
                       hh <= hh + 1;
                   end
               end else begin
                   mm <= mm + 1;
               end
           end else begin
               ss <= ss + 1;
           end
       end
   end
endmodule"
N/A,N/A,-1,36.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0reg [7:0] seconds;
   reg [7:0] minutes;
   reg [7:0] hours;
   reg pm_reg;

   assign ss = seconds;
   assign mm = minutes;
   assign hh = hours;
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           seconds <= 8'h00;
           minutes <= 8'h00;
           hours <= 8'h12;
           pm_reg <= 1'b0; // AM
       end else if (ena) begin
           // Increment seconds
           if (seconds == 8'h59) begin
               seconds <= 8'h00;
               // Increment minutes
               if (minutes == 8'h59) begin
                   minutes <= 8'h00;
                   // Increment hours
                   if (hours == 8'h12) begin
                       hours <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hours == 8'h11) begin
                       hours <= 8'h12;
                   end else begin
                       hours <= hours + 1;
                   end
               end else begin
                   minutes <= minutes + 1;
               end
           end else begin
               seconds <= seconds + 1;
           end
       end
   end
endmodule"
N/A,N/A,-1,37.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]    
`
    reg [7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end

endmodule"
N/A,N/A,-0.1,38.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] h;
   reg[7:0] m;
   reg[7:0] s;
   reg pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           h <= 8'b0001_0010; // 12 in BCD
           m <= 8'b0000_0000; // 00 in BCD
           s <= 8'b0000_0000; // 00 in BCD
           pm_reg <= 0; // AM
       end else if (ena) begin
           // Increment seconds
           if (s == 8'b0101_1001) begin // 59 in BCD
               s <= 8'b0000_0000; // Reset seconds to 00
               // Increment minutes
               if (m == 8'b0101_1001) begin // 59 in BCD
                   m <= 8'b0000_0000; // Reset minutes to 00
                   // Increment hours
                   if (h == 8'b0001_0010) begin // 12 in BCD
                       h <= 8'b0000_0001; // Reset hours to 01
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (h == 8'b0001_0001) begin // 11 in BCD
                       h <= 8'b0001_0010; // Increment to 12
                   end else begin
                       h <= h + 1; // Increment hours
                   end
               end else begin
                   m <= m + 1; // Increment minutes
               end
           end else begin
               s <= s + 1; // Increment seconds
           end
       end
   end

   assign hh = h;
   assign mm = m;
   assign ss = s;
   assign pm = pm_reg;

endmodule"
N/A,N/A,-1,39.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or negedge reset) begin
        if (!reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,40.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0 h0, h1, m0, m1, s0, s1;
   reg pm_reg;

   assign hh = {h1, h0};
   assign mm = {m1, m0};
   assign ss = {s1, s0};
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           h0 <= 4'd2;
           h1 <= 4'd1;
           m0 <= 4'd0;
           m1 <= 4'd0;
           s0 <= 4'd0;
           s1 <= 4'd0;
           pm_reg <= 1'b0; // AM
       end else if (ena) begin
           // Increment seconds
           if (s0 == 4'd9) begin
               s0 <= 4'd0;
               if (s1 == 4'd5) begin
                   s1 <= 4'd0;
                   // Increment minutes
                   if (m0 == 4'd9) begin
                       m0 <= 4'd0;
                       if (m1 == 4'd5) begin
                           m1 <= 4'd0;
                           // Increment hours
                           if (h0 == 4'd9 || (h1 == 4'd1 && h0 == 4'd2)) begin
                               h0 <= 4'd1;
                               if (h1 == 4'd1) begin
                                   h1 <= 4'd0;
                                   pm_reg <= ~pm_reg; // Toggle AM/PM
                               end else begin
                                   h1 <= h1 + 4'd1;
                               end
                           end else begin
                               h0 <= h0 + 4'd1;
                           end
                       end else begin
                           m1 <= m1 + 4'd1;
                       end
                   end else begin
                       m0 <= m0 + 4'd1;
                   end
               end else begin
                   s1 <= s1 + 4'd1;
               end
           end else begin
               s0 <= s0 + 4'd1;
           end
       end
   end
endmodule"
N/A,N/A,-0.1,41.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[7:0] hh_reg, mm_reg, ss_reg;
reg pm_reg;

assign hh = hh_reg;
assign mm = mm_reg;
assign ss = ss_reg;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_reg <= 8'h12;
        mm_reg <= 8'h00;
        ss_reg <= 8'h00;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_reg == 8'h59) begin
            ss_reg <= 8'h00;
            // Increment minutes
            if (mm_reg == 8'h59) begin
                mm_reg <= 8'h00;
                // Increment hours
                if (hh_reg == 8'h12) begin
                    hh_reg <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'h11) begin
                    hh_reg <= 8'h12;
                end else begin
                    hh_reg <= hh_reg + 1;
                end
            end else begin
                mm_reg <= mm_reg + 1;
            end
        end else begin
            ss_reg <= ss_reg + 1;
        end
    end
end

endmodule"
N/A,N/A,-1,42.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;``reg [7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,43.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 hh;]reg [7:0] mm;
    reg [7:0] ss;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12:00:00 AM
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 8'h01;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'h01;
                end
            end else begin
                ss_reg <= ss_reg + 8'h01;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,44.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0  ] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    // Assign outputs
    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,45.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[3:0 hhreg [3:0] hh_tens, hh_ones;
   reg [3:0] mm_tens, mm_ones;
   reg [3:0] ss_tens, ss_ones;
   reg pm_reg;

   assign hh = {hh_tens, hh_ones};
   assign mm = {mm_tens, mm_ones};
   assign ss = {ss_tens, ss_ones};
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_tens <= 4'd1;
           hh_ones <= 4'd2;
           mm_tens <= 4'd0;
           mm_ones <= 4'd0;
           ss_tens <= 4'd0;
           ss_ones <= 4'd0;
           pm_reg <= 1'b0; // AM
       end else if (ena) begin
           // Increment seconds
           if (ss_ones == 4'd9) begin
               ss_ones <= 4'd0;
               if (ss_tens == 4'd5) begin
                   ss_tens <= 4'd0;
                   // Increment minutes
                   if (mm_ones == 4'd9) begin
                       mm_ones <= 4'd0;
                       if (mm_tens == 4'd5) begin
                           mm_tens <= 4'd0;
                           // Increment hours
                           if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                               hh_ones <= 4'd1;
                               hh_tens <= 4'd0;
                               pm_reg <= ~pm_reg; // Toggle AM/PM
                           end else if (hh_ones == 4'd9) begin
                               hh_ones <= 4'd0;
                               hh_tens <= hh_tens + 4'd1;
                           end else begin
                               hh_ones <= hh_ones + 4'd1;
                           end
                       end else begin
                           mm_tens <= mm_tens + 4'd1;
                       end
                   end else begin
                       mm_ones <= mm_ones + 4'd1;
                   end
               end else begin
                   ss_tens <= ss_tens + 4'd1;
               end
           end else begin
               ss_ones <= ss_ones + 4'd1;
           end
       end
   end
endmodule"
N/A,N/A,-1,46.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0 h0;reg [3:0] h1;
    reg [3:0] m0, m1;
    reg [3:0] s0, s1;
    reg pm_reg;

    assign hh = {h1, h0};
    assign mm = {m1, m0};
    assign ss = {s1, s0};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            h0 <= 4'd2;
            h1 <= 4'd1;
            m0 <= 4'd0;
            m1 <= 4'd0;
            s0 <= 4'd0;
            s1 <= 4'd0;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (s0 == 4'd9) begin
                s0 <= 4'd0;
                if (s1 == 4'd5) begin
                    s1 <= 4'd0;
                    // Increment minutes
                    if (m0 == 4'd9) begin
                        m0 <= 4'd0;
                        if (m1 == 4'd5) begin
                            m1 <= 4'd0;
                            // Increment hours
                            if (h0 == 4'd9 || (h1 == 4'd1 && h0 == 4'd2)) begin
                                h0 <= 4'd1;
                                if (h1 == 4'd1) begin
                                    h1 <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end else begin
                                    h1 <= h1 + 4'd1;
                                end
                            end else begin
                                h0 <= h0 + 4'd1;
                            end
                        end else begin
                            m1 <= m1 + 4'd1;
                        end
                    end else begin
                        m0 <= m0 + 4'd1;
                    end
                end else begin
                    s1 <= s1 + 4'd1;
                end
            end else begin
                s0 <= s0 + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-1,47.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]   
``
reg [7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,48.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]
`reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,49.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or negedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end
                    else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end
                    else begin
                        hh <= hh + 1; // Increment hours
                    end
                end
                else begin
                    mm <= mm + 1; // Increment minutes
                end
            end
            else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule"
N/A,N/A,-1,50.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 hh;]n/areg [7:0] hh;
    reg [7:0] mm;
    reg [7:0] ss;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule"
N/A,N/A,-0.1,51.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0] seconds;
reg [7:0] minutes;
reg [7:0] hours;
reg pm_reg;

assign ss = seconds;
assign mm = minutes;
assign hh = hours;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        seconds <= 8'h00;
        minutes <= 8'h00;
        hours <= 8'h12;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (seconds == 8'h59) begin
            seconds <= 8'h00;
            // Increment minutes
            if (minutes == 8'h59) begin
                minutes <= 8'h00;
                // Increment hours
                if (hours == 8'h12) begin
                    hours <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hours == 8'h11) begin
                    hours <= 8'h12;
                end else begin
                    hours <= hours + 1;
                end
            end else begin
                minutes <= minutes + 1;
            end
        end else begin
            seconds <= seconds + 1;
        end
    end
end

endmodule"
N/A,N/A,-1,52.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]`n/a
reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'h12;
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 8'h01;
                    end
                end else begin
                    mm_reg <= mm_reg + 8'h01;
                end
            end else begin
                ss_reg <= ss_reg + 8'h01;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,53.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3::0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
   reg pm_reg;

   assign ss = {sec_tens, sec_ones};
   assign mm = {min_tens, min_ones};
   assign hh = {hour_tens, hour_ones};
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           sec_ones <= 4'd0;
           sec_tens <= 4'd0;
           min_ones <= 4'd0;
           min_tens <= 4'd0;
           hour_ones <= 4'd2;
           hour_tens <= 4'd1;
           pm_reg <= 1'b0; // AM
       end else if (ena) begin
           // Increment seconds
           if (sec_ones == 4'd9) begin
               sec_ones <= 4'd0;
               if (sec_tens == 4'd5) begin
                   sec_tens <= 4'd0;
                   // Increment minutes
                   if (min_ones == 4'd9) begin
                       min_ones <= 4'd0;
                       if (min_tens == 4'd5) begin
                           min_tens <= 4'd0;
                           // Increment hours
                           if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                               hour_ones <= 4'd1;
                               if (hour_tens == 4'd1) begin
                                   hour_tens <= 4'd0;
                                   pm_reg <= ~pm_reg; // Toggle AM/PM
                               end else begin
                                   hour_tens <= hour_tens + 1;
                               end
                           end else begin
                               hour_ones <= hour_ones + 1;
                           end
                       end else begin
                           min_tens <= min_tens + 1;
                       end
                   end else begin
                       min_ones <= min_ones + 1;
                   end
               end else begin
                   sec_tens <= sec_tens + 1;
               end
           end else begin
               sec_ones <= sec_ones + 1;
           end
       end
   end
endmodule"
N/A,N/A,-0.1,54.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] hh;
    reg[7:0] mm;
    reg[7:0] ss;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end

endmodule"
N/A,N/A,-0.1,55.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0  ] hh_reg;reg [7:0] mm_reg;
    reg [7:0] ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'h12;
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,56.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0`bcd_seconds;
    reg [7:0] bcd_minutes;
    reg [7:0] bcd_hours;
    reg pm_reg;

    assign ss = bcd_seconds;
    assign mm = bcd_minutes;
    assign hh = bcd_hours;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            bcd_seconds <= 8'h00;
            bcd_minutes <= 8'h00;
            bcd_hours <= 8'h12;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (bcd_seconds == 8'h59) begin
                bcd_seconds <= 8'h00;
                // Increment minutes
                if (bcd_minutes == 8'h59) begin
                    bcd_minutes <= 8'h00;
                    // Increment hours
                    if (bcd_hours == 8'h12) begin
                        bcd_hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (bcd_hours == 8'h11) begin
                        bcd_hours <= 8'h12;
                    end else begin
                        bcd_hours <= bcd_hours + 8'h01;
                    end
                end else begin
                    bcd_minutes <= bcd_minutes + 8'h01;
                end
            end else begin
                bcd_seconds <= bcd_seconds + 8'h01;
            end
        end
    end
endmodule"
N/A,N/A,-1,57.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[3::0];
    reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
    reg pm_reg;

    assign ss = {sec_tens, sec_ones};
    assign mm = {min_tens, min_ones};
    assign hh = {hour_tens, hour_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec_ones <= 4'd0;
            sec_tens <= 4'd0;
            min_ones <= 4'd0;
            min_tens <= 4'd0;
            hour_ones <= 4'd2;
            hour_tens <= 4'd1;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (sec_ones == 4'd9) begin
                sec_ones <= 4'd0;
                if (sec_tens == 4'd5) begin
                    sec_tens <= 4'd0;
                    // Increment minutes
                    if (min_ones == 4'd9) begin
                        min_ones <= 4'd0;
                        if (min_tens == 4'd5) begin
                            min_tens <= 4'd0;
                            // Increment hours
                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                                hour_ones <= 4'd1;
                                if (hour_tens == 4'd1) begin
                                    hour_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end
                            end else begin
                                hour_ones <= hour_ones + 4'd1;
                            end
                        end else begin
                            min_tens <= min_tens + 4'd1;
                        end
                    end else begin
                        min_ones <= min_ones + 4'd1;
                    end
                end else begin
                    sec_tens <= sec_tens + 4'd1;
                end
            end else begin
                sec_ones <= sec_ones + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-1,58.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or negedge reset) begin
        if (!reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,59.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0   ]hh;
    reg [7:0] mm;
    reg [7:0] ss;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12:00:00 AM
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,60.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0] ss_reg, mm_reg, hh_reg;
   reg pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           ss_reg <= 8'h00;
           mm_reg <= 8'h00;
           hh_reg <= 8'h12;
           pm_reg <= 1'b0;
       end else if (ena) begin
           // Increment seconds
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               // Increment minutes
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   // Increment hours
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end

   assign ss = ss_reg;
   assign mm = mm_reg;
   assign hh = hh_reg;
   assign pm = pm_reg;

endmodule"
N/A,N/A,-1,61.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0 ss_ones, ss_tens, mm_ones, mm_tens, hh_ones, hh_tens;
reg pm_reg;

assign ss = {ss_tens, ss_ones};
assign mm = {mm_tens, mm_ones};
assign hh = {hh_tens, hh_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        ss_ones <= 4'd0;
        ss_tens <= 4'd0;
        mm_ones <= 4'd0;
        mm_tens <= 4'd0;
        hh_ones <= 4'd2;
        hh_tens <= 4'd1;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            hh_tens <= 4'd0;
                            pm_reg <= ~pm_reg; // Toggle AM/PM
                        end else if (hh_ones == 4'd9) begin
                            hh_ones <= 4'd0;
                            hh_tens <= hh_tens + 4'd1;
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule"
N/A,N/A,-1,62.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]    
``
reg [7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,63.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0 hh1, hh0, mm1, mm0, ss1, ss0;
   reg pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           hh1 <= 4'd1;
           hh0 <= 4'd2;
           mm1 <= 4'd0;
           mm0 <= 4'd0;
           ss1 <= 4'd0;
           ss0 <= 4'd0;
           pm_reg <= 1'b0; // AM
       end else if (ena) begin
           // Increment seconds
           if (ss0 == 4'd9) begin
               ss0 <= 4'd0;
               if (ss1 == 4'd5) begin
                   ss1 <= 4'd0;
                   // Increment minutes
                   if (mm0 == 4'd9) begin
                       mm0 <= 4'd0;
                       if (mm1 == 4'd5) begin
                           mm1 <= 4'd0;
                           // Increment hours
                           if (hh0 == 4'd9 || (hh1 == 4'd1 && hh0 == 4'd2)) begin
                               hh0 <= 4'd1;
                               hh1 <= (hh1 == 4'd1) ? 4'd0 : 4'd1;
                               pm_reg <= ~pm_reg; // Toggle AM/PM
                           end else begin
                               hh0 <= hh0 + 4'd1;
                           end
                       end else begin
                           mm1 <= mm1 + 4'd1;
                       end
                   end else begin
                       mm0 <= mm0 + 4'd1;
                   end
               end else begin
                   ss1 <= ss1 + 4'd1;
               end
           end else begin
               ss0 <= ss0 + 4'd1;
           end
       end
   end

   assign hh = {hh1, hh0};
   assign mm = {mm1, mm0};
   assign ss = {ss1, ss0};
   assign pm = pm_reg;

endmodule"
N/A,N/A,-1,64.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 hh;reg [7:0] mm;
    reg [7:0] ss;
    reg pm_reg;

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 0; // AM
        end else if (ena) begin
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Set hours to 01
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end
endmodule"
N/A,N/A,-1,65.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;```reg [7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,66.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
    reg pm_reg;

    assign ss = {sec_tens, sec_ones};
    assign mm = {min_tens, min_ones};
    assign hh = {hour_tens, hour_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec_ones <= 4'd0;
            sec_tens <= 4'd0;
            min_ones <= 4'd0;
            min_tens <= 4'd0;
            hour_ones <= 4'd2;
            hour_tens <= 4'd1;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (sec_ones == 4'd9) begin
                sec_ones <= 4'd0;
                if (sec_tens == 4'd5) begin
                    sec_tens <= 4'd0;
                    // Increment minutes
                    if (min_ones == 4'd9) begin
                        min_ones <= 4'd0;
                        if (min_tens == 4'd5) begin
                            min_tens <= 4'd0;
                            // Increment hours
                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                                hour_ones <= 4'd1;
                                if (hour_tens == 4'd1) begin
                                    hour_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end
                            end else begin
                                hour_ones <= hour_ones + 4'd1;
                            end
                        end else begin
                            min_tens <= min_tens + 4'd1;
                        end
                    end else begin
                        min_ones <= min_ones + 4'd1;
                    end
                end else begin
                    sec_tens <= sec_tens + 4'd1;
                end
            end else begin
                sec_ones <= sec_ones + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-1,67.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 hh;]n/an/areg [7:0] hh;
    reg [7:0] mm;
    reg [7:0] ss;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh <= 8'h12;
            mm <= 8'h00;
            ss <= 8'h00;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,68.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]   
`
``reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'h12;
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,69.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or negedge reset)
    begin
        if (!reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end
endmodule"
N/A,N/A,-0.1,70.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0  ]hh;
    reg [7:0] mm;
    reg [7:0] ss;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Reset hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule"
N/A,N/A,-0.1,71.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg[7:0] seconds;
reg[7:0] minutes;
reg[7:0] hours;
reg pm_reg;

assign ss = seconds;
assign mm = minutes;
assign hh = hours;
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset the clock to 12:00:00 AM
        seconds <= 8'h00;
        minutes <= 8'h00;
        hours <= 8'h12;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (seconds == 8'h59) begin
            seconds <= 8'h00;
            // Increment minutes
            if (minutes == 8'h59) begin
                minutes <= 8'h00;
                // Increment hours
                if (hours == 8'h12) begin
                    hours <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hours == 8'h11) begin
                    hours <= 8'h12;
                end else begin
                    hours <= hours + 1;
                end
            end else begin
                minutes <= minutes + 1;
            end
        end else begin
            seconds <= seconds + 1;
        end
    end
end

endmodule"
N/A,N/A,-1,72.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:]0reg [3:0] sec_ones, sec_tens;
   reg [3:0] min_ones, min_tens;
   reg [3:0] hour_ones, hour_tens;
   reg pm_reg;

   assign ss = {sec_tens, sec_ones};
   assign mm = {min_tens, min_ones};
   assign hh = {hour_tens, hour_ones};
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           sec_ones <= 4'd0;
           sec_tens <= 4'd0;
           min_ones <= 4'd0;
           min_tens <= 4'd0;
           hour_ones <= 4'd2;
           hour_tens <= 4'd1;
           pm_reg <= 1'b0; // AM
       end else if (ena) begin
           // Increment seconds
           if (sec_ones == 4'd9) begin
               sec_ones <= 4'd0;
               if (sec_tens == 4'd5) begin
                   sec_tens <= 4'd0;
                   // Increment minutes
                   if (min_ones == 4'd9) begin
                       min_ones <= 4'd0;
                       if (min_tens == 4'd5) begin
                           min_tens <= 4'd0;
                           // Increment hours
                           if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                               hour_ones <= 4'd1;
                               if (hour_tens == 4'd1) begin
                                   hour_tens <= 4'd0;
                                   pm_reg <= ~pm_reg; // Toggle AM/PM
                               end
                           end else begin
                               hour_ones <= hour_ones + 4'd1;
                           end
                       end else begin
                           min_tens <= min_tens + 4'd1;
                       end
                   end else begin
                       min_ones <= min_ones + 4'd1;
                   end
               end else begin
                   sec_tens <= sec_tens + 4'd1;
               end
           end else begin
               sec_ones <= sec_ones + 4'd1;
           end
       end
   end
endmodule"
N/A,N/A,-1,73.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[3:0 hh];reg [3:0] mm_high, mm_low, ss_high, ss_low;
   reg pm_reg;

   assign hh = {hh_high, hh_low};
   assign mm = {mm_high, mm_low};
   assign ss = {ss_high, ss_low};
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_high <= 4'd1;
           hh_low <= 4'd2;
           mm_high <= 4'd0;
           mm_low <= 4'd0;
           ss_high <= 4'd0;
           ss_low <= 4'd0;
           pm_reg <= 1'b0;
       end else if (ena) begin
           if (ss_low == 4'd9) begin
               ss_low <= 4'd0;
               if (ss_high == 4'd5) begin
                   ss_high <= 4'd0;
                   if (mm_low == 4'd9) begin
                       mm_low <= 4'd0;
                       if (mm_high == 4'd5) begin
                           mm_high <= 4'd0;
                           if (hh_low == 4'd9 || (hh_high == 4'd1 && hh_low == 4'd2)) begin
                               hh_low <= 4'd1;
                               if (hh_high == 4'd1 && hh_low == 4'd2) begin
                                   hh_high <= 4'd0;
                                   pm_reg <= ~pm_reg;
                               end else begin
                                   hh_high <= hh_high + 4'd1;
                               end
                           end else begin
                               hh_low <= hh_low + 4'd1;
                           end
                       end else begin
                           mm_high <= mm_high + 4'd1;
                       end
                   end else begin
                       mm_low <= mm_low + 4'd1;
                   end
               end else begin
                   ss_high <= ss_high + 4'd1;
               end
           end else begin
               ss_low <= ss_low + 4'd1;
           end
       end
   end
endmodule"
N/A,N/A,-1,74.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 hhreg [7:0] mm;
   reg [7:0] ss;
   reg pm_reg;

   assign hh = hh_reg;
   assign mm = mm_reg;
   assign ss = ss_reg;
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_reg <= 8'h12; // 12 in BCD
           mm_reg <= 8'h00; // 00 in BCD
           ss_reg <= 8'h00; // 00 in BCD
           pm_reg <= 0;     // AM
       end else if (ena) begin
           // Increment seconds
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               // Increment minutes
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   // Increment hours
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end
endmodule"
N/A,N/A,-1,75.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] h;,
reg[7:0] m;
   reg[7:0] s;
   reg pm_reg;

   assign hh = h;
   assign mm = m;
   assign ss = s;
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           h <= 8'b0001_0010; // 12 in BCD
           m <= 8'b0000_0000; // 00 in BCD
           s <= 8'b0000_0000; // 00 in BCD
           pm_reg <= 0; // AM
       end else if (ena) begin
           if (s == 8'b0101_1001) begin // 59 in BCD
               s <= 8'b0000_0000;
               if (m == 8'b0101_1001) begin // 59 in BCD
                   m <= 8'b0000_0000;
                   if (h == 8'b0001_0010) begin // 12 in BCD
                       h <= 8'b0000_0001; // 01 in BCD
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (h == 8'b0001_0001) begin // 11 in BCD
                       h <= 8'b0001_0010; // 12 in BCD
                   end else begin
                       h <= h + 1;
                   end
               end else begin
                   m <= m + 1;
               end
           end else begin
               s <= s + 1;
           end
       end
   end
endmodule"
N/A,N/A,-1,76.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]   n/areg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'h12;
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,77.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3::0]`   reg [3:0] hh_tens, hh_ones, mm_tens, mm_ones, ss_tens, ss_ones;
   reg pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           hh_tens <= 4'd1;
           hh_ones <= 4'd2;
           mm_tens <= 4'd0;
           mm_ones <= 4'd0;
           ss_tens <= 4'd0;
           ss_ones <= 4'd0;
           pm_reg <= 1'b0;
       end else if (ena) begin
           // Increment seconds
           if (ss_ones == 4'd9) begin
               ss_ones <= 4'd0;
               if (ss_tens == 4'd5) begin
                   ss_tens <= 4'd0;
                   // Increment minutes
                   if (mm_ones == 4'd9) begin
                       mm_ones <= 4'd0;
                       if (mm_tens == 4'd5) begin
                           mm_tens <= 4'd0;
                           // Increment hours
                           if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                               hh_ones <= 4'd1;
                               hh_tens <= 4'd0;
                               pm_reg <= ~pm_reg; // Toggle AM/PM
                           end else if (hh_ones == 4'd9) begin
                               hh_ones <= 4'd0;
                               hh_tens <= hh_tens + 4'd1;
                           end else begin
                               hh_ones <= hh_ones + 4'd1;
                           end
                       end else begin
                           mm_tens <= mm_tens + 4'd1;
                       end
                   end else begin
                       mm_ones <= mm_ones + 4'd1;
                   end
               end else begin
                   ss_tens <= ss_tens + 4'd1;
               end
           end else begin
               ss_ones <= ss_ones + 4'd1;
           end
       end
   end

   assign hh = {hh_tens, hh_ones};
   assign mm = {mm_tens, mm_ones};
   assign ss = {ss_tens, ss_ones};
   assign pm = pm_reg;

endmodule"
N/A,N/A,-1,78.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or negedge reset)
   begin
       if (!reset) begin
           // Reset the clock to 12:00:00 AM
           ss <= 8'b00000000; // 00 seconds
           mm <= 8'b00000000; // 00 minutes
           hh <= 8'b00010010; // 12 hours
           pm <= 0;           // AM
       end
       else if (ena) begin
           // Increment seconds
           if (ss[3:0] == 4'b1001) begin
               ss[3:0] <= 4'b0000;
               if (ss[7:4] == 4'b0101) begin
                   ss[7:4] <= 4'b0000;
                   // Increment minutes
                   if (mm[3:0] == 4'b1001) begin
                       mm[3:0] <= 4'b0000;
                       if (mm[7:4] == 4'b0101) begin
                           mm[7:4] <= 4'b0000;
                           // Increment hours
                           if (hh[3:0] == 4'b1001) begin
                               hh[3:0] <= 4'b0000;
                               if (hh[7:4] == 4'b0001) begin
                                   hh[7:4] <= 4'b0000;
                                   // Toggle AM/PM
                                   pm <= ~pm;
                               end
                               else begin
                                   hh[7:4] <= hh[7:4] + 1;
                               end
                           end
                           else if (hh == 8'b00010010) begin // 12
                               hh <= 8'b00000001; // 01
                               pm <= ~pm; // Toggle AM/PM
                           end
                           else begin
                               hh[3:0] <= hh[3:0] + 1;
                           end
                       end
                       else begin
                           mm[7:4] <= mm[7:4] + 1;
                       end
                   end
                   else begin
                       mm[3:0] <= mm[3:0] + 1;
                   end
               end
               else begin
                   ss[7:4] <= ss[7:4] + 1;
               end
           end
           else begin
               ss[3:0] <= ss[3:0] + 1;
           end
       end
   end
endmodule"
N/A,N/A,-1,79.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]`n/a
reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Reset hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,80.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0  ] hh_reg;;
reg [7:0] mm_reg;
    reg [7:0] ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hh_reg <= 8'h12; // 12:00:00 AM
            mm_reg <= 8'h00;
            ss_reg <= 8'h00;
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'h59) begin
                ss_reg <= 8'h00;
                // Increment minutes
                if (mm_reg == 8'h59) begin
                    mm_reg <= 8'h00;
                    // Increment hours
                    if (hh_reg == 8'h12) begin
                        hh_reg <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hh_reg == 8'h11) begin
                        hh_reg <= 8'h12;
                    end else begin
                        hh_reg <= hh_reg + 1;
                    end
                end else begin
                    mm_reg <= mm_reg + 1;
                end
            end else begin
                ss_reg <= ss_reg + 1;
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,81.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [7:0 ss_reg, mm_reg, hh_reg;
reg pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset the clock to 12:00:00 AM
        ss_reg <= 8'h00;
        mm_reg <= 8'h00;
        hh_reg <= 8'h12;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_reg == 8'h59) begin
            ss_reg <= 8'h00;
            // Increment minutes
            if (mm_reg == 8'h59) begin
                mm_reg <= 8'h00;
                // Increment hours
                if (hh_reg == 8'h12) begin
                    hh_reg <= 8'h01;
                    pm_reg <= ~pm_reg; // Toggle AM/PM
                end else if (hh_reg == 8'h11) begin
                    hh_reg <= 8'h12;
                end else begin
                    hh_reg <= hh_reg + 1;
                end
            end else begin
                mm_reg <= mm_reg + 1;
            end
        end else begin
            ss_reg <= ss_reg + 1;
        end
    end
end

assign ss = ss_reg;
assign mm = mm_reg;
assign hh = hh_reg;
assign pm = pm_reg;

endmodule"
N/A,N/A,-1,82.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0 hh;]n/an/areg [7:0] hh;
    reg [7:0] mm;
    reg [7:0] ss;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh[3:0] <= hh[3:0] + 1; // Increment hours
                    end
                end else if (mm[3:0] == 4'b1001) begin // If lower BCD digit is 9
                    mm[3:0] <= 4'b0000; // Reset lower BCD digit
                    mm[7:4] <= mm[7:4] + 1; // Increment upper BCD digit
                end else begin
                    mm[3:0] <= mm[3:0] + 1; // Increment minutes
                end
            end else if (ss[3:0] == 4'b1001) begin // If lower BCD digit is 9
                ss[3:0] <= 4'b0000; // Reset lower BCD digit
                ss[7:4] <= ss[7:4] + 1; // Increment upper BCD digit
            end else begin
                ss[3:0] <= ss[3:0] + 1; // Increment seconds
            end
        end
    end
endmodule"
N/A,N/A,-1,83.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;`]`reg [7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,84.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0 hh0, hh1, mm0, mm1, ss0, ss1;
   reg pm_reg;

   assign hh = {hh1, hh0};
   assign mm = {mm1, mm0};
   assign ss = {ss1, ss0};
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           hh0 <= 4'd2;
           hh1 <= 4'd1;
           mm0 <= 4'd0;
           mm1 <= 4'd0;
           ss0 <= 4'd0;
           ss1 <= 4'd0;
           pm_reg <= 1'b0;
       end else if (ena) begin
           // Increment seconds
           if (ss0 == 4'd9) begin
               ss0 <= 4'd0;
               if (ss1 == 4'd5) begin
                   ss1 <= 4'd0;
                   // Increment minutes
                   if (mm0 == 4'd9) begin
                       mm0 <= 4'd0;
                       if (mm1 == 4'd5) begin
                           mm1 <= 4'd0;
                           // Increment hours
                           if (hh0 == 4'd9 || (hh1 == 4'd1 && hh0 == 4'd2)) begin
                               hh0 <= 4'd1;
                               if (hh1 == 4'd1) begin
                                   hh1 <= 4'd0;
                                   pm_reg <= ~pm_reg; // Toggle AM/PM
                               end else begin
                                   hh1 <= hh1 + 4'd1;
                               end
                           end else begin
                               hh0 <= hh0 + 4'd1;
                           end
                       end else begin
                           mm1 <= mm1 + 4'd1;
                       end
                   end else begin
                       mm0 <= mm0 + 4'd1;
                   end
               end else begin
                   ss1 <= ss1 + 4'd1;
               end
           end else begin
               ss0 <= ss0 + 4'd1;
           end
       end
   end
endmodule"
N/A,N/A,-0.1,85.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0   ]hh;
   reg[7:0] mm;
   reg[7:0] ss;
   reg pm;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           // Reset to 12:00:00 AM
           hh <= 8'b0001_0010; // 12 in BCD
           mm <= 8'b0000_0000; // 00 in BCD
           ss <= 8'b0000_0000; // 00 in BCD
           pm <= 0; // AM
       end else if (ena) begin
           // Increment seconds
           if (ss == 8'b0101_1001) begin // 59 in BCD
               ss <= 8'b0000_0000; // Reset seconds to 00
               // Increment minutes
               if (mm == 8'b0101_1001) begin // 59 in BCD
                   mm <= 8'b0000_0000; // Reset minutes to 00
                   // Increment hours
                   if (hh == 8'b0001_0010) begin // 12 in BCD
                       hh <= 8'b0000_0001; // Set hours to 01
                       pm <= ~pm; // Toggle AM/PM
                   end else if (hh == 8'b0001_0001) begin // 11 in BCD
                       hh <= 8'b0001_0010; // Set hours to 12
                   end else begin
                       hh <= hh + 1; // Increment hours
                   end
               end else begin
                   mm <= mm + 1; // Increment minutes
               end
           end else begin
               ss <= ss + 1; // Increment seconds
           end
       end
   end

endmodule"
N/A,N/A,-1,86.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[3:0 h];reg [3:0] m1, m0, s1, s0;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            h <= 4'd1;
            m1 <= 4'd0;
            m0 <= 4'd0;
            s1 <= 4'd0;
            s0 <= 4'd0;
            pm_reg <= 1'b0;
        end else if (ena) begin
            // Increment seconds
            if (s0 == 4'd9) begin
                s0 <= 4'd0;
                if (s1 == 4'd5) begin
                    s1 <= 4'd0;
                    // Increment minutes
                    if (m0 == 4'd9) begin
                        m0 <= 4'd0;
                        if (m1 == 4'd5) begin
                            m1 <= 4'd0;
                            // Increment hours
                            if (h == 4'd2 && m0 == 4'd3) begin
                                h <= 4'd1;
                                pm_reg <= ~pm_reg;
                            end else if (h == 4'd9) begin
                                h <= 4'd0;
                            end else begin
                                h <= h + 4'd1;
                            end
                        end else begin
                            m1 <= m1 + 4'd1;
                        end
                    end else begin
                        m0 <= m0 + 4'd1;
                    end
                end else begin
                    s1 <= s1 + 4'd1;
                end
            end else begin
                s0 <= s0 + 4'd1;
            end
        end
    end

    assign hh = {4'b0000, h};
    assign mm = {m1, m0};
    assign ss = {s1, s0};
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,87.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7::0]hh, mm, ss;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'b0101_1001) begin // 59 in BCD
                ss <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm == 8'b0101_1001) begin // 59 in BCD
                    mm <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh == 8'b0001_0010) begin // 12 in BCD
                        hh <= 8'b0000_0001; // Set hours to 01
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'b0001_0001) begin // 11 in BCD
                        hh <= 8'b0001_0010; // Set hours to 12
                    end else begin
                        hh <= hh + 1; // Increment hours
                    end
                end else begin
                    mm <= mm + 1; // Increment minutes
                end
            end else begin
                ss <= ss + 1; // Increment seconds
            end
        end
    end
endmodule"
N/A,N/A,-1,88.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk orposedge reset)
    begin
        if (reset) begin
            // Reset the clock to 12:00:00 AM
            ss <= 8'h00; // 00 seconds
            mm <= 8'h00; // 00 minutes
            hh <= 8'h12; // 12 hours
            pm <= 1'b0;  // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end
                    else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end
                    else begin
                        hh <= hh + 1;
                    end
                end
                else begin
                    mm <= mm + 1;
                end
            end
            else begin
                ss <= ss + 1;
            end
        end
    end

endmodule"
N/A,N/A,-1,89.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

`timescale 1ns / 1ps

    reg [7:0] hours;
    reg [7:0] minutes;
    reg [7:0] seconds;
    reg pm_reg;

    assign hh = hours;
    assign mm = minutes;
    assign ss = seconds;
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            hours <= 8'h12; // 12:00:00 AM
            minutes <= 8'h00;
            seconds <= 8'h00;
            pm_reg <= 0; // AM
        end else if (ena) begin
            // Increment seconds
            if (seconds == 8'h59) begin
                seconds <= 8'h00;
                // Increment minutes
                if (minutes == 8'h59) begin
                    minutes <= 8'h00;
                    // Increment hours
                    if (hours == 8'h12) begin
                        hours <= 8'h01;
                        pm_reg <= ~pm_reg; // Toggle AM/PM
                    end else if (hours == 8'h11) begin
                        hours <= 8'h12;
                    end else begin
                        hours <= hours + 8'h01;
                    end
                end else begin
                    minutes <= minutes + 8'h01;
                end
            end else begin
                seconds <= seconds + 8'h01;
            end
        end
    end

endmodule"
N/A,N/A,-1,90.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0] hh;;
reg [7:0] mm;
   reg [7:0] ss;
   reg pm_reg;

   assign hh = hh_reg;
   assign mm = mm_reg;
   assign ss = ss_reg;
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_reg <= 8'h12; // 12:00:00 AM
           mm_reg <= 8'h00;
           ss_reg <= 8'h00;
           pm_reg <= 1'b0;  // AM
       end else if (ena) begin
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end
endmodule"
N/A,N/A,-1,91.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 h];n/areg [7:0] m;
   reg [7:0] s;
   reg pm_reg;

   assign hh = h;
   assign mm = m;
   assign ss = s;
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           h <= 8'h12; // 12 in BCD
           m <= 8'h00; // 00 in BCD
           s <= 8'h00; // 00 in BCD
           pm_reg <= 0; // AM
       end else if (ena) begin
           // Increment seconds
           if (s == 8'h59) begin
               s <= 8'h00;
               // Increment minutes
               if (m == 8'h59) begin
                   m <= 8'h00;
                   // Increment hours
                   if (h == 8'h12) begin
                       h <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (h == 8'h11) begin
                       h <= 8'h12;
                   end else begin
                       h <= h + 8'h01;
                   end
               end else begin
                   m <= m + 8'h01;
               end
           end else begin
               s <= s + 8'h01;
           end
       end
   end
endmodule"
N/A,N/A,-1,92.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

reg [3:0ss];
reg [3:0] mm_ones, mm_tens;
reg [3:0] hh_ones, hh_tens;
reg pm_reg;

assign ss = {ss_tens, ss_ones};
assign mm = {mm_tens, mm_ones};
assign hh = {hh_tens, hh_ones};
assign pm = pm_reg;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        ss_ones <= 4'd0;
        ss_tens <= 4'd0;
        mm_ones <= 4'd0;
        mm_tens <= 4'd0;
        hh_ones <= 4'd2;
        hh_tens <= 4'd1;
        pm_reg <= 1'b0;
    end else if (ena) begin
        // Increment seconds
        if (ss_ones == 4'd9) begin
            ss_ones <= 4'd0;
            if (ss_tens == 4'd5) begin
                ss_tens <= 4'd0;
                // Increment minutes
                if (mm_ones == 4'd9) begin
                    mm_ones <= 4'd0;
                    if (mm_tens == 4'd5) begin
                        mm_tens <= 4'd0;
                        // Increment hours
                        if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                            hh_ones <= 4'd1;
                            hh_tens <= 4'd0;
                            pm_reg <= ~pm_reg; // Toggle AM/PM
                        end else if (hh_ones == 4'd9) begin
                            hh_ones <= 4'd0;
                            hh_tens <= hh_tens + 4'd1;
                        end else begin
                            hh_ones <= hh_ones + 4'd1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 4'd1;
                    end
                end else begin
                    mm_ones <= mm_ones + 4'd1;
                end
            end else begin
                ss_tens <= ss_tens + 4'd1;
            end
        end else begin
            ss_ones <= ss_ones + 4'd1;
        end
    end
end

endmodule"
N/A,N/A,-1,93.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3:0 h0;]
    reg [3:0] h1;
    reg [3:0] m0, m1;
    reg [3:0] s0, s1;
    reg pm_reg;

    assign hh = {h1, h0};
    assign mm = {m1, m0};
    assign ss = {s1, s0};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            h0 <= 4'd2;
            h1 <= 4'd1;
            m0 <= 4'd0;
            m1 <= 4'd0;
            s0 <= 4'd0;
            s1 <= 4'd0;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (s0 == 4'd9) begin
                s0 <= 4'd0;
                if (s1 == 4'd5) begin
                    s1 <= 4'd0;
                    // Increment minutes
                    if (m0 == 4'd9) begin
                        m0 <= 4'd0;
                        if (m1 == 4'd5) begin
                            m1 <= 4'd0;
                            // Increment hours
                            if (h0 == 4'd9 || (h1 == 4'd1 && h0 == 4'd2)) begin
                                h0 <= 4'd1;
                                if (h1 == 4'd1) begin
                                    h1 <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end else begin
                                    h1 <= h1 + 4'd1;
                                end
                            end else begin
                                h0 <= h0 + 4'd1;
                            end
                        end else begin
                            m1 <= m1 + 4'd1;
                        end
                    end else begin
                        m0 <= m0 + 4'd1;
                    end
                end else begin
                    s1 <= s1 + 4'd1;
                end
            end else begin
                s0 <= s0 + 4'd1;
            end
        end
    end
endmodule"
N/A,N/A,-1,94.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;
]reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 8'h01;
                    end
                end else begin
                    mm <= mm + 8'h01;
                end
            end else begin
                ss <= ss + 8'h01;
            end
        end
    end
endmodule"
N/A,N/A,-1,95.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [7:0) hhreg [7:0] mm;
   reg [7:0] ss;
   reg pm_reg;

   assign hh = hh_reg;
   assign mm = mm_reg;
   assign ss = ss_reg;
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_reg <= 8'h12; // 12 in BCD
           mm_reg <= 8'h00; // 00 in BCD
           ss_reg <= 8'h00; // 00 in BCD
           pm_reg <= 0;     // AM
       end else if (ena) begin
           // Increment seconds
           if (ss_reg == 8'h59) begin
               ss_reg <= 8'h00;
               // Increment minutes
               if (mm_reg == 8'h59) begin
                   mm_reg <= 8'h00;
                   // Increment hours
                   if (hh_reg == 8'h12) begin
                       hh_reg <= 8'h01;
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'h11) begin
                       hh_reg <= 8'h12;
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end
endmodule"
N/A,N/A,-1,96.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;<|end|> reg[7:0] ss;
    reg [7:0] mm;
    reg [7:0] hh;
    reg pm;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            ss <= 8'h00;
            mm <= 8'h00;
            hh <= 8'h12;
            pm <= 0;
        end else if (ena) begin
            // Increment seconds
            if (ss == 8'h59) begin
                ss <= 8'h00;
                // Increment minutes
                if (mm == 8'h59) begin
                    mm <= 8'h00;
                    // Increment hours
                    if (hh == 8'h12) begin
                        hh <= 8'h01;
                        pm <= ~pm; // Toggle AM/PM
                    end else if (hh == 8'h11) begin
                        hh <= 8'h12;
                    end else begin
                        hh <= hh + 1;
                    end
                end else begin
                    mm <= mm + 1;
                end
            end else begin
                ss <= ss + 1;
            end
        end
    end
endmodule"
N/A,N/A,-1,97.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0  ] hh_reg;;
[reg [7:0] mm_reg;
   reg [7:0] ss_reg;
   reg pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_reg <= 8'b0001_0010; // 12 in BCD
           mm_reg <= 8'b0000_0000; // 00 in BCD
           ss_reg <= 8'b0000_0000; // 00 in BCD
           pm_reg <= 0; // AM
       end else if (ena) begin
           if (ss_reg == 8'b0101_1001) begin // 59 in BCD
               ss_reg <= 8'b0000_0000;
               if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                   mm_reg <= 8'b0000_0000;
                   if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                       hh_reg <= 8'b0000_0001; // 01 in BCD
                       pm_reg <= ~pm_reg; // Toggle AM/PM
                   end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                       hh_reg <= 8'b0001_0010; // 12 in BCD
                   end else begin
                       hh_reg <= hh_reg + 1;
                   end
               end else begin
                   mm_reg <= mm_reg + 1;
               end
           end else begin
               ss_reg <= ss_reg + 1;
           end
       end
   end

   assign hh = hh_reg;
   assign mm = mm_reg;
   assign ss = ss_reg;
   assign pm = pm_reg;

endmodule"
N/A,N/A,-1,98.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   always@(posedge clk or negedge reset) begin
        if (!reset) begin
            // Reset the clock to 12:00:00 AM
            hh <= 8'b0001_0010; // 12 in BCD
            mm <= 8'b0000_0000; // 00 in BCD
            ss <= 8'b0000_0000; // 00 in BCD
            pm <= 0; // AM
        end
        else if (ena) begin
            // Increment seconds
            if (ss[3:0] == 4'b1001) begin
                ss[3:0] <= 4'b0000;
                if (ss[7:4] == 4'b0101) begin
                    ss[7:4] <= 4'b0000;
                    // Increment minutes
                    if (mm[3:0] == 4'b1001) begin
                        mm[3:0] <= 4'b0000;
                        if (mm[7:4] == 4'b0101) begin
                            mm[7:4] <= 4'b0000;
                            // Increment hours
                            if (hh == 8'b0001_0010) begin // 12 in BCD
                                hh <= 8'b0000_0001; // 01 in BCD
                                pm <= ~pm; // Toggle AM/PM
                            end
                            else if (hh[3:0] == 4'b1001) begin
                                hh[3:0] <= 4'b0000;
                                hh[7:4] <= hh[7:4] + 1;
                            end
                            else begin
                                hh[3:0] <= hh[3:0] + 1;
                            end
                        end
                        else begin
                            mm[7:4] <= mm[7:4] + 1;
                        end
                    end
                    else begin
                        mm[3:0] <= mm[3:0] + 1;
                    end
                end
                else begin
                    ss[7:4] <= ss[7:4] + 1;
                end
            end
            else begin
                ss[3:0] <= ss[3:0] + 1;
            end
        end
    end

endmodule"
N/A,N/A,-1,99.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg [3::0]`hhreg [3:0] hh_tens, hh_ones;
   reg [3:0] mm_tens, mm_ones;
   reg [3:0] ss_tens, ss_ones;
   reg pm_reg;

   assign hh = {hh_tens, hh_ones};
   assign mm = {mm_tens, mm_ones};
   assign ss = {ss_tens, ss_ones};
   assign pm = pm_reg;

   always @(posedge clk or posedge reset) begin
       if (reset) begin
           hh_tens <= 4'd1;
           hh_ones <= 4'd2;
           mm_tens <= 4'd0;
           mm_ones <= 4'd0;
           ss_tens <= 4'd0;
           ss_ones <= 4'd0;
           pm_reg <= 1'b0;
       end else if (ena) begin
           // Increment seconds
           if (ss_ones == 4'd9) begin
               ss_ones <= 4'd0;
               if (ss_tens == 4'd5) begin
                   ss_tens <= 4'd0;
                   // Increment minutes
                   if (mm_ones == 4'd9) begin
                       mm_ones <= 4'd0;
                       if (mm_tens == 4'd5) begin
                           mm_tens <= 4'd0;
                           // Increment hours
                           if (hh_ones == 4'd9 || (hh_tens == 4'd1 && hh_ones == 4'd2)) begin
                               hh_ones <= 4'd1;
                               if (hh_tens == 4'd1) begin
                                   hh_tens <= 4'd0;
                                   pm_reg <= ~pm_reg;
                               end
                           end else begin
                               hh_ones <= hh_ones + 4'd1;
                           end
                       end else begin
                           mm_tens <= mm_tens + 4'd1;
                       end
                   end else begin
                       mm_ones <= mm_ones + 4'd1;
                   end
               end else begin
                   ss_tens <= ss_tens + 4'd1;
               end
           end else begin
               ss_ones <= ss_ones + 4'd1;
           end
       end
   end
endmodule"
N/A,N/A,-1,100.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   reg[7:0 ss;]    
``
`reg [7:0] hh_reg, mm_reg, ss_reg;
    reg pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset to 12:00:00 AM
            hh_reg <= 8'b0001_0010; // 12 in BCD
            mm_reg <= 8'b0000_0000; // 00 in BCD
            ss_reg <= 8'b0000_0000; // 00 in BCD
            pm_reg <= 1'b0;         // AM
        end else if (ena) begin
            // Increment seconds
            if (ss_reg == 8'b0101_1001) begin // 59 in BCD
                ss_reg <= 8'b0000_0000; // Reset seconds to 00
                // Increment minutes
                if (mm_reg == 8'b0101_1001) begin // 59 in BCD
                    mm_reg <= 8'b0000_0000; // Reset minutes to 00
                    // Increment hours
                    if (hh_reg == 8'b0001_0010) begin // 12 in BCD
                        hh_reg <= 8'b0000_0001; // Reset hours to 01
                        pm_reg <= ~pm_reg;     // Toggle AM/PM
                    end else if (hh_reg == 8'b0001_0001) begin // 11 in BCD
                        hh_reg <= 8'b0001_0010; // Increment to 12
                    end else begin
                        hh_reg <= hh_reg + 1; // Increment hours
                    end
                end else begin
                    mm_reg <= mm_reg + 1; // Increment minutes
                end
            end else begin
                ss_reg <= ss_reg + 1; // Increment seconds
            end
        end
    end

    assign hh = hh_reg;
    assign mm = mm_reg;
    assign ss = ss_reg;
    assign pm = pm_reg;

endmodule"
N/A,N/A,-1,101.0,1,"// Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second).

// reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.

// Hint: Note that 11:59:59 PM advances to 12:00:00 AM, and 12:59:59 PM advances to 01:00:00 PM. There is no 00:00:00.

module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

   //reg [3:0] sec_ones, sec_tens, min_ones, min_tens, hour_ones, hour_tens;
    reg pm_reg;

    assign ss = {sec_tens, sec_ones};
    assign mm = {min_tens, min_ones};
    assign hh = {hour_tens, hour_ones};
    assign pm = pm_reg;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            sec_ones <= 4'd0;
            sec_tens <= 4'd0;
            min_ones <= 4'd0;
            min_tens <= 4'd0;
            hour_ones <= 4'd2;
            hour_tens <= 4'd1;
            pm_reg <= 1'b0; // AM
        end else if (ena) begin
            // Increment seconds
            if (sec_ones == 4'd9) begin
                sec_ones <= 4'd0;
                if (sec_tens == 4'd5) begin
                    sec_tens <= 4'd0;
                    // Increment minutes
                    if (min_ones == 4'd9) begin
                        min_ones <= 4'd0;
                        if (min_tens == 4'd5) begin
                            min_tens <= 4'd0;
                            // Increment hours
                            if (hour_ones == 4'd9 || (hour_tens == 4'd1 && hour_ones == 4'd2)) begin
                                hour_ones <= 4'd1;
                                if (hour_tens == 4'd1) begin
                                    hour_tens <= 4'd0;
                                    pm_reg <= ~pm_reg; // Toggle AM/PM
                                end else begin
                                    hour_tens <= 4'd1;
                                end
                            end else begin
                                hour_ones <= hour_ones + 4'd1;
                            end
                        end else begin
                            min_tens <= min_tens + 4'd1;
                        end
                    end else begin
                        min_ones <= min_ones + 4'd1;
                    end
                end else begin
                    sec_tens <= sec_tens + 4'd1;
                end
            end else begin
                sec_ones <= sec_ones + 4'd1;
            end
        end
    end
endmodule"
