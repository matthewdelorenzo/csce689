Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-0.1,0,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,1,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,2,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,3,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,4,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,5,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,6,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,7,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,8,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,9,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,10,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,11,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,12,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,13,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,14,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,15,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,16,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,17,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,18,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,19,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,20,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,21,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,22,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,23,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,24,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,25,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,26,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,27,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,28,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,29,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,30,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,31,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,32,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,33,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,34,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,35,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,36,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,37,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,38,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,39,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,40,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,41,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,42,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,43,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,44,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,45,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,46,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,47,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,48,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
N/A,N/A,-0.1,49,0,"// Create a single D flip-flop.
// Use a clocked always block
// copy d to q at every positive edge of clk
// Clocked always blocks should use non-blocking assignments

module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );

always @(posedge clk) begin
        q <= d;
    end

endmodule"
