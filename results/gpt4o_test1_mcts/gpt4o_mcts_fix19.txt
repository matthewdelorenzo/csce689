/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/miniconda3/envs/rltf/lib/python3.10/site-packages/bitsandbytes/libbitsandbytes_cpu.so: undefined symbol: cadam32bit_grad_fp32
[2024-10-22 13:18:51,749] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Using CPU
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_prompts/Mux256to1v.v
Prompt str:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

********-- EPISODE-1--************
ORIG MODILE:  top_module
--------MCTS-------
Initializing MCTS tree.
Initialize search (creating root node)

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

Tokens: ['```', '``', '\n', '    \n', '\\n']
Probs: [94.0, 3.64, 2.21, 0.07, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
API response time: 0.600848 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  22
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.56226707e+02 6.03829591e+00 3.66610823e+00 1.16121075e-01
 4.98163961e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
Tokens: ['```', '``', '\n', '\\', '\\n']
Probs: [88.02, 9.28, 2.66, 0.01, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````
API response time: 0.489822 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  23
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  2.0
Iteration TIME (sec):  0.010402395999999925
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [9.51689292e+01 7.39537195e+00 4.49004726e+00 1.42218691e-01
 6.10123757e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [1.71781127e+02 1.81109845e+01 5.19129513e+00 1.95161471e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````
Tokens: ['```', '``', '\n', '\\', 'module']
Probs: [97.06, 2.28, 0.65, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````
API response time: 0.569658 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  24
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  3.0
Iteration TIME (sec):  0.010632691999999722
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [7.29793094e+01 8.53943997e+00 5.18465998e+00 1.64219999e-01
 7.04510230e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [1.04694027e+02 2.21813354e+01 6.35801208e+00 2.39023011e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [189.42372369   4.44968154   1.26854956   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.75, 0.19, 0.06, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````
API response time: 0.591032 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  25
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  4.0
Iteration TIME (sec):  0.009525807999999802
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [61.00402829  9.54738413  5.79662608  0.18360354  0.07876664]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [8.03117330e+01 2.56127999e+01 7.34159997e+00 2.75999999e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [115.49786705   5.44972464   1.55364957   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [1.94673567e+02 3.70806795e-01 1.17096883e-01 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.88, 0.07, 0.04, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````
API response time: 0.549315 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  26
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  5.0
Iteration TIME (sec):  0.01065683400000017
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [53.31851888 10.45863531  6.34988572  0.2011276   0.08628453]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [6.71524524e+01 2.86359808e+01 8.20815830e+00 3.08577380e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [88.628533    6.29279998  1.79399999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [118.71272655   0.45414372   0.14341381   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [1.94927277e+02 1.36613030e-01 7.80645884e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````
Tokens: ['```', '\n', '``', "Here's", 'Here']
Probs: [99.73, 0.15, 0.12, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````
API response time: 0.526886 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  27
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  6.0
Iteration TIME (sec):  0.009978687999999902
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [47.87890112 11.29661725  6.85866047  0.21724264  0.09319794]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [5.87067278e+01 3.13691453e+01 8.99158692e+00 3.38029583e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [74.12630122  7.03556426  2.00575297  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [91.103333  0.5244    0.1656    0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [1.18868092e+02 1.67316107e-01 9.56092042e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [194.63453496   0.29274221   0.23419377   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````
Tokens: ['```', '``', '\n', "Here's", 'module']
Probs: [99.56, 0.25, 0.19, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````
API response time: 0.576833 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  28
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  7.0
Iteration TIME (sec):  0.010771774000000178
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [43.77905921 12.07659182  7.33221646  0.23224215  0.09963279]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [5.27288435e+01 3.38825495e+01 9.71202388e+00 3.65113680e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [64.81830271  7.7070745   2.19719229  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [76.20148409  0.58629702  0.18514643  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [91.222933  0.1932    0.1104    0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [118.68882424   0.35853452   0.28682761   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [194.30276046   0.48790368   0.37080679   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````
Tokens: ['```', '``', '\n', "Here's", 'module']
Probs: [99.05, 0.52, 0.4, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````
API response time: 0.601039 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  29
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  8.0
Iteration TIME (sec):  0.010122975999999895
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [40.55086154 12.80915996  7.77698998  0.24633     0.10567653]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [4.82231791e+01 3.62219690e+01 1.03825903e+01 3.90322942e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [58.2298896   8.3245919   2.37323892  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [66.63690186  0.64225621  0.20281775  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [76.30177174  0.21600417  0.12343095  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [91.084933  0.414     0.3312    0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [118.48565469   0.59755753   0.45414372   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [1.93307437e+02 1.01483965e+00 7.80645884e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.55, 0.25, 0.19, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````
API response time: 0.664406 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  30
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  9.0
Iteration TIME (sec):  0.010424259000000102
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [37.92594859 13.50204012  8.19766722  0.25965462  0.11139285]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [4.46753498e+01 3.84191999e+01 1.10124000e+01 4.13999999e-02
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [53.26392105  8.89936307  2.53709912  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [59.86681593  0.69371599  0.21906821  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [66.72478956  0.23662071  0.13521183  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [76.18605523  0.46286607  0.37029286  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [90.928533  0.69      0.5244    0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [1.17876146e+02 1.24291966e+00 9.56092042e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [194.28324431   0.48790368   0.37080679   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.07, 0.52, 0.4, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````
API response time: 0.604342 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  31
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  10.0
Iteration TIME (sec):  0.010661477999999835
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [35.73841052 14.16105915  8.59778592  0.27232806  0.1168298 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [41.79047517 40.49739249 11.60808879  0.04363943  0.04363943]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [49.35354983  9.43919997  2.69099999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [54.76387635  0.74161359  0.23419377  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [59.94592389  0.25557958  0.14604547  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [66.62338068  0.50704438  0.4056355   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [76.05490984  0.77144345  0.58629702  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [9.04593330e+01 1.43520000e+00 1.10400000e+00 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [118.47370354   0.59755753   0.45414372   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [193.34646925   1.01483965   0.78064588   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````
Tokens: ['```', '``', '\n', "Here's", 'module']
Probs: [99.14, 0.52, 0.32, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````
API response time: 0.634465 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  32
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  11.0
Iteration TIME (sec):  0.010600425000000246
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [33.87961061 14.7907439   8.98009451  0.28443738  0.12202475]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [39.38624522 42.47402357 12.17466624  0.04576942  0.04576942]  taking action:  1  corresponding to token:  ``
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````
Tokens: ['```', '``', '\n', 'module', '\\']
Probs: [91.46, 7.51, 1.02, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````
API response time: 0.675184 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  24
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  12.0
Iteration TIME (sec):  0.00935496899999988
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [32.27512618 15.39469434  9.34677871  0.29605181  0.12700739]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [41.17761081 21.68133539 12.71602416  0.0478046   0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [46.17381363  9.9497904   2.83656305  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [50.74562482  0.7866      0.2484      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [54.8363649   0.27322606  0.15612918  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [59.85464547  0.54767052  0.43813642  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [66.50845062  0.84507396  0.64225621  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [7.56614737e+01 1.60460238e+00 1.23430952e+00 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [90.919333  0.69      0.5244    0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [117.90004831   1.24291966   0.95609204   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [1.93483082e+02 1.01483965e+00 6.24516707e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.22, 1.09, 0.66, 0.01, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````
API response time: 0.646412 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  33
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  13.0
Iteration TIME (sec):  0.010770604000000183
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [30.87207812 15.97582932  9.69961066  0.30722749  0.1318018 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [38.90524166 22.58706585 13.23525758  0.04975661  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [43.52380097 10.4354282   2.97501243  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [47.47814775  0.8291492   0.26183659  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [50.81289982  0.2898      0.1656      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [54.75272427  0.58548441  0.46838753  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [59.7511966   0.9127842   0.69371599  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [6.61636604e+01 1.75775383e+00 1.35211833e+00 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [76.0471954   0.77144345  0.58629702  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [90.477733  1.4352    1.104     0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [1.17983706e+02 1.24291966e+00 7.64873634e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [1.91687597e+02 2.12726003e+00 1.28806571e+00 1.95161471e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````
Tokens: ['```', '``', "Here's", '\n', 'Here']
Probs: [99.69, 0.12, 0.12, 0.03, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````
API response time: 0.617924 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  34
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  14.0
Iteration TIME (sec):  0.010930198999999696
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [29.63174704 16.5365544  10.04005089  0.31801066  0.13642782]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [36.95751175 23.4585805  13.73487589  0.05163487  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [41.27195163 10.89944928  3.10729914  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [44.75499842  0.86961902  0.27461653  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [47.54118248  0.30547602  0.17455773  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [50.73527482  0.621       0.4968      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [54.65793155  0.97580735  0.74161359  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [5.94408500e+01 1.89859113e+00 1.46045472e+00 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [66.50169003  0.84507396  0.64225621  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [75.67690255  1.60460238  1.23430952  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [9.05421330e+01 1.43520000e+00 8.83199997e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [1.16884201e+02 2.60535082e+00 1.57755187e+00 2.39023011e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [1.94556470e+02 2.34193765e-01 2.34193765e-01 5.85484413e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  13
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '    \n']
Probs: [97.48, 1.39, 1.08, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````
API response time: 0.618249 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  35
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  15.0
Iteration TIME (sec):  0.0107607970000001
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [28.52505709 17.07887994 10.36931997  0.32844     0.14090205]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [35.26476848 24.29948688 14.21694722  0.05344717  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [39.32813596 11.34450649  3.23417948  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [42.44099144  0.90828744  0.28682761  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [44.81449867  0.32038595  0.18307769  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [47.4684501   0.65459147  0.52367318  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [50.64729982  1.035       0.7866      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [5.43735534e+01 2.02967930e+00 1.56129177e+00 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [59.74511137  0.9127842   0.69371599  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [66.17718163  1.75775383  1.35211833  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [7.57309036e+01 1.60460238e+00 9.87447615e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [8.96957330e+01 3.00839999e+00 1.82159999e+00 2.75999999e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [1.18641020e+02 2.86827613e-01 2.86827613e-01 7.17069032e-02
 4.78046021e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [1.90243402e+02 2.71274445e+00 2.10774389e+00 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  14
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````
Tokens: ['```', '\n', '``', "Here's", 'module']
Probs: [99.06, 0.52, 0.32, 0.07, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````
API response time: 0.757350 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  36
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  16.0
Iteration TIME (sec):  0.010708294000000063
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [27.52970046 17.60450649 10.68845037  0.3385482   0.1452385 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [33.77645705 25.11279991 14.68319995  0.0552      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [37.62831271 11.77275076  3.35626666  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [40.44351324  0.94537554  0.29853964  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [42.49748779  0.33463221  0.19121841  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [44.74584453  0.68654133  0.54923306  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [47.38602006  1.09098579  0.8291492   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [5.03833748e+01 2.15279999e+00 1.65599999e+00 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [54.65235551  0.97580735  0.74161359  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [59.45302043  1.89859113  1.46045472  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [6.62245058e+01 1.75775383e+00 1.08169467e+00 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [7.50211756e+01 3.36349344e+00 2.03661071e+00 3.08577380e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [9.10481330e+01 3.31199999e-01 3.31199999e-01 8.27999997e-02
 5.51999998e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [1.15999815e+02 3.32241985e+00 2.58144851e+00 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [1.93326953e+02 1.01483965e+00 6.24516707e-01 1.36613030e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  15
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [97.1, 1.78, 1.08, 0.02, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````
API response time: 0.644748 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  37
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  17.0
Iteration TIME (sec):  0.011737464999999947
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [26.62824245 18.11488773 10.9983247   0.34836323  0.14944919]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [32.45491621 25.90106985 15.13509608  0.05689886  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [36.12558802 12.18595476  3.47406605  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [38.69675736  0.98106256  0.30980923  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [40.49741623  0.34829625  0.19902643  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [42.4322997   0.71706903  0.57365523  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [44.66803652  1.14423555  0.86961902  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [4.71387299e+01 2.26925044e+00 1.74557726e+00 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [50.64212482  1.035       0.7866      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [54.38470549  2.0296793   1.56129177  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [5.94956170e+01 1.89859113e+00 1.16836377e+00 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [6.56025313e+01 3.68452246e+00 2.23099525e+00 3.38029583e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [7.61551975e+01 3.70292856e-01 3.70292856e-01 9.25732139e-02
 6.17154760e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [8.90149330e+01 3.83639999e+00 2.98079999e+00 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [1.17888097e+02 1.24291966e+00 7.64873634e-01 1.67316107e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [1.89501788e+02 3.47387418e+00 2.10774389e+00 3.90322942e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  16
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.69, 0.15, 0.09, 0.04, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````
API response time: 0.711960 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  38
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  18.0
Iteration TIME (sec):  0.011559694000000231
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [25.80683619 18.61127793 11.29970446  0.35790919  0.15354444]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [31.27146126 26.66647675 15.57388538  0.05854844  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [34.78474654 12.58559996  3.58799999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [37.15253722  1.01549623  0.32068302  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [38.74839224  0.3614441   0.20653949  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [40.43522047  0.74634911  0.59707929  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [42.35841986  1.19511505  0.90828744  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [44.43461246  2.38000994  1.83077688  0.04576942  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [47.38117124  1.09098579  0.8291492   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [50.39372482  2.15279999  1.65599999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [5.44237378e+01 2.02967930e+00 1.24903341e+00 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [5.89357760e+01 3.97973911e+00 2.40975029e+00 3.65113680e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [66.59633831  0.4056355   0.4056355   0.10140888  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [74.45030746  4.28922558  3.3326357   0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [9.04685330e+01 1.43520000e+00 8.83199997e-01 1.93199999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [1.15545672e+02 4.25460959e+00 2.58144851e+00 4.78046021e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [1.94556470e+02 2.92742206e-01 1.75645324e-01 7.80645884e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  17
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````
Tokens: ['```', '\n', '``', "Here's", 'module']
Probs: [98.6, 0.85, 0.52, 0.02, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````
API response time: 0.632409 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  39
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  19.0
Iteration TIME (sec):  0.011065367000000048
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [25.05432768 19.09476826 11.59325216  0.36720708  0.15753328]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [30.20382303 27.41090162 16.00064619  0.06015281  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [33.57876939 12.9729395   3.69842573  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [35.77466654  1.0488      0.3312      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [37.20216673  0.37413019  0.21378868  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [38.68881354  0.77452308  0.61961846  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [40.36473194  1.24391519  0.94537554  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [42.13678034  2.48583931  1.91218408  0.0478046   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [44.66345957  1.14423555  0.86961902  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [47.1484276   2.26925044  1.74557726  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [5.04299498e+01 2.15279999e+00 1.32480000e+00 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [5.39107419e+01 4.25452007e+00 2.57613142e+00 3.90322942e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [59.83030456  0.43813642  0.43813642  0.1095341   0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [65.10224756  4.69861121  3.6507195   0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [7.56691881e+01 1.60460238e+00 9.87447615e-01 2.16004166e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [8.86653330e+01 4.91279998e+00 2.98079999e+00 5.51999998e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [1.18641020e+02 3.58534516e-01 2.15120710e-01 9.56092042e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [1.92429210e+02 1.65887250e+00 1.01483965e+00 3.90322942e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  18
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.43, 0.32, 0.25, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````
API response time: 0.646726 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  40
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  20.0
Iteration TIME (sec):  0.011070683000000248
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [24.36161951 19.56631503 11.87954841  0.37627529  0.16142357]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [29.23442333 28.13598085 16.41631661  0.06171548  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [32.48653947 13.34904461  3.80564868  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [34.53538143  1.08107829  0.34139314  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [35.82250654  0.3864      0.2208      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [37.14490191  0.80170755  0.64136604  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [38.62129101  1.29087179  0.98106256  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [40.15326636  2.58734359  1.9902643   0.04975661  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [42.35407399  1.19511505  0.90828744  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [44.44376635  2.38000994  1.83077688  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [4.71823694e+01 2.26925044e+00 1.39646181e+00 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [4.99538498e+01 4.51259998e+00 2.73239999e+00 4.13999999e-02
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [54.7304201   0.46838753  0.46838753  0.11709688  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [58.48546918  5.07508015  3.94322774  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [6.61704210e+01 1.75775383e+00 1.08169467e+00 2.36620708e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [7.41571590e+01 5.49267736e+00 3.33263570e+00 6.17154760e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [9.10481330e+01 4.13999999e-01 2.48399999e-01 1.10400000e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [1.17338344e+02 2.03169559e+00 1.24291966e+00 4.78046021e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [194.04905055   0.62451671   0.48790368   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  19
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [98.33, 1.09, 0.52, 0.04, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````
API response time: 0.591009 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  41
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  21.0
Iteration TIME (sec):  0.01216944799999986
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [23.7212081  20.02676191 12.15910545  0.38513004  0.16522229]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [28.34918259 28.84314859 16.8217188   0.06323954  0.06323954]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  2
Leaf selection - action scores:  [1.78494681e+02 1.46566265e+01 1.99064700e+00 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.88, 0.07, 0.04, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````
API response time: 0.556781 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  25
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  22.0
Iteration TIME (sec):  0.009988874000000258
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [23.12684276 20.4768577  12.43237789  0.39378573  0.16893562]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [29.03860752 19.35578004 17.21757811  0.06472774  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [31.49128488 13.71483959  3.90993234  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [33.41298245  1.11242038  0.35129065  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [34.58161175  0.398292    0.22759543  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [35.76730654  0.828       0.6624      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [37.08000177  1.33617925  1.01549623  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [38.41872344  2.68501333  2.06539487  0.05163487  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [40.36058556  1.24391519  0.94537554  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [42.14547209  2.48583931  1.91218408  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [44.47580494  2.38000994  1.4646215   0.04576942  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [4.67362774e+01 4.75669804e+00 2.88020248e+00 4.36394316e-02
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [50.71457482  0.4968      0.4968      0.1242      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [53.49811481  5.42548889  4.21548777  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [5.94469352e+01 1.89859113e+00 1.16836377e+00 2.55579576e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [6.48453451e+01 6.01692658e+00 3.65071950e+00 6.76059167e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [7.61551975e+01 4.62866070e-01 2.77719642e-01 1.23430952e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [9.00453330e+01 2.34599999e+00 1.43520000e+00 5.51999998e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [118.33028973   0.76487363   0.59755753   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [1.91902274e+02 2.12726003e+00 1.01483965e+00 7.80645884e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  20
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', "Here's", 'module']
Probs: [99.08, 0.52, 0.25, 0.09, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````
API response time: 0.962006 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  42
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  23.0
Iteration TIME (sec):  0.013034280999999925
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.57326907 20.91727062 12.69977145  0.4022552   0.17256906]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [28.17690717 19.80577885 17.60453829  0.06618247  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [30.57949523 14.07112852  4.01150594  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [32.39023514  1.1429033   0.36091683  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [33.45775479  0.40983909  0.23419377  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [34.52826908  0.85348286  0.68278629  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [35.70474654  1.38        1.0488      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [36.88530137  2.77925284  2.1378868   0.05344717  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [38.6173191   1.29087179  0.98106256  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [40.16155913  2.58734359  1.9902643   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [42.1758932   2.48583931  1.52974727  0.0478046   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [44.05472626  4.98886699  3.02078185  0.04576942  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [47.4490548   0.52367318  0.52367318  0.13091829  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [49.57089983  5.75459998  4.47119998  0.1242      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [5.43791295e+01 2.02967930e+00 1.24903341e+00 2.73226059e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [5.82542305e+01 6.49902350e+00 3.94322774e+00 7.30227359e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [6.65963383e+01 5.07044375e-01 3.04226625e-01 1.35211833e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [7.53143241e+01 2.62290773e+00 1.60460238e+00 6.17154760e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [90.808933  0.8832    0.69      0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [1.17015663e+02 2.60535082e+00 1.24291966e+00 9.56092042e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [1.93365985e+02 1.01483965e+00 4.87903677e-01 1.75645324e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  21
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.46, 0.32, 0.19, 0.01, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````
API response time: 0.619636 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  43
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  24.0
Iteration TIME (sec):  0.01148674000000005
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.05603421 21.34859993 12.96164996  0.41055     0.17612756]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [27.38415612 20.24609687 17.98317383  0.06760592  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [29.7401509  14.41861612  4.11057038  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [31.45325644  1.17259404  0.37029286  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [32.43367883  0.42106964  0.24061122  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [33.4060944   0.87822662  0.7025813   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [34.46781404  1.42247144  1.08107829  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [35.51706654  2.87039999  2.20799999  0.0552      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [37.07618412  1.33617925  1.01549623  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [38.42666727  2.68501333  2.06539487  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [40.19058382  2.58734359  1.59221144  0.04975661  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [41.77607289  5.21070163  3.15510374  0.0478046   0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [44.72753676  0.54923306  0.54923306  0.13730827  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [46.37746431  6.06588099  4.71305861  0.13091829  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [5.03885498e+01 2.15279999e+00 1.32480000e+00 2.89799999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [5.32862252e+01 6.94774837e+00 4.21548777e+00 7.80645884e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [5.98303046e+01 5.47670519e-01 3.28602312e-01 1.46045472e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [6.58594338e+01 2.87325146e+00 1.75775383e+00 6.76059167e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [75.95462219  0.98744762  0.77144345  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [8.97969330e+01 3.00839999e+00 1.43520000e+00 1.10400000e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [1.17911999e+02 1.24291966e+00 5.97557527e-01 2.15120710e-01
 4.78046021e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [1.94107599e+02 6.24516707e-01 3.70806795e-01 1.95161471e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  22
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', "Here's", 'module']
Probs: [99.01, 0.67, 0.25, 0.04, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````
API response time: 0.595112 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  44
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  25.0
Iteration TIME (sec):  0.012707040000000003
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [21.57133617 21.77138552 13.21834121  0.41868049  0.17961557]  taking action:  1  corresponding to token:  ``
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``
Tokens: ['```', '``', '\n', "Here's", '\\']
Probs: [99.28, 0.52, 0.19, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````
API response time: 0.689537 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  23
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  26.0
Iteration TIME (sec):  0.010321188000000259
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [22.00054304 10.59305792 13.47014177  0.42665607  0.18303713]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [26.65172719 20.67733324 18.35399994  0.069       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [28.96416275 14.7579241   4.20730292  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [30.59072277  1.20155134  0.37943727  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [31.49548282  0.43200833  0.2468619   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [32.38355149  0.90229208  0.72183366  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [33.34754596  1.46371103  1.11242038  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [34.28644893  2.95874059  2.2759543   0.05689886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [35.70106654  1.38        1.0488      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [36.89293668  2.77925284  2.1378868   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [38.45447066  2.68501333  1.6523159   0.05163487  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [39.80911649  5.42347021  3.28393609  0.04975661  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [42.41491621  0.57365523  0.57365523  0.14341381  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [43.71603254  6.36194965  4.94309757  0.13730827  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [4.71435788e+01 2.26925044e+00 1.39646181e+00 3.05476021e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [4.93742498e+01 7.36919997e+00 4.47119998e+00 8.27999997e-02
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [5.47304201e+01 5.85484413e-01 3.51290648e-01 1.56129177e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [5.91670147e+01 3.10346628e+00 1.89859113e+00 7.30227359e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [66.42056293  1.08169467  0.84507396  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [7.51060344e+01 3.36349344e+00 1.60460238e+00 1.23430952e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [9.04869330e+01 1.43520000e+00 6.89999998e-01 2.48399999e-01
 5.51999998e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [1.18366143e+02 7.64873634e-01 4.54143720e-01 2.39023011e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [1.93229372e+02 1.30758186e+00 4.87903677e-01 7.80645884e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  23
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '    \n']
Probs: [96.71, 1.77, 1.38, 0.09, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````
API response time: 0.705362 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  45
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  27.0
Iteration TIME (sec):  0.011793967000000016
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [21.52103131 10.79661725 13.71732095  0.43448528  0.18639589]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [25.97242001 21.10002774 18.71748077  0.07036647  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [28.24395912 15.08960425  4.30186086  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [29.79329424  1.22982701  0.38836642  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [30.63182847  0.44267681  0.25295818  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [31.44676007  0.92573214  0.74058571  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [32.32674051  1.50382013  1.1429033   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [33.17190064  3.04451895  2.34193765  0.05854844  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [34.46425786  1.42247144  1.08107829  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [35.52442654  2.87039999  2.20799999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [36.91966026  2.77925284  1.71030944  0.05344717  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [38.08905464  5.62820102  3.40790154  0.05163487  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [40.41863494  0.59707929  0.59707929  0.14926982  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [41.45447829  6.6448397   5.16289703  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [44.43918941  2.38000994  1.4646215   0.32038595  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [4.61932089e+01 7.76781882e+00 4.71305861e+00 8.72788631e-02
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [5.07145748e+01 6.20999998e-01 3.72599999e-01 1.65599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [5.41226315e+01 3.31774501e+00 2.02967930e+00 7.80645884e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [59.67208864  1.16836377  0.9127842   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [6.56768978e+01 3.68452246e+00 1.75775383e+00 1.35211833e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [7.56846170e+01 1.60460238e+00 7.71443450e-01 2.77719642e-01
 6.17154760e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [9.08365330e+01 8.83199997e-01 5.24399998e-01 2.75999999e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [1.17828341e+02 1.60145417e+00 5.97557527e-01 9.56092042e-02
 4.78046021e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [1.88740659e+02 3.45435804e+00 2.69322830e+00 1.75645324e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  24
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '\\']
Probs: [97.28, 1.78, 0.84, 0.04, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````
API response time: 0.633230 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  46
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  28.0
Iteration TIME (sec):  0.01210035300000012
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [21.07013249 10.9965729  13.96012424  0.44217588  0.18969518]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [25.34017343 21.5146687  19.07403625  0.0717069   0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [27.57317508 15.414149    4.39438458  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [29.05319029  1.25746702  0.39709485  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [29.8333638   0.45309416  0.25891095  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [30.58439881  0.94859317  0.75887453  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [31.39154096  1.5428869   1.17259404  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [32.15630756  3.12794587  2.40611221  0.06015281  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [33.34410193  1.46371103  1.11242038  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [34.29356129  2.95874059  2.2759543   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [35.55018654  2.87039999  1.76639999  0.0552      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [36.568436    5.82574153  3.52751322  0.05344717  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [38.67292589  0.61961846  0.61961846  0.15490462  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [39.50228408  6.91616843  5.3737136   0.14926982  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [42.14112621  2.48583931  1.52974727  0.33463221  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [43.54210874  8.14695711  4.94309757  0.09153884  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [4.74490548e+01 6.54591473e-01 3.92754884e-01 1.74557726e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [5.01504998e+01 3.51899999e+00 2.15279999e+00 8.27999997e-02
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [54.58544301  1.24903341  0.97580735  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [5.90027136e+01 3.97973911e+00 1.89859113e+00 1.46045472e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [66.18394222  1.75775383  0.84507396  0.30422663  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [7.59777655e+01 9.87447615e-01 5.86297022e-01 3.08577380e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [9.04225330e+01 1.84919999e+00 6.89999998e-01 1.10400000e-01
 5.51999998e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [1.15079577e+02 4.23070729e+00 3.29851755e+00 2.15120710e-01
 4.78046021e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [1.89853079e+02 3.47387418e+00 1.63935636e+00 7.80645884e-02
 5.85484413e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  25
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [97.95, 1.09, 0.85, 0.05, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````
API response time: 0.757009 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  47
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  29.0
Iteration TIME (sec):  0.012701712000000143
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [20.64512268 11.19310975 14.19877613  0.44973499  0.19293807]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [24.74984489 21.92169963 19.42404776  0.07302274  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [26.94641659 15.73199995  4.48499998  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [28.36387037  1.28451242  0.4056355   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [29.09229812  0.46327732  0.2647299   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [29.7871297   0.97091606  0.77673285  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [30.5306452   1.58098861  1.20155134  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [31.22588363  3.20920475  2.46861904  0.06171548  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [32.32339869  1.50382013  1.1429033   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [33.17878869  3.04451895  2.34193765  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [34.31845454  2.95874059  1.82076344  0.05689886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [35.21162654  6.01679998  3.64319999  0.0552      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [37.12963129  0.64136604  0.64136604  0.16034151  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [37.79513307  7.17724717  5.57656615  0.15490462  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [40.15741275  2.58734359  1.59221144  0.34829625  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [41.28933512  8.50921918  5.16289703  0.0956092   0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [44.72753676  0.68654133  0.4119248   0.18307769  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [4.69205328e+01 3.70935168e+00 2.26925044e+00 8.72788631e-02
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [50.58002482  1.3248      1.035       0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [5.39720784e+01 4.25452007e+00 2.02967930e+00 1.56129177e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [59.45910566  1.89859113  0.9127842   0.32860231  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [6.64408447e+01 1.08169467e+00 6.42256208e-01 3.38029583e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [7.56306159e+01 2.06746844e+00 7.71443450e-01 1.23430952e-01
 6.17154760e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [8.83065330e+01 4.88519998e+00 3.80879999e+00 2.48399999e-01
 5.51999998e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [1.15760792e+02 4.25460959e+00 2.00779329e+00 9.56092042e-02
 7.17069032e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [1.91160661e+02 2.12726003e+00 1.65887250e+00 9.75807355e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  26
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', "Here's", 'module']
Probs: [98.74, 0.67, 0.52, 0.04, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````
API response time: 0.648071 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  48
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  30.0
Iteration TIME (sec):  0.012294160000000165
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [20.24362628 11.38639739 14.43348254  0.45716913  0.19612735]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [24.19704012 22.32152476 19.76786291  0.07431527  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [26.35907796 16.04355494  4.57382049  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [27.71979159  1.311       0.414       0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [28.40208241  0.47324142  0.27042367  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [29.0471737   0.99273712  0.7941897   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [29.73473105  1.61819343  1.22982701  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [30.36938436  3.28845631  2.52958177  0.06323954  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [31.38829278  1.5428869   1.17259404  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [32.16299121  3.12794587  2.40611221  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [33.20289687  3.04451895  1.87355012  0.05854844  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [33.99128611  6.20197546  3.75532459  0.05689886  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [35.75258654  0.6624      0.6624      0.1656      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [36.28592953  7.42915663  5.77229436  0.16034151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [38.42269535  2.68501333  1.6523159   0.3614441   0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [39.34472149  8.85667612  5.3737136   0.09951321  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [42.41491621  0.71706903  0.43024142  0.19121841  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [44.22865007  3.89040087  2.38000994  0.09153884  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [47.32298533  1.39646181  1.09098579  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [5.00107748e+01 4.51259998e+00 2.15279999e+00 1.65599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [54.39028153  2.0296793   0.97580735  0.35129065  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [5.96903443e+01 1.16836377e+00 6.93715991e-01 3.65113680e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [66.13661808  2.26479821  0.84507396  0.13521183  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [7.38562960e+01 5.46181962e+00 4.25836784e+00 2.77719642e-01
 6.17154760e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [8.88309330e+01 4.91279998e+00 2.31839999e+00 1.10400000e-01
 8.27999997e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [1.16561519e+02 2.60535082e+00 2.03169559e+00 1.19511505e-01
 4.78046021e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [1.92702436e+02 1.30758186e+00 1.01483965e+00 7.80645884e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  27
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.9, 0.52, 0.52, 0.04, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````
API response time: 0.623954 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  49
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  31.0
Iteration TIME (sec):  0.01214648099999982
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [19.863561   11.57659182 14.66443293  0.4644843   0.19926558]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [23.67797935 22.71451377 20.10579957  0.07558571  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [25.80720012 16.34917393  4.66094871  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [27.11622117  1.33696291  0.42219881  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [27.75716659  0.483       0.276       0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [28.35799159  1.01408875  0.811271    0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [28.9960327   1.65456187  1.25746702  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [29.57753512  3.36584234  2.58910949  0.06472774  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [30.52748322  1.58098861  1.20155134  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [31.23238     3.20920475  2.46861904  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [32.18638396  3.12794587  1.92488977  0.06015281  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [32.88604648  6.3817801   3.86419712  0.05854844  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [34.51404436  0.68278629  0.68278629  0.17069657  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [34.93930654  7.67279997  5.96159998  0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [36.88911902  2.77925284  1.71030944  0.37413019  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [37.64420036  9.19100717  5.57656615  0.10326974  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [40.41863494  0.74634911  0.44780947  0.19902643  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [41.94121606  4.06339118  2.48583931  0.0956092   0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [44.60853627  1.4646215   1.14423555  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [4.67896145e+01 4.75669804e+00 2.26925044e+00 1.74557726e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [50.39889982  2.15279999  1.035       0.3726      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [5.46021711e+01 1.24903341e+00 7.41613590e-01 3.90322942e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [59.41650906  2.44626165  0.9127842   0.14604547  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [64.581682    5.98312363  4.66480825  0.30422663  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [74.29601877  5.49267736  2.59204999  0.12343095  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [8.94473330e+01 3.00839999e+00 2.34599999e+00 1.38000000e-01
 5.51999998e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [1.17505660e+02 1.60145417e+00 1.24291966e+00 9.56092042e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [1.93014695e+02 1.01483965e+00 1.01483965e+00 7.80645884e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  28
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [95.88, 2.25, 1.76, 0.03, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````
API response time: 0.600390 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  50
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  32.0
Iteration TIME (sec):  0.012997615999999823
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [19.50309309 11.76383697 14.89180204  0.47168604  0.20235516]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [23.18939185 23.10100574 20.43814935  0.07683515  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [25.28735831 16.64918379  4.74647784  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [26.54909077  1.36243116  0.43024142  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [27.15281173  0.49256528  0.28146588  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [27.71404159  1.035       0.828       0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [28.308022    1.69014792  1.28451242  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [28.84260969  3.44148869  2.64729899  0.06618247  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [29.73164878  1.61819343  1.22982701  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [30.37570832  3.28845631  2.52958177  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [31.25511728  3.20920475  1.97489523  0.06171548  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [31.87893629  6.55665577  3.97008514  0.06015281  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [33.3923183   0.7025813   0.7025813   0.17564532  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [33.72812889  7.90894118  6.1450766   0.17069657  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [35.52074654  2.87039999  1.76639999  0.3864      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [36.14085864  9.51359626  5.77229436  0.10689434  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [38.67292589  0.77452308  0.46471385  0.20653949  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [39.96667908  4.22931163  2.58734359  0.09951321  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [42.30192351  1.52974727  1.19511505  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [44.10507263  4.98886699  2.38000994  0.18307769  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [47.15327643  2.26925044  1.09098579  0.39275488  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [5.05955498e+01 1.32480000e+00 7.86599997e-01 4.13999999e-02
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [54.35124924  2.61516371  0.97580735  0.15612918  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [58.01690662  6.46251213  5.03856878  0.32860231  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [64.96703572  6.01692658  2.8394485   0.13521183  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [7.48128859e+01 3.36349344e+00 2.62290773e+00 1.54288690e-01
 6.17154760e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [9.01741330e+01 1.84919999e+00 1.43520000e+00 1.10400000e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [1.17696879e+02 1.24291966e+00 1.24291966e+00 9.56092042e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [1.87120818e+02 4.39113310e+00 3.43484189e+00 5.85484413e-02
 5.85484413e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  29
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.03, 0.52, 0.4, 0.02, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.653542 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  51
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  33.0
Iteration TIME (sec):  0.012695804000000255
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [19.16060049 11.94826592 15.11575148  0.47877946  0.20539826]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [22.72843129 23.48131265 20.76518051  0.07806459  0.07806459]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  2
Leaf selection - action scores:  [1.08805223e+02 1.79506281e+01 2.43803471e+00 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [1.94927277e+02 1.36613030e-01 7.80645884e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````
Tokens: ['```', '``', '\n', '\\', "Here's"]
Probs: [99.56, 0.25, 0.19, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````
API response time: 0.856968 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  26
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  34.0
Iteration TIME (sec):  0.009964580000000112
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.83464255 12.13000204 15.33643106  0.48576931  0.20839694]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [23.09580124 17.64179171 21.08714049  0.07927496  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [24.79657321 16.94388249  4.83049282  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [26.01488112  1.38743198  0.43813642  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [26.58494422  0.50194832  0.28682761  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [27.11059185  1.05549704  0.84439763  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [27.66516659  1.72499999  1.311       0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [28.15811323  3.51550767  2.70423667  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [28.99302441  1.65456187  1.25746702  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [29.58369967  3.36584234  2.58910949  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [30.39784216  3.28845631  2.02366542  0.06323954  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [30.95628445  6.72698688  4.07322141  0.06171548  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [32.3701842   0.72183366  0.72183366  0.18045842  0.12030561]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [32.63118856  8.13823334  6.32323166  0.17564532  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [34.29000511  2.95874059  1.82076344  0.398292    0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [34.79946654  9.82559997  5.96159998  0.1104      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [37.12963129  0.80170755  0.48102453  0.21378868  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [38.23998734  4.3889641   2.68501333  0.10326974  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [40.31082895  1.59221144  1.24391519  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [41.82387749  5.21070163  2.48583931  0.19121841  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [44.44834329  2.38000994  1.14423555  0.4119248   0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [4.73375318e+01 1.39646181e+00 8.29149200e-01 4.36394316e-02
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [50.36267482  2.77379999  1.035       0.1656      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [53.06875957  6.90871607  5.3864566   0.35129065  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [58.36376462  6.4990235   3.06695491  0.14604547  0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [65.41999536  3.68452246  2.87325146  0.16901479  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [7.54223262e+01 2.06746844e+00 1.60460238e+00 1.23430952e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [9.03213330e+01 1.43520000e+00 1.43520000e+00 1.10400000e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [1.14087631e+02 5.37801774e+00 4.20680499e+00 7.17069032e-02
 7.17069032e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [1.93268405e+02 1.01483965e+00 7.80645884e-01 3.90322942e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  30
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '\\']
Probs: [99.41, 0.32, 0.25, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.669497 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  52
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  35.0
Iteration TIME (sec):  0.013445908000000006
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.52393487 12.30915996 15.55397995  0.49266     0.21135307]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [22.64239103 17.91837552 21.40425814  0.08046714  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [24.33223889 17.23354249  4.91307132  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [25.51053066  1.41199021  0.44589164  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [26.05004022  0.51115915  0.29209094  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [26.54357485  1.07560355  0.86048284  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [27.06274265  1.75916173  1.33696291  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [27.51854159  3.58799999  2.75999999  0.069       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [28.30508262  1.69014792  1.28451242  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [28.84862628  3.44148869  2.64729899  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [29.60527558  3.36584234  2.07128759  0.06472774  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [30.10694025  6.89311034  4.17380993  0.06323954  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [31.43376734  0.74058571  0.74058571  0.18514643  0.12343095]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [31.63164143  8.36123992  6.49650296  0.18045842  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [33.17534466  3.04451895  1.87355012  0.40983909  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [33.59299411 10.12799662  6.1450766   0.11379771  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [35.75258654  0.828       0.4968      0.2208      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [36.71350689  4.54300945  2.77925284  0.10689434  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [38.56965614  1.6523159   1.29087179  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [39.85472672  5.42347021  2.58734359  0.19902643  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [42.14981796  2.48583931  1.19511505  0.43024142  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [44.62226709  1.4646215   0.86961902  0.04576942  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [47.11933465  2.92384191  1.09098579  0.17455773  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [49.17242483  7.32779997  5.71319998  0.3726      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [53.38659397  6.94774837  3.27871271  0.15612918  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [58.77147489  3.97973911  3.10346628  0.18255684  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [6.59540821e+01 2.26479821e+00 1.75775383e+00 1.35211833e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [7.55457572e+01 1.60460238e+00 1.60460238e+00 1.23430952e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [8.75429330e+01 6.20999998e+00 4.85759998e+00 8.27999997e-02
 8.27999997e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [1.17852244e+02 1.24291966e+00 9.56092042e-01 4.78046021e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [1.94010018e+02 6.24516707e-01 4.87903677e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  31
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.04, 0.52, 0.4, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 1.745483 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  53
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  36.0
Iteration TIME (sec):  0.012727663000000167
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [18.22732787 12.48584637 15.76852774  0.49945563  0.21426842]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [22.21329068 18.19092097 21.71674559  0.0816419   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [23.89206489 17.51841373  4.99428462  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [25.03336153  1.43612854  0.45351428  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [25.54503418  0.52020692  0.2972611   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [26.00947203  1.09534104  0.87627283  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [26.49668957  1.79267258  1.36243116  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [26.91919506  3.65905639  2.81465876  0.07036647  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [27.66229159  1.72499999  1.311       0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [28.16399201  3.51550767  2.70423667  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [28.86968434  3.44148869  2.11783919  0.06618247  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [29.32170644  7.05532336  4.27203066  0.06472774  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [30.5717509   0.75887453  0.75887453  0.18971863  0.12647909]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [30.71591891  8.57845116  6.6652714   0.18514643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [32.15964938  3.12794587  1.92488977  0.42106964  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [32.50031557 10.42162255  6.32323166  0.11709688  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [34.51404436  0.85348286  0.51208972  0.22759543  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [35.35146654  4.69199998  2.87039999  0.1104      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [37.03037226  1.71030944  1.33617925  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [38.13274569  5.62820102  2.68501333  0.20653949  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [40.16570551  2.58734359  1.24391519  0.44780947  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [42.31496113  1.52974727  0.90828744  0.0478046   0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [44.4163047   3.06655127  1.14423555  0.18307769  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [46.00410473  7.72417939  6.02224156  0.39275488  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [49.46739983  7.36919997  3.47759999  0.1656      0.1242    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [53.76018879  4.25452007  3.31774501  0.19516147  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [5.92522079e+01 2.44626165e+00 1.89859113e+00 1.46045472e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [6.60622516e+01 1.75775383e+00 1.75775383e+00 1.35211833e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [73.21599794  6.94299105  5.43096188  0.09257321  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [9.04409330e+01 1.43520000e+00 1.10400000e+00 5.51999998e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [1.18306387e+02 7.64873634e-01 5.97557527e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [1.93287921e+02 1.01483965e+00 7.80645884e-01 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  32
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '    \n']
Probs: [98.57, 0.66, 0.66, 0.07, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.696029 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  54
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  37.0
Iteration TIME (sec):  0.013446662999999859
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.94378971 12.66016083 15.9801953   0.50616003  0.21714464]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [21.80642492 18.45959993 22.02479992  0.0828      0.0828    ]  taking action:  2  corresponding to token:  

Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```

Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.92, 0.07, 0.01, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
```
API response time: 0.665537 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
```assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  24
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  38.0
Iteration TIME (sec):  0.010191712999999769
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.67239079 12.83219638 16.18909561  0.51277678  0.21998325]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [22.12058011 18.72457245 10.66430231  0.08394212  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [23.47402889 17.79872615  5.07419824  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [24.58102005  1.45986781  0.46101089  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [25.06724478  0.52909999  0.30234285  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [25.50522243  1.11472911  0.89178329  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [25.96349475  1.8255684   1.38743198  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [26.35603372  3.72875897  2.86827613  0.0717069   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [27.05992799  1.75916173  1.33696291  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [27.52429159  3.58799999  2.75999999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [28.18456772  3.51550767  2.16338933  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [28.59292126  7.21388975  4.36804334  0.06618247  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [29.7748006   0.77673285  0.77673285  0.19418321  0.12945547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [29.87295394  8.79029667  6.82987079  0.18971863  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [31.22913182  3.20920475  1.97489523  0.43200833  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [31.50465217 10.70719933  6.49650296  0.12030561  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [33.3923183   0.87822662  0.52693597  0.23419377  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [34.1264209   4.83640288  2.95874059  0.11379771  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [35.65690654  1.76639999  1.38        0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [36.61043021  5.82574153  2.77925284  0.21378868  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [38.43063918  2.68501333  1.29087179  0.46471385  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [40.3232681   1.59221144  0.94537554  0.04975661  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [42.11939685  3.20290834  1.19511505  0.19121841  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [43.36360799  8.10118768  6.31618023  0.4119248   0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [46.28048779  7.76781882  3.66571225  0.17455773  0.13091829]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [49.81412482  4.51259998  3.51899999  0.207       0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [5.42006961e+01 2.61516371e+00 2.02967930e+00 1.56129177e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [5.93495716e+01 1.89859113e+00 1.89859113e+00 1.46045472e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [64.02055289  7.60566563  5.94932067  0.10140888  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [7.56460448e+01 1.60460238e+00 1.23430952e+00 6.17154760e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [9.07905330e+01 8.83199997e-01 6.89999998e-01 5.51999998e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [1.17864195e+02 1.24291966e+00 9.56092042e-01 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [1.92370662e+02 1.28806571e+00 1.28806571e+00 1.36613030e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  33
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [98.4, 0.85, 0.66, 0.07, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.840023 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  55
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  39.0
Iteration TIME (sec):  0.013677410000000112
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.41229146 13.00204012 16.39533444  0.51930924  0.2227857 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [21.72050215 18.9859878  10.81416542  0.08506891  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [23.07633759 18.07469185  5.15287268  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [24.15142806  1.48322718  0.46838753  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [24.61431528  0.53784604  0.30734059  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [25.02814873  1.13378569  0.90702855  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [25.46010244  1.85788185  1.41199021  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [25.82556292  3.79718227  2.92090944  0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [26.49393161  1.79267258  1.36243116  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [26.92482437  3.65905639  2.81465876  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [27.54441659  3.58799999  2.20799999  0.069       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [27.91414406  7.36904492  4.4619905   0.06760592  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [29.03514053  0.7941897   0.7941897   0.19854742  0.13236495]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [29.09361823  8.99715548  6.99059562  0.19418321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [30.37254634  3.28845631  2.02366542  0.44267681  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [30.59248796 10.98535472  6.6652714   0.12343095  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [32.3701842   0.90229208  0.54137525  0.24061122  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [33.01691947  4.97661751  3.04451895  0.11709688  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [34.42158372  1.82076344  1.42247144  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [35.25210654  6.01679998  2.87039999  0.2208      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [36.89675433  2.77925284  1.33617925  0.48102453  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [38.58157188  1.6523159   0.98106256  0.05163487  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [40.13668083  3.3336927   1.24391519  0.19902643  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [41.11984608  8.46141458  6.59703509  0.43024142  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [43.6244937   8.14695711  3.84463144  0.18307769  0.13730827]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [46.60535912  4.75669804  3.70935168  0.21819716  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [5.02229498e+01 2.77379999e+00 2.15279999e+00 1.65599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [5.42899128e+01 2.02967930e+00 2.02967930e+00 1.56129177e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [57.5118327   8.21505779  6.42600076  0.1095341   0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [6.61501393e+01 1.75775383e+00 1.35211833e+00 6.76059167e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [7.59391933e+01 9.87447615e-01 7.71443450e-01 6.17154760e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [9.04501330e+01 1.43520000e+00 1.10400000e+00 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [1.17302491e+02 1.57755187e+00 1.57755187e+00 1.67316107e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [1.92038887e+02 1.65887250e+00 1.28806571e+00 1.36613030e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  34
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '\\']
Probs: [96.36, 1.76, 1.76, 0.05, 0.03]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.618382 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  56
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  40.0
Iteration TIME (sec):  0.01279416599999994
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [17.16273081 13.16977376 16.599011    0.52576053  0.22555333]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [21.34014462 19.24398552 10.96206929  0.08618097  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [22.69739454 18.34650698  5.23036383  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [23.74274276  1.50622432  0.47564979  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [24.18416482  0.54645212  0.31225835  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [24.57589771  1.15252722  0.92202178  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [24.98383986  1.88964282  1.43612854  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [25.32474248  3.86439425  2.97261096  0.07431527  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [25.96079021  1.8255684   1.38743198  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [26.36154964  3.72875897  2.86827613  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [26.94452699  3.65905639  2.25172701  0.07036647  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [27.27991659  7.52099997  4.55399998  0.069       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [28.34623404  0.811271    0.811271    0.20281775  0.13521183]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [28.37030748  9.199364    7.14770728  0.19854742  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [29.58061739  3.36584234  2.07128759  0.45309416  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [29.7527988  11.2566389   6.82987079  0.12647909  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [31.43376734  0.92573214  0.55543928  0.2468619   0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [32.00592555  5.11298844  3.12794587  0.12030561  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [33.30277362  1.87355012  1.46371103  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [34.03040407  6.20197546  2.95874059  0.22759543  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [35.52810654  2.87039999  1.38        0.4968      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [37.04182522  1.71030944  1.01549623  0.05344717  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [38.40283579  3.45953641  1.29087179  0.20653949  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [39.18301252  8.80691952  6.86641183  0.44780947  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [41.36756083  8.50921918  4.01558658  0.19121841  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [43.93114882  4.98886699  3.89040087  0.22884711  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [4.69884164e+01 2.92384191e+00 2.26925044e+00 1.74557726e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [5.03057498e+01 2.15279999e+00 2.15279999e+00 1.65599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [52.60594809  8.78226619  6.86968378  0.11709688  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [5.94286795e+01 1.89859113e+00 1.46045472e+00 7.30227359e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [66.40704175  1.08169467  0.84507396  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [75.65375925  1.60460238  1.23430952  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [9.00177330e+01 1.82159999e+00 1.82159999e+00 1.93199999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [1.17099321e+02 2.03169559e+00 1.57755187e+00 1.67316107e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [1.88057593e+02 3.43484189e+00 3.43484189e+00 9.75807355e-02
 5.85484413e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  35
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.56, 0.85, 0.52, 0.04, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.879253 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  57
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  41.0
Iteration TIME (sec):  0.013817978999999703
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.92301777 13.33547404 16.80021848  0.53213362  0.22828741]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [20.97795866 19.49869624 11.10808879  0.08727886  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [22.33577322 18.61435337  5.30672355  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [23.35332362  1.52887558  0.48280282  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [23.77494822  0.55492475  0.31709986  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [24.14639164  1.17096883  0.93677506  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [24.53235779  1.9208787   1.45986781  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [24.85091326  3.93045706  3.02342851  0.07558571  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [25.45744832  1.85788185  1.41199021  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [25.83097201  3.79718227  2.92090944  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [26.38085534  3.72875897  2.2946209   0.0717069   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [26.68557838  7.66994513  4.64418696  0.07036647  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [27.70254159  0.828       0.828       0.207       0.138     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [27.69662937  9.39722242  7.301439    0.20281775  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [28.84561798  3.44148869  2.11783919  0.46327732  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [28.97649185 11.52153723  6.99059562  0.12945547  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [30.5717509   0.94859317  0.5691559   0.25295818  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [31.0797154   5.24581546  3.20920475  0.12343095  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [32.28329682  1.92488977  1.50382013  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [32.92393077  6.3817801   3.04451895  0.23419377  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [34.29711747  2.95874059  1.42247144  0.51208972  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [35.66794654  1.76639999  1.0488      0.0552      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [36.87003075  3.58096039  1.33617925  0.21378868  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [37.48929575  9.1393723   7.1256123   0.46471385  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [39.4193564   8.85667612  4.17955502  0.19902643  0.14926982]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [41.65873432  5.21070163  4.06339118  0.23902301  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [44.29272726  3.06655127  2.38000994  0.18307769  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [4.70659976e+01 2.26925044e+00 2.26925044e+00 1.74557726e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [48.74289983  9.31499997  7.28639997  0.1242      0.1242    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [5.43624013e+01 2.02967930e+00 1.56129177e+00 7.80645884e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [59.65991818  1.16836377  0.9127842   0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [66.15689986  1.75775383  1.35211833  0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [7.52911808e+01 2.03661071e+00 2.03661071e+00 2.16004166e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [8.98613330e+01 2.34599999e+00 1.82159999e+00 1.93199999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [1.14661287e+02 4.20680499e+00 4.20680499e+00 1.19511505e-01
 7.17069032e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [1.92351146e+02 1.65887250e+00 1.01483965e+00 7.80645884e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  36
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '\\']
Probs: [99.13, 0.52, 0.32, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.664887 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  58
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  42.0
Iteration TIME (sec):  0.0145842479999998
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.69252293 13.49921316 16.99904456  0.53843128  0.23098913]  taking action:  2  corresponding to token:  

Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );


Tokens: ['```', '``', '\n', '\\', '    \n']
Probs: [97.49, 2.29, 0.19, 0.02, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

```
API response time: 0.601091 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

```assign out = in[sel*4 +: 4];

endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];

endmodule
```
Depth of rollout:  23
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  43.0
Iteration TIME (sec):  0.009746713000000184
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.89678558 13.66105915  8.09778592  0.54465612  0.23365961]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [20.63255921 19.75024249 11.25229418  0.08836311  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [21.9901942  18.87839993  5.38199998  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [22.98170473  1.55119611  0.4898514   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [23.38502279  0.56326995  0.32186854  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [23.73778808  1.18912446  0.95129957  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [24.10358202  1.95161471  1.48322718  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [24.40173804  3.99542769  3.07340592  0.07683515  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [24.98123346  1.88964282  1.43612854  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [25.33005071  3.86439425  2.97261096  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [25.84990383  3.79718227  2.33672755  0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [26.12712322  7.81605245  4.73265561  0.0717069   0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [27.09933322  0.84439763  0.84439763  0.21109941  0.14073294]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [27.06716659  9.59099997  7.45199997  0.207       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [28.16105262  3.51550767  2.16338933  0.47324142  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [28.2559923  11.78048051  7.14770728  0.13236495  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [29.7748006   0.97091606  0.58254964  0.25891095  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [30.22709539  5.37536127  3.28845631  0.12647909  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [31.34931458  1.97489523  1.5428869   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [31.91569634  6.55665577  3.12794587  0.24061122  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [33.18223271  3.04451895  1.46371103  0.52693597  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [34.43225225  1.82076344  1.08107829  0.05689886  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [35.50234654  3.69839999  1.38        0.2208      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [35.9919701   9.46014909  7.37570946  0.48102453  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [37.7156948   9.19100717  4.33732923  0.20653949  0.15490462]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [39.69716413  5.42347021  4.22931163  0.24878304  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [42.00205828  3.20290834  2.48583931  0.19121841  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [44.36595833  2.38000994  2.38000994  0.18307769  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [45.60165219  9.8188721   7.68053995  0.13091829  0.13091829]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [5.03730248e+01 2.15279999e+00 1.65599999e+00 8.27999997e-02
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [54.57429092  1.24903341  0.97580735  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [59.43476474  1.89859113  1.46045472  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [6.58391520e+01 2.23099525e+00 2.23099525e+00 2.36620708e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [7.51600354e+01 2.62290773e+00 2.03661071e+00 2.16004166e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [8.79845330e+01 4.85759998e+00 4.85759998e+00 1.38000000e-01
 8.27999997e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [1.17290540e+02 2.03169559e+00 1.24291966e+00 9.56092042e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [1.93463566e+02 1.01483965e+00 6.24516707e-01 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  37
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '    \n']
Probs: [98.22, 0.85, 0.85, 0.05, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.858569 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  59
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  44.0
Iteration TIME (sec):  0.0136129519999999
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.66781763 13.8210762   8.19493912  0.55081062  0.23629991]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [20.30270312 19.99873935 11.39475144  0.08943422  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [21.65950674 19.13880396  5.45623797  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [22.62657135  1.57319999  0.4968      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [23.01292075  0.57149331  0.3265676   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [23.34844682  1.20700704  0.96560563  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [23.69567325  1.98187411  1.50622432  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [23.97515318  4.0593586   3.12258353  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [24.52979662  1.9208787   1.45986781  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [24.85612607  3.93045706  3.02342851  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [25.34862953  3.86439425  2.37808877  0.07431527  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [25.60108562  7.95947822  4.81950057  0.07302274  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [26.53254302  0.86048284  0.86048284  0.21512071  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [26.47729363  9.7809392   7.59957866  0.21109941  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [27.52141659  3.58799999  2.20799999  0.483       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [27.58493263 12.03385317  7.301439    0.13521183  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [29.03514053  0.99273712  0.59564227  0.2647299   0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [29.43883283  5.50185767  3.36584234  0.12945547  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [30.4895395   2.02366542  1.58098861  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [30.99201446  6.72698688  3.20920475  0.2468619   0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [32.16633303  3.12794587  1.50382013  0.54137525  0.12030561]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [33.3131057   1.87355012  1.11242038  0.05854844  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [34.27222422  3.81222345  1.42247144  0.22759543  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [34.65594654  9.77039997  7.61759997  0.4968      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [36.20957643  9.51359626  4.48956228  0.21378868  0.16034151]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [37.98181299  5.62820102  4.3889641   0.25817436  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [40.02472846  3.3336927   2.58734359  0.19902643  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [42.07159225  2.48583931  2.48583931  0.19121841  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [42.98372179 10.29811994  8.05541826  0.13730827  0.13730827]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [4.71290323e+01 2.26925044e+00 1.74557726e+00 8.72788631e-02
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [50.56967482  1.3248      1.035       0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [54.36797737  2.0296793   1.56129177  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [5.91487590e+01 2.40975029e+00 2.40975029e+00 2.55579576e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [6.57242220e+01 2.87325146e+00 2.23099525e+00 2.36620708e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [73.5862908   5.43096188  5.43096188  0.15428869  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [9.00085330e+01 2.34599999e+00 1.43520000e+00 1.10400000e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [1.17971755e+02 1.24291966e+00 7.64873634e-01 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [1.91687597e+02 1.65887250e+00 1.65887250e+00 9.75807355e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  38
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [98.39, 0.85, 0.66, 0.07, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.640531 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  60
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  45.0
Iteration TIME (sec):  0.013689460000000153
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.44737135 13.97932494  8.29101871  0.55689711  0.23891104]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [19.98727152 20.24429511 11.53552263  0.09049265  0.09049265]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  2
Leaf selection - action scores:  [8.34765330e+01 2.07275999e+01 2.81519999e+00 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [1.18868092e+02 1.67316107e-01 9.56092042e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [194.30276046   0.48790368   0.37080679   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.71, 0.19, 0.09, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````
API response time: 0.565395 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  27
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  46.0
Iteration TIME (sec):  0.010345989000000166
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.23493321 14.13586273  8.38605952  0.5629178   0.24149394]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [20.22960276 16.18960942 11.67466624  0.09153884  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [21.34267212 19.39571215  5.52947934  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [22.28674094  1.59490033  0.50365274  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [22.65732563  0.5796      0.3312      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [22.97690226  1.22462851  0.97970281  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [23.30699405  2.0116784   1.52887558  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [23.56932878  4.12229814  3.17099857  0.07927496  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [24.10106381  1.95161471  1.48322718  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [24.40686038  3.99542769  3.07340592  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [24.8743709   3.93045706  2.41874281  0.07558571  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [25.10445077  8.10036487  4.90480809  0.07431527  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [25.99865385  0.87627283  0.87627283  0.21906821  0.14604547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [25.92303434  9.96725954  7.74434554  0.21512071  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [26.92200972  3.65905639  2.25172701  0.49256528  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [26.95791659 12.28199996  7.45199997  0.138       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [28.34623404  1.01408875  0.60845325  0.27042367  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [28.70723645  5.62551036  3.44148869  0.13236495  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [29.6946615   2.07128759  1.61819343  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [30.141722    6.89311034  3.28845631  0.25295818  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [31.23562818  3.20920475  1.5428869   0.55543928  0.12343095]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [32.29332228  1.92488977  1.1429033   0.06015281  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [33.15812453  3.92274557  1.46371103  0.23419377  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [33.45430314 10.07109777  7.85204233  0.51208972  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [34.86570654  9.82559997  4.63679998  0.2208      0.1656    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [36.46535932  5.82574153  4.54300945  0.26723585  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [38.29559413  3.45953641  2.68501333  0.20653949  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [40.0910706   2.58734359  2.58734359  0.19902643  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [40.75913862 10.75603548  8.41360997  0.14341381  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [44.42545858  2.38000994  1.83077688  0.09153884  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [47.31328767  1.39646181  1.09098579  0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [50.37819982  2.15279999  1.65599999  0.1242      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [5.41059034e+01 2.57613142e+00 2.57613142e+00 2.73226059e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [5.90453102e+01 3.10346628e+00 2.40975029e+00 2.55579576e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [64.34506129  5.94932067  5.94932067  0.16901479  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [7.52834664e+01 2.62290773e+00 1.60460238e+00 1.23430952e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [9.05329330e+01 1.43520000e+00 8.83199997e-01 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [1.16884201e+02 2.03169559e+00 2.03169559e+00 1.19511505e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [1.92019371e+02 1.65887250e+00 1.28806571e+00 1.36613030e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  39
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.54, 0.25, 0.19, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.915829 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  61
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  47.0
Iteration TIME (sec):  0.014053042000000016
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [16.03003186 14.2907439   8.48009451  0.56887477  0.2440495 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [19.91870331 16.3815885  11.81223746  0.09257321  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [21.03875041 19.64926163  5.60176319  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [21.96114611  1.61630935  0.51041348  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [22.31705337  0.58759486  0.33576849  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [22.62183992  1.242       0.9936      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [22.93608131  2.04104752  1.55119611  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [23.18263575  4.18429107  3.21868543  0.08046714  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [23.69319591  1.98187411  1.50622432  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [23.98018961  4.0593586   3.12258353  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [24.42478858  3.99542769  2.45872473  0.07683515  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [24.63458174  8.23884268  4.98865704  0.07558571  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [25.49460596  0.89178329  0.89178329  0.22294582  0.14863055]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [25.40094923 10.15016029  7.88645548  0.21906821  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [26.35879168  3.72875897  2.2946209   0.50194832  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [26.3703366  12.52523149  7.59957866  0.14073294  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [27.70254159  1.035       0.621       0.276       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [28.02584079  5.74650292  3.51550767  0.13521183  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [28.95692487  2.11783919  1.65456187  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [29.35561145  7.05532336  3.36584234  0.25891095  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [30.37887029  3.28845631  1.58098861  0.5691559   0.12647909]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [31.35905913  1.97489523  1.17259404  0.06171548  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [32.14294027  4.03023795  1.50382013  0.24061122  0.12030561]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [32.36599856 10.36307411  8.0796849   0.52693597  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [33.65700532 10.12799662  4.77950402  0.22759543  0.17069657]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [35.11226654  6.01679998  4.69199998  0.276       0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [36.76695406  3.58096039  2.77925284  0.21378868  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [38.35914474  2.68501333  2.68501333  0.20653949  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [38.83886265 11.19523667  8.75716291  0.14926982  0.14926982]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [42.12808859  2.48583931  1.91218408  0.0956092   0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [44.59938238  1.4646215   1.14423555  0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [47.13388112  2.26925044  1.74557726  0.13091829  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [5.01349748e+01 2.73239999e+00 2.73239999e+00 2.89799999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [5.40111107e+01 3.31774501e+00 2.57613142e+00 2.73226059e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [57.80392364  6.42600076  6.42600076  0.18255684  0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [6.58323915e+01 2.87325146e+00 1.75775383e+00 1.35211833e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [75.72318916  1.60460238  0.98744762  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [8.96957330e+01 2.34599999e+00 2.34599999e+00 1.38000000e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [1.17087370e+02 2.03169559e+00 1.57755187e+00 1.67316107e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [1.94263728e+02 4.87903677e-01 3.70806795e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  40
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [98.77, 0.67, 0.52, 0.03, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.753031 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  62
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  48.0
Iteration TIME (sec):  0.014023646000000056
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.83223366 14.44401995  8.57315497  0.57477     0.24657858]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [19.62083354 16.57144607 11.94828841  0.09359615  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [20.74688834 19.89958079  5.6731261   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [21.64882098  1.63743847  0.51708583  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [21.99103519  0.59548239  0.34027565  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [22.28207748  1.25913184  1.00730547  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [22.58162277  2.06999999  1.57319999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [22.81361846  4.24537884  3.26567603  0.0816419   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [23.30455566  2.0116784   1.52887558  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [23.57428346  4.12229814  3.17099857  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [23.9978171   4.0593586   2.49806683  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [24.1891608   8.37503113  5.07111976  0.07683515  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [25.01772311  0.90702855  0.90702855  0.22675714  0.15117143]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [24.90804612 10.3298231   8.0260496   0.22294582  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [25.82826747  3.79718227  2.33672755  0.51115915  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [25.81823195 12.76382877  7.74434554  0.14341381  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [27.09933322  1.05549704  0.63329822  0.28146588  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [27.38916659  5.86499998  3.58799999  0.138       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [28.26980996  2.16338933  1.69014792  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [28.6260125   7.21388975  3.44148869  0.2647299   0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [29.58678194  3.36584234  1.61819343  0.58254964  0.12945547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [30.49902543  2.02366542  1.20155134  0.06323954  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [31.2128909   4.13493689  1.5428869   0.2468619   0.12343095]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [31.37432109 10.64704652  8.30108712  0.54137525  0.12030561]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [32.56230804 10.42162255  4.91806907  0.23419377  0.17564532]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [33.89526929  6.20197546  4.83640288  0.28449429  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [35.40298654  3.69839999  2.87039999  0.2208      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [36.82803654  2.77925284  2.77925284  0.21378868  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [37.15962695 11.61784615  9.08773743  0.15490462  0.15490462]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [40.14497359  2.58734359  1.9902643   0.09951321  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [42.29323176  1.52974727  1.19511505  0.0956092   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [44.43003552  2.38000994  1.83077688  0.13730827  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [4.69059863e+01 2.88020248e+00 2.88020248e+00 3.05476021e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [5.00469998e+01 3.51899999e+00 2.73239999e+00 2.89799999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [52.8735981   6.86968378  6.86968378  0.19516147  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [5.91426738e+01 3.10346628e+00 1.89859113e+00 1.46045472e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [66.21774518  1.75775383  1.08169467  0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [7.50211756e+01 2.62290773e+00 2.62290773e+00 1.54288690e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [8.98521330e+01 2.34599999e+00 1.82159999e+00 1.93199999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [1.18461752e+02 5.97557527e-01 4.54143720e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [1.92760985e+02 1.30758186e+00 1.01483965e+00 5.85484413e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  41
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.33, 0.32, 0.32, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.551005 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  63
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  49.0
Iteration TIME (sec):  0.013913271000000282
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.64113907 14.59573978  8.66527058  0.58060538  0.24908198]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [19.33511968 16.75925094 12.08286841  0.09460803  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [20.46630963 20.14679003  5.74360242  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [21.34888871  1.6582984   0.52367318  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [21.67830394  0.6032668   0.34472389  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [21.95654779  1.27603369  1.02082696  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [22.24243815  2.09855307  1.59490033  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [22.46097135  4.30559999  3.31199999  0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [22.93368008  2.04104752  1.55119611  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [23.18751255  4.18429107  3.21868543  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [23.59162486  4.12229814  2.53679886  0.07927496  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [23.76614155  8.50904013  5.15226283  0.07806459  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [24.56565302  0.92202178  0.92202178  0.23050544  0.1536703 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [24.44170785 10.50641406  8.16325697  0.22675714  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [25.32739659  3.86439425  2.37808877  0.52020692  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [25.29817649 12.998047    7.88645548  0.14604547  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [26.53254302  1.07560355  0.64536213  0.28682761  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [26.79253541  5.98114987  3.65905639  0.14073294  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [27.62779159  2.20799999  1.72499999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [27.94647732  7.36904492  3.51550767  0.27042367  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [28.85163457  3.44148869  1.65456187  0.59564227  0.13236495]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [29.70390832  2.07128759  1.22982701  0.06472774  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [30.35673645  4.23704947  1.58098861  0.25295818  0.12647909]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [30.46580882 10.92363925  8.51673568  0.55543928  0.12343095]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [31.56480498 10.70719933  5.05283564  0.24061122  0.18045842]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [32.79305778  6.3817801   4.97661751  0.29274221  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [34.1762074   3.81222345  2.95874059  0.22759543  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [35.46186654  2.87039999  2.87039999  0.2208      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [35.67510473 12.02561325  9.40670192  0.16034151  0.16034151]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [38.41077961  2.68501333  2.06539487  0.10326974  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [40.30253618  1.59221144  1.24391519  0.09951321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [42.13243447  2.48583931  1.91218408  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [44.21491924  3.02078185  3.02078185  0.32038595  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [4.68235563e+01 3.70935168e+00 2.88020248e+00 3.05476021e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [48.99129983  7.28639997  7.28639997  0.207       0.1242    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [5.41003273e+01 3.31774501e+00 2.02967930e+00 1.56129177e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [59.4895318   1.89859113  1.16836377  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [6.56025313e+01 2.87325146e+00 2.87325146e+00 1.69014792e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [7.51523210e+01 2.62290773e+00 2.03661071e+00 2.16004166e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [9.09101330e+01 6.89999998e-01 5.24399998e-01 5.51999998e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [1.17541514e+02 1.60145417e+00 1.24291966e+00 7.17069032e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [1.93853889e+02 6.24516707e-01 6.24516707e-01 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  42
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.34, 0.32, 0.32, 0.02, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.573797 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  64
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  50.0
Iteration TIME (sec):  0.013739754000000381
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.45637916 14.74594984  8.75646955  0.58638269  0.25156047]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [19.06076707 16.9450683  12.21602416  0.0956092   0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [20.19630613 20.39100246  5.81322439  0.          0.        ]  taking action:  1  corresponding to token:  ``
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.88, 0.07, 0.04, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````
API response time: 0.662047 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  25
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  51.0
Iteration TIME (sec):  0.00957947800000003
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.27761282 14.89469434  8.84677871  0.59210363  0.25401478]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [18.79705111 17.12895993 12.34779996  0.0966      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [20.44687007  9.81616225  5.88202234  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [21.06055157  1.67889917  0.53017869  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [21.37798166  0.61095204  0.34911545  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [21.64428514  1.29271458  1.03417166  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [21.91746207  2.12672282  1.61630935  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [22.12352014  4.36499038  3.35768491  0.08394212  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [22.57925706  2.06999999  1.57319999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [22.81842092  4.24537884  3.26567603  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [23.20458134  4.18429107  2.57494835  0.08046714  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [23.36370934  8.6409711   5.23214764  0.07927496  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [24.13631879  0.93677506  0.93677506  0.23419377  0.15612918]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [23.9996341  10.68008556  8.29819598  0.23050544  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [24.85351967  3.93045706  2.41874281  0.52909999  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [24.80718967 13.22811879  8.0260496   0.14863055  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [25.99865385  1.09534104  0.65720462  0.29209094  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [26.23192562  6.09508677  3.72875897  0.14341381  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [27.02615209  2.25172701  1.75916173  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [27.31154159  7.52099997  3.58799999  0.276       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [28.1669314   3.51550767  1.69014792  0.60845325  0.13521183]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [28.96594976  2.11783919  1.25746702  0.06618247  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [29.56520603  4.3367584   1.61819343  0.25891095  0.12945547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [29.62948169 11.19339935  8.72705712  0.5691559   0.12647909]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [30.65095525 10.98535472  5.18409998  0.2468619   0.18514643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [31.78870709  6.55665577  5.11298844  0.30076403  0.12030561]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [33.06513583  3.92274557  3.04451895  0.23419377  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [34.23310625  2.95874059  2.95874059  0.22759543  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [34.35050654 12.41999996  9.71519997  0.1656      0.1656    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [36.87766606  2.77925284  2.1378868   0.10689434  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [38.56171232  1.6523159   1.29087179  0.10326974  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [40.14911998  2.58734359  1.9902643   0.14926982  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [41.92817844  3.15510374  3.15510374  0.33463221  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [44.13711122  3.89040087  3.02078185  0.32038595  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [45.83439583  7.68053995  7.68053995  0.21819716  0.13091829]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [5.01297998e+01 3.51899999e+00 2.15279999e+00 1.65599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [54.41816174  2.0296793   1.24903341  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [5.89357760e+01 3.10346628e+00 3.10346628e+00 1.82556840e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [6.57174614e+01 2.87325146e+00 2.23099525e+00 2.36620708e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [7.60394810e+01 7.71443450e-01 5.86297022e-01 6.17154760e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [9.02017330e+01 1.84919999e+00 1.43520000e+00 8.27999997e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [1.18210778e+02 7.64873634e-01 7.64873634e-01 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [1.93873405e+02 6.24516707e-01 6.24516707e-01 3.90322942e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  43
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.13, 0.41, 0.41, 0.05, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.524039 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  65
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  52.0
Iteration TIME (sec):  0.014162172999999889
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.10452394 15.04201534  8.9362236   0.59776982  0.25644559]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [18.54330983 17.31098449 12.47823782  0.09758074  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [20.17800048  9.9354282   5.95002485  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [20.78308187  1.69925021  0.53660533  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [21.08926958  0.6185418   0.35345246  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [21.34441287  1.30918295  1.04734636  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [21.60573049  2.1545243   1.63743847  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [21.80020492  4.42358347  3.40275652  0.08506891  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [22.24010642  2.09855307  1.59490033  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [22.46570277  4.30559999  3.31199999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [22.83522955  4.24537884  2.61254082  0.0816419   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [22.98024871  8.77091781  5.31083097  0.08046714  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [23.72787871  0.95129957  0.95129957  0.23782489  0.15854993]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [23.57979382 10.85097778  8.43097554  0.23419377  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [24.40429921  3.99542769  2.45872473  0.53784604  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [24.3426645  13.45425686  8.16325697  0.15117143  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [25.49460596  1.11472911  0.66883747  0.2972611   0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [25.70385836  6.20693255  3.79718227  0.14604547  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [26.46083612  2.2946209   1.79267258  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [26.71653963  7.66994513  3.65905639  0.28146588  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [27.52716659  3.58799999  1.72499999  0.621       0.138     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [28.27862813  2.16338933  1.28451242  0.06760592  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [28.83057651  4.43422581  1.65456187  0.2647299   0.13236495]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [28.85628319 11.4568095   8.93242774  0.58254964  0.12945547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [29.80971439 11.2566389   5.31212173  0.25295818  0.18971863]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [30.86858351  6.72698688  5.24581546  0.30857738  0.12343095]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [32.05271106  4.03023795  3.12794587  0.24061122  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [33.12024025  3.04451895  3.04451895  0.23419377  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [33.15914032 12.80224292 10.01419891  0.17069657  0.17069657]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [35.50970654  2.87039999  2.20799999  0.1104      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [37.02273695  1.71030944  1.33617925  0.10689434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [38.41475153  2.68501333  2.06539487  0.15490462  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [39.95423993  3.28393609  3.28393609  0.34829625  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [41.8542986   4.06339118  3.15510374  0.33463221  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [43.20341501  8.05541826  8.05541826  0.22884711  0.13730827]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [4.69011375e+01 3.70935168e+00 2.26925044e+00 1.74557726e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [50.42477482  2.15279999  1.3248      0.1242      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [5.39107419e+01 3.31774501e+00 3.31774501e+00 1.95161471e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [5.90392249e+01 3.10346628e+00 2.40975029e+00 2.55579576e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [66.49492944  0.84507396  0.64225621  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [7.54454695e+01 2.06746844e+00 1.60460238e+00 9.25732139e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [9.07169330e+01 8.83199997e-01 8.83199997e-01 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [1.18222729e+02 7.64873634e-01 7.64873634e-01 4.78046021e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [1.93463566e+02 8.00162031e-01 8.00162031e-01 9.75807355e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  44
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '    \n']
Probs: [97.88, 1.4, 0.66, 0.04, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.505980 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  66
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  53.0
Iteration TIME (sec):  0.014319669000000257
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.93681928 15.18795296  9.02482859  0.60338281  0.25885359]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  1
Leaf selection - action scores:  [193.75630834   1.01483965   0.37080679   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````
Tokens: ['```', '``', '\n', 'module', '\\']
Probs: [91.46, 7.51, 1.02, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````
API response time: 0.545039 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  24
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  54.0
Iteration TIME (sec):  0.009991285999999988
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [15.08352479  9.88836361  9.11261688  0.60894406  0.26123939]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [18.29893708 17.49119773 12.60737769  0.09855171  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [19.91896779 10.05334639  6.01725891  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [20.51581424  1.71936038  0.54295591  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [20.81143907  0.62603955  0.35773689  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [21.05613342  1.32544671  1.06035737  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [21.30636823  2.18197158  1.6582984   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [21.49006656  4.48141055  3.44723888  0.08618097  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [21.91516291  2.12672282  1.61630935  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [22.12818359  4.36499038  3.35768491  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [22.48226277  4.30559999  2.64959999  0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [22.61431617  8.89896718  5.38836545  0.0816419   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [23.33869323  0.96560563  0.96560563  0.24140141  0.16093427]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [23.18038598 11.01922003  8.56169614  0.23782489  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [23.9776714   4.0593586   2.49806683  0.54645212  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [23.90230958 13.67665633  8.29819598  0.1536703   0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [25.01772311  1.13378569  0.68027141  0.30234285  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [25.20530721  6.3167983   3.86439425  0.14863055  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [25.92833566  2.33672755  1.8255684   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [26.15746076  7.81605245  3.72875897  0.28682761  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [26.92763903  3.65905639  1.75916173  0.63329822  0.14073294]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [27.63641659  2.20799999  1.311       0.069       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [28.14635568  4.52959642  1.69014792  0.27042367  0.13521183]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [28.13866882 11.71429804  9.13318152  0.59564227  0.13236495]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [29.03197276 11.52153723  5.43712993  0.25891095  0.19418321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [30.02156687  6.89311034  5.37536127  0.31619772  0.12647909]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [31.12518996  4.13493689  3.20920475  0.2468619   0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [32.10618022  3.12794587  3.12794587  0.24061122  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [32.08014441 13.17339929 10.30452567  0.17564532  0.17564532]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [34.27933657  2.95874059  2.2759543   0.11379771  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [35.64954654  1.76639999  1.38        0.1104      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [36.88148371  2.77925284  2.1378868   0.16034151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [38.22807161  3.40790154  3.40790154  0.3614441   0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [39.88375141  4.22931163  3.28393609  0.34829625  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [40.96774052  8.41360997  8.41360997  0.23902301  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [44.2103423   3.89040087  2.38000994  0.18307769  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [47.17752055  2.26925044  1.39646181  0.13091829  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [4.99538498e+01 3.51899999e+00 3.51899999e+00 2.06999999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [5.40055346e+01 3.31774501e+00 2.57613142e+00 2.73226059e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [59.73902614  0.9127842   0.69371599  0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [6.59743639e+01 2.26479821e+00 1.75775383e+00 1.01408875e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [75.87747785  0.98744762  0.98744762  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [9.07261330e+01 8.83199997e-01 8.83199997e-01 5.51999998e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [117.97175521   0.97999434   0.97999434   0.11951151   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [1.91024048e+02 2.73226059e+00 1.28806571e+00 7.80645884e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  45
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.42, 0.85, 0.66, 0.03, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.561995 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  67
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  55.0
Iteration TIME (sec):  0.014264288999999764
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.9168083   9.98388619  9.19961066  0.61445497  0.26360359]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [18.06337646 17.66965267 12.73525758  0.09951321  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [19.66918783 10.16996149  6.08374997  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [20.2581388   1.73923803  0.54923306  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [20.54382387  0.63344856  0.36197061  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [20.77871923  1.34151332  1.07321066  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [21.01857909  2.20907785  1.67889917  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [21.19223434  4.53850088  3.49115452  0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [21.60346257  2.1545243   1.63743847  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [21.80480324  4.42358347  3.40275652  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [22.14450567  4.36499038  2.68614792  0.08394212  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [22.26461706  9.02519997  5.46479998  0.0828      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [22.96729733  0.97970281  0.97970281  0.2449257   0.1632838 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [22.79980726 11.18493189  8.69045067  0.24140141  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [23.57180612  4.12229814  2.53679886  0.55492475  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [23.48410174 13.89549673  8.43097554  0.15612918  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [24.56565302  1.15252722  0.69151633  0.30734059  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [24.73362509  6.42478558  3.93045706  0.15117143  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [25.42559892  2.37808877  1.85788185  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [25.63083562  7.95947822  3.79718227  0.29209094  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [26.3643076   3.72875897  1.79267258  0.64536213  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [27.03459607  2.25172701  1.33696291  0.07036647  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [27.50704159  4.62299998  1.72499999  0.276       0.138     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [27.47029652 11.96624725  9.3296165   0.60845325  0.13521183]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [28.3101416  11.78048051  5.55932788  0.2647299   0.19854742]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [29.23848507  7.05532336  5.50185767  0.32363869  0.12945547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [30.27136307  4.23704947  3.28845631  0.25295818  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [31.17716089  3.20920475  3.20920475  0.2468619   0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [31.09694983 13.53438117 10.58689372  0.18045842  0.18045842]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [33.16501258  3.04451895  2.34193765  0.11709688  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [34.41447136  1.82076344  1.42247144  0.11379771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [35.51338654  2.87039999  2.20799999  0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [36.70205393  3.52751322  3.52751322  0.37413019  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [38.16054908  4.3889641   3.40790154  0.3614441   0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [39.03788908  8.75716291  8.75716291  0.24878304  0.14926982]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [41.92383257  4.06339118  2.48583931  0.19121841  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [44.471228    2.38000994  1.4646215   0.13730827  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [4.67362774e+01 3.70935168e+00 3.70935168e+00 2.18197158e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [5.00418248e+01 3.51899999e+00 2.73239999e+00 2.89799999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [54.64677947  0.97580735  0.74161359  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [5.92704636e+01 2.44626165e+00 1.89859113e+00 1.09534104e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [66.35295701  1.08169467  1.08169467  0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [7.58851923e+01 9.87447615e-01 9.87447615e-01 6.17154760e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [90.532933  1.1316    1.1316    0.138     0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [1.16477861e+02 3.34632215e+00 1.57755187e+00 9.56092042e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [1.92077920e+02 1.65887250e+00 1.28806571e+00 5.85484413e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  46
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '    \n']
Probs: [97.76, 1.09, 1.09, 0.04, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.521504 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  68
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  56.0
Iteration TIME (sec):  0.014975380999999732
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.7551394  10.07855964  9.28583112  0.6199169   0.26594678]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [17.83611644 17.84639978 12.86191364  0.10046552  0.10046552]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  2
Leaf selection - action scores:  [6.98062179e+01 2.31741612e+01 3.14748927e+00 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [91.222933  0.1932    0.1104    0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [118.48565469   0.59755753   0.45414372   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [1.94595503e+02 3.70806795e-01 1.75645324e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.86, 0.09, 0.04, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````
API response time: 0.626002 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  28
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  57.0
Iteration TIME (sec):  0.010537624999999995
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.59826973 10.17240619  9.37129852  0.62533113  0.2682695 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [18.01278548 14.85123935 12.98738038  0.10140888  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [19.42812377 10.28531578  6.14952216  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [20.00949564  1.75889107  0.55543928  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [20.28581333  0.64077191  0.36615538  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [20.51150507  1.35738977  1.08591182  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [20.74163675  2.23585553  1.69925021  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [20.90591612  4.59488194  3.53452457  0.08836311  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [21.30413032  2.18197158  1.6582984   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [21.4946024   4.48141055  3.44723888  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [21.82089736  4.42358347  2.72220521  0.08506891  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [21.92998691  9.14969137  5.54018009  0.08394212  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [22.61237706  0.9936      0.9936      0.2484      0.1656    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [22.43662498 11.3482242   8.81732528  0.2449257   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [23.18507415  4.18429107  2.57494835  0.56326995  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [23.08624696 14.11094364  8.56169614  0.15854993  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [24.13631879  1.17096883  0.7025813   0.31225835  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [24.28648532  6.53098758  3.99542769  0.1536703   0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [24.94995661  2.41874281  1.88964282  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [25.13364606  8.10036487  3.86439425  0.2972611   0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [25.83367656  3.79718227  1.8255684   0.65720462  0.14604547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [26.46910999  2.2946209   1.36243116  0.0717069   0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [26.90793642  4.71455343  1.75916173  0.28146588  0.14073294]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [26.84579159 12.21299996  9.52199997  0.621       0.138     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [27.63784161 12.03385317  5.678897    0.27042367  0.20281775]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [28.51169732  7.21388975  5.62551036  0.33091237  0.13236495]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [29.48198465  4.3367584   3.36584234  0.25891095  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [30.3219547   3.28845631  3.28845631  0.25295818  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [30.19620964 13.88598209 10.86192377  0.18514643  0.18514643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [32.14962392  3.12794587  2.40611221  0.12030561  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [33.29588557  1.87355012  1.46371103  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [34.28289275  2.95874059  2.2759543   0.17069657  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [35.34042654  3.64319999  3.64319999  0.3864      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [36.63715379  4.54300945  3.52751322  0.37413019  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [37.35027879  9.08773743  9.08773743  0.25817436  0.15490462]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [39.95009355  4.22931163  2.58734359  0.19902643  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [42.17154732  2.48583931  1.52974727  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [44.05472626  3.89040087  3.89040087  0.22884711  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [4.68187075e+01 3.70935168e+00 2.88020248e+00 3.05476021e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [50.63694982  1.035       0.7866      0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [5.42174242e+01 2.61516371e+00 2.02967930e+00 1.17096883e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [59.61123636  1.16836377  1.16836377  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [6.63597176e+01 1.08169467e+00 1.08169467e+00 6.76059167e-02
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [75.72318916  1.26516726  1.26516726  0.15428869  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [8.93829330e+01 3.86399999e+00 1.82159999e+00 1.10400000e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [1.17123224e+02 2.03169559e+00 1.57755187e+00 7.17069032e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [1.90789854e+02 2.12726003e+00 2.12726003e+00 7.80645884e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  47
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '\\']
Probs: [99.47, 0.32, 0.19, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.793460 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  69
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  58.0
Iteration TIME (sec):  0.016535041999999667
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.44596751 10.26544715  9.45603225  0.63069888  0.27057229]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [17.78807974 14.99580068 13.11169066  0.10234354  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [19.19528122 10.39944928  6.21459828  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [19.76936957  1.77832692  0.56157692  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [20.03684682  0.6480125   0.37029286  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [20.25388118  1.37308266  1.09846613  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [20.47487709  2.26231628  1.71936038  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [20.6303893   4.65057951  3.57736885  0.08943422  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [21.01637002  2.20907785  1.67889917  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [21.19671018  4.53850088  3.49115452  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [21.51047784  4.48141055  2.75779111  0.08618097  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [21.60937466  9.27251151  5.61454825  0.08506891  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [22.27275058  1.00730547  1.00730547  0.25182637  0.16788425]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [22.0895542  11.50919996  8.94239997  0.2484      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [22.81601969  4.24537884  2.61254082  0.57149331  0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [22.70714813 14.32315019  8.69045067  0.16093427  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [23.72787871  1.18912446  0.71347468  0.31709986  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [23.86183362  6.63549001  4.0593586   0.15612918  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [24.49906256  2.45872473  1.9208787   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [24.66325218  8.23884268  3.93045706  0.30234285  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [25.33270483  3.86439425  1.85788185  0.66883747  0.14863055]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [25.9364493   2.33672755  1.38743198  0.07302274  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [26.34500189  4.80436251  1.79267258  0.28682761  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [26.26056491 12.45486502  9.71057273  0.63329822  0.14073294]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [27.00966659 12.28199996  5.79599998  0.276       0.207     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [27.83478059  7.36904492  5.74650292  0.33802958  0.13521183]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [28.74935257  4.43422581  3.44148869  0.2647299   0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [29.53130102  3.36584234  3.36584234  0.25891095  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [29.36703758 14.22889748 11.13015981  0.18971863  0.18971863]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [31.21938727  3.20920475  2.46861904  0.12343095  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [32.27661317  1.92488977  1.50382013  0.12030561  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [33.16845661  3.04451895  2.34193765  0.17564532  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [34.11575236  3.75532459  3.75532459  0.398292    0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [35.27786654  4.69199998  3.64319999  0.3864      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [35.85835217  9.40670192  9.40670192  0.26723585  0.16034151]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [38.22409969  4.3889641   2.68501333  0.20653949  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [40.18643743  2.58734359  1.59221144  0.14926982  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [41.77607289  4.06339118  4.06339118  0.23902301  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [44.13253428  3.89040087  3.02078185  0.32038595  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [47.37632241  1.09098579  0.8291492   0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [5.02384748e+01 2.77379999e+00 2.15279999e+00 1.24200000e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [54.52968259  1.24903341  1.24903341  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [5.96173216e+01 1.16836377e+00 1.16836377e+00 7.30227359e-02
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [66.21774518  1.38592129  1.38592129  0.16901479  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [7.47588848e+01 4.32008332e+00 2.03661071e+00 1.23430952e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [8.98797330e+01 2.34599999e+00 1.82159999e+00 8.27999997e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [1.16334448e+02 2.60535082e+00 2.60535082e+00 9.56092042e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [1.94127115e+02 6.24516707e-01 3.70806795e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  48
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.02, 1.09, 0.85, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 1.072472 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  70
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  59.0
Iteration TIME (sec):  0.014937767999999796
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.29801636 10.35770291  9.54005089  0.63602132  0.27285564]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [17.57102616 15.13905368 13.23487589  0.10326974  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [18.97020418 10.51239996  6.27899998  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [19.53728545  1.79755263  0.5676482   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [19.79640846  0.65517307  0.37438461  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [20.00528777  1.38859821  1.11087857  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [20.2176914   2.2884711   1.73923803  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [20.36499316  4.70561787  3.61970605  0.09049265  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [20.73945542  2.23585553  1.69925021  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [20.91033428  4.59488194  3.53452457  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [21.21237561  4.53850088  2.79292362  0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [21.30182917  9.39372596  5.68794416  0.08618097  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [21.94735115  1.02082696  1.02082696  0.25520674  0.17013783]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [21.75743922 11.66795505  9.06574924  0.25182637  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [22.46333706  4.30559999  2.64959999  0.5796      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [22.34537815 14.53225833  8.81732528  0.1632838   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [23.33869323  1.20700704  0.72420422  0.32186854  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [23.45784836  6.73837196  4.12229814  0.15854993  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [24.07084526  2.49806683  1.95161471  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [24.21733368  8.37503113  3.99542769  0.30734059  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [24.85873247  3.93045706  1.88964282  0.68027141  0.15117143]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [25.43356127  2.37808877  1.41199021  0.07431527  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [25.81474474  4.89252331  1.8255684   0.29209094  0.14604547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [25.71067159 12.69212186  9.89555264  0.64536213  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [26.42100046 12.52523149  5.9107834   0.28146588  0.21109941]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [27.20229159  7.52099997  5.86499998  0.345       0.138     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [28.06699221  4.52959642  3.51550767  0.27042367  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [28.79748528  3.44148869  3.44148869  0.2647299   0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [28.60045451 14.56374088 11.39208176  0.19418321  0.19418321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [30.36306041  3.28845631  2.52958177  0.12647909  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [31.34281822  1.97489523  1.5428869   0.12343095  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [32.15296574  3.12794587  2.40611221  0.18045842  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [33.00658739  3.86419712  3.86419712  0.40983909  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [34.05529732  4.83640288  3.75532459  0.398292    0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [34.52714654  9.71519997  9.71519997  0.276       0.1656    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [36.69823627  4.54300945  2.77925284  0.21378868  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [38.45049875  2.68501333  1.6523159   0.15490462  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [39.80911649  4.22931163  4.22931163  0.24878304  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [41.84995273  4.06339118  3.15510374  0.33463221  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [44.65888263  1.14423555  0.86961902  0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [4.70029628e+01 2.92384191e+00 2.26925044e+00 1.30918295e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [50.52827482  1.3248      1.3248      0.1242      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [5.45352586e+01 1.24903341e+00 1.24903341e+00 7.80645884e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [59.4895318   1.49696609  1.49696609  0.18255684  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [6.53726712e+01 4.73241417e+00 2.23099525e+00 1.35211833e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [7.51754643e+01 2.62290773e+00 2.03661071e+00 9.25732139e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [8.92725330e+01 3.00839999e+00 3.00839999e+00 1.10400000e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [1.18378094e+02 7.64873634e-01 4.54143720e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [1.91297274e+02 2.12726003e+00 1.65887250e+00 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  49
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.38, 0.85, 0.66, 0.09, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.858446 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  71
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  60.0
Iteration TIME (sec):  0.014554665999999994
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.15421387 10.44919302  9.62337224  0.6412996   0.27512004]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [17.3612053  15.28103325 13.35696607  0.10418771  0.10418771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [18.7524712  10.62420384  6.34274781  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [19.31280452  1.81657488  0.57365523  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [19.5640225   0.66225623  0.37843213  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [19.76520974  1.4039423   1.12315384  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [19.96952084  2.31433035  1.75889107  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [20.10912208  4.76001988  3.66155376  0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [20.4727225   2.26231628  1.71936038  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [20.63475195  4.65057951  3.57736885  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [20.92579782  4.59488194  2.82761965  0.08836311  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [21.00648701  9.51339608  5.76040497  0.08727886  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [21.63521346  1.03417166  1.03417166  0.25854292  0.17236194]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [21.43923683 11.8245789   9.1874426   0.25520674  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [22.12585187  4.36499038  2.68614792  0.58759486  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [21.99965706 14.73839995  8.94239997  0.1656      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [22.96729733  1.22462851  0.73477711  0.3265676   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [23.07290784  6.83970655  4.18429107  0.16093427  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [23.6634678   2.53679886  1.98187411  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [23.79384188  8.50904013  4.0593586   0.31225835  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [24.40942155  3.99542769  1.9208787   0.69151633  0.1536703 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [24.95777582  2.41874281  1.43612854  0.07558571  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [25.31412601  4.97912336  1.85788185  0.2972611   0.14863055]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [25.19269921 12.92502426 10.07713756  0.65720462  0.14604547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [25.86787519 12.76382877  6.02337987  0.28682761  0.21512071]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [26.60958259  7.66994513  5.98114987  0.35183235  0.14073294]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [27.42941659  4.62299998  3.58799999  0.276       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [28.11402242  3.51550767  3.51550767  0.27042367  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [27.88898039 14.89105683 11.64811556  0.19854742  0.19854742]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [29.57137057  3.36584234  2.58910949  0.12945547  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [30.48321554  2.02366542  1.58098861  0.12647909  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [31.22263545  3.20920475  2.46861904  0.18514643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [31.99590008  3.97008514  3.97008514  0.42106964  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [32.94803895  4.97661751  3.86419712  0.40983909  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [33.32983689 10.01419891 10.01419891  0.28449429  0.17069657]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [35.33674654  4.69199998  2.87039999  0.2208      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [36.91584261  2.77925284  1.71030944  0.16034151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [38.08905464  4.3889641   4.3889641   0.25817436  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [39.87960502  4.22931163  3.28393609  0.34829625  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [42.34972811  1.19511505  0.90828744  0.0956092   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [44.30645808  3.06655127  2.38000994  0.13730827  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [47.27449707  1.39646181  1.39646181  0.13091829  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [5.05334498e+01 1.32480000e+00 1.32480000e+00 8.27999997e-02
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [54.41816174  1.60032406  1.60032406  0.19516147  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [5.87288783e+01 5.11159152e+00 2.40975029e+00 1.46045472e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [6.57377432e+01 2.87325146e+00 2.23099525e+00 1.01408875e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [7.46663116e+01 3.36349344e+00 3.36349344e+00 1.23430952e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [9.08457330e+01 8.83199997e-01 5.24399998e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [1.16645178e+02 2.60535082e+00 2.03169559e+00 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [1.91999855e+02 1.65887250e+00 1.28806571e+00 1.75645324e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  50
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', "Here's", 'module']
Probs: [97.99, 1.09, 0.85, 0.03, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.635686 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  72
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  61.0
Iteration TIME (sec):  0.014788632000000135
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [14.01437055 10.53993624  9.70601338  0.64653478  0.27736595]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [17.15822898 15.42177275 13.47798991  0.10509767  0.10509767]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [18.54169216 10.73489516  6.40586128  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [19.09552074  1.83539999  0.5796      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [19.33924961  0.66926443  0.38243682  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [19.53317205  1.4191205   1.1352964   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [19.72985119  2.33990384  1.77832692  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [19.86222007  4.81380713  3.70292856  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [20.21556259  2.2884711   1.73923803  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [20.36930233  4.70561787  3.61970605  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [20.6500212   4.65057951  2.86189508  0.08943422  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [20.72256266  9.63157944  5.83196554  0.08836311  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [21.33546119  1.04734636  1.04734636  0.26183659  0.17455773]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [21.13400307 11.97915512  9.30754498  0.25854292  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [21.80250408  4.42358347  2.72220521  0.59548239  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [21.66883364 14.94169783  9.06574924  0.16788425  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [22.61237706  1.242       0.7452      0.3312      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [22.705563    6.93956156  4.24537884  0.1632838   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [23.27529488  2.57494835  2.0116784   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [23.39096011  8.6409711   4.12229814  0.31709986  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [23.98270782  4.0593586   1.95161471  0.7025813   0.15612918]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [24.50674608  2.45872473  1.45986781  0.07683515  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [24.84048765  5.06424275  1.88964282  0.30234285  0.15117143]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [24.70367911 13.15380351 10.25550782  0.66883747  0.14863055]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [25.34685832 12.998047    6.13390982  0.29209094  0.21906821]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [26.05265836  7.81605245  6.09508677  0.35853452  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [26.83194064  4.71455343  3.65905639  0.28146588  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [27.47541659  3.58799999  3.58799999  0.276       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [27.22632734 15.21133125 11.89864133  0.20281775  0.20281775]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [28.8365931   3.44148869  2.64729899  0.13236495  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [29.68849696  2.07128759  1.61819343  0.12945547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [30.36622238  3.28845631  2.52958177  0.18971863  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [31.06997085  4.07322141  4.07322141  0.43200833  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [31.9390891   5.11298844  3.97008514  0.42106964  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [32.24545765 10.30452567 10.30452567  0.29274221  0.17564532]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [34.11219618  4.83640288  2.95874059  0.22759543  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [35.54650654  2.87039999  1.76639999  0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [36.568436    4.54300945  4.54300945  0.26723585  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [38.15657717  4.3889641   3.40790154  0.3614441   0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [40.35643918  1.24391519  0.94537554  0.09951321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [42.0150959   3.20290834  2.48583931  0.14341381  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [44.56276685  1.4646215   1.4646215   0.13730827  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [4.72793459e+01 1.39646181e+00 1.39646181e+00 8.72788631e-02
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [50.42477482  1.69739999  1.69739999  0.207       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [5.37211565e+01 5.46452119e+00 2.57613142e+00 1.56129177e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [5.90574806e+01 3.10346628e+00 2.40975029e+00 1.09534104e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [6.52915441e+01 3.68452246e+00 3.68452246e+00 1.35211833e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [7.59854799e+01 9.87447615e-01 5.86297022e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [8.95117330e+01 3.00839999e+00 2.34599999e+00 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [1.17075419e+02 2.03169559e+00 1.57755187e+00 2.15120710e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [1.91238725e+02 2.12726003e+00 1.65887250e+00 5.85484413e-02
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  51
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.51, 0.32, 0.15, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.685413 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  73
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  62.0
Iteration TIME (sec):  0.014944666999999967
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.87830884 10.62995056  9.78799071  0.65172792  0.27959383]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [16.96173724 15.56130411 13.59797486  0.10599981  0.10599981]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [18.33750525 10.84450649  6.46835897  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [18.88505787  1.85403397  0.58548441  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [19.12168324  0.6762      0.3864      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [19.30873604  1.43413806  1.14731045  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [19.49820821  2.36520083  1.79755263  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [19.62377555  4.86699998  3.74384614  0.09359615  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [19.96741691  2.31433035  1.75889107  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [20.1133797   4.76001988  3.66155376  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [20.38438444  4.70561787  2.89576484  0.09049265  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [20.44933954  9.74833012  5.90265861  0.08943422  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [21.04729711  1.06035737  1.06035737  0.26508934  0.17672623]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [20.84088096 12.13176197  9.42611722  0.26183659  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [21.49233448  4.48141055  2.75779111  0.6032668   0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [21.35186876 15.1422665   9.1874426   0.17013783  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [22.27275058  1.25913184  0.7554791   0.33576849  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [22.3545142   7.03799998  4.30559999  0.1656      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [22.90486529  2.61254082  2.04104752  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [23.00707109  8.77091781  4.18429107  0.32186854  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [23.57676081  4.12229814  1.98187411  0.71347468  0.15854993]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [24.0783999   2.49806683  1.48322718  0.07806459  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [24.39149335  5.14795491  1.9208787   0.30734059  0.1536703 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [24.24101475 13.37867114 10.43082835  0.68027141  0.15117143]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [24.85496378 13.22811879  6.24248302  0.2972611   0.22294582]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [25.52806288  7.95947822  6.20693255  0.36511368  0.14604547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [26.27053703  4.80436251  3.72875897  0.28682761  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [26.87697518  3.65905639  3.65905639  0.28146588  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [26.60716659 15.52499995 12.14399996  0.207       0.207     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [28.15223446  3.51550767  2.70423667  0.13521183  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [28.95090829  2.11783919  1.65456187  0.13236495  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [29.57445285  3.36584234  2.58910949  0.19418321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [30.21760946  4.17380993  4.17380993  0.44267681  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [31.01475174  5.24581546  4.07322141  0.43200833  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [31.25735731 10.58689372 10.58689372  0.30076403  0.18045842]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [33.00314336  4.97661751  3.04451895  0.23419377  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [34.31489836  2.95874059  1.82076344  0.17069657  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [35.21162654  4.69199998  4.69199998  0.276       0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [36.63333614  4.54300945  3.52751322  0.37413019  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [38.61334719  1.29087179  0.98106256  0.10326974  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [40.03716761  3.3336927   2.58734359  0.14926982  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [42.25846478  1.52974727  1.52974727  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [44.56734379  1.4646215   1.4646215   0.09153884  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [47.17752055  1.78921669  1.78921669  0.21819716  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [4.97778998e+01 5.79599998e+00 2.73239999e+00 1.65599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [5.40222628e+01 3.31774501e+00 2.57613142e+00 1.17096883e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [5.86558556e+01 3.97973911e+00 3.97973911e+00 1.46045472e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [6.64476053e+01 1.08169467e+00 6.42256208e-01 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [74.86688693  3.36349344  2.62290773  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [8.98429330e+01 2.34599999e+00 1.82159999e+00 2.48399999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [1.16609324e+02 2.60535082e+00 2.03169559e+00 7.17069032e-02
 4.78046021e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [1.94205180e+02 6.24516707e-01 2.92742206e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  52
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.35, 0.32, 0.32, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.597248 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  74
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  63.0
Iteration TIME (sec):  0.014659947999999812
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.74586186 10.71925327  9.86931997  0.65688     0.28180409]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [16.77139584 15.69965794 13.71694722  0.10689434  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [18.1395745  10.95306884  6.53025855  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [18.68106652  1.87248253  0.59131027  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [18.91094664  0.68306515  0.39032294  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [19.09149574  1.44899999  1.1592      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [19.27415399  2.39023011  1.81657488  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [19.3933167   4.91961772  3.78432133  0.09460803  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [19.72777128  2.33990384  1.77832692  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [19.86642795  4.81380713  3.70292856  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [20.12828137  4.76001988  2.929243    0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [20.18616244  9.86369899  5.97251499  0.09049265  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [20.76999394  1.07321066  1.07321066  0.26830266  0.17886844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [20.5590909  12.28247287  9.54321633  0.26508934  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [21.19447226  4.53850088  2.79292362  0.61095204  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [21.0478221  15.34021303  9.30754498  0.17236194  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [21.94735115  1.27603369  0.76562022  0.34027565  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [22.01859249  7.13508042  4.36499038  0.16788425  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [22.55086849  2.64959999  2.06999999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [22.64072973  8.89896718  4.24537884  0.3265676   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [23.18995095  4.18429107  2.0116784   0.72420422  0.16093427]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [23.67089983  2.53679886  1.50622432  0.07927496  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [23.96508033  5.23032742  1.95161471  0.31225835  0.15612918]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [23.80242389 13.59982119 10.60325042  0.69151633  0.1536703 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [24.38957977 13.45425686  6.34919986  0.30234285  0.22675714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [25.03278961  8.10036487  6.3167983   0.37157637  0.14863055]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [25.741722    4.89252331  3.79718227  0.29209094  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [26.31466435  3.72875897  3.72875897  0.28682761  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [26.02694823 15.83245553 12.38449855  0.21109941  0.21109941]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [27.51279159  3.58799999  2.75999999  0.138       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [28.26393119  2.16338933  1.69014792  0.13521183  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [28.8396014   3.44148869  2.64729899  0.19854742  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [29.42958601  4.27203066  4.27203066  0.45309416  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [30.16385584  5.37536127  4.17380993  0.44267681  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [30.35212242 10.86192377 10.86192377  0.30857738  0.18514643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [31.99255826  5.11298844  3.12794587  0.24061122  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [33.19945284  3.04451895  1.87355012  0.17564532  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [33.99128611  4.83640288  4.83640288  0.28449429  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [35.27418654  4.69199998  3.64319999  0.3864      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [37.07236646  1.33617925  1.01549623  0.10689434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [38.30750987  3.45953641  2.68501333  0.15490462  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [40.26936511  1.59221144  1.59221144  0.14926982  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [42.26281065  1.52974727  1.52974727  0.0956092   0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [44.471228    1.8765463   1.8765463   0.22884711  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [4.65714173e+01 6.10952042e+00 2.88020248e+00 1.74557726e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [5.00573498e+01 3.51899999e+00 2.73239999e+00 1.24200000e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [5.36542440e+01 4.25452007e+00 4.25452007e+00 1.56129177e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [5.96964295e+01 1.16836377e+00 6.93715991e-01 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [65.46731951  3.68452246  2.87325146  0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [7.51446066e+01 2.62290773e+00 2.03661071e+00 2.77719642e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [8.94841330e+01 3.00839999e+00 2.34599999e+00 8.27999997e-02
 5.51999998e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [1.18425899e+02 7.64873634e-01 3.58534516e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [1.93892921e+02 6.24516707e-01 6.24516707e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  53
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.41, 0.32, 0.25, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.676994 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  75
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  64.0
Iteration TIME (sec):  0.015150611999999786
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.61687312 10.80786099  9.95001628  0.66199198  0.28399715]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [16.58689407 15.83686354 13.83493221  0.10778145  0.10778145]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [17.94758734 11.06061175  6.59157688  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [18.48322192  1.89075108  0.59707929  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [18.70668996  0.68986198  0.39420685  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [18.88107499  1.46371103  1.17096883  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [19.05728324  2.41499999  1.83539999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [19.17040783  4.97167862  3.82436817  0.0956092   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [19.49615152  2.36520083  1.79755263  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [19.62793538  4.86699998  3.74384614  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [19.8811555   4.81380713  2.96234285  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [19.93243082  9.97773398  6.0415637   0.09153884  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [20.50288672  1.08591182  1.08591182  0.27147795  0.1809853 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [20.28792167 12.43135676  9.6588959   0.26830266  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [20.9081252   4.59488194  2.82761965  0.6185418   0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [20.75584002 15.53563764  9.42611722  0.17455773  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [21.63521346  1.29271458  0.77562875  0.34472389  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [21.69674273  7.2308576   4.42358347  0.17013783  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [22.21212572  2.68614792  2.09855307  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [22.29063992  9.02519997  4.30559999  0.3312      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [22.82082216  4.24537884  2.04104752  0.73477711  0.1632838 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [23.28261007  2.57494835  1.52887558  0.08046714  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [23.55941941  5.3114226   1.98187411  0.31709986  0.15854993]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [23.38589145 13.81743214 10.7729132   0.7025813   0.15612918]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [23.94841067 13.67665633  6.45415243  0.30734059  0.23050544]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [24.56420883  8.23884268  6.42478558  0.37792856  0.15117143]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [25.24246485  4.97912336  3.86439425  0.2972611   0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [25.78499473  3.79718227  3.79718227  0.29209094  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [25.48176109 16.13405322 12.62041496  0.21512071  0.21512071]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [26.91356574  3.65905639  2.81465876  0.14073294  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [27.62204159  2.20799999  1.72499999  0.138       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [28.15517384  3.51550767  2.70423667  0.20281775  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [28.69821156  4.36804334  4.36804334  0.46327732  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [29.37718736  5.50185767  4.27203066  0.45309416  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [29.51881249 11.13015981 11.13015981  0.31619772  0.18971863]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [31.06672267  5.24581546  3.20920475  0.2468619   0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [32.18304214  3.12794587  1.92488977  0.18045842  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [32.88604648  4.97661751  4.97661751  0.29274221  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [34.05174115  4.83640288  3.75532459  0.398292    0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [35.69738654  1.38        1.0488      0.1104      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [36.77840703  3.58096039  2.77925284  0.16034151  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [38.52993701  1.6523159   1.6523159   0.15490462  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [40.2735115   1.59221144  1.59221144  0.09951321  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [42.17154732  1.95998869  1.95998869  0.23902301  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [43.89911023  6.40771907  3.02078185  0.18307769  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [4.68332539e+01 3.70935168e+00 2.88020248e+00 1.30918295e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [4.97157998e+01 4.51259998e+00 4.51259998e+00 1.65599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [5.46077472e+01 1.24903341e+00 7.41613590e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [58.81407149  3.97973911  3.10346628  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [6.57107008e+01 2.87325146e+00 2.23099525e+00 3.04226625e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [7.48437436e+01 3.36349344e+00 2.62290773e+00 9.25732139e-02
 6.17154760e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [9.08825330e+01 8.83199997e-01 4.13999999e-01 5.51999998e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [1.18234681e+02 7.64873634e-01 7.64873634e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [1.94010018e+02 6.24516707e-01 4.87903677e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  54
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.14, 0.52, 0.32, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 1.000034 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  76
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  65.0
Iteration TIME (sec):  0.015530394999999864
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.49119526 10.89578969 10.03009421  0.66706479  0.28617341]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [16.40794245 15.97294903 13.951954    0.10866131  0.10866131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [17.76125258 11.16716342  6.65233002  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [18.29122162  1.90884481  0.6027931   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [18.50858804  0.6965925   0.39805286  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [18.67712445  1.47827568  1.18262054  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [18.84722045  2.43951839  1.85403397  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [18.95464574  5.02319998  3.86399999  0.0966      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [19.27211975  2.39023011  1.81657488  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [19.39743009  4.91961772  3.78432133  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [19.64249478  4.86699998  2.99507691  0.09359615  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [19.68759333 10.09048032  6.10983212  0.09257321  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [20.24536594  1.09846613  1.09846613  0.27461653  0.18307769]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [20.02672301 12.57847853  9.77320634  0.27147795  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [20.63257062  4.65057951  2.86189508  0.62603955  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [20.47514594 15.72863432  9.54321633  0.17672623  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [21.33546119  1.30918295  0.78550977  0.34911545  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [21.38801014  7.32538263  4.48141055  0.17236194  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [21.887573    2.72220521  2.12672282  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [21.9556359   9.14969137  4.36499038  0.33576849  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [22.46806849  4.30559999  2.06999999  0.7452      0.1656    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [22.91206899  2.61254082  1.55119611  0.0816419   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [23.17288216  5.3912981   2.0116784   0.32186854  0.16093427]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [22.9896306  14.03166867 10.93994507  0.71347468  0.15854993]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [23.52942957 13.89549673  6.55742542  0.31225835  0.23419377]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [24.12000916  8.37503113  6.53098758  0.38417574  0.1536703 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [24.77011474  5.06424275  3.93045706  0.30234285  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [25.28493072  3.86439425  3.86439425  0.2972611   0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [24.96822191 16.43011558 12.85200152  0.21906821  0.21906821]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [26.35051781  3.72875897  2.86827613  0.14341381  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [27.02052277  2.25172701  1.75916173  0.14073294  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [27.51566659  3.58799999  2.75999999  0.207       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [28.01702262  4.4619905   4.4619905   0.47324142  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [28.64707056  5.62551036  4.36804334  0.46327732  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [28.74840363 11.39208176 11.39208176  0.32363869  0.19418321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [30.21444748  5.37536127  3.28845631  0.25295818  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [31.2518691   3.20920475  1.97489523  0.18514643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [31.87893629  5.11298844  5.11298844  0.30076403  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [32.94459492  4.97661751  3.86419712  0.40983909  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [34.46070168  1.42247144  1.08107829  0.11379771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [35.41402654  3.69839999  2.87039999  0.1656      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [36.99219571  1.71030944  1.71030944  0.16034151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [38.53390892  1.6523159   1.6523159   0.10326974  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [40.18643743  2.0400209   2.0400209   0.24878304  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [41.62831321  6.6926443   3.15510374  0.19121841  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [44.14626511  3.89040087  3.02078185  0.13730827  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [4.65132314e+01 4.75669804e+00 4.75669804e+00 1.74557726e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [5.06007248e+01 1.32480000e+00 7.86599997e-01 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [53.79922108  4.25452007  3.31774501  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [5.90331397e+01 3.10346628e+00 2.40975029e+00 3.28602312e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [65.44703773  3.68452246  2.87325146  0.10140888  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [7.60163377e+01 9.87447615e-01 4.62866070e-01 6.17154760e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [9.07353330e+01 8.83199997e-01 8.83199997e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [1.18306387e+02 7.64873634e-01 5.97557527e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [1.93483082e+02 1.01483965e+00 6.24516707e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  55
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.04, 0.52, 0.4, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.934981 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  77
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  66.0
Iteration TIME (sec):  0.01564324199999989
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.36868955 10.98305475 10.10956774  0.67209931  0.28833324]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [16.23427111 16.10794142 14.06803582  0.1095341   0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [17.5802987  11.27275076  6.71253333  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [18.10478354  1.92676863  0.60845325  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [18.316338    0.70325861  0.40186206  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [18.47931945  1.49269822  1.19415858  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [18.64361687  2.4637928   1.87248253  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [18.74565682  5.07419824  3.90322942  0.09758074  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [19.05527074  2.41499999  1.83539999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [19.17447631  4.97167862  3.82436817  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [19.41182697  4.91961772  3.02745706  0.09460803  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [19.45114265 10.20198073  6.17734613  0.09359615  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [19.99687202  1.11087857  1.11087857  0.27771964  0.18514643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [19.77489886 12.7238993   9.88619514  0.27461653  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [20.36714774  4.70561787  2.89576484  0.63344856  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [20.20503142 15.9192914   9.6588959   0.17886844  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [21.04729711  1.32544671  0.79526803  0.35345246  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [21.09152796  7.41870337  4.53850088  0.17455773  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [21.57624753  2.75779111  2.1545243   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [21.63466542  9.27251151  4.42358347  0.34027565  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [22.13051532  4.36499038  2.09855307  0.7554791   0.16788425]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [22.55796563  2.64959999  1.57319999  0.0828      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [22.80401353  5.47000735  2.04104752  0.3265676   0.1632838 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [22.61205061 14.24268305 11.10446475  0.72420422  0.16093427]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [23.13083913 14.11094364  6.659097    0.31709986  0.23782489]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [23.69814981  8.50904013  6.63549001  0.39032294  0.15612918]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [24.32234172  5.14795491  3.99542769  0.30734059  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [24.8118172   3.93045706  3.93045706  0.30234285  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [24.48338741 16.72093667 13.07948824  0.22294582  0.22294582]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [25.82015383  3.79718227  2.92090944  0.14604547  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [26.4553202   2.2946209   1.79267258  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [26.9163804   3.65905639  2.81465876  0.21109941  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [27.38054159  4.55399998  4.55399998  0.483       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [27.96705303  5.74650292  4.4619905   0.47324142  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [28.03337852 11.64811556 11.64811556  0.33091237  0.19854742]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [29.42650373  5.50185767  3.36584234  0.25891095  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [30.39468018  3.28845631  2.02366542  0.18971863  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [30.95628445  5.24581546  5.24581546  0.30857738  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [31.93574728  5.11298844  3.97008514  0.42106964  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [33.34065791  1.46371103  1.11242038  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [34.18687593  3.81222345  2.95874059  0.17069657  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [35.62010654  1.76639999  1.76639999  0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [36.99601336  1.71030944  1.71030944  0.10689434  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [38.45049875  2.11702974  2.11702974  0.25817436  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [39.66813944  6.96592504  3.28393609  0.19902643  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [41.86299035  4.06339118  3.15510374  0.14341381  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [43.84418692  4.98886699  4.98886699  0.18307769  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [4.73423806e+01 1.39646181e+00 8.29149200e-01 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [49.85034982  4.51259998  3.51899999  0.1242      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [5.39999586e+01 3.31774501e+00 2.57613142e+00 3.51290648e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [58.7958158   3.97973911  3.10346628  0.1095341   0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [66.47464766  1.08169467  0.50704438  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [7.58929067e+01 9.87447615e-01 9.87447615e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [9.07905330e+01 8.83199997e-01 6.89999998e-01 5.51999998e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [1.17983706e+02 1.24291966e+00 7.64873634e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [1.93287921e+02 1.01483965e+00 7.80645884e-01 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  56
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [98.03, 1.09, 0.66, 0.19, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.557807 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  78
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  67.0
Iteration TIME (sec):  0.01583432000000018
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.24922523 11.06967097 10.18845037  0.6770964   0.29047701]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [16.065628   16.24186663 14.18319995  0.1104      0.1104    ]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  2
Leaf selection - action scores:  [6.10323714e+01 2.53860217e+01 3.44790175e+00 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [76.30177174  0.21600417  0.12343095  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [90.928533  0.69      0.5244    0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [1.18664922e+02 4.54143720e-01 2.15120710e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [1.94888245e+02 1.75645324e-01 7.80645884e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````
Tokens: ['```', '``', '\n', "Here's", 'module']
Probs: [99.47, 0.41, 0.12, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````
API response time: 0.568293 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  29
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  68.0
Iteration TIME (sec):  0.01056949400000029
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.13267897 11.15565262 10.26675508  0.68205688  0.29260507]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [16.19829992 13.89264246 14.29746782  0.11125916  0.11125916]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [17.40447199 11.37739949  6.77220147  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [17.92364442  1.94452724  0.61406123  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [18.12965741  0.70986213  0.4056355   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [18.28735756  1.50698274  1.20558619  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [18.44614837  2.48783037  1.89075108  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [18.54309412  5.12468902  3.94206848  0.09855171  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [18.845229    2.43951839  1.85403397  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [18.95867074  5.02319998  3.86399999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [19.18871597  4.97167862  3.05949454  0.0956092   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [19.2226109  10.31227561  6.24413019  0.09460803  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [19.75689008  1.12315384  1.12315384  0.28078846  0.18719231]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [19.53190201 12.86767674  9.99790711  0.27771964  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [20.11125089  4.76001988  2.929243    0.64077191  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [19.9448487  16.10769194  9.77320634  0.1809853   0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [20.76999394  1.34151332  0.80490799  0.35773689  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [20.80650762  7.5108647   4.59488194  0.17672623  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [21.27727528  2.79292362  2.18197158  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [21.32677629  9.39372596  4.48141055  0.34472389  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [21.8071024   4.42358347  2.12672282  0.76562022  0.17013783]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [22.21912089  2.68614792  1.59490033  0.08394212  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [22.45150849  5.54759998  2.06999999  0.3312      0.1656    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [22.25173008 14.45061643 11.2665823   0.73477711  0.1632838 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [22.7510393  14.32315019  6.75923941  0.32186854  0.24140141]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [23.29682109  8.6409711   6.73837196  0.39637482  0.15854993]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [23.8970886   5.23032742  4.0593586   0.31225835  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [24.36332047  3.99542769  3.99542769  0.30734059  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [24.02468323 17.00678535 13.30308543  0.22675714  0.22675714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [25.31943424  3.86439425  2.97261096  0.14863055  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [25.92292657  2.33672755  1.8255684   0.14604547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [26.35327576  3.72875897  2.86827613  0.21512071  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [26.78409144  4.64418696  4.64418696  0.49256528  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [27.33166659  5.86499998  4.55399998  0.483       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [27.36741795 11.89864133 11.89864133  0.33802958  0.20281775]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [28.69520327  5.62551036  3.44148869  0.2647299   0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [29.60219331  3.36584234  2.07128759  0.19418321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [30.10694025  5.37536127  5.37536127  0.31619772  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [31.01150356  5.24581546  4.07322141  0.43200833  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [32.32005686  1.50382013  1.1429033   0.12030561  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [33.07546791  3.92274557  3.04451895  0.17564532  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [34.38602193  1.82076344  1.82076344  0.17069657  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [35.62378654  1.76639999  1.76639999  0.1104      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [36.91584261  2.19133397  2.19133397  0.26723585  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [37.95400959  7.22888205  3.40790154  0.20653949  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [39.89204417  4.22931163  3.28393609  0.14926982  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [41.57616273  5.21070163  5.21070163  0.19121841  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [44.62684404  1.4646215   0.86961902  0.04576942  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [46.6393009   4.75669804  3.70935168  0.13091829  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [5.00366498e+01 3.51899999e+00 2.73239999e+00 3.72599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [53.78249295  4.25452007  3.31774501  0.11709688  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [59.72077046  1.16836377  0.54767052  0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [6.63664782e+01 1.08169467e+00 1.08169467e+00 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [7.59391933e+01 9.87447615e-01 7.71443450e-01 6.17154760e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [9.05421330e+01 1.43520000e+00 8.83199997e-01 5.51999998e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [1.17864195e+02 1.24291966e+00 9.56092042e-01 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [1.91316790e+02 2.12726003e+00 1.28806571e+00 3.70806795e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  57
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [98.42, 1.09, 0.4, 0.07, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.638006 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  79
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  69.0
Iteration TIME (sec):  0.015506631000000048
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [13.01893429 11.24101343 10.3444944   0.68698155  0.29471777]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [16.03116281 14.00566929 14.41086004  0.11211173  0.11211173]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [17.23353518 11.48113421  6.83134845  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [17.74755801  1.96212513  0.61961846  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [17.94828268  0.71640477  0.40937416  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [18.10095679  1.52113313  1.2169065   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [18.25451306  2.5116379   1.90884481  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [18.34663516  5.17468717  3.98052859  0.09951321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [18.64164583  2.4637928   1.87248253  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [18.74963971  5.07419824  3.90322942  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [18.97275824  5.02319998  3.09119999  0.0966      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [19.00156604 10.42140326  6.31020748  0.0956092   0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [19.52494527  1.1352964   1.1352964   0.2838241   0.18921607]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [19.29722897 13.00986533 10.10838457  0.28078846  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [19.86432401  4.81380713  2.96234285  0.6480125   0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [19.69400406 16.29391421  9.88619514  0.18307769  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [20.50288672  1.35738977  0.81443386  0.36197061  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [20.53222979  7.60190881  4.65057951  0.17886844  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [20.98986108  2.82761965  2.20907785  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [21.03110413  9.51339608  4.53850088  0.34911545  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [21.49687032  4.48141055  2.1545243   0.77562875  0.17236194]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [21.89447048  2.72220521  1.61630935  0.08506891  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [22.11419324  5.62412222  2.09855307  0.33576849  0.16788425]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [21.9073942  14.65559995 11.42639996  0.7452      0.1656    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [22.38860033 14.53225833  6.85791966  0.3265676   0.2449257 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [22.91441197  8.77091781  6.83970655  0.40233568  0.16093427]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [23.49253116  5.3114226   4.12229814  0.31709986  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [23.93738     4.0593586   4.0593586   0.31225835  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [23.58984664 17.28790829 13.52298604  0.23050544  0.23050544]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [24.84570045  3.93045706  3.02342851  0.15117143  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [25.42029068  2.37808877  1.85788185  0.14863055  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [25.82285837  3.79718227  2.92090944  0.21906821  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [26.22365175  4.73265561  4.73265561  0.50194832  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [26.73624224  5.98114987  4.64418696  0.49256528  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [26.74516659 12.14399996 12.14399996  0.345       0.207     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [28.01408324  5.74650292  3.51550767  0.27042367  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [28.86667604  3.44148869  2.11783919  0.19854742  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [29.32170644  5.50185767  5.50185767  0.32363869  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [30.16069387  5.37536127  4.17380993  0.44267681  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [31.3850446   1.5428869   1.17259404  0.12343095  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [32.06273653  4.03023795  3.12794587  0.18045842  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [33.26833336  1.87355012  1.87355012  0.17564532  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [34.38957811  1.82076344  1.82076344  0.11379771  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [35.54650654  2.26319999  2.26319999  0.276       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [36.43863573  7.4826038   3.52751322  0.21378868  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [38.16849291  4.3889641   3.40790154  0.15490462  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [39.61838283  5.42347021  5.42347021  0.19902643  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [42.319307    1.52974727  0.90828744  0.0478046   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [43.96318742  4.98886699  3.89040087  0.13730827  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [4.68138586e+01 3.70935168e+00 2.88020248e+00 3.92754884e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [49.83482482  4.51259998  3.51899999  0.1242      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [54.63005134  1.24903341  0.58548441  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [5.96234068e+01 1.16836377e+00 1.16836377e+00 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [66.40704175  1.08169467  0.84507396  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [7.57309036e+01 1.60460238e+00 9.87447615e-01 6.17154760e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [9.04501330e+01 1.43520000e+00 1.10400000e+00 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [1.16657129e+02 2.60535082e+00 1.57755187e+00 4.54143720e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [1.92077920e+02 2.12726003e+00 7.80645884e-01 1.36613030e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  58
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.53, 0.25, 0.19, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 1.279422 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  80
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  70.0
Iteration TIME (sec):  0.015448536000000068
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.90788113 11.32576668 10.42168039  0.69187116  0.29681544]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [15.86873143 14.11784305 14.52339643  0.11295787  0.11295787]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [17.06726605 11.58397845  6.88998771  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [17.57629384  1.97956658  0.62512629  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [17.77196722  0.7228882   0.41307897  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [17.91985392  1.53515308  1.22812247  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [18.06842941  2.53522188  1.92676863  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [18.15597958  5.22420684  4.01862064  0.10046552  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [18.44419713  2.48783037  1.89075108  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [18.54703619  5.12468902  3.94206848  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [18.76357982  5.07419824  3.12258353  0.09758074  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [18.78760825 10.52939996  6.37559998  0.0966      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [19.30059909  1.14731045  1.14731045  0.28682761  0.19121841]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [19.07041537 13.15051661 10.21766758  0.2838241   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [19.62585547  4.86699998  2.99507691  0.65517307  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [19.45195242 16.47803208  9.99790711  0.18514643  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [20.24536594  1.37308266  0.8238496   0.36615538  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [20.26803674  7.69187536  4.70561787  0.1809853   0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [20.71327955  2.86189508  2.23585553  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [20.74686252  9.63157944  4.59488194  0.35345246  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [21.1989481   4.53850088  2.18197158  0.78550977  0.17455773]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [21.58305129  2.75779111  1.63743847  0.08618097  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [21.79100828  5.69961717  2.12672282  0.34027565  0.17013783]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [21.57789634 14.85775571 11.58401292  0.7554791   0.16788425]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [22.04223992 14.73839995  6.95519998  0.3312      0.2484    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [22.5494829   8.89896718  6.93956156  0.4082095   0.1632838 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [23.10704541  5.3912981   4.18429107  0.32186854  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [23.53216864  4.12229814  4.12229814  0.31709986  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [23.17687981 17.56453238 13.73936755  0.23419377  0.23419377]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [24.3966157   3.99542769  3.07340592  0.1536703   0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [24.9447438   2.41874281  1.88964282  0.15117143  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [25.32208836  3.86439425  2.97261096  0.22294582  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [25.69574472  4.81950057  4.81950057  0.51115915  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [26.17676646  6.09508677  4.73265561  0.50194832  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [26.16205185 12.38449855 12.38449855  0.35183235  0.21109941]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [27.37766659  5.86499998  3.58799999  0.276       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [28.18162833  3.51550767  2.16338933  0.20281775  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [28.59292126  5.62551036  5.62551036  0.33091237  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [29.37410509  5.50185767  4.27203066  0.45309416  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [30.52432125  1.58098861  1.20155134  0.12647909  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [31.13493451  4.13493689  3.20920475  0.18514643  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [32.24987859  1.92488977  1.92488977  0.18045842  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [33.27177739  1.87355012  1.87355012  0.11709688  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [34.31489836  2.33285315  2.33285315  0.28449429  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [35.08650654  7.72799997  3.64319999  0.2208      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [36.6447891   4.54300945  3.52751322  0.16034151  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [37.90634664  5.62820102  5.62820102  0.20653949  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [40.32741449  1.59221144  0.94537554  0.04975661  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [41.68915543  5.21070163  4.06339118  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [44.12795734  3.89040087  3.02078185  0.4119248   0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [46.62475442  4.75669804  3.70935168  0.13091829  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [50.62142482  1.3248      0.621       0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [5.45408347e+01 1.24903341e+00 1.24903341e+00 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [59.65991818  1.16836377  0.9127842   0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [66.22450577  1.75775383  1.08169467  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [75.65375925  1.60460238  1.23430952  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [8.95209330e+01 3.00839999e+00 1.82159999e+00 5.24399998e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [1.17123224e+02 2.60535082e+00 9.56092042e-01 1.67316107e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [1.94244212e+02 4.87903677e-01 3.70806795e-01 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  59
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [98.09, 1.4, 0.4, 0.09, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.911741 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  81
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  71.0
Iteration TIME (sec):  0.016416326999999953
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.79941536 11.40992513 10.4983247   0.69672645  0.29889838]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [15.71079142 14.22918276 14.63509608  0.11379771  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [16.90545625 11.68595476  6.9481321   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [17.40963584  1.9968557   0.63058601  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [17.60048028  0.729314    0.41675086  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [17.74380275  1.54904615  1.23923692  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [17.88763466  2.55858847  1.94452724  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [17.97084729  5.2732615   4.056355    0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [18.25258103  2.5116379   1.90884481  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [18.35053764  5.17468717  3.98052859  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [18.56083343  5.12468902  3.15365478  0.09855171  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [18.58036701 10.63630017  6.44032854  0.09758074  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [19.08344574  1.1592      1.1592      0.2898      0.1932    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [18.8510324  13.28967939 10.32579406  0.28682761  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [19.3953734   4.91961772  3.02745706  0.66225623  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [19.21819222 16.66011531 10.10838457  0.18719231  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [19.99687202  1.38859821  0.83315893  0.37029286  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [20.01332561  7.78080173  4.76001988  0.18307769  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [20.44686746  2.89576484  2.26231628  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [20.47333408  9.74833012  4.65057951  0.35773689  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [20.91254336  4.59488194  2.20907785  0.79526803  0.17672623]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [21.28398904  2.79292362  1.6582984   0.08727886  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [21.48099488  5.77412513  2.1545243   0.34472389  0.17236194]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [21.26220153 15.05719759 11.73950999  0.76562022  0.17013783]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [21.71080471 14.94169783  7.0511383   0.33576849  0.25182637]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [22.20074278  9.02519997  7.03799998  0.414       0.1656    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [22.73918026  5.47000735  4.24537884  0.3265676   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [23.14605978  4.18429107  4.18429107  0.32186854  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [22.78401116 17.83686696 13.95239371  0.23782489  0.23782489]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [23.97011676  4.0593586   3.12258353  0.15612918  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [24.49394022  2.45872473  1.9208787   0.1536703   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [24.84830686  3.93045706  3.02342851  0.22675714  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [25.19734486  4.90480809  4.90480809  0.52020692  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [25.64976744  6.20693255  4.81950057  0.51115915  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [25.61414307 12.62041496 12.62041496  0.35853452  0.21512071]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [26.78127678  5.98114987  3.65905639  0.28146588  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [27.54154159  3.58799999  2.20799999  0.207       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [27.91414406  5.74650292  5.74650292  0.33802958  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [28.64406227  5.62551036  4.36804334  0.46327732  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [29.72856651  1.61819343  1.22982701  0.12945547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [30.280849    4.23704947  3.28845631  0.18971863  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [31.31683276  1.97489523  1.97489523  0.18514643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [32.25322041  1.92488977  1.92488977  0.12030561  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [33.19945284  2.40048609  2.40048609  0.29274221  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [33.87037604  7.96584004  3.75532459  0.22759543  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [35.28522654  4.69199998  3.64319999  0.1656      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [36.39282387  5.82574153  5.82574153  0.21378868  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [38.58554379  1.6523159   0.98106256  0.05163487  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [39.72618882  5.42347021  4.22931163  0.14926982  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [41.84560685  4.06339118  3.15510374  0.43024142  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [43.94945659  4.98886699  3.89040087  0.13730827  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [47.36177593  1.39646181  0.65459147  0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [5.05386248e+01 1.32480000e+00 1.32480000e+00 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [54.57429092  1.24903341  0.97580735  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [59.49561702  1.89859113  1.16836377  0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [66.15689986  1.75775383  1.35211833  0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [7.48746014e+01 3.36349344e+00 2.03661071e+00 5.86297022e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [8.98797330e+01 3.00839999e+00 1.10400000e+00 1.93199999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [1.18449801e+02 5.97557527e-01 4.54143720e-01 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [1.91433887e+02 2.73226059e+00 7.80645884e-01 1.75645324e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  60
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [98.42, 1.09, 0.4, 0.07, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 1.030653 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  82
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  72.0
Iteration TIME (sec):  0.015944729000000102
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.6934383  11.49350116 10.57443858  0.70154815  0.3009669 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [15.55714197 14.33970677 14.74597739  0.11463141  0.11463141]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [16.74791031 11.78708475  7.00579394  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [17.24738126  2.01399641  0.63599887  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [17.43360548  0.73568368  0.42039067  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [17.57257285  1.56281572  1.25025258  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [17.71188301  2.58174359  1.96212513  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [17.79097687  5.32186402  4.09374155  0.10234354  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [18.06651604  2.53522188  1.92676863  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [18.15984363  5.22420684  4.01862064  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [18.36419631  5.17468717  3.18442288  0.09951321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [18.37949828 10.74213661  6.50441299  0.09855171  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [18.87310921  1.17096883  1.17096883  0.29274221  0.19516147]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [18.63868325 13.42739995 10.43279996  0.2898      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [19.17244207  4.97167862  3.05949454  0.66926443  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [18.99226091 16.8402299  10.21766758  0.18921607  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [19.75689008  1.4039423   0.84236538  0.37438461  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [19.76754292  7.86872319  4.81380713  0.18514643  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [20.19001687  2.929243    2.2884711   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [20.2098629   9.86369899  4.70561787  0.36197061  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [20.63693327  4.65057951  2.23585553  0.80490799  0.17886844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [20.99648831  2.82761965  1.67889917  0.08836311  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [21.18328266  5.84768383  2.18197158  0.34911545  0.17455773]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [20.9593732  15.25403206 11.89297415  0.77562875  0.17236194]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [21.39325364 15.1422665   7.14578869  0.34027565  0.25520674]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [21.86703032  9.14969137  7.13508042  0.41971061  0.16788425]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [22.3876342   5.54759998  4.30559999  0.3312      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [22.77759997  4.24537884  4.24537884  0.3265676   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [22.40966357 18.10510557 14.16221591  0.24140141  0.24140141]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [23.56437409  4.12229814  3.17099857  0.15854993  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [24.06580884  2.49806683  1.95161471  0.15612918  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [24.39917687  3.99542769  3.07340592  0.23050544  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [24.72580587  4.98865704  4.98865704  0.52909999  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [25.15222487  6.3167983   4.90480809  0.52020692  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [25.09804011 12.85200152 12.85200152  0.36511368  0.21906821]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [26.22089379  6.09508677  3.72875897  0.28682761  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [26.94171233  3.65905639  2.25172701  0.21109941  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [27.27991659  5.86499998  5.86499998  0.345       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [27.96411365  5.74650292  4.4619905   0.47324142  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [28.99001611  1.65456187  1.25746702  0.13236495  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [29.49123147  4.3367584   3.36584234  0.19418321  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [30.45791972  2.02366542  2.02366542  0.18971863  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [31.32008094  1.97489523  1.97489523  0.12343095  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [32.18304214  2.46626501  2.46626501  0.30076403  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [32.7689496   8.19678178  3.86419712  0.23419377  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [34.06240968  4.83640288  3.75532459  0.17069657  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [35.04234654  6.01679998  6.01679998  0.2208      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [37.04564288  1.71030944  1.01549623  0.05344717  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [38.00961638  5.62820102  4.3889641   0.15490462  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [39.87545864  4.22931163  3.28393609  0.44780947  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [41.67611781  5.21070163  4.06339118  0.14341381  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [44.64515181  1.4646215   0.68654133  0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [4.72841947e+01 1.39646181e+00 1.39646181e+00 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [50.56967482  1.3248      1.035       0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [54.42373779  2.0296793   1.24903341  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [59.43476474  1.89859113  1.46045472  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [6.54740801e+01 3.68452246e+00 2.23099525e+00 6.42256208e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [7.51754643e+01 3.36349344e+00 1.23430952e+00 2.16004166e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [9.09009330e+01 6.89999998e-01 5.24399998e-01 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [1.16728836e+02 3.34632215e+00 9.56092042e-01 2.15120710e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [1.92077920e+02 2.12726003e+00 7.80645884e-01 1.36613030e-01
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  61
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.69, 0.15, 0.15, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.617166 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  83
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  73.0
Iteration TIME (sec):  0.015527544999999865
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.58985662 11.57650668 10.65003289  0.70633693  0.30302131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [15.40759435 14.44943274 14.85605807  0.11545908  0.11545908]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [16.59444429 11.88738914  7.06298504  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [17.08933971  2.03099246  0.64136604  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [17.27113984  0.74199868  0.42399924  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [17.4059482   1.57646503  1.26117202  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [17.54094444  2.60469287  1.97956658  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [17.61612379  5.37002666  4.13078974  0.10326974  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [17.8857394   2.55858847  1.94452724  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [17.97467404  5.2732615   4.056355    0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [18.17336784  5.22420684  3.21489652  0.10046552  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [18.18468228 10.84694042  6.56787218  0.09951321  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [18.66924031  1.18262054  1.18262054  0.29565514  0.19710342]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [18.43300018 13.56372223 10.53871943  0.29274221  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [18.95665824  5.02319998  3.09119999  0.6762      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [18.77373134 17.01843836 10.32579406  0.19121841  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [19.52494527  1.4191205   0.8514723   0.37843213  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [19.5301794   7.95567304  4.86699998  0.18719231  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [19.94216967  2.96234285  2.31433035  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [19.95584773  9.97773398  4.76001988  0.36615538  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [20.37145692  4.70561787  2.26231628  0.81443386  0.1809853 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [20.71982352  2.86189508  1.69925021  0.08943422  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [20.89707981  5.92032865  2.20907785  0.35345246  0.17672623]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [20.66856116 15.44835877 12.04448311  0.78550977  0.17455773]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [21.08864466 15.34021303  7.23920165  0.34472389  0.25854292]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [21.54729734  9.27251151  7.2308576   0.42534456  0.17013783]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [22.05123665  5.62412222  4.36499038  0.33576849  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [22.42548563  4.30559999  4.30559999  0.3312      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [22.0524278  18.36942766 14.36897453  0.2449257   0.2449257 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [23.17775896  4.18429107  3.21868543  0.16093427  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [23.65851311  2.53679886  1.98187411  0.15854993  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [23.97263497  4.0593586   3.12258353  0.23419377  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [24.2788018   5.07111976  5.07111976  0.53784604  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [24.68149701  6.42478558  4.98865704  0.52909999  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [24.61078502 13.07948824 13.07948824  0.37157637  0.22294582]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [25.69304018  6.20693255  3.79718227  0.29209094  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [26.37809738  3.72875897  2.2946209   0.21512071  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [26.68557838  5.98114987  5.98114987  0.35183235  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [27.32879159  5.86499998  4.55399998  0.483       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [28.30214323  1.69014792  1.28451242  0.13521183  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [28.75837745  4.43422581  3.44148869  0.19854742  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [29.66383877  2.07128759  2.07128759  0.19418321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [30.4610817   2.02366542  2.02366542  0.12647909  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [31.2518691   2.53033451  2.53033451  0.30857738  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [31.76531433  8.42139273  3.97008514  0.24061122  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [32.954927    4.97661751  3.86419712  0.17564532  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [33.82770189  6.20197546  6.20197546  0.22759543  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [35.67162654  1.76639999  1.0488      0.0552      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [36.4920829   5.82574153  4.54300945  0.16034151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [38.15260525  4.3889641   3.40790154  0.46471385  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [39.71374966  5.42347021  4.22931163  0.14926982  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [42.33669049  1.52974727  0.71706903  0.0956092   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [44.57192073  1.4646215   1.4646215   0.04576942  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [47.31328767  1.39646181  1.09098579  0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [50.42994982  2.15279999  1.3248      0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [54.36797737  2.0296793   1.56129177  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [5.88201567e+01 3.97973911e+00 2.40975029e+00 6.93715991e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [6.57377432e+01 3.68452246e+00 1.35211833e+00 2.36620708e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [76.03176654  0.77144345  0.58629702  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [8.95761330e+01 3.86399999e+00 1.10400000e+00 2.48399999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [1.17123224e+02 2.60535082e+00 9.56092042e-01 1.67316107e-01
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [1.94556470e+02 2.92742206e-01 2.92742206e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  62
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.58, 0.32, 0.09, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 1.266571 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  84
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  74.0
Iteration TIME (sec):  0.01622806600000004
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.48858159 11.65895323 10.72511814  0.71109346  0.30506188]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [15.26197122 14.55837772 14.96535524  0.11628087  0.11628087]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [16.44488543 11.98688784  7.11971675  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [16.93533191  2.04784746  0.64668867  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [17.1128927   0.74826038  0.42757736  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [17.24372609  1.58999716  1.27199773  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [17.37460328  2.62744171  1.9968557   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [17.4460592   5.41776117  4.16750859  0.10418771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [17.71000538  2.58174359  1.96212513  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [17.79476737  5.32186402  4.09374155  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [17.98806766  5.2732615   3.245084    0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [17.99562116 10.95074126  6.63072406  0.10046552  0.10046552]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [18.47151449  1.19415858  1.19415858  0.29853964  0.19902643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [18.23364175 13.69868796 10.64358489  0.29565514  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [18.74764827  5.07419824  3.12258353  0.68306515  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [18.56220825 17.19479994 10.43279996  0.1932      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [19.30059909  1.43413806  0.86048284  0.38243682  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [19.30076536  8.04168282  4.91961772  0.18921607  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [19.7028123   2.99507691  2.33990384  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [19.71073663 10.09048032  4.81380713  0.37029286  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [20.11550851  4.76001988  2.2884711   0.8238496   0.18307769]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [20.45333122  2.89576484  1.71936038  0.09049265  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [20.62166401  5.99209283  2.23585553  0.35773689  0.17886844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [20.3889919  15.64027121 12.19410976  0.79526803  0.17672623]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [20.79612257 15.53563764  7.3314245   0.34911545  0.26183659]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [21.24059532  9.39372596  7.32538263  0.43090486  0.17236194]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [21.72893097  5.69961717  4.42358347  0.34027565  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [22.08854426  4.36499038  4.36499038  0.33576849  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [21.71103992 18.62999994 14.57279995  0.2484      0.2484    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [22.808816    4.24537884  3.26567603  0.1632838   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [23.27041808  2.57494835  2.0116784   0.16093427  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [23.56685143  4.12229814  3.17099857  0.23782489  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [23.85427898  5.15226283  5.15226283  0.54645212  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [24.23526189  6.53098758  5.07111976  0.53784604  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [24.14979062 13.30308543 13.30308543  0.37792856  0.22675714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [25.19469075  6.3167983   3.86439425  0.2972611   0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [25.84719929  3.79718227  2.33672755  0.21906821  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [26.12712322  6.09508677  6.09508677  0.35853452  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [26.73342758  5.98114987  4.64418696  0.49256528  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [27.65941659  1.72499999  1.311       0.138       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [28.07581038  4.52959642  3.51550767  0.20281775  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [28.92684193  2.11783919  2.11783919  0.19854742  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [29.66692104  2.07128759  2.07128759  0.12945547  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [30.39468018  2.59282132  2.59282132  0.31619772  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [30.84584623  8.64016664  4.07322141  0.2468619   0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [31.94577274  5.11298844  3.97008514  0.18045842  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [32.72762129  6.3817801   6.3817801   0.23419377  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [34.43580843  1.82076344  1.08107829  0.05689886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [35.13802654  6.01679998  4.69199998  0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [36.62951848  4.54300945  3.52751322  0.48102453  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [37.99770064  5.62820102  4.3889641   0.15490462  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [40.34400002  1.59221144  0.74634911  0.09951321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [42.26715653  1.52974727  1.52974727  0.0478046   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [44.59938238  1.4646215   1.14423555  0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [47.18236938  2.26925044  1.39646181  0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [50.37819982  2.15279999  1.65599999  0.1242      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [5.38047971e+01 4.25452007e+00 2.57613142e+00 7.41613590e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [5.90574806e+01 3.97973911e+00 1.46045472e+00 2.55579576e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [66.48816885  0.84507396  0.64225621  0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [7.49208880e+01 4.32008332e+00 1.23430952e+00 2.77719642e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [8.98797330e+01 3.00839999e+00 1.10400000e+00 1.93199999e-01
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [1.18641020e+02 3.58534516e-01 3.58534516e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [1.94341793e+02 6.24516707e-01 1.75645324e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  63
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.44, 0.41, 0.15, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.603142 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  85
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  75.0
Iteration TIME (sec):  0.016442536999999646
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.3895292  11.74085194 10.79970446  0.71581838  0.30708889]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [15.12010563 14.66655814 15.07388538  0.11709688  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [16.29907089 12.08559996  7.17599998  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [16.78518933  2.06456486  0.65196785  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [16.95868455  0.75447012  0.43112578  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [17.08571617  1.6034151   1.28273208  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [17.21265718  2.64999527  2.01399641  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [17.28056853  5.46507876  4.20390674  0.10509767  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [17.53908394  2.60469287  1.97956658  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [17.61987906  5.37002666  4.13078974  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [17.80803413  5.32186402  3.27499324  0.10234354  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [17.81203716 11.05356738  6.69298575  0.10140888  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [18.27962944  1.20558619  1.20558619  0.30139655  0.20093103]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [18.04029056 13.83233687 10.7474272   0.29853964  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [18.54506516  5.12468902  3.15365478  0.68986198  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [18.35732532 17.36937091 10.53871943  0.19516147  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [19.08344574  1.44899999  0.8694      0.3864      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [19.0788671   8.12678236  4.97167862  0.19121841  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [19.47147116  3.02745706  2.36520083  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [19.47402171 10.20198073  4.86699998  0.37438461  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [19.86853188  4.81380713  2.31433035  0.83315893  0.18514643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [20.1964033   2.929243    1.73923803  0.09153884  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [20.35637481  6.06300764  2.26231628  0.36197061  0.1809853 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [20.11995984 15.82985718 12.34192254  0.80490799  0.17886844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [20.51490934 15.72863432  7.42250159  0.35345246  0.26508934]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [20.94606318  9.51339608  7.41870337  0.43639432  0.17455773]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [21.41976103  5.77412513  4.48141055  0.34472389  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [21.76571753  4.42358347  4.42358347  0.34027565  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [21.38436312 18.88697759 14.77381358  0.25182637  0.25182637]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [22.45623992  4.30559999  3.31199999  0.1656      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [22.90006283  2.61254082  2.04104752  0.1632838   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [23.18019735  4.18429107  3.21868543  0.24140141  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [23.45041633  5.23214764  5.23214764  0.55492475  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [23.81146937  6.63549001  5.15226283  0.54645212  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [23.71278288 13.52298604 13.52298604  0.38417574  0.23050544]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [24.72319947  6.42478558  3.93045706  0.30234285  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [25.34597541  3.86439425  2.37808877  0.22294582  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [25.60108562  6.20693255  6.20693255  0.36511368  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [26.17400851  6.09508677  4.73265561  0.50194832  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [27.05711334  1.75916173  1.33696291  0.14073294  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [27.43804159  4.62299998  3.58799999  0.207       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [28.24041609  2.16338933  2.16338933  0.20281775  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [28.92985023  2.11783919  2.11783919  0.13236495  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [29.60219331  2.65383723  2.65383723  0.32363869  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [29.99943303  8.85353621  4.17380993  0.25295818  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [31.02124811  5.24581546  4.07322141  0.18514643  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [31.72521246  6.55665577  6.55665577  0.24061122  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [33.31654973  1.87355012  1.11242038  0.05854844  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [33.92016254  6.20197546  4.83640288  0.17069657  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [35.27050654  4.69199998  3.64319999  0.4968      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [36.48062994  5.82574153  4.54300945  0.16034151  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [38.60143145  1.6523159   0.77452308  0.10326974  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [40.27765788  1.59221144  1.59221144  0.04975661  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [42.29323176  1.52974727  1.19511505  0.0956092   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [44.47580494  2.38000994  1.4646215   0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [47.13388112  2.26925044  1.74557726  0.13091829  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [4.98555248e+01 4.51259998e+00 2.73239999e+00 7.86599997e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [5.40222628e+01 4.25452007e+00 1.56129177e+00 2.73226059e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [59.73294092  0.9127842   0.69371599  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [6.55146436e+01 4.73241417e+00 1.35211833e+00 3.04226625e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [7.51754643e+01 3.36349344e+00 1.23430952e+00 2.16004166e-01
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [9.10481330e+01 4.13999999e-01 4.13999999e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [1.18509557e+02 7.64873634e-01 2.15120710e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [1.94068567e+02 8.00162031e-01 2.92742206e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  64
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.33, 0.41, 0.25, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.526559 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  86
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  76.0
Iteration TIME (sec):  0.016279612000000387
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.29261954 11.82221359 10.87380168  0.72051232  0.30910261]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.9818404  14.77398988 15.18166442  0.11790725  0.11790725]  taking action:  2  corresponding to token:  

Leaf selection - depth:  2
Leaf selection - action scores:  [1.95005342e+02 1.36613030e-01 1.95161471e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
```
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.71, 0.19, 0.09, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
``````
API response time: 0.546498 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
``````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  25
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  77.0
Iteration TIME (sec):  0.009814149000000327
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.19777667 11.90304861 10.94741929  0.72517588  0.31110329]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [15.09082771 14.88068827  9.85913847  0.11871209  0.11871209]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [16.1568472  12.18354385  7.23184518  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [16.63875299  2.08114797  0.65720462  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [16.80834666  0.76062916  0.43464523  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [16.93173919  1.61672168  1.29337734  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [17.05491611  2.6723585   2.03099246  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [17.11945045  5.51199017  4.23999244  0.10599981  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [17.37275946  2.62744171  1.9968557   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [17.44978019  5.41776117  4.16750859  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [17.63302248  5.37002666  3.30463179  0.10326974  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [17.63367106 11.15544573  6.75467356  0.10234354  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [18.09330329  1.2169065   1.2169065   0.30422663  0.20281775]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [17.852651   13.96470674 10.85027574  0.30139655  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [18.3485864   5.17468717  3.18442288  0.6965925   0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [18.15874245 17.54220473 10.64358489  0.19710342  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [18.87310921  1.46371103  0.87822662  0.39032294  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [18.86408324  8.21099997  5.02319998  0.1932      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [19.24770889  3.05949454  2.39023011  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [19.24523456 10.31227561  4.91961772  0.37843213  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [19.63001529  4.86699998  2.33990384  0.84236538  0.18719231]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [19.94848148  2.96234285  1.75889107  0.09257321  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [20.10060684  6.13310254  2.2884711   0.36615538  0.18307769]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [19.86081981 16.01719928 12.48798588  0.81443386  0.1809853 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [20.24429522 15.9192914   7.51247459  0.35773689  0.26830266]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [20.66291756  9.63157944  7.5108647   0.44181557  0.17672623]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [21.12285883  5.84768383  4.53850088  0.34911545  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [21.45604775  4.48141055  4.48141055  0.34472389  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [21.07137126 19.14050541 14.97212868  0.25520674  0.25520674]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [22.11885669  4.36499038  3.35768491  0.16788425  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [22.54613706  2.64959999  2.06999999  0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [22.81121723  4.24537884  3.26567603  0.2449257   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [23.06559265  5.31083097  5.31083097  0.56326995  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [23.40830151  6.73837196  5.23214764  0.55492475  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [23.29775401 13.73936755 13.73936755  0.39032294  0.23419377]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [24.27624063  6.53098758  3.99542769  0.30734059  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [24.87176449  3.93045706  2.41874281  0.22675714  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [25.10445077  6.3167983   6.3167983   0.37157637  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [25.6470629   6.20693255  4.81950057  0.51115915  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [26.49117365  1.79267258  1.36243116  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [26.84038461  4.71455343  3.65905639  0.21109941  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [27.59904159  2.20799999  2.20799999  0.207       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [28.24335548  2.16338933  2.16338933  0.13521183  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [28.86667604  2.71348147  2.71348147  0.33091237  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [29.21690916  9.06188322  4.27203066  0.25891095  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [30.1701798   5.37536127  4.17380993  0.18971863  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [30.80686803  6.72698688  6.72698688  0.2468619   0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [32.29666411  1.92488977  1.1429033   0.06015281  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [32.81716596  6.3817801   4.97661751  0.17564532  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [34.04818497  4.83640288  3.75532459  0.51208972  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [35.12698654  6.01679998  4.69199998  0.1656      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [37.0609135   1.71030944  0.80170755  0.10689434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [38.53788084  1.6523159   1.6523159   0.05163487  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [40.30253618  1.59221144  1.24391519  0.09951321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [42.1758932   2.48583931  1.52974727  0.0956092   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [44.43003552  2.38000994  1.83077688  0.13730827  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [4.66441497e+01 4.75669804e+00 2.88020248e+00 8.29149200e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [5.00573498e+01 4.51259998e+00 1.65599999e+00 2.89799999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [54.64120343  0.97580735  0.74161359  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [5.88566681e+01 5.11159152e+00 1.46045472e+00 3.28602312e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [6.57377432e+01 3.68452246e+00 1.35211833e+00 2.36620708e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [7.61551975e+01 4.62866070e-01 4.62866070e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [9.09469330e+01 8.83199997e-01 2.48399999e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [1.18342241e+02 9.79994344e-01 3.58534516e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [1.93853889e+02 8.00162031e-01 4.87903677e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  65
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [99.24, 0.41, 0.32, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.898435 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  87
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  78.0
Iteration TIME (sec):  0.016234528000000026
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.10492839 11.98336709 11.02056648  0.72980964  0.31309119]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.95364044 14.98666812  9.93002012  0.11951151  0.11951151]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  2
Leaf selection - action scores:  [5.48221619e+01 2.74200373e+01 3.72415953e+00 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [66.72478956  0.23662071  0.13521183  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [76.05490984  0.77144345  0.58629702  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [9.10665330e+01 5.24399998e-01 2.48399999e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [1.18844189e+02 2.15120710e-01 9.56092042e-02 0.00000000e+00
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [194.12711514   0.80016203   0.23419377   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.62, 0.25, 0.12, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````
API response time: 1.068005 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  30
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  79.0
Iteration TIME (sec):  0.010668112999999924
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.01400596 12.06317882 11.09325216  0.73441416  0.31506655]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  1
Leaf selection - action scores:  [118.15102247   1.24291966   0.45414372   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [1.78494681e+02 1.46566265e+01 1.99064700e+00 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````
Tokens: ['```', '``', '\n', "Here's", '\\']
Probs: [99.82, 0.15, 0.03, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````
API response time: 0.569226 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  25
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  80.0
Iteration TIME (sec):  0.00969825000000002
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.09500892  8.85686997 11.16548496  0.73899     0.3170296 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [15.05954518 13.08045081 10.00043077  0.12030561  0.12030561]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [16.01806949 12.28073717  7.28726242  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [16.49587295  2.09759999  0.6624      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [16.66171982  0.76673873  0.43813642  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [16.78162666  1.62991962  1.3039357   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [16.90120112  2.69453613  2.04784746  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [16.96251592  5.55850568  4.2757736   0.10689434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [17.2108296   2.64999527  2.01399641  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [17.28425616  5.46507876  4.20390674  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [17.46280365  5.41776117  3.33400688  0.10418771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [17.46028036 11.25640204  6.81580307  0.10326974  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [17.91227291  1.22812247  1.22812247  0.30703062  0.20468708]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [17.67044741 14.09583363 10.9521585   0.30422663  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [18.1579116   5.22420684  3.21489652  0.70325861  0.10046552]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [17.96614346 17.71335224 10.7474272   0.19902643  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [18.66924031  1.47827568  0.88696541  0.39420685  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [18.65604186  8.29436251  5.07419824  0.19516147  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [19.03112074  3.09119999  2.41499999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [19.02394266 10.42140326  4.97167862  0.38243682  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [19.39948679  4.91961772  2.36520083  0.8514723   0.18921607]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [19.70905205  2.99507691  1.77832692  0.09359615  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [19.85380433  6.20240533  2.31433035  0.37029286  0.18514643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [19.61098046 16.20237537 12.63236046  0.8238496   0.18307769]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [19.98363127 16.10769194  7.60138271  0.36197061  0.27147795]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [20.39044383  9.74833012  7.60190881  0.44717111  0.17886844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [20.83743471  5.92032865  4.59488194  0.35345246  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [21.15866554  4.53850088  4.53850088  0.34911545  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [20.77113582 19.39071872 15.16785109  0.25854292  0.25854292]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [21.7956066   4.42358347  3.40275652  0.17013783  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [22.20746226  2.68614792  2.09855307  0.16788425  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [22.45860563  4.30559999  3.31199999  0.2484      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [22.69835931  5.38836545  5.38836545  0.57149331  0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [23.02413988  6.83970655  5.31083097  0.56326995  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [22.90292361 13.95239371 13.95239371  0.39637482  0.23782489]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [23.85176077  6.63549001  4.0593586   0.31225835  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [24.42222741  3.99542769  2.45872473  0.23050544  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [24.63458174  6.42478558  6.42478558  0.37792856  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [25.14957076  6.3167983   4.90480809  0.52020692  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [25.95808566  1.8255684   1.38743198  0.14604547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [26.2788109   4.80436251  3.72875897  0.21512071  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [26.9980055   2.25172701  2.25172701  0.21109941  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [27.60191659  2.20799999  2.20799999  0.138       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [28.18162833  2.77184258  2.77184258  0.33802958  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [28.49063926  9.26554647  4.36804334  0.2647299   0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [29.38335191  5.50185767  4.27203066  0.19418321  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [29.9614893   6.89311034  6.89311034  0.25295818  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [31.36230732  1.97489523  1.17259404  0.06171548  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [31.81209984  6.55665577  5.11298844  0.18045842  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [32.9411509   4.97661751  3.86419712  0.52693597  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [33.909494    6.20197546  4.83640288  0.17069657  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [35.68634654  1.76639999  0.828       0.1104      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [36.99983102  1.71030944  1.71030944  0.05344717  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [38.56171232  1.6523159   1.29087179  0.10326974  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [40.19058382  2.58734359  1.59221144  0.09951321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [42.13243447  2.48583931  1.91218408  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [43.96776436  4.98886699  3.02078185  0.86961902  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [4.68332539e+01 4.75669804e+00 1.74557726e+00 3.05476021e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [50.63177482  1.035       0.7866      0.1242      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [5.38382534e+01 5.46452119e+00 1.56129177e+00 3.51290648e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [5.90574806e+01 3.97973911e+00 1.46045472e+00 2.55579576e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [6.65963383e+01 5.07044375e-01 5.07044375e-01 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [7.60703387e+01 9.87447615e-01 2.77719642e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [9.08181330e+01 1.13160000e+00 4.13999999e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [1.18210778e+02 9.79994344e-01 5.97557527e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [1.93678244e+02 8.00162031e-01 6.24516707e-01 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  66
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.55, 0.25, 0.19, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.574422 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  88
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  81.0
Iteration TIME (sec):  0.017126009999999692
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [12.00440281  8.91598972 11.23727324  0.74353767  0.31898057]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.92349044 13.17196294 10.0703797   0.12109451  0.12109451]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [15.88260101 12.37719694  7.34226141  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [16.3564076   2.11392397  0.66755494  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [16.51865391  0.7728      0.4416      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [16.63521963  1.64301156  1.31440925  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [16.751344    2.71653271  2.06456486  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [16.80958689  5.60463515  4.31125781  0.10778145  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [17.05310434  2.6723585   2.03099246  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [17.12310562  5.51199017  4.23999244  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [17.2971629   5.46507876  3.36312539  0.10509767  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [17.29163812 11.35646092  6.87638918  0.10418771  0.10418771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [17.73629222  1.23923692  1.23923692  0.30980923  0.20653949]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [17.49342251 14.22575189 11.05310219  0.30703062  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [17.97276066  5.2732615   3.245084    0.70986213  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [17.77923389 17.88286187 10.85027574  0.20093103  0.10046552]  taking action:  1  corresponding to token:  

Adding child.
Leaf selection - depth:  16
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````

Tokens: ['```', '\n', '``', 'module', '\\']
Probs: [95.91, 2.26, 1.76, 0.07, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````
```
API response time: 0.594175 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````
```assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  38
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  82.0
Iteration TIME (sec):  0.011296007999999969
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.91564311  8.97475008 11.3086251   0.7480577   0.32091968]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.79077637 13.26288275 10.13987587  0.1218783   0.1218783 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [15.75031242 12.4729395   7.39685147  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [16.22022312  2.13012286  0.67267038  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [16.37900712  0.7788141   0.44503663  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [16.49236819  1.65599999  1.3248      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [16.60518609  2.7383526   2.08114797  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [16.66049602  5.65038803  4.34645233  0.10866131  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [16.89940476  2.69453613  2.04784746  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [16.96613945  5.55850568  4.2757736   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [17.1358987   5.51199017  3.39199395  0.10599981  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [17.12753157 11.45564587  6.93644612  0.10509767  0.10509767]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [17.56513087  1.25025258  1.25025258  0.31256314  0.20837543]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [17.32133562 14.35449435 11.1531323   0.30980923  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [17.79287212  5.32186402  3.27499324  0.71640477  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [17.95538802  8.52538988 10.9521585   0.20281775  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [18.47151449  1.49269822  0.89561893  0.39805286  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [18.45439758  8.37689552  5.12468902  0.19710342  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [18.82133168  3.12258353  2.43951839  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [18.80974575 10.52939996  5.02319998  0.3864      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [19.17651054  4.97167862  2.39023011  0.86048284  0.19121841]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [19.47764125  3.02745706  1.79755263  0.09460803  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [19.61545589  6.27094228  2.33990384  0.37438461  0.18719231]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [19.36989889 16.38545887 12.77510352  0.83315893  0.18514643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [19.73232265 16.29391421  7.68926289  0.36615538  0.27461653]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [20.12798859  9.86369899  7.69187536  0.45246326  0.1809853 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [20.5627683   5.99209283  4.65057951  0.35773689  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [20.87277995  4.59488194  4.59488194  0.35345246  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [20.48281383 19.6377442  15.36107991  0.26183659  0.26183659]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [21.48553072  4.48141055  3.44723888  0.17236194  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [21.88297468  2.72220521  2.12672282  0.17013783  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [22.12118842  4.36499038  3.35768491  0.25182637  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [22.34741706  5.46479998  5.46479998  0.5796      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [22.65753836  6.93956156  5.38836545  0.57149331  0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [22.52670668 14.16221591 14.16221591  0.40233568  0.24140141]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [23.44793899  6.73837196  4.12229814  0.31709986  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [23.99529889  4.0593586   2.49806683  0.23419377  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [24.1891608   6.53098758  6.53098758  0.38417574  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [24.6788906   6.42478558  4.98865704  0.52909999  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [25.4547942   1.85788185  1.41199021  0.14863055  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [25.74983564  4.89252331  3.79718227  0.21906821  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [26.43325654  2.2946209   2.2946209   0.21512071  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [27.00082016  2.25172701  2.25172701  0.14073294  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [27.54154159  2.82899999  2.82899999  0.345       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [27.81420487  9.46482833  4.4619905   0.27042367  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [28.65308715  5.62551036  4.36804334  0.19854742  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [29.17992188  7.05532336  7.05532336  0.25891095  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [30.50218741  2.02366542  1.20155134  0.06323954  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [30.89132079  6.72698688  5.24581546  0.18514643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [31.93240545  5.11298844  3.97008514  0.54137525  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [32.80683388  6.3817801   4.97661751  0.17564532  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [34.45003315  1.82076344  0.85348286  0.11379771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [35.62746654  1.76639999  1.76639999  0.0552      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [37.02273695  1.71030944  1.33617925  0.10689434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [38.45447066  2.68501333  1.6523159   0.10326974  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [40.14911998  2.58734359  1.9902643   0.14926982  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [41.6935013   5.21070163  3.15510374  0.90828744  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [44.14626511  4.98886699  1.83077688  0.32038595  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [47.37147358  1.09098579  0.8291492   0.13091829  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [4.98865748e+01 5.79599998e+00 1.65599999e+00 3.72599999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [5.40222628e+01 4.25452007e+00 1.56129177e+00 2.73226059e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [5.98303046e+01 5.47670519e-01 5.47670519e-01 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [6.65219718e+01 1.08169467e+00 3.04226625e-01 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [7.59623366e+01 1.26516726e+00 4.62866070e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [9.07169330e+01 1.13160000e+00 6.89999998e-01 5.51999998e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [1.18103218e+02 9.79994344e-01 7.64873634e-01 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [1.94283244e+02 4.87903677e-01 3.70806795e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  67
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [99.35, 0.41, 0.19, 0.04, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.726936 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  89
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  83.0
Iteration TIME (sec):  0.016754096000000107
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.82866811  9.03315751 11.37954841  0.75255058  0.32284715]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.66127015 13.35322157 10.20892796  0.12265708  0.12265708]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [15.6210814  12.56798062  7.45104158  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [16.08719289  2.14619949  0.67774721  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [16.24264546  0.78478211  0.44844692  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [16.35293075  1.66888735  1.33510988  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [16.46257772  2.75999999  2.09759999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [16.51508545  5.6957734   4.38136416  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [16.74956267  2.71653271  2.06456486  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [16.8131796   5.60463515  4.31125781  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [16.97882183  5.55850568  3.42061888  0.10689434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [16.96776107 11.55397939  6.99598752  0.10599981  0.10599981]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [17.39857293  1.26117202  1.26117202  0.31529301  0.21019534]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [17.1539615  14.48209236 11.2522732   0.31256314  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [17.61800142  5.37002666  3.30463179  0.7228882   0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [17.76897662  8.60857495 11.05310219  0.20468708  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [18.27962944  1.50698274  0.90418965  0.40186206  0.10046552]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [18.25882938  8.45862326  5.17468717  0.19902643  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [18.61799342  3.15365478  2.4637928   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [18.60227289 10.63630017  5.07419824  0.39032294  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [18.96068324  5.02319998  2.41499999  0.8694      0.1932    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [19.2538116   3.05949454  1.81657488  0.0956092   0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [19.38508991  6.33873822  2.36520083  0.37843213  0.18921607]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [19.13707555 16.56651916 12.91626918  0.84236538  0.18719231]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [19.48982328 16.47803208  7.77614997  0.37029286  0.27771964]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [19.87495294  9.97773398  7.78080173  0.45769422  0.18307769]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [20.29820096  6.06300764  4.70561787  0.36197061  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [20.59766946  4.65057951  4.65057951  0.35773689  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [20.20563844 19.88170069 15.55190809  0.26508934  0.26508934]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [21.1877585   4.53850088  3.49115452  0.17455773  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [21.57171169  2.75779111  2.1545243   0.17236194  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [21.79790576  4.42358347  3.40275652  0.25520674  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [22.01159731  5.54018009  5.54018009  0.58759486  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [22.30719992  7.03799998  5.46479998  0.5796      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [22.16768695 14.36897453 14.36897453  0.4082095   0.2449257 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [23.06315425  6.83970655  4.18429107  0.32186854  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [23.58914752  4.12229814  2.53679886  0.23782489  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [23.76614155  6.63549001  6.63549001  0.39032294  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [24.23270071  6.53098758  5.07111976  0.53784604  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [24.97862705  1.88964282  1.43612854  0.15117143  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [25.2504272   4.97912336  3.86439425  0.22294582  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [25.9012902   2.33672755  2.33672755  0.21906821  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [26.4360145   2.2946209   2.2946209   0.14341381  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [26.94171233  2.88502523  2.88502523  0.35183235  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [27.18216659  9.65999997  4.55399998  0.276       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [27.97293181  5.74650292  4.4619905   0.20281775  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [28.45453972  7.21388975  7.21388975  0.2647299   0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [29.70699059  2.07128759  1.22982701  0.06472774  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [30.04370071  6.89311034  5.37536127  0.18971863  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [31.00825538  5.24581546  4.07322141  0.55543928  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [31.80207438  6.55665577  5.11298844  0.18045842  0.12030561]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [33.33032583  1.87355012  0.87822662  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [34.39313429  1.82076344  1.82076344  0.05689886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [35.64954654  1.76639999  1.38        0.1104      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [36.91966026  2.77925284  1.71030944  0.10689434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [38.41475153  2.68501333  2.06539487  0.15490462  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [39.7303352   5.42347021  3.28393609  0.94537554  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [41.86299035  5.21070163  1.91218408  0.33463221  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [44.65430569  1.14423555  0.86961902  0.13730827  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [4.66732427e+01 6.10952042e+00 1.74557726e+00 3.92754884e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [5.00573498e+01 4.51259998e+00 1.65599999e+00 2.89799999e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [5.47304201e+01 5.85484413e-01 5.85484413e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [5.97633671e+01 1.16836377e+00 3.28602312e-01 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [6.64273235e+01 1.38592129e+00 5.07044375e-01 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [7.58774778e+01 1.26516726e+00 7.71443450e-01 6.17154760e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [9.06341330e+01 1.13160000e+00 8.83199997e-01 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [1.18473704e+02 5.97557527e-01 4.54143720e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [1.93892921e+02 8.00162031e-01 3.70806795e-01 7.80645884e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  68
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.92, 0.52, 0.52, 0.03, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.543245 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  90
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  84.0
Iteration TIME (sec):  0.016804379999999952
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.74341906  9.09121831 11.4500508   0.75701679  0.32476317]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.5348463  13.44299042 10.27754438  0.12343095  0.12343095]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [15.4947921  12.66233549  7.50484041  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.95719709  2.16215658  0.68278629  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [16.10944217  0.79070508  0.45183147  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [16.21677353  1.68167594  1.34534076  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [16.32337754  2.78147891  2.11392397  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [16.37320629  5.74079998  4.41599998  0.1104      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [16.60341941  2.7383526   2.08114797  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [16.66405869  5.65038803  4.34645233  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [16.82575411  5.60463515  3.44900624  0.10778145  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [16.81213913 11.65148306  7.05502644  0.10689434  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [17.23641576  1.27199773  1.27199773  0.31799943  0.21199962]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [16.99108898 14.60857592 11.3505482   0.31529301  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [17.44791969  5.41776117  3.33400688  0.729314    0.10418771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [17.58794831  8.69100717 11.1531323   0.20653949  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [18.09330329  1.52113313  0.91267988  0.4056355   0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [18.06903826  8.53956887  5.22420684  0.20093103  0.10046552]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [18.42078226  3.18442288  2.48783037  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [18.40117966 10.74213661  5.12468902  0.39420685  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [18.75163115  5.07419824  2.43951839  0.87822662  0.19516147]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [19.03715824  3.09119999  1.83539999  0.0966      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [19.16227088  6.40581668  2.39023011  0.38243682  0.19121841]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [18.91204975 16.74562187 13.05590858  0.8514723   0.18921607]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [19.25563068 16.66011531  7.86207689  0.37438461  0.28078846]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [19.63078704 10.09048032  7.86872319  0.46286607  0.18514643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [20.04312896  6.13310254  4.76001988  0.36615538  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [20.33267435  4.70561787  4.70561787  0.36197061  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [19.93891008 20.1226998  15.74042295  0.26830266  0.26830266]  taking action:  1  corresponding to token:  

Adding child.
Leaf selection - depth:  29
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````

Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.82, 0.12, 0.06, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````
```
API response time: 0.587430 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````
```assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  51
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  85.0
Iteration TIME (sec):  0.012461464000000255
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.65983985  9.14893856 11.52013968  0.76145681  0.32666796]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.41138587 13.53219995 10.34573328  0.1242      0.1242    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [15.37133463 12.75601878  7.55825632  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.83012213  2.17799677  0.68778845  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.97927724  0.796584    0.45519086  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [16.08376993  1.69436802  1.35549441  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [16.187452    2.80279324  2.13012286  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [16.2347179   5.78547614  4.45036626  0.11125916  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [16.46082534  2.75999999  2.09759999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [16.51861881  5.6957734   4.38136416  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [16.67652802  5.65038803  3.47716187  0.10866131  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [16.66048922 11.74817752  7.11357538  0.10778145  0.10778145]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [17.0784691   1.28273208  1.28273208  0.32068302  0.21378868]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [16.83251993 14.73397372 11.44797958  0.31799943  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [17.28241235  5.46507876  3.36312539  0.73568368  0.10509767]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [17.41204928  8.77270662 11.2522732   0.20837543  0.10418771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [17.91227291  1.53515308  0.92109185  0.40937416  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [17.88474541  8.61975438  5.2732615   0.20281775  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [18.22939668  3.21489652  2.5116379   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [18.20614591 10.84694042  5.17468717  0.39805286  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [18.54900723  5.12468902  2.4637928   0.88696541  0.19710342]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [18.82730601  3.12258353  1.85403397  0.09758074  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [18.94659574  6.47219998  2.41499999  0.3864      0.1932    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [18.69439605 16.92282915 13.19407019  0.86048284  0.19121841]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [19.02928144 16.8402299   7.94707479  0.37843213  0.2838241 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [19.39498495 10.20198073  7.95567304  0.46798077  0.18719231]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [19.79699804  6.20240533  4.81380713  0.37029286  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [20.07718992  4.76001988  4.76001988  0.36615538  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [20.1864278   9.68042327 15.92670663  0.27147795  0.27147795]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [20.90149797  4.59488194  3.53452457  0.17672623  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [21.27279944  2.79292362  2.18197158  0.17455773  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [21.48779864  4.48141055  3.44723888  0.25854292  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [21.68984525  5.61454825  5.61454825  0.59548239  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [21.97195798  7.13508042  5.54018009  0.58759486  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [21.82459421 14.57279995 14.57279995  0.414       0.2484    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [22.69595807  6.93956156  4.24537884  0.3265676   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [23.20214294  4.18429107  2.57494835  0.24140141  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [23.36370934  6.73837196  6.73837196  0.39637482  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [23.80895116  6.63549001  5.15226283  0.54645212  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [24.52723545  1.9208787   1.45986781  0.1536703   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [24.77793395  5.06424275  3.93045706  0.22675714  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [25.39905775  2.37808877  2.37808877  0.22294582  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [25.90399475  2.33672755  2.33672755  0.14604547  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [26.37809738  2.93998303  2.93998303  0.35853452  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [26.58987998  9.85130567  4.64418696  0.28146588  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [27.33741659  5.86499998  4.55399998  0.207       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [27.77893222  7.36904492  7.36904492  0.27042367  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [28.96895805  2.11783919  1.25746702  0.06618247  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [29.26006098  7.05532336  5.50185767  0.19418321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [30.15753189  5.37536127  4.17380993  0.5691559   0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [30.88157624  6.72698688  5.24581546  0.18514643  0.12343095]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [32.3100314   1.92488977  0.90229208  0.12030561  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [33.27522142  1.87355012  1.87355012  0.05854844  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [34.41447136  1.82076344  1.42247144  0.11379771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [35.55018654  2.87039999  1.76639999  0.1104      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [36.88148371  2.77925284  2.1378868   0.16034151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [38.01358829  5.62820102  3.40790154  0.98106256  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [39.89204417  5.42347021  1.9902643   0.34829625  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [42.34538224  1.19511505  0.90828744  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [43.99522601  6.40771907  1.83077688  0.4119248   0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [4.68332539e+01 4.75669804e+00 1.74557726e+00 3.05476021e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [5.07145748e+01 6.20999998e-01 6.20999998e-01 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [5.46690836e+01 1.24903341e+00 3.51290648e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [5.96781739e+01 1.49696609e+00 5.47670519e-01 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [66.35295701  1.38592129  0.84507396  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [75.80804794  1.26516726  0.98744762  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [9.09193330e+01 6.89999998e-01 5.24399998e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [1.18234681e+02 9.79994344e-01 4.54143720e-01 9.56092042e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [1.93053727e+02 1.01483965e+00 1.01483965e+00 5.85484413e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  69
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.37, 0.41, 0.19, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.764269 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  91
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  86.0
Iteration TIME (sec):  0.017248126999999336
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.57787684  9.20632419 11.58982223  0.76587109  0.3285617 ]  taking action:  2  corresponding to token:  

Leaf selection - depth:  1
Leaf selection - action scores:  [1.90262918e+02 4.46919768e+00 3.70806795e-01 3.90322942e-02
 1.95161471e-02]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

```
Tokens: ['```', '\n', '``', '\\n', 'ver']
Probs: [88.17, 5.64, 5.64, 0.22, 0.1]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

``````
API response time: 0.552451 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

``````assign out = in[sel*4 +: 4];

endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];

endmodule
```
Depth of rollout:  24
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  87.0
Iteration TIME (sec):  0.009976776000000243
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.64988707  9.26338095  7.43940361  0.77026007  0.33044459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.29077634 13.62086048 10.41350253  0.12496431  0.12496431]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [15.25060492 12.84904461  7.61129737  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.70586022  2.19372258  0.6927545   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.85203696  0.80241986  0.45852564  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.95380014  1.70696572  1.36557258  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [16.05467472  2.8239467   2.14619949  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [16.09948741  5.82980994  4.48446918  0.11211173  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [16.32163912  2.78147891  2.11392397  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [16.37671105  5.74079998  4.41599998  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [16.53098557  5.6957734   3.50509132  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [16.51264539 11.8440826   7.17164635  0.10866131  0.10866131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [16.92455376  1.29337734  1.29337734  0.32334434  0.21556289]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [16.67806826 14.85831326 11.54458872  0.32068302  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [17.12127804  5.51199017  3.39199395  0.74199868  0.10599981]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [17.24104215  8.8536925  11.3505482   0.21019534  0.10509767]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [17.73629222  1.54904615  0.92942769  0.41307897  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [17.70569059  8.6992008   5.32186402  0.20468708  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [18.04355554  3.245084    2.53522188  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [18.01687348 10.95074126  5.22420684  0.40186206  0.10046552]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [18.35248888  5.17468717  2.48783037  0.89561893  0.19902643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [18.62390653  3.15365478  1.87248253  0.09855171  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [18.73769105  6.53790928  2.43951839  0.39032294  0.19516147]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [18.48372075 17.09819994 13.33079995  0.8694      0.1932    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [18.81034763 17.01843836  8.03117316  0.38243682  0.28682761]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [19.1670801  10.31227561  8.04168282  0.47304017  0.18921607]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [19.5592982   6.27094228  4.86699998  0.37438461  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [19.83066102  4.81380713  4.81380713  0.37029286  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [19.92081992  9.79811994 16.11083653  0.27461653  0.27461653]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [20.62602666  4.65057951  3.57736885  0.17886844  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [20.98544293  2.82761965  2.20907785  0.17672623  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [21.18999642  4.53850088  3.49115452  0.26183659  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [21.38120638  5.68794416  5.68794416  0.6032668   0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [21.65075954  7.2308576   5.61454825  0.59548239  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [21.49628595 14.77381358 14.77381358  0.41971061  0.25182637]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [22.34505135  7.03799998  4.30559999  0.3312      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [22.83282832  4.24537884  2.61254082  0.2449257   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [22.98024871  6.83970655  6.83970655  0.40233568  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [23.40582416  6.73837196  5.23214764  0.55492475  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [24.0985456   1.95161471  1.48322718  0.15612918  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [24.33002524  5.14795491  3.99542769  0.23050544  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [24.92389257  2.41874281  2.41874281  0.22675714  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [25.40171187  2.37808877  2.37808877  0.14863055  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [25.84719929  2.99393217  2.99393217  0.36511368  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [26.03335266 10.03896645  4.73265561  0.28682761  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [26.74187155  5.98114987  4.64418696  0.21109941  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [27.14766659  7.52099997  7.52099997  0.276       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [28.28156752  2.16338933  1.28451242  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [28.53275538  7.21388975  5.62551036  0.19854742  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [29.37102282  5.50185767  4.27203066  0.58254964  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [30.03421478  6.89311034  5.37536127  0.18971863  0.12647909]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [31.37530005  1.97489523  0.92573214  0.12343095  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [32.25656224  1.92488977  1.92488977  0.06015281  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [33.29588557  1.87355012  1.46371103  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [34.31845454  2.95874059  1.82076344  0.11379771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [35.51338654  2.87039999  2.20799999  0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [36.49590056  5.82574153  3.52751322  1.01549623  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [38.16849291  5.62820102  2.06539487  0.3614441   0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [40.35229279  1.24391519  0.94537554  0.14926982  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [41.71957654  6.6926443   1.91218408  0.43024142  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [44.14626511  4.98886699  1.83077688  0.32038595  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [4.74490548e+01 6.54591473e-01 6.54591473e-01 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [5.06576498e+01 1.32480000e+00 3.72599999e-01 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [5.45910190e+01 1.60032406e+00 5.85484413e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [59.61123636  1.49696609  0.9127842   0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [66.29211169  1.38592129  1.08169467  0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [7.60471954e+01 7.71443450e-01 5.86297022e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [90.735333  1.1316    0.5244    0.1104    0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [1.17720781e+02 1.24291966e+00 1.24291966e+00 7.17069032e-02
 2.39023011e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [1.93931954e+02 8.00162031e-01 3.70806795e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  70
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', "Here's", 'module']
Probs: [99.32, 0.52, 0.15, 0.0, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.793968 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  92
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  88.0
Iteration TIME (sec):  0.016998940999999768
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.56821834  9.32011444  7.48533072  0.77462419  0.33231681]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.17291094 13.70898202 10.4808598   0.12572398  0.12572398]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [15.13250397 12.94142665  7.66397133  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.58430921  2.20933646  0.6976852   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.72761338  0.80821358  0.46183633  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.82675062  1.71947113  1.37557691  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [15.9249261   2.84494287  2.16215658  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.96738909  5.87380913  4.51831471  0.11295787  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [16.1857272   2.80279324  2.13012286  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [16.23819475  5.78547614  4.45036626  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [16.38897772  5.74079998  3.53279999  0.1104      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [16.36845109 11.93921733  7.22925086  0.1095341   0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [16.77450133  1.3039357   1.3039357   0.32598392  0.21732262]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [16.52755877 14.98162088 11.64039608  0.32334434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [16.96432768  5.55850568  3.42061888  0.74826038  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [17.07470463  8.93398317 11.44797958  0.21199962  0.10599981]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [17.56513087  1.56281572  0.93768943  0.41675086  0.10418771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [17.53163037  8.7779282   5.37002666  0.20653949  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [17.8629964   3.27499324  2.55858847  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [17.83308429 11.05356738  5.2732615   0.4056355   0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [18.16177566  5.22420684  2.5116379   0.90418965  0.20093103]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [18.42663598  3.18442288  1.89075108  0.09951321  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [18.53520999  6.6029647   2.4637928   0.39420685  0.19710342]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [18.27965902 17.27179018 13.46614149  0.87822662  0.19516147]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [18.59843325 17.19479994  8.11439997  0.3864      0.2898    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [18.94664161 10.42140326  8.12678236  0.47804602  0.19121841]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [19.32955911  6.33873822  4.91961772  0.37843213  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [19.59257683  4.86699998  4.86699998  0.37438461  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [19.66492967  9.91448657 16.29288565  0.27771964  0.27771964]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [20.36068398  4.70561787  3.61970605  0.1809853   0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [20.70891691  2.86189508  2.23585553  0.17886844  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [20.90370704  4.59488194  3.53452457  0.26508934  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [21.0848142   5.76040497  5.76040497  0.61095204  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [21.34265174  7.32538263  5.68794416  0.6032668   0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [21.18173093 14.97212868 14.97212868  0.42534456  0.25520674]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [22.00926559  7.13508042  4.36499038  0.33576849  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [22.47989706  4.30559999  2.64959999  0.2484      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [22.61431617  6.93956156  6.93956156  0.4082095   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [23.02170148  6.83970655  5.31083097  0.56326995  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [23.69071857  1.98187411  1.50622432  0.15854993  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [23.90464323  5.23032742  4.0593586   0.23419377  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [24.47345084  2.45872473  2.45872473  0.23050544  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [24.92649897  2.41874281  2.41874281  0.15117143  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [25.34597541  3.04692624  3.04692624  0.37157637  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [25.50913106 10.22318303  4.81950057  0.29209094  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [26.18228238  6.09508677  4.73265561  0.21512071  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [26.55610408  7.66994513  7.66994513  0.28146588  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [27.63929159  2.20799999  1.311       0.069       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [27.8553563   7.36904492  5.74650292  0.20281775  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [28.64105397  5.62551036  4.36804334  0.59564227  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [29.25081416  7.05532336  5.50185767  0.19418321  0.12945547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [30.51483531  2.02366542  0.94859317  0.12647909  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [31.32332912  1.97489523  1.97489523  0.06171548  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [32.27661317  1.92488977  1.50382013  0.12030561  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [33.20289687  3.04451895  1.87355012  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [34.28289275  2.95874059  2.2759543   0.17069657  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [35.14170654  6.01679998  3.64319999  1.0488      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [36.6447891   5.82574153  2.1378868   0.37413019  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [38.60937527  1.29087179  0.98106256  0.15490462  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [39.7552135   6.96592504  1.9902643   0.44780947  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [41.86299035  5.21070163  1.91218408  0.33463221  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [44.72753676  0.68654133  0.68654133  0.04576942  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [4.73957177e+01 1.39646181e+00 3.92754884e-01 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [5.05851998e+01 1.69739999e+00 6.20999998e-01 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [54.52968259  1.60032406  0.97580735  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [59.5564693   1.49696609  1.16836377  0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [6.65016900e+01 8.45073958e-01 6.42256208e-01 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [75.89290671  1.26516726  0.58629702  0.12343095  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [9.03397330e+01 1.43520000e+00 1.43520000e+00 8.27999997e-02
 2.75999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [1.18258583e+02 9.79994344e-01 4.54143720e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [193.83437293   1.01483965   0.29274221   0.           0.        ]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  71
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.91, 0.67, 0.4, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.613862 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  93
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  89.0
Iteration TIME (sec):  0.017125776000000315
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.48810254  9.37653009  7.53100053  0.77896385  0.33417854]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [14.05768836 13.79657429 10.54781252  0.12647909  0.12647909]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [15.01693791 13.03317806  7.71628574  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.46537189  2.22484077  0.7025813   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.60590423  0.81396607  0.46512347  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.70251358  1.73188625  1.385509    0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [15.79809277  2.86578522  2.17799677  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.83830396  5.91748117  4.55190859  0.11379771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [16.05296324  2.8239467   2.14619949  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [16.102937    5.82980994  4.48446918  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [16.25036372  5.78547614  3.56029301  0.11125916  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [16.22775867 12.03359996  7.28639997  0.1104      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [16.62815292  1.31440925  1.31440925  0.32860231  0.21906821]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [16.38082675 15.10392185 11.73542129  0.32598392  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [16.81138325  5.60463515  3.44900624  0.75447012  0.10778145]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [16.91282828  9.01359626 11.54458872  0.21378868  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [17.39857293  1.57646503  0.94587902  0.42039067  0.10509767]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [17.36233693  8.85595576  5.41776117  0.20837543  0.10418771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [17.6874738   3.30463179  2.58174359  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [17.65451882 11.15544573  5.32186402  0.40937416  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [17.97658741  5.2732615   2.53522188  0.91267988  0.20281775]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [18.23519277  3.21489652  1.90884481  0.10046552  0.10046552]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [18.3388302   6.6673854   2.48783037  0.39805286  0.19902643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [18.08187211 17.44365302 13.60013625  0.88696541  0.19710342]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [18.39317131 17.36937091  8.19678178  0.39032294  0.29274221]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [18.73327075 10.52939996  8.21099997  0.483       0.1932    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [19.10734644  6.40581668  4.97167862  0.38243682  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [19.36246625  4.91961772  4.91961772  0.37843213  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [19.41817996 10.02956726 16.47292301  0.28078846  0.28078846]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [20.10486446  4.76001988  3.66155376  0.18307769  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [20.44255829  2.89576484  2.26231628  0.1809853   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [20.62820798  4.65057951  3.57736885  0.26830266  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [20.79988039  5.83196554  5.83196554  0.6185418   0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [21.04676956  7.41870337  5.76040497  0.61095204  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [20.87999599 15.16785109 15.16785109  0.43090486  0.25854292]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [21.68754609  7.2308576   4.42358347  0.34027565  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [22.14217395  4.36499038  2.68614792  0.25182637  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [22.26461706  7.03799998  7.03799998  0.414       0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [22.65513712  6.93956156  5.38836545  0.57149331  0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [23.30211726  2.0116784   1.52887558  0.16093427  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [23.49996318  5.3114226   4.12229814  0.23782489  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [24.04566314  2.49806683  2.49806683  0.23419377  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [24.47601202  2.45872473  2.45872473  0.1536703   0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [24.87176449  3.09901422  3.09901422  0.37792856  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [25.01421079 10.40413837  4.90480809  0.2972611   0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [25.65517654  6.20693255  4.81950057  0.21906821  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [26.00025716  7.81605245  7.81605245  0.28682761  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [27.03741072  2.25172701  1.33696291  0.07036647  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [27.22241659  7.52099997  5.86499998  0.207       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [27.96117426  5.74650292  4.4619905   0.60845325  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [28.52373049  7.21388975  5.62551036  0.19854742  0.13236495]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [29.71931969  2.07128759  0.97091606  0.12945547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [30.46424368  2.02366542  2.02366542  0.06323954  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [31.34281822  1.97489523  1.5428869   0.12343095  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [32.18638396  3.12794587  1.92488977  0.12030561  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [33.16845661  3.04451895  2.34193765  0.17564532  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [33.92371872  6.20197546  3.75532459  1.08107829  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [35.28522654  6.01679998  2.20799999  0.3864      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [37.06854881  1.33617925  1.01549623  0.16034151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [38.03741977  7.22888205  2.06539487  0.46471385  0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [39.89204417  5.42347021  1.9902643   0.34829625  0.04975661]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [42.41491621  0.71706903  0.71706903  0.0478046   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [44.6771904   1.4646215   0.4119248   0.04576942  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [4.73278342e+01 1.78921669e+00 6.54591473e-01 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [50.52827482  1.69739999  1.035       0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [54.47949821  1.60032406  1.24903341  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [5.97451114e+01 9.12784199e-01 6.93715991e-01 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [66.3664782   1.38592129  0.64225621  0.13521183  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [7.55611860e+01 1.60460238e+00 1.60460238e+00 9.25732139e-02
 3.08577380e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [9.07537330e+01 1.13160000e+00 5.24399998e-01 5.51999998e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [118.19882707   1.24291966   0.35853452   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  71
Leaf selection - action scores:  [1.93034211e+02 1.30758186e+00 7.80645884e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  72
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '    \n']
Probs: [99.14, 0.41, 0.41, 0.04, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.590695 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  94
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  90.0
Iteration TIME (sec):  0.017100978999999406
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.40949122  9.43263318  7.57641732  0.78327948  0.33602996]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.94501245 13.88364672 10.61436787  0.12722971  0.12722971]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.90381741 13.12431161  7.76824785  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.348956    2.24023777  0.70744351  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.48681217  0.81967818  0.46838753  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.5809869  1.744213   1.3953704  0.         0.       ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [15.67406714  2.88647708  2.19372258  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.71211921  5.96083326  4.58525636  0.11463141  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [15.92322762  2.84494287  2.16215658  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.97081206  5.87380913  4.51831471  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [16.11501057  5.82980994  3.58757535  0.11211173  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [16.09042868 12.12724806  7.34310433  0.11125916  0.11125916]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [16.48535867  1.3248      1.3248      0.3312      0.2208    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [16.23771684 15.22524044 11.82968322  0.32860231  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [16.66227736  5.65038803  3.47716187  0.76062916  0.10866131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [16.75521752  9.09254862 11.64039608  0.21556289  0.10778145]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [17.23641576  1.58999716  0.9539983   0.42399924  0.10599981]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [17.19759668  8.93330182  5.46507876  0.21019534  0.10509767]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [17.516758    3.33400688  2.60469287  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [17.48093431 11.25640204  5.37002666  0.41307897  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [17.79666262  5.32186402  2.55858847  0.92109185  0.20468708]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [18.04929566  3.245084    1.92676863  0.10140888  0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [18.14825146  6.73118958  2.5116379   0.40186206  0.20093103]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [17.89004511 17.61383903 13.73282365  0.89561893  0.19902643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [18.19422106 17.54220473  8.27834381  0.39420685  0.29565514]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [18.52659803 10.63630017  8.29436251  0.48790368  0.19516147]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [18.89225824  6.47219998  5.02319998  0.3864      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [19.13989425  4.97167862  4.97167862  0.38243682  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [19.18004049 10.14340373 16.65101384  0.2838241   0.2838241 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [19.8580122   4.81380713  3.70292856  0.18514643  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [20.18575925  2.929243    2.2884711   0.18307769  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [20.36283857  4.70561787  3.61970605  0.27147795  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [20.52568582  5.90265861  5.90265861  0.62603955  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [20.76232606  7.5108647   5.83196554  0.6185418   0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [20.59023397 15.36107991 15.36107991  0.43639432  0.26183659]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [21.37893846  7.32538263  4.48141055  0.34472389  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [21.8185982   4.42358347  2.72220521  0.25520674  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [21.92998691  7.13508042  7.13508042  0.41971061  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [22.3048342   7.03799998  5.46479998  0.5796      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [22.93127885  2.04104752  1.55119611  0.1632838   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [23.11436061  5.3912981   4.18429107  0.24140141  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [23.63869437  2.53679886  2.53679886  0.23782489  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [24.04818135  2.49806683  2.49806683  0.15612918  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [24.42222741  3.15024107  3.15024107  0.38417574  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [24.54596401 10.58199977  4.98865704  0.30234285  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [25.15753311  6.3167983   4.90480809  0.22294582  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [25.47667651  7.95947822  7.95947822  0.29209094  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [26.47186795  2.2946209   1.36243116  0.0717069   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [26.6292852   7.66994513  5.98114987  0.21109941  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [27.32591659  5.86499998  4.55399998  0.621       0.069     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [27.84653814  7.36904492  5.74650292  0.20281775  0.13521183]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [28.98099123  2.11783919  0.99273712  0.13236495  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [29.67000332  2.07128759  2.07128759  0.06472774  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [30.48321554  2.02366542  1.58098861  0.12647909  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [31.25511728  3.20920475  1.97489523  0.12343095  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [32.15296574  3.12794587  2.40611221  0.18045842  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [32.82060999  6.3817801   3.86419712  1.11242038  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [34.06240968  6.20197546  2.2759543   0.398292    0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [35.69370654  1.38        1.0488      0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [36.51880649  7.4826038   2.1378868   0.48102453  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [38.16849291  5.62820102  2.06539487  0.3614441   0.05163487]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [40.41863494  0.74634911  0.74634911  0.04975661  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [42.3671116   1.52974727  0.43024142  0.0478046   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [44.61311321  1.8765463   0.68654133  0.04576942  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [47.27449707  1.78921669  1.09098579  0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [50.48169982  1.69739999  1.3248      0.1242      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [5.46523555e+01 9.75807355e-01 7.41613590e-01 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [59.62340681  1.49696609  0.69371599  0.14604547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [6.60757728e+01 1.75775383e+00 1.75775383e+00 1.01408875e-01
 3.38029583e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [7.59083356e+01 1.26516726e+00 5.86297022e-01 6.17154760e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [90.707733  1.4352    0.414     0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  71
Leaf selection - action scores:  [1.17708830e+02 1.60145417e+00 9.56092042e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  72
Leaf selection - action scores:  [1.93483082e+02 8.00162031e-01 8.00162031e-01 7.80645884e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  73
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', '    \n']
Probs: [99.31, 0.41, 0.25, 0.03, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.966169 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  95
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  91.0
Iteration TIME (sec):  0.017331150000000406
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.33233815  9.48842885  7.62158524  0.78757145  0.33787124]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.83479183 13.97020844 10.68053287  0.12797593  0.12797593]  taking action:  1  corresponding to token:  ``
Leaf selection - depth:  2
Leaf selection - action scores:  [5.01413375e+01 2.93132529e+01 3.98129401e+00 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [59.94592389  0.25557958  0.14604547  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [66.50845062  0.84507396  0.64225621  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [7.61706264e+01 5.86297022e-01 2.77719642e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [91.204533  0.2484    0.1104    0.        0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [118.37809433   0.97999434   0.28682761   0.           0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [1.94419857e+02 4.87903677e-01 2.34193765e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````
Tokens: ['```', '``', '\n', "Here's", 'Here']
Probs: [99.58, 0.25, 0.15, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````
API response time: 0.639434 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````assign out = in[sel*4 +: 4];

endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];

endmodule
```
Depth of rollout:  31
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  92.0
Iteration TIME (sec):  0.010436247000000343
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.25659899  9.5439221   7.66650835  0.79184016  0.33970253]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.92071506 12.38334963 10.74631428  0.12871783  0.12871783]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.79305749 13.21483959  7.81986468  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.23497371  2.25552968  0.71227253  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.37024481  0.82535076  0.47162901  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.46207339  1.75645324  1.40516259  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [15.55274727  2.90702166  2.20933646  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.58872782  6.00387233  4.61836333  0.11545908  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [15.79640701  2.86578522  2.17799677  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.8417009   5.91748117  4.55190859  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.98279244  5.87380913  3.61465177  0.11295787  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [15.95632935 12.22017853  7.39937415  0.11211173  0.11211173]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [16.34597706  1.33510988  1.33510988  0.33377747  0.22251831]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [16.09808248 15.34559995 11.92319996  0.3312      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [16.51685213  5.6957734   3.50509132  0.76673873  0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [16.60168838  9.17085644 11.73542129  0.21732262  0.10866131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [17.0784691   1.6034151   0.96204906  0.42757736  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [17.03720922  9.00998393  5.51199017  0.21199962  0.10599981]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [17.35063364  3.36312539  2.62744171  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [17.31210356 11.35646092  5.41776117  0.41675086  0.10418771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [17.62175669  5.37002666  2.58174359  0.92942769  0.20653949]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [17.86868215  3.27499324  1.94452724  0.10234354  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [17.96319379  6.79439463  2.53522188  0.4056355   0.20281775]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [17.70388475 17.78239635 13.86424123  0.90418965  0.20093103]  taking action:  1  corresponding to token:  

Adding child.
Leaf selection - depth:  24
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````

Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [97.39, 1.39, 1.08, 0.11, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````
```
API response time: 0.588326 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````
```assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  46
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  93.0
Iteration TIME (sec):  0.012802147000000375
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.18223117  9.59911778  7.71119057  0.79608598  0.34152401]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.81126087 12.45940892 10.81171872  0.12945547  0.12945547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.68457727 13.30477393  7.87114303  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.12334142  2.2707186   0.71706903  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.25611422  0.83098462  0.47484835  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.3456808   1.76860877  1.41488702  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [15.43403611  2.92742206  2.22484077  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.46802835  6.04660506  4.65123466  0.11628087  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [15.67239382  2.88647708  2.19372258  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.71549072  5.96083326  4.58525636  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.85359022  5.91748117  3.64152688  0.11379771  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [15.82533602 12.3124076   7.45521928  0.11295787  0.11295787]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [16.20987434  1.34534076  1.34534076  0.33633519  0.22422346]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [15.96178528 15.46502276 12.01598891  0.33377747  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [16.37495867  5.74079998  3.53279999  0.7728      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [16.45206799  9.24853525 11.82968322  0.21906821  0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [16.92455376  1.61672168  0.97003301  0.43112578  0.10778145]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [16.88098633  9.0860189   5.55850568  0.21378868  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [17.18889861  3.39199395  2.64999527  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [17.14781358 11.45564587  5.46507876  0.42039067  0.10509767]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [17.45164068  5.41776117  2.60469287  0.93768943  0.20837543]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [17.69310669  3.30463179  1.96212513  0.10326974  0.10326974]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [17.78339587  6.8570171   2.55858847  0.40937416  0.20468708]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [17.87933136  8.47468544 13.99442475  0.91267988  0.20281775]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [18.00126577 17.71335224  8.35911005  0.39805286  0.29853964]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [18.32628036 10.74213661  8.37689552  0.49275856  0.19710342]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [18.68392207  6.53790928  5.07419824  0.39032294  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [18.92445824  5.02319998  5.02319998  0.3864      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [18.95002283 10.25603548 16.82721995  0.28682761  0.28682761]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [19.61961572  4.86699998  3.74384614  0.18719231  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [19.93796179  2.96234285  2.31433035  0.18514643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [20.10699327  4.76001988  3.66155376  0.27461653  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [20.26157298  5.97251499  5.97251499  0.63344856  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [20.48860334  7.60190881  5.90265861  0.62603955  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [20.31167418 15.55190809 15.55190809  0.44181557  0.26508934]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [21.08257628  7.41870337  4.53850088  0.34911545  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [21.50820992  4.48141055  2.75779111  0.25854292  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [21.60937466  7.2308576   7.2308576   0.42534456  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [21.96962625  7.13508042  5.54018009  0.58759486  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [22.57689135  2.06999999  1.57319999  0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [22.74638395  5.47000735  4.24537884  0.2449257   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [23.2509109   2.57494835  2.57494835  0.24140141  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [23.64117171  2.53679886  2.53679886  0.15854993  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [23.99529889  3.20064812  3.20064812  0.39032294  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [24.10208096 10.75692071  5.07111976  0.30734059  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [24.68670982  6.42478558  4.98865704  0.22675714  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [24.98236139  8.10036487  8.10036487  0.2972611   0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [25.93915384  2.33672755  1.38743198  0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [26.07196407  7.81605245  6.09508677  0.21512071  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [26.73061292  5.98114987  4.64418696  0.63329822  0.07036647]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [27.21379159  7.52099997  5.86499998  0.207       0.138     ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [28.29332507  2.16338933  1.01408875  0.13521183  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [28.93285852  2.11783919  2.11783919  0.06618247  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [29.68849696  2.07128759  1.61819343  0.12945547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [30.39784216  3.28845631  2.02366542  0.12647909  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [31.22263545  3.20920475  2.46861904  0.18514643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [31.81544167  6.55665577  3.97008514  1.1429033   0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [32.954927    6.3817801   2.34193765  0.40983909  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [34.4571455   1.42247144  1.08107829  0.17069657  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [35.16378654  7.72799997  2.20799999  0.4968      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [36.6447891   5.82574153  2.1378868   0.37413019  0.05344717]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [38.67292589  0.77452308  0.77452308  0.05163487  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [40.37302471  1.59221144  0.44780947  0.04975661  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [42.30626938  1.95998869  0.71706903  0.0478046   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [44.56276685  1.8765463   1.14423555  0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [47.23085764  1.78921669  1.39646181  0.13091829  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [5.06421248e+01 1.03500000e+00 7.86599997e-01 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [54.54083467  1.60032406  0.74161359  0.15612918  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [5.93617420e+01 1.89859113e+00 1.89859113e+00 1.09534104e-01
 3.65113680e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [66.37999938  1.38592129  0.64225621  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [75.86976341  1.60460238  0.46286607  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  71
Leaf selection - action scores:  [9.03305330e+01 1.84919999e+00 1.10400000e+00 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  72
Leaf selection - action scores:  [1.17983706e+02 9.79994344e-01 9.79994344e-01 9.56092042e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  73
Leaf selection - action scores:  [1.93814857e+02 8.00162031e-01 4.87903677e-01 5.85484413e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  74
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.58, 0.32, 0.09, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.648534 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  96
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  94.0
Iteration TIME (sec):  0.017498059999999427
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.10919409  9.65402065  7.75563575  0.80030928  0.34333582]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.7041416  12.53503728 10.87675259  0.13018894  0.13018894]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.57829968 13.39412615  7.92208947  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [15.01397951  2.2858066   0.72183366  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.14433668  0.83658054  0.47804602  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.23172133  1.78068132  1.42454506  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [15.31784159  2.94768128  2.24023777  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.34992426  6.08903789  4.6838753   0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [15.55108611  2.90702166  2.20933646  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.59207446  6.00387233  4.61836333  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.72729101  5.96083326  3.66820509  0.11463141  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [15.69733067 12.40395092  7.51064918  0.11379771  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [16.076924    1.35549441  1.35549441  0.3388736   0.22591574]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [15.82869446 15.58353041 12.1080668   0.33633519  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [16.23645632  5.78547614  3.56029301  0.7788141   0.11125916]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [16.30619347  9.32559997 11.92319996  0.2208      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [16.77450133  1.62991962  0.97795177  0.43464523  0.10866131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [16.7287508   9.16142284  5.60463515  0.21556289  0.10778145]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [17.03136312  3.42061888  2.6723585   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [16.98786448 11.55397939  5.51199017  0.42399924  0.10599981]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [17.28609998  5.46507876  2.62744171  0.94587902  0.21019534]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [17.52233949  3.33400688  1.97956658  0.10418771  0.10418771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [17.60861327  6.91907282  2.58174359  0.41307897  0.20653949]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [17.69366722  8.55740318 14.12340835  0.92109185  0.20468708]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [17.81401041 17.88286187  8.43910335  0.40186206  0.30139655]  taking action:  1  corresponding to token:  

Adding child.
Leaf selection - depth:  25
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````

Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [97.15, 1.39, 1.39, 0.04, 0.02]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````
```
API response time: 0.503674 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````
```assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  47
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  95.0
Iteration TIME (sec):  0.01238326799999978
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [11.03744867  9.70863531  7.79984761  0.80451041  0.34513812]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.59927634 12.61024193 10.94142211  0.13091829  0.13091829]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.47415121 13.48290741  7.97271036  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [14.9068121   2.30079565  0.72656705  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [15.03483248  0.84213927  0.48122244  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.12011138  1.79267258  1.43413806  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [15.20407605  2.96780221  2.25552968  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.23432395  6.13117707  4.71629005  0.11790725  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [15.43238685  2.92742206  2.22484077  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.47135066  6.04660506  4.65123466  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.6037877   6.00387233  3.69469066  0.11545908  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [15.57220146 12.49482357  7.56567299  0.11463141  0.11463141]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [15.94700625  1.36557258  1.36557258  0.34139314  0.22759543]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [15.69868629 15.70114363 12.19944973  0.3388736   0.        ]  taking action:  1  corresponding to token:  

Adding child.
Leaf selection - depth:  14
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````

Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [98.71, 0.85, 0.4, 0.02, 0.01]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````
```
API response time: 0.662498 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````
```assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:13: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  36
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  96.0
Iteration TIME (sec):  0.011096382999999932
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.96695735  9.76296625  7.8438298   0.80868971  0.34693105]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.49658811 12.68502993 11.00573334  0.13164361  0.13164361]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.37206182 13.57112852  8.02301188  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [14.80176673  2.31568769  0.7312698   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [14.92752563  0.84766156  0.48437803  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [15.01077136  1.80458416  1.44366733  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [15.09265603  2.98778763  2.2707186   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.1211402   6.17302859  4.74848353  0.11871209  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [15.31620399  2.94768128  2.24023777  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.35322276  6.08903789  4.6838753   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.48297875  6.04660506  3.72098773  0.11628087  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [15.44984225 12.58504008  7.6202995   0.11545908  0.11545908]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [15.82000759  1.37557691  1.37557691  0.34389423  0.22926282]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [15.82272915  7.40894118 12.29015321  0.34139314  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [16.1012122   5.82980994  3.58757535  0.78478211  0.11211173]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [16.16391127  9.40206493 12.01598891  0.22251831  0.11125916]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [16.62815292  1.64301156  0.98580694  0.43813642  0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [16.58033604  9.2362112   5.65038803  0.21732262  0.10866131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [16.87784847  3.44900624  2.69453613  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [16.83206858 11.65148306  5.55850568  0.42757736  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [17.1249332   5.51199017  2.64999527  0.9539983   0.21199962]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [17.3561651   3.36312539  1.9968557   0.10509767  0.10509767]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [17.43861722  6.98057689  2.60469287  0.41675086  0.20837543]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [17.51336461  8.6393723  14.25122461  0.92942769  0.20653949]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [17.99049109  8.52538988  8.5183455   0.4056355   0.30422663]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [18.13199881 10.84694042  8.45862326  0.49756607  0.19902643]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [18.48199206  6.6029647   5.12468902  0.39420685  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [18.71578517  5.07419824  5.07419824  0.39032294  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [18.72767653 10.36749996 17.00159994  0.2898      0.2898    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [19.38920331  4.91961772  3.78432133  0.18921607  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [19.69865247  2.99507691  2.33990384  0.18719231  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [19.86011614  4.81380713  3.70292856  0.27771964  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [20.00693918  6.0415637   6.0415637   0.64077191  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [20.224945    7.69187536  5.97251499  0.63344856  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [20.04361356 15.74042295 15.74042295  0.44717111  0.26830266]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [20.79767131  7.5108647   4.59488194  0.35345246  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [21.21013769  4.53850088  2.79292362  0.26183659  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [21.30182917  7.32538263  7.32538263  0.43090486  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [21.64846038  7.2308576   5.61454825  0.59548239  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [22.2377747   2.09855307  1.59490033  0.16788425  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [22.39473135  5.54759998  4.30559999  0.2484      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [22.88085297  2.61254082  2.61254082  0.2449257   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [23.2533493   2.57494835  2.57494835  0.16093427  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [23.58914752  3.25027353  3.25027353  0.39637482  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [23.68052232 10.92904237  5.15226283  0.31225835  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [24.24038423  6.53098758  5.07111976  0.23050544  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [24.51468716  8.23884268  8.23884268  0.30234285  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [25.43621539  2.37808877  1.41199021  0.07431527  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [25.5469947   7.95947822  6.20693255  0.21906821  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [26.17125055  6.09508677  4.73265561  0.64536213  0.0717069 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [26.62084123  7.66994513  5.98114987  0.21109941  0.14073294]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [27.65079159  2.20799999  1.035       0.138       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [28.24629486  2.16338933  2.16338933  0.06760592  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [28.95090829  2.11783919  1.65456187  0.13236495  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [29.60527558  3.36584234  2.07128759  0.12945547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [30.36622238  3.28845631  2.52958177  0.18971863  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [30.89456897  6.72698688  4.07322141  1.17259404  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [31.94577274  6.55665577  2.40611221  0.42106964  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [33.33721388  1.46371103  1.11242038  0.17564532  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [33.94505579  7.96584004  2.2759543   0.51208972  0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [35.28522654  6.01679998  2.20799999  0.3864      0.0552    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [37.12963129  0.80170755  0.80170755  0.05344717  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [38.62923484  1.6523159   0.46471385  0.05163487  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [40.31497534  2.0400209   0.74634911  0.04975661  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [42.25846478  1.95998869  1.19511505  0.0956092   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [44.52157437  1.8765463   1.4646215   0.13730827  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [4.73811712e+01 1.09098579e+00 8.29149200e-01 4.36394316e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [50.53862482  1.69739999  0.7866      0.1656      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [5.43010649e+01 2.02967930e+00 2.02967930e+00 1.17096883e-01
 3.90322942e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [59.63557727  1.49696609  0.69371599  0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [66.34619642  1.75775383  0.50704438  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  71
Leaf selection - action scores:  [7.55534716e+01 2.06746844e+00 1.23430952e+00 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  72
Leaf selection - action scores:  [90.542133  1.1316    1.1316    0.1104    0.      ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  73
Leaf selection - action scores:  [1.18186876e+02 9.79994344e-01 5.97557527e-01 7.17069032e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  74
Leaf selection - action scores:  [1.94341793e+02 6.24516707e-01 1.75645324e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  75
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.55, 0.25, 0.19, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.626202 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  97
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  97.0
Iteration TIME (sec):  0.017322960000000442
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.89768425  9.81701784  7.88758586  0.81284753  0.34871477]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.39600353 12.75940813 11.06969218  0.13236495  0.13236495]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.27196451 13.65879995  8.07299997  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [14.69877437  2.33048457  0.7359425   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [14.82234359  0.8531481   0.4875132   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [14.9036254   1.81641762  1.4531341   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [14.98350209  3.00764026  2.2858066   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [15.01028999  6.21459828  4.78046021  0.11951151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [15.20244985  2.96780221  2.25552968  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.23759915  6.13117707  4.71629005  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.36476753  6.08903789  3.74710024  0.11709688  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [15.33015246 12.67461445  7.67453719  0.11628087  0.11628087]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [15.6958203   1.385509    1.385509    0.34637725  0.23091817]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [15.6929399   7.46688292 12.38019216  0.34389423  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [15.96910058  5.87380913  3.61465177  0.79070508  0.11295787]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [16.02507647  9.47794393 12.1080668   0.22422346  0.11211173]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [16.48535867  1.65599999  0.9936      0.4416      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [16.4355849   9.31039883  5.6957734   0.21906821  0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [16.72818667  3.47716187  2.71653271  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [16.68024915 11.74817752  5.60463515  0.43112578  0.10778145]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [16.96795122  5.55850568  2.6723585   0.96204906  0.21378868]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [17.19438135  3.39199395  2.01399641  0.10599981  0.10599981]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [17.27319325  7.04154379  2.62744171  0.42039067  0.21019534]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [17.33817072  8.72061276 14.37790465  0.93768943  0.20837543]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [17.8037348   8.60857495  8.59685726  0.40937416  0.30703062]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [17.94345637 10.95074126  8.53956887  0.50232758  0.20093103]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [18.28614673  6.6673854   5.17468717  0.39805286  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [18.51352861  5.12468902  5.12468902  0.39420685  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [18.51258522 10.47783274 17.17420944  0.29274221  0.29274221]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [19.16633935  4.97167862  3.82436817  0.19121841  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [19.46735777  3.02745706  2.36520083  0.18921607  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [19.62169564  4.86699998  3.74384614  0.28078846  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [19.76123111  6.10983212  6.10983212  0.6480125   0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [19.97074941  7.78080173  6.0415637   0.64077191  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [19.78540927 15.92670663 15.92670663  0.45246326  0.27147795]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [20.5235045   7.60190881  4.65057951  0.35773689  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [20.92358875  4.59488194  2.82761965  0.26508934  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [21.00648701  7.41870337  7.41870337  0.43639432  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [21.34038382  7.32538263  5.68794416  0.6032668   0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [21.91286375  2.12672282  1.61630935  0.17013783  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [22.05823182  5.62412222  4.36499038  0.25182637  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [22.52721135  2.64959999  2.64959999  0.2484      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [22.8832542   2.61254082  2.61254082  0.1632838   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [23.20214294  3.29915257  3.29915257  0.40233568  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [23.27947969 11.09849499  5.23214764  0.31709986  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [23.8165058   6.63549001  5.15226283  0.23419377  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [24.0713469   8.37503113  8.37503113  0.30734059  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [24.96038222  2.41874281  1.43612854  0.07558571  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [25.05136843  8.10036487  6.3167983   0.22294582  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [25.64435835  6.20693255  4.81950057  0.65720462  0.07302274]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [26.06369019  7.81605245  6.09508677  0.21512071  0.14341381]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [27.04866936  2.25172701  1.05549704  0.14073294  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [27.60479159  2.20799999  2.20799999  0.069       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [28.26393119  2.16338933  1.69014792  0.13521183  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [28.86968434  3.44148869  2.11783919  0.13236495  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [29.57445285  3.36584234  2.58910949  0.19418321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [30.04686269  6.89311034  4.17380993  1.20155134  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [31.02124811  6.72698688  2.46861904  0.43200833  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [32.31671504  1.50382013  1.1429033   0.18045842  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [32.84127414  8.19678178  2.34193765  0.52693597  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [34.06240968  6.20197546  2.2759543   0.398292    0.05689886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [35.75258654  0.828       0.828       0.0552      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [37.08763708  1.71030944  0.48102453  0.05344717  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [38.57362805  2.11702974  0.77452308  0.05163487  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [40.26936511  2.0400209   1.24391519  0.09951321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [42.21935193  1.95998869  1.52974727  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [44.66345957  1.14423555  0.86961902  0.04576942  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [47.28419472  1.78921669  0.8291492   0.17455773  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [5.03160998e+01 2.15279999e+00 2.15279999e+00 1.24200000e-01
 4.13999999e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [54.55198675  1.60032406  0.74161359  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [59.60515113  1.89859113  0.54767052  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  71
Leaf selection - action scores:  [6.60690122e+01 2.26479821e+00 1.35211833e+00 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  72
Leaf selection - action scores:  [75.73090359  1.26516726  1.26516726  0.12343095  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  73
Leaf selection - action scores:  [9.06985330e+01 1.13160000e+00 6.89999998e-01 8.27999997e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  74
Leaf selection - action scores:  [1.18509557e+02 7.64873634e-01 2.15120710e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  75
Leaf selection - action scores:  [1.94283244e+02 4.87903677e-01 3.70806795e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  76
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.26, 0.41, 0.32, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.631496 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  98
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  98.0
Iteration TIME (sec):  0.01746626100000004
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.82959477  9.87079436  7.93111923  0.81698418  0.35048941]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.29745254 12.83338318 11.13330434  0.13308238  0.13308238]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.17379544 13.74593185  8.12268044  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [14.59776894  2.34518809  0.74058571  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [14.71921721  0.85859958  0.49062833  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [14.79860106  1.82817449  1.46253959  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [14.87653847  3.0273627   2.30079565  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [14.90169427  6.25589174  4.81222442  0.12030561  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [15.09104101  2.98778763  2.2707186   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.12439259  6.17302859  4.74848353  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.24906236  6.13117707  3.77303204  0.11790725  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [15.21303636 12.7635602   7.72839425  0.11709688  0.11709688]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [15.57434228  1.3953704   1.3953704   0.3488426   0.23256173]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [15.56610507  7.52440629 12.46958099  0.34637725  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [15.84000243  5.91748117  3.64152688  0.796584    0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [15.88955226  9.55325024 12.19944973  0.22591574  0.11295787]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [16.34597706  1.66888735  1.00133241  0.44503663  0.11125916]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [16.29434915  9.38399997  5.74079998  0.2208      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [16.58221926  3.50509132  2.7383526   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [16.53224005 11.8440826   5.65038803  0.43464523  0.10866131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [16.81497596  5.60463515  2.69453613  0.97003301  0.21556289]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [17.03679842  3.42061888  2.03099246  0.10689434  0.10689434]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [17.11214012  7.10198733  2.64999527  0.42399924  0.21199962]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [17.16784914  8.80114366 14.50347825  0.94587902  0.21019534]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [17.62237156  8.69100717  8.67465846  0.41307897  0.30980923]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [17.76037604 11.05356738  8.61975438  0.50704438  0.20281775]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [18.09608667  6.73118958  5.22420684  0.40186206  0.10046552]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [18.31736657  5.17468717  5.17468717  0.39805286  0.09951321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [18.30436355 10.5870676  17.34510131  0.29565514  0.29565514]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [18.95062074  5.02319998  3.86399999  0.1932      0.0966    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [19.24364041  3.05949454  2.39023011  0.19121841  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [19.39126     4.91961772  3.78432133  0.2838241   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [19.52393965  6.17734613  6.17734613  0.65517307  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [19.72546419  7.86872319  6.10983212  0.6480125   0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [19.5364721  16.11083653 16.11083653  0.45769422  0.27461653]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [20.2594184   7.69187536  4.70561787  0.36197061  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [20.64783988  4.65057951  2.86189508  0.26830266  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [20.72256266  7.5108647   7.5108647   0.44181557  0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [21.04453165  7.41870337  5.76040497  0.61095204  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [21.60119465  2.1545243   1.63743847  0.17236194  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [21.73582845  5.69961717  4.42358347  0.25520674  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [22.18880846  2.68614792  2.68614792  0.25182637  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [22.52957706  2.64959999  2.64959999  0.1656      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [22.83282832  3.34731793  3.34731793  0.4082095   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [22.89734318 11.26539902  5.31083097  0.32186854  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [23.41325619  6.73837196  5.23214764  0.23782489  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [23.65030377  8.50904013  8.50904013  0.31225835  0.07806459]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [24.50930725  2.45872473  1.45986781  0.07683515  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [24.58245366  8.23884268  6.42478558  0.22675714  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [25.14691664  6.3167983   4.90480809  0.66883747  0.07431527]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [25.53888107  7.95947822  6.20693255  0.21906821  0.14604547]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [26.48289978  2.2946209   1.07560355  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [27.00363482  2.25172701  2.25172701  0.07036647  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [27.62204159  2.20799999  1.72499999  0.138       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [28.18456772  3.51550767  2.16338933  0.13521183  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [28.8396014   3.44148869  2.64729899  0.19854742  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [29.26314325  7.05532336  4.27203066  1.22982701  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [30.1701798   6.89311034  2.52958177  0.44267681  0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [31.38179641  1.5428869   1.17259404  0.18514643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [31.8354926   8.42139273  2.40611221  0.54137525  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [32.954927    6.3817801   2.34193765  0.40983909  0.05854844]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [34.51404436  0.85348286  0.85348286  0.05689886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [35.71210654  1.76639999  0.4968      0.0552      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [37.03418991  2.19133397  0.80170755  0.05344717  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [38.52993701  2.11702974  1.29087179  0.10326974  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [40.23204766  2.0400209   1.59221144  0.14926982  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [42.35407399  1.19511505  0.90828744  0.0478046   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [44.57192073  1.8765463   0.86961902  0.18307769  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [4.70756952e+01 2.26925044e+00 2.26925044e+00 1.30918295e-01
 4.36394316e-02]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [50.54897482  1.69739999  0.7866      0.0828      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [54.52410654  2.0296793   0.58548441  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  71
Leaf selection - action scores:  [5.93556568e+01 2.44626165e+00 1.46045472e+00 3.65113680e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  72
Leaf selection - action scores:  [66.22450577  1.38592129  1.38592129  0.13521183  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  73
Leaf selection - action scores:  [75.86204898  1.26516726  0.77144345  0.09257321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  74
Leaf selection - action scores:  [9.09469330e+01 8.83199997e-01 2.48399999e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  75
Leaf selection - action scores:  [1.18473704e+02 5.97557527e-01 4.54143720e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  76
Leaf selection - action scores:  [1.93717276e+02 8.00162031e-01 6.24516707e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  77
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [99.26, 0.67, 0.05, 0.02, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.616795 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  99
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  99.0
Iteration TIME (sec):  0.01767096499999976
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.76265575  9.92429996  7.97443329  0.8211      0.35225512]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.20086832 12.90696157 11.19657542  0.13379596  0.13379596]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [14.07749356 13.83253406  8.17205889  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [14.49868743  2.35979999  0.7452      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [14.61808036  0.86401666  0.49372381  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [14.69562931  1.83985624  1.47188499  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [14.77169286  3.04695749  2.31568769  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [14.79527768  6.29691442  4.84378033  0.12109451  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [14.98189801  3.00764026  2.2858066   0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [15.01352003  6.21459828  4.78046021  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.13577594  6.17302859  3.79878682  0.11871209  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [15.09840309 12.85189039  7.78187858  0.11790725  0.11790725]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [15.45547638  1.40516259  1.40516259  0.35129065  0.23419377]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [15.44211429  7.58152022 12.55833358  0.3488426   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [15.71380497  5.96083326  3.66820509  0.80241986  0.11463141]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [15.75720925  9.62799662 12.29015321  0.22759543  0.11379771]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [16.20987434  1.68167594  1.00900557  0.44844692  0.11211173]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [16.1564888   9.45702831  5.78547614  0.22251831  0.11125916]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [16.43979676  3.53279999  2.75999999  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [16.38788456 11.93921733  5.6957734   0.43813642  0.1095341 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [16.66584002  5.65038803  2.71653271  0.97795177  0.21732262]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [16.88323754  3.44900624  2.04784746  0.10778145  0.10778145]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [16.95526884  7.16192078  2.6723585   0.42757736  0.21378868]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [17.00217844  8.88098327 14.62797391  0.9539983   0.21199962]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [17.44614707  8.77270662  8.75176805  0.41675086  0.31256314]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [17.58249929 11.15544573  8.6992008   0.51171769  0.20468708]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [17.91153266  6.79439463  5.2732615   0.4056355   0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [18.12699914  5.22420684  5.22420684  0.40186206  0.10046552]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [18.10265406 10.69523667 17.51432582  0.29853964  0.29853964]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [18.74167394  5.07419824  3.90322942  0.19516147  0.09758074]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [19.02709574  3.09119999  2.41499999  0.1932      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [19.16837359  4.97167862  3.82436817  0.28682761  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [19.29459527  6.24413019  6.24413019  0.66225623  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [19.48858111  7.95567304  6.17734613  0.65517307  0.09359615]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [19.29626111 16.29288565 16.29288565  0.46286607  0.27771964]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [20.00481037  7.78080173  4.76001988  0.36615538  0.09153884]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [20.38222985  4.70561787  2.89576484  0.27147795  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [20.44933954  7.60190881  7.60190881  0.44717111  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [20.76011698  7.5108647   5.83196554  0.6185418   0.08836311]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [21.3018924   2.18197158  1.6582984   0.17455773  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [21.42656479  5.77412513  4.48141055  0.25854292  0.08618097]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [21.8645814   2.72220521  2.72220521  0.25520674  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [22.19114019  2.68614792  2.68614792  0.16788425  0.08394212]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [22.47989706  3.39479999  3.39479999  0.414       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [22.53267427 11.4298661   5.38836545  0.3265676   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [23.02901668  6.83970655  5.31083097  0.24140141  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [23.24975158  8.6409711   8.6409711   0.31709986  0.07927496]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [24.08091811  2.49806683  1.48322718  0.07806459  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [24.13793737  8.37503113  6.53098758  0.23050544  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [24.6762842   6.42478558  4.98865704  0.68027141  0.07558571]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [25.04340608  8.10036487  6.3167983   0.22294582  0.14863055]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [25.94997202  2.33672755  1.09534104  0.14604547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [26.43877246  2.2946209   2.2946209   0.0717069   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [27.02052277  2.25172701  1.75916173  0.14073294  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [27.54441659  3.58799999  2.20799999  0.138       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [28.15517384  3.51550767  2.70423667  0.20281775  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [28.53576367  7.21388975  4.36804334  1.25746702  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [29.38335191  7.05532336  2.58910949  0.45309416  0.06472774]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [30.52115927  1.58098861  1.20155134  0.18971863  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [30.91405807  8.64016664  2.46861904  0.55543928  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [31.94577274  6.55665577  2.40611221  0.42106964  0.06015281]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [33.3923183   0.87822662  0.87822662  0.05854844  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [34.4749264   1.82076344  0.51208972  0.05689886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [35.66058654  2.26319999  0.828       0.0552      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [36.99219571  2.19133397  1.33617925  0.10689434  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [38.49418979  2.11702974  1.6523159   0.15490462  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [40.36058556  1.24391519  0.94537554  0.04975661  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [42.26715653  1.95998869  0.90828744  0.19121841  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [44.37511222  2.38000994  2.38000994  0.13730827  0.04576942]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [47.29389237  1.78921669  0.8291492   0.08727886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [50.52309982  2.15279999  0.621       0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  71
Leaf selection - action scores:  [5.42954888e+01 2.61516371e+00 1.56129177e+00 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  72
Leaf selection - action scores:  [59.49561702  1.49696609  1.49696609  0.14604547  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  73
Leaf selection - action scores:  [66.33943583  1.38592129  0.84507396  0.10140888  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  74
Leaf selection - action scores:  [7.60703387e+01 9.87447615e-01 2.77719642e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  75
Leaf selection - action scores:  [9.09193330e+01 6.89999998e-01 5.24399998e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  76
Leaf selection - action scores:  [1.18127120e+02 9.79994344e-01 7.64873634e-01 2.39023011e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  77
Leaf selection - action scores:  [1.93717276e+02 1.30758186e+00 9.75807355e-02 3.90322942e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Adding child.
Leaf selection - depth:  78
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', '    \n']
Probs: [99.4, 0.52, 0.07, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.657990 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  100
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  100.0
Iteration TIME (sec):  0.017770408000000515
ROBUST FINAL VALUE, ITERATION:  1.0
Adding child.
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [98.78, 0.67, 0.52, 0.03, 0.0]
Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.613330 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  101
Trimming the result to last instance of endmodule...
Running getPromptScore: 
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.31, 0.41, 0.25, 0.03, 0.01]
Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.726296 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  101
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [10.69683524  9.9775387   8.01753131  0.82519528  0.35401201]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  1
Leaf selection - action scores:  [13.10618707 12.98014962 11.25951083  0.13450576  0.13450576]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  2
Leaf selection - action scores:  [13.98300042 13.91861612  8.22114077  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  3
Leaf selection - action scores:  [14.40146958  2.37432198  0.74978589  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  4
Leaf selection - action scores:  [14.51886993  0.8694      0.4968      0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  5
Leaf selection - action scores:  [14.59464411  1.85146428  1.48117142  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  6
Leaf selection - action scores:  [14.66889636  3.06642706  2.33048457  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  7
Leaf selection - action scores:  [14.69096828  6.33767158  4.87513198  0.1218783   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  8
Leaf selection - action scores:  [14.87494512  3.0273627   2.30079565  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  9
Leaf selection - action scores:  [14.90490242  6.25589174  4.81222442  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  10
Leaf selection - action scores:  [15.02482518  6.21459828  3.82436817  0.11951151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  11
Leaf selection - action scores:  [14.98616619 12.93961762  7.83499783  0.11871209  0.11871209]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  12
Leaf selection - action scores:  [15.3391304   1.41488702  1.41488702  0.35372175  0.2358145 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  13
Leaf selection - action scores:  [15.32086305  7.63823334 12.64646332  0.35129065  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  14
Leaf selection - action scores:  [15.59040114  6.00387233  3.69469066  0.80821358  0.11545908]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  15
Leaf selection - action scores:  [15.62792507  9.70219539 12.38019216  0.22926282  0.11463141]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  16
Leaf selection - action scores:  [16.076924    1.69436802  1.01662081  0.45183147  0.11295787]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  17
Leaf selection - action scores:  [16.0218716   9.52949702  5.82980994  0.22422346  0.11211173]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  18
Leaf selection - action scores:  [16.30077802  3.56029301  2.78147891  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  19
Leaf selection - action scores:  [16.24703486 12.03359996  5.74079998  0.4416      0.1104    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  20
Leaf selection - action scores:  [16.52038549  5.6957734   2.7383526   0.98580694  0.21906821]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  21
Leaf selection - action scores:  [16.73353067  3.47716187  2.06456486  0.10866131  0.10866131]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  22
Leaf selection - action scores:  [16.80240146  7.22135683  2.69453613  0.43112578  0.21556289]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  23
Leaf selection - action scores:  [16.84095105  8.96014909 14.75141892  0.96204906  0.21378868]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  24
Leaf selection - action scores:  [17.27482355  8.8536925   8.82820415  0.42039067  0.31529301]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  25
Leaf selection - action scores:  [17.40958431 11.25640204  8.7779282   0.51634872  0.20653949]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  26
Leaf selection - action scores:  [17.7322241   6.8570171   5.32186402  0.40937416  0.10234354]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  27
Leaf selection - action scores:  [17.94214666  5.2732615   5.2732615   0.4056355   0.10140888]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  28
Leaf selection - action scores:  [17.90712487 10.80237056 17.68193084  0.30139655  0.30139655]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  29
Leaf selection - action scores:  [18.53915205  5.12468902  3.94206848  0.19710342  0.09855171]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  30
Leaf selection - action scores:  [18.81734879  3.12258353  2.43951839  0.19516147  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  31
Leaf selection - action scores:  [18.95263324  5.02319998  3.86399999  0.2898      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  32
Leaf selection - action scores:  [19.07276439  6.31020748  6.31020748  0.66926443  0.0956092 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  33
Leaf selection - action scores:  [19.25963144  8.04168282  6.24413019  0.66225623  0.09460803]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  34
Leaf selection - action scores:  [19.06427854 16.47292301 16.47292301  0.46798077  0.28078846]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  35
Leaf selection - action scores:  [19.75912718  7.86872319  4.81380713  0.37029286  0.09257321]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  36
Leaf selection - action scores:  [20.12615256  4.76001988  2.929243    0.27461653  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  37
Leaf selection - action scores:  [20.18616244  7.69187536  7.69187536  0.45246326  0.09049265]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  38
Leaf selection - action scores:  [20.48642202  7.60190881  5.90265861  0.62603955  0.08943422]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  39
Leaf selection - action scores:  [21.01416094  2.20907785  1.67889917  0.17672623  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  40
Leaf selection - action scores:  [21.12957259  5.84768383  4.53850088  0.26183659  0.08727886]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  41
Leaf selection - action scores:  [21.55356833  2.75779111  2.75779111  0.25854292  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  42
Leaf selection - action scores:  [21.86688056  2.72220521  2.72220521  0.17013783  0.08506891]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  43
Leaf selection - action scores:  [22.14217395  3.44162703  3.44162703  0.41971061  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  44
Leaf selection - action scores:  [22.18418278 11.59199996  5.46479998  0.3312      0.0828    ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  45
Leaf selection - action scores:  [22.66234082  6.93956156  5.38836545  0.2449257   0.0816419 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  46
Leaf selection - action scores:  [22.8680824   8.77091781  8.77091781  0.32186854  0.08046714]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  47
Leaf selection - action scores:  [23.67337717  2.53679886  1.50622432  0.07927496  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  48
Leaf selection - action scores:  [23.71577729  8.50904013  6.63549001  0.23419377  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  49
Leaf selection - action scores:  [24.23013954  6.53098758  5.07111976  0.69151633  0.07683515]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  50
Leaf selection - action scores:  [24.57463445  8.23884268  6.42478558  0.22675714  0.15117143]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  51
Leaf selection - action scores:  [25.44683185  2.37808877  1.11472911  0.14863055  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  52
Leaf selection - action scores:  [25.90669929  2.33672755  2.33672755  0.07302274  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  53
Leaf selection - action scores:  [26.4553202   2.2946209   1.79267258  0.14341381  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  54
Leaf selection - action scores:  [26.94452699  3.65905639  2.25172701  0.14073294  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  55
Leaf selection - action scores:  [27.51566659  3.58799999  2.75999999  0.207       0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  56
Leaf selection - action scores:  [27.85829569  7.36904492  4.4619905   1.28451242  0.06760592]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  57
Leaf selection - action scores:  [28.65308715  7.21388975  2.64729899  0.46327732  0.06618247]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  58
Leaf selection - action scores:  [29.72548423  1.61819343  1.22982701  0.19418321  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  59
Leaf selection - action scores:  [30.06583455  8.85353621  2.52958177  0.5691559   0.06323954]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  60
Leaf selection - action scores:  [31.02124811  6.72698688  2.46861904  0.43200833  0.06171548]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  61
Leaf selection - action scores:  [32.3701842   0.90229208  0.90229208  0.06015281  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  62
Leaf selection - action scores:  [33.35443401  1.87355012  0.52693597  0.05854844  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  63
Leaf selection - action scores:  [34.4251399   2.33285315  0.85348286  0.05689886  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  64
Leaf selection - action scores:  [35.62010654  2.26319999  1.38        0.1104      0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  65
Leaf selection - action scores:  [36.95783681  2.19133397  1.71030944  0.16034151  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  66
Leaf selection - action scores:  [38.6173191   1.29087179  0.98106256  0.05163487  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  67
Leaf selection - action scores:  [40.27765788  2.0400209   0.94537554  0.19902643  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  68
Leaf selection - action scores:  [42.08028399  2.48583931  2.48583931  0.14341381  0.0478046 ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  69
Leaf selection - action scores:  [44.58107461  1.8765463   0.86961902  0.09153884  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  70
Leaf selection - action scores:  [47.26964824  2.26925044  0.65459147  0.          0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  71
Leaf selection - action scores:  [5.03109248e+01 2.77379999e+00 1.65599999e+00 4.13999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  72
Leaf selection - action scores:  [54.42373779  1.60032406  1.60032406  0.15612918  0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  73
Leaf selection - action scores:  [59.5990659   1.49696609  0.9127842   0.1095341   0.        ]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  74
Leaf selection - action scores:  [6.65219718e+01 1.08169467e+00 3.04226625e-01 3.38029583e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  75
Leaf selection - action scores:  [7.60471954e+01 7.71443450e-01 5.86297022e-01 3.08577380e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  76
Leaf selection - action scores:  [9.06525330e+01 1.13160000e+00 8.83199997e-01 2.75999999e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  77
Leaf selection - action scores:  [1.18127120e+02 1.60145417e+00 1.19511505e-01 4.78046021e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  78
Leaf selection - action scores:  [1.93990502e+02 1.01483965e+00 1.36613030e-01 1.95161471e-02
 0.00000000e+00]  taking action:  0  corresponding to token:  ```
Leaf selection - depth:  79
Getting LLM token estimates (probs/ids).
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '``', '\n', 'module', "Here's"]
Probs: [99.47, 0.41, 0.12, 0.01, 0.0]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  ```

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.567140 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  101
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  101.0
Iteration TIME (sec):  0.01789298800000072
MCTS EXECUTION TIME (sec):  1.3595057779999995
----
 Tree depth: 0
 Node: action=None
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

• Child Action scores:[10.63210261 10.03051452  8.0604165   0.82927035  0.35576023]
• Child averaged monte carlo:-0.9901960784313726
• Child probablities:[8.00499743e+01 3.09400000e+00 1.87850000e+00 5.95000000e-02
 2.55257331e-02]
• Child visitation:[1 1 1 0 0]
• N=101.0,Q=-0.9901960784313726,M=-0.9901960784313726
----
 Tree depth: 1
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
• Child Action scores:[13.01334773 13.05295347 11.32211587  0.13521183  0.13521183]
• Child averaged monte carlo:-0.9895833333333334
• Child probablities:[8.802e+01 9.280e+00 2.660e+00 1.000e-02 1.000e-02]
• Child visitation:[1 1 1 0 0]
• N=95.0,Q=-0.9895833333333334,M=-0.9895833333333334
----
 Tree depth: 1
 Node: action=1
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``
• Child Action scores:[90.670933  1.4352    0.5244    0.        0.      ]
• Child averaged monte carlo:-0.75
• Child probablities:[99.28  0.52  0.19  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 1
 Node: action=2
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );


• Child Action scores:[1.16011767e+02 5.47362694e+00 4.54143720e-01 4.78046021e-02
 2.39023011e-02]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.749e+01 2.290e+00 1.900e-01 2.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````
• Child Action scores:[13.89026017 14.00418729  8.26993135  0.          0.        ]
• Child averaged monte carlo:-0.9882352941176471
• Child probablities:[97.06  2.28  0.65  0.    0.  ]
• Child visitation:[1 1 0 0 0]
• N=84.0,Q=-0.9882352941176471,M=-0.9882352941176471
----
 Tree depth: 2
 Node: action=1
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````
• Child Action scores:[4.64555498e+01 3.10913999e+01 4.22279999e+00 4.13999999e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.8888888888888888
• Child probablities:[9.146e+01 7.510e+00 1.020e+00 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=8.0,Q=-0.8888888888888888,M=-0.8888888888888888
----
 Tree depth: 2
 Node: action=2
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```

• Child Action scores:[1.18915896e+02 1.67316107e-01 2.39023011e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.992e+01 7.000e-02 1.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````
• Child Action scores:[1.08805223e+02 1.79506281e+01 2.43803471e+00 2.39023011e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.146e+01 7.510e+00 1.020e+00 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 2
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

```
• Child Action scores:[172.07386892  11.00710696  11.00710696   0.42935524   0.19516147]
• Child averaged monte carlo:-0.5
• Child probablities:[88.17  5.64  5.64  0.22  0.1 ]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````
• Child Action scores:[14.30605767  2.38875568  0.7543439   0.          0.        ]
• Child averaged monte carlo:-0.9879518072289156
• Child probablities:[9.975e+01 1.900e-01 6.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=82.0,Q=-0.9879518072289156,M=-0.9879518072289156
----
 Tree depth: 3
 Node: action=1
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````
• Child Action scores:[1.94927277e+02 1.36613030e-01 7.80645884e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.5
• Child probablities:[9.988e+01 7.000e-02 4.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````
• Child Action scores:[54.8363649   0.27322606  0.15612918  0.          0.        ]
• Child averaged monte carlo:-0.875
• Child probablities:[9.988e+01 7.000e-02 4.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=7.0,Q=-0.875,M=-0.875
----
 Tree depth: 3
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```
```
• Child Action scores:[1.94595503e+02 3.70806795e-01 1.75645324e-01 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.5
• Child probablities:[9.971e+01 1.900e-01 9.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````
• Child Action scores:[1.94810180e+02 2.92742206e-01 5.85484413e-02 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.5
• Child probablities:[9.982e+01 1.500e-01 3.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````
• Child Action scores:[14.42152558  0.8747502   0.49985726  0.          0.        ]
• Child averaged monte carlo:-0.9878048780487805
• Child probablities:[9.988e+01 7.000e-02 4.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=81.0,Q=-0.9878048780487805,M=-0.9878048780487805
----
 Tree depth: 4
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````
• Child Action scores:[59.7511966   0.9127842   0.69371599  0.          0.        ]
• Child averaged monte carlo:-0.8571428571428571
• Child probablities:[99.56  0.25  0.19  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=6.0,Q=-0.8571428571428571,M=-0.8571428571428571
----
 Tree depth: 5
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````
• Child Action scores:[14.49558243  1.86299999  1.49039999  0.          0.        ]
• Child averaged monte carlo:-0.9876543209876543
• Child probablities:[99.73  0.15  0.12  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=80.0,Q=-0.9876543209876543,M=-0.9876543209876543
----
 Tree depth: 5
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````
• Child Action scores:[6.66098595e+01 6.42256208e-01 3.04226625e-01 3.38029583e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.8333333333333334
• Child probablities:[9.971e+01 1.900e-01 9.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=5.0,Q=-0.8333333333333334,M=-0.8333333333333334
----
 Tree depth: 6
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````
• Child Action scores:[14.56808302  3.0857738   2.34518809  0.          0.        ]
• Child averaged monte carlo:-0.9875
• Child probablities:[99.56  0.25  0.19  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=79.0,Q=-0.9875,M=-0.9875
----
 Tree depth: 6
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````
• Child Action scores:[76.28634287  0.27771964  0.12343095  0.          0.        ]
• Child averaged monte carlo:-0.8
• Child probablities:[9.986e+01 9.000e-02 4.000e-02 0.000e+00 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=-0.8,M=-0.8
----
 Tree depth: 7
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````
• Child Action scores:[14.5886975   6.37816829  4.9062833   0.12265708  0.        ]
• Child averaged monte carlo:-0.9873417721518988
• Child probablities:[9.905e+01 5.200e-01 4.000e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=78.0,Q=-0.9873417721518988,M=-0.9873417721518988
----
 Tree depth: 7
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````
• Child Action scores:[90.845733  1.1316    0.3312    0.        0.      ]
• Child averaged monte carlo:-0.75
• Child probablities:[99.47  0.41  0.12  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 8
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````
• Child Action scores:[14.77011003  3.04695749  2.31568769  0.          0.        ]
• Child averaged monte carlo:-0.9871794871794872
• Child probablities:[99.55  0.25  0.19  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=77.0,Q=-0.9871794871794872,M=-0.9871794871794872
----
 Tree depth: 8
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````
• Child Action scores:[1.18557362e+02 5.97557527e-01 2.86827613e-01 2.39023011e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.962e+01 2.500e-01 1.200e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 9
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````
• Child Action scores:[14.79846438  6.29691442  4.84378033  0.          0.        ]
• Child averaged monte carlo:-0.987012987012987
• Child probablities:[99.07  0.52  0.4   0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=76.0,Q=-0.987012987012987,M=-0.987012987012987
----
 Tree depth: 9
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````
• Child Action scores:[1.94341793e+02 4.87903677e-01 2.92742206e-01 3.90322942e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.5
• Child probablities:[9.958e+01 2.500e-01 1.500e-01 2.000e-02 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 10
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````
• Child Action scores:[14.91613094  6.25589174  3.84977953  0.12030561  0.        ]
• Child averaged monte carlo:-0.9868421052631579
• Child probablities:[9.914e+01 5.200e-01 3.200e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=75.0,Q=-0.9868421052631579,M=-0.9868421052631579
----
 Tree depth: 11
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````
• Child Action scores:[14.8762433  13.02675408  7.88775935  0.11951151  0.11951151]
• Child averaged monte carlo:-0.9866666666666667
• Child probablities:[9.822e+01 1.090e+00 6.600e-01 1.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=74.0,Q=-0.9866666666666667,M=-0.9866666666666667
----
 Tree depth: 12
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````
• Child Action scores:[15.22521656  1.42454506  1.42454506  0.35613626  0.23742418]
• Child averaged monte carlo:-0.9864864864864865
• Child probablities:[9.969e+01 1.200e-01 1.200e-01 3.000e-02 2.000e-02]
• Child visitation:[1 0 0 0 0]
• N=73.0,Q=-0.9864864864864865,M=-0.9864864864864865
----
 Tree depth: 13
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````
• Child Action scores:[15.20225192  7.69455396 12.73398314  0.35372175  0.        ]
• Child averaged monte carlo:-0.9863013698630136
• Child probablities:[9.748e+01 1.390e+00 1.080e+00 3.000e-02 0.000e+00]
• Child visitation:[1 1 0 0 0]
• N=72.0,Q=-0.9863013698630136,M=-0.9863013698630136
----
 Tree depth: 14
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````
• Child Action scores:[15.4696895   6.04660506  3.72098773  0.81396607  0.11628087]
• Child averaged monte carlo:-0.9859154929577465
• Child probablities:[9.906e+01 5.200e-01 3.200e-01 7.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=70.0,Q=-0.9859154929577465,M=-0.9859154929577465
----
 Tree depth: 14
 Node: action=1
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````

• Child Action scores:[1.92643888e+02 1.65887250e+00 7.80645884e-01 3.90322942e-02
 1.95161471e-02]
• Child averaged monte carlo:-0.5
• Child probablities:[9.871e+01 8.500e-01 4.000e-01 2.000e-02 1.000e-02]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 15
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````
• Child Action scores:[15.50158382  9.77585841 12.46958099  0.23091817  0.11545908]
• Child averaged monte carlo:-0.9857142857142858
• Child probablities:[9.71e+01 1.78e+00 1.08e+00 2.00e-02 1.00e-02]
• Child visitation:[1 1 0 0 0]
• N=69.0,Q=-0.9857142857142858,M=-0.9857142857142858
----
 Tree depth: 16
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````
• Child Action scores:[15.94700625  1.70696572  1.02417943  0.45519086  0.11379771]
• Child averaged monte carlo:-0.9852941176470589
• Child probablities:[9.969e+01 1.500e-01 9.000e-02 4.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=67.0,Q=-0.9852941176470589,M=-0.9852941176470589
----
 Tree depth: 16
 Node: action=1
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````

• Child Action scores:[1.87179367e+02 4.41064924e+00 3.43484189e+00 1.36613030e-01
 0.00000000e+00]
• Child averaged monte carlo:-0.5
• Child probablities:[9.591e+01 2.260e+00 1.760e+00 7.000e-02 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 17
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````
• Child Action scores:[15.89037237  9.60141877  5.87380913  0.22591574  0.11295787]
• Child averaged monte carlo:-0.9850746268656716
• Child probablities:[9.86e+01 8.50e-01 5.20e-01 2.00e-02 1.00e-02]
• Child visitation:[1 0 0 0 0]
• N=66.0,Q=-0.9850746268656716,M=-0.9850746268656716
----
 Tree depth: 18
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````
• Child Action scores:[16.16502965  3.58757535  2.80279324  0.          0.        ]
• Child averaged monte carlo:-0.9848484848484849
• Child probablities:[99.43  0.32  0.25  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=65.0,Q=-0.9848484848484849,M=-0.9848484848484849
----
 Tree depth: 19
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````
• Child Action scores:[16.10955135 12.12724806  5.78547614  0.44503663  0.11125916]
• Child averaged monte carlo:-0.9846153846153847
• Child probablities:[9.833e+01 1.090e+00 5.200e-01 4.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=64.0,Q=-0.9846153846153847,M=-0.9846153846153847
----
 Tree depth: 20
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````
• Child Action scores:[16.37846343  5.74079998  2.75999999  0.9936      0.2208    ]
• Child averaged monte carlo:-0.984375
• Child probablities:[9.908e+01 5.200e-01 2.500e-01 9.000e-02 2.000e-02]
• Child visitation:[1 0 0 0 0]
• N=63.0,Q=-0.984375,M=-0.984375
----
 Tree depth: 21
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````
• Child Action scores:[16.5875193   3.50509132  2.08114797  0.1095341   0.1095341 ]
• Child averaged monte carlo:-0.9841269841269841
• Child probablities:[9.946e+01 3.200e-01 1.900e-01 1.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=62.0,Q=-0.9841269841269841,M=-0.9841269841269841
----
 Tree depth: 22
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````
• Child Action scores:[16.65337069  7.28030766  2.71653271  0.43464523  0.21732262]
• Child averaged monte carlo:-0.9838709677419355
• Child probablities:[9.901e+01 6.700e-01 2.500e-01 4.000e-02 2.000e-02]
• Child visitation:[1 0 0 0 0]
• N=61.0,Q=-0.9838709677419355,M=-0.9838709677419355
----
 Tree depth: 23
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````
• Child Action scores:[16.68397216  9.0386579  14.87383943  0.97003301  0.21556289]
• Child averaged monte carlo:-0.9836065573770492
• Child probablities:[9.671e+01 1.770e+00 1.380e+00 9.000e-02 2.000e-02]
• Child visitation:[1 1 0 0 0]
• N=60.0,Q=-0.9836065573770492,M=-0.9836065573770492
----
 Tree depth: 24
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````
• Child Action scores:[17.10817826  8.93398317  8.90398412  0.42399924  0.31799943]
• Child averaged monte carlo:-0.9830508474576272
• Child probablities:[9.728e+01 1.780e+00 8.400e-01 4.000e-02 3.000e-02]
• Child visitation:[1 1 0 0 0]
• N=58.0,Q=-0.9830508474576272,M=-0.9830508474576272
----
 Tree depth: 24
 Node: action=1
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````

• Child Action scores:[1.90067757e+02 2.71274445e+00 2.10774389e+00 2.14677618e-01
 1.95161471e-02]
• Child averaged monte carlo:-0.5
• Child probablities:[9.739e+01 1.390e+00 1.080e+00 1.100e-01 1.000e-02]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 25
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````
• Child Action scores:[17.24140476 11.35646092  8.85595576  0.52093857  0.20837543]
• Child averaged monte carlo:-0.9824561403508771
• Child probablities:[9.795e+01 1.090e+00 8.500e-01 5.000e-02 2.000e-02]
• Child visitation:[1 0 0 0 0]
• N=56.0,Q=-0.9824561403508771,M=-0.9824561403508771
----
 Tree depth: 25
 Node: action=1
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````

• Child Action scores:[1.89599369e+02 2.71274445e+00 2.71274445e+00 7.80645884e-02
 3.90322942e-02]
• Child averaged monte carlo:-0.5
• Child probablities:[9.715e+01 1.390e+00 1.390e+00 4.000e-02 2.000e-02]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 26
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````
• Child Action scores:[17.55791721  6.91907282  5.37002666  0.41307897  0.10326974]
• Child averaged monte carlo:-0.9821428571428571
• Child probablities:[9.874e+01 6.700e-01 5.200e-01 4.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=55.0,Q=-0.9821428571428571,M=-0.9821428571428571
----
 Tree depth: 27
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[17.76254811  5.32186402  5.32186402  0.40937416  0.10234354]
• Child averaged monte carlo:-0.9818181818181818
• Child probablities:[9.89e+01 5.20e-01 5.20e-01 4.00e-02 1.00e-02]
• Child visitation:[1 0 0 0 0]
• N=54.0,Q=-0.9818181818181818,M=-0.9818181818181818
----
 Tree depth: 28
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[17.7174672  10.90849844 17.847962    0.30422663  0.30422663]
• Child averaged monte carlo:-0.9814814814814815
• Child probablities:[9.588e+01 2.250e+00 1.760e+00 3.000e-02 3.000e-02]
• Child visitation:[1 1 0 0 0]
• N=53.0,Q=-0.9814814814814815,M=-0.9814814814814815
----
 Tree depth: 29
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[18.34273268  5.17468717  3.98052859  0.19902643  0.09951321]
• Child averaged monte carlo:-0.9807692307692307
• Child probablities:[9.903e+01 5.200e-01 4.000e-01 2.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=51.0,Q=-0.9807692307692307,M=-0.9807692307692307
----
 Tree depth: 29
 Node: action=1
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````

• Child Action scores:[1.94810180e+02 2.34193765e-01 1.17096883e-01 0.00000000e+00
 0.00000000e+00]
• Child averaged monte carlo:-0.5
• Child probablities:[9.982e+01 1.200e-01 6.000e-02 0.000e+00 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 30
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[18.61405136  3.15365478  2.4637928   0.19710342  0.        ]
• Child averaged monte carlo:-0.9803921568627451
• Child probablities:[9.941e+01 3.200e-01 2.500e-01 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=50.0,Q=-0.9803921568627451,M=-0.9803921568627451
----
 Tree depth: 31
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[18.74366538  5.07419824  3.90322942  0.29274221  0.        ]
• Child averaged monte carlo:-0.98
• Child probablities:[9.904e+01 5.200e-01 4.000e-01 3.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=49.0,Q=-0.98,M=-0.98
----
 Tree depth: 32
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[18.85804574  6.37559998  6.37559998  0.6762      0.0966    ]
• Child averaged monte carlo:-0.9795918367346939
• Child probablities:[9.857e+01 6.600e-01 6.600e-01 7.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=48.0,Q=-0.9795918367346939,M=-0.9795918367346939
----
 Tree depth: 33
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[19.03818233  8.12678236  6.31020748  0.66926443  0.0956092 ]
• Child averaged monte carlo:-0.9791666666666666
• Child probablities:[9.84e+01 8.50e-01 6.60e-01 7.00e-02 1.00e-02]
• Child visitation:[1 0 0 0 0]
• N=47.0,Q=-0.9791666666666666,M=-0.9791666666666666
----
 Tree depth: 34
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[18.84006538 16.65101384 16.65101384  0.47304017  0.2838241 ]
• Child averaged monte carlo:-0.9787234042553191
• Child probablities:[9.636e+01 1.760e+00 1.760e+00 5.000e-02 3.000e-02]
• Child visitation:[1 0 0 0 0]
• N=46.0,Q=-0.9787234042553191,M=-0.9787234042553191
----
 Tree depth: 35
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[19.52185974  7.95567304  4.86699998  0.37438461  0.09359615]
• Child averaged monte carlo:-0.9782608695652174
• Child probablities:[9.856e+01 8.500e-01 5.200e-01 4.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=45.0,Q=-0.9782608695652174,M=-0.9782608695652174
----
 Tree depth: 36
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[19.87905157  4.81380713  2.96234285  0.27771964  0.        ]
• Child averaged monte carlo:-0.9777777777777777
• Child probablities:[9.913e+01 5.200e-01 3.200e-01 3.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=44.0,Q=-0.9777777777777777,M=-0.9777777777777777
----
 Tree depth: 37
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[19.93243082  7.78080173  7.78080173  0.45769422  0.09153884]
• Child averaged monte carlo:-0.9772727272727273
• Child probablities:[9.822e+01 8.500e-01 8.500e-01 5.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=43.0,Q=-0.9772727272727273,M=-0.9772727272727273
----
 Tree depth: 38
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[20.22279042  7.69187536  5.97251499  0.63344856  0.09049265]
• Child averaged monte carlo:-0.9767441860465116
• Child probablities:[9.839e+01 8.500e-01 6.600e-01 7.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=42.0,Q=-0.9767441860465116,M=-0.9767441860465116
----
 Tree depth: 39
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[20.7372741   2.23585553  1.69925021  0.17886844  0.        ]
• Child averaged monte carlo:-0.9761904761904762
• Child probablities:[9.954e+01 2.500e-01 1.900e-01 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=41.0,Q=-0.9761904761904762,M=-0.9761904761904762
----
 Tree depth: 40
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[20.84406194  5.92032865  4.59488194  0.26508934  0.08836311]
• Child averaged monte carlo:-0.975609756097561
• Child probablities:[9.877e+01 6.700e-01 5.200e-01 3.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=40.0,Q=-0.975609756097561,M=-0.975609756097561
----
 Tree depth: 41
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[21.25489608  2.79292362  2.79292362  0.26183659  0.        ]
• Child averaged monte carlo:-0.975
• Child probablities:[9.933e+01 3.200e-01 3.200e-01 3.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=39.0,Q=-0.975,M=-0.975
----
 Tree depth: 42
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[21.55583625  2.75779111  2.75779111  0.17236194  0.08618097]
• Child averaged monte carlo:-0.9743589743589743
• Child probablities:[9.934e+01 3.200e-01 3.200e-01 2.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=38.0,Q=-0.9743589743589743,M=-0.9743589743589743
----
 Tree depth: 43
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[21.8185982   3.48782543  3.48782543  0.42534456  0.        ]
• Child averaged monte carlo:-0.9736842105263158
• Child probablities:[9.913e+01 4.100e-01 4.100e-01 5.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=37.0,Q=-0.9736842105263158,M=-0.9736842105263158
----
 Tree depth: 44
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[21.85070824 11.75189717  5.54018009  0.33576849  0.08394212]
• Child averaged monte carlo:-0.972972972972973
• Child probablities:[9.788e+01 1.400e+00 6.600e-01 4.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=36.0,Q=-0.972972972972973,M=-0.972972972972973
----
 Tree depth: 45
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[22.31193135  7.03799998  5.46479998  0.2484      0.0828    ]
• Child averaged monte carlo:-0.9722222222222222
• Child probablities:[9.842e+01 8.500e-01 6.600e-01 3.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=35.0,Q=-0.9722222222222222,M=-0.9722222222222222
----
 Tree depth: 46
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[22.50385948  8.89896718  8.89896718  0.3265676   0.0816419 ]
• Child averaged monte carlo:-0.9714285714285714
• Child probablities:[9.776e+01 1.090e+00 1.090e+00 4.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=34.0,Q=-0.9714285714285714,M=-0.9714285714285714
----
 Tree depth: 47
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[23.28504847  2.57494835  1.52887558  0.08046714  0.        ]
• Child averaged monte carlo:-0.9705882352941176
• Child probablities:[9.947e+01 3.200e-01 1.900e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=33.0,Q=-0.9705882352941176,M=-0.9705882352941176
----
 Tree depth: 48
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[23.31416249  8.6409711   6.73837196  0.23782489  0.        ]
• Child averaged monte carlo:-0.9696969696969697
• Child probablities:[9.802e+01 1.090e+00 8.500e-01 3.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=32.0,Q=-0.9696969696969697,M=-0.9696969696969697
----
 Tree depth: 49
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[23.80643295  6.63549001  5.15226283  0.7025813   0.07806459]
• Child averaged monte carlo:-0.96875
• Child probablities:[9.838e+01 8.500e-01 6.600e-01 9.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=31.0,Q=-0.96875,M=-0.96875
----
 Tree depth: 50
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[24.13025385  8.37503113  6.53098758  0.23050544  0.1536703 ]
• Child averaged monte carlo:-0.967741935483871
• Child probablities:[9.799e+01 1.090e+00 8.500e-01 3.000e-02 2.000e-02]
• Child visitation:[1 0 0 0 0]
• N=30.0,Q=-0.967741935483871,M=-0.967741935483871
----
 Tree depth: 51
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[24.97080784  2.41874281  1.13378569  0.15117143  0.        ]
• Child averaged monte carlo:-0.9666666666666667
• Child probablities:[9.951e+01 3.200e-01 1.500e-01 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=29.0,Q=-0.9666666666666667,M=-0.9666666666666667
----
 Tree depth: 52
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[25.40436598  2.37808877  2.37808877  0.07431527  0.        ]
• Child averaged monte carlo:-0.9655172413793104
• Child probablities:[9.935e+01 3.200e-01 3.200e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=28.0,Q=-0.9655172413793104,M=-0.9655172413793104
----
 Tree depth: 53
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[25.92292657  2.33672755  1.8255684   0.14604547  0.        ]
• Child averaged monte carlo:-0.9642857142857143
• Child probablities:[9.941e+01 3.200e-01 2.500e-01 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=27.0,Q=-0.9642857142857143,M=-0.9642857142857143
----
 Tree depth: 54
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[26.38085534  3.72875897  2.2946209   0.14341381  0.        ]
• Child averaged monte carlo:-0.9629629629629629
• Child probablities:[9.914e+01 5.200e-01 3.200e-01 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=26.0,Q=-0.9629629629629629,M=-0.9629629629629629
----
 Tree depth: 55
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[26.9163804   3.65905639  2.81465876  0.21109941  0.        ]
• Child averaged monte carlo:-0.9615384615384616
• Child probablities:[9.904e+01 5.200e-01 4.000e-01 3.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=25.0,Q=-0.9615384615384616,M=-0.9615384615384616
----
 Tree depth: 56
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[27.22529159  7.52099997  4.55399998  1.311       0.069     ]
• Child averaged monte carlo:-0.96
• Child probablities:[9.803e+01 1.090e+00 6.600e-01 1.900e-01 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=24.0,Q=-0.96,M=-0.96
----
 Tree depth: 57
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[27.97293181  7.36904492  2.70423667  0.47324142  0.06760592]
• Child averaged monte carlo:-0.9583333333333334
• Child probablities:[9.842e+01 1.090e+00 4.000e-01 7.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=23.0,Q=-0.9583333333333334,M=-0.9583333333333334
----
 Tree depth: 58
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[28.98700782  1.65456187  1.25746702  0.19854742  0.        ]
• Child averaged monte carlo:-0.9565217391304348
• Child probablities:[9.953e+01 2.500e-01 1.900e-01 3.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=22.0,Q=-0.9565217391304348,M=-0.9565217391304348
----
 Tree depth: 59
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[29.28163689  9.06188322  2.58910949  0.58254964  0.06472774]
• Child averaged monte carlo:-0.9545454545454546
• Child probablities:[9.809e+01 1.400e+00 4.000e-01 9.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=21.0,Q=-0.9545454545454546,M=-0.9545454545454546
----
 Tree depth: 60
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[30.1701798   6.89311034  2.52958177  0.44267681  0.06323954]
• Child averaged monte carlo:-0.9523809523809523
• Child probablities:[9.842e+01 1.090e+00 4.000e-01 7.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=20.0,Q=-0.9523809523809523,M=-0.9523809523809523
----
 Tree depth: 61
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[31.43376734  0.92573214  0.92573214  0.06171548  0.        ]
• Child averaged monte carlo:-0.95
• Child probablities:[9.969e+01 1.500e-01 1.500e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=19.0,Q=-0.95,M=-0.95
----
 Tree depth: 62
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[32.33342415  1.92488977  0.54137525  0.06015281  0.        ]
• Child averaged monte carlo:-0.9473684210526315
• Child probablities:[9.958e+01 3.200e-01 9.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=18.0,Q=-0.9473684210526315,M=-0.9473684210526315
----
 Tree depth: 63
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[33.30621765  2.40048609  0.87822662  0.05854844  0.        ]
• Child averaged monte carlo:-0.9444444444444444
• Child probablities:[9.944e+01 4.100e-01 1.500e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=17.0,Q=-0.9444444444444444,M=-0.9444444444444444
----
 Tree depth: 64
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[34.38602193  2.33285315  1.42247144  0.11379771  0.        ]
• Child averaged monte carlo:-0.9411764705882353
• Child probablities:[9.933e+01 4.100e-01 2.500e-01 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=16.0,Q=-0.9411764705882353,M=-0.9411764705882353
----
 Tree depth: 65
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[35.58698654  2.26319999  1.76639999  0.1656      0.        ]
• Child averaged monte carlo:-0.9375
• Child probablities:[9.924e+01 4.100e-01 3.200e-01 3.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=15.0,Q=-0.9375,M=-0.9375
----
 Tree depth: 66
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[37.07618412  1.33617925  1.01549623  0.05344717  0.        ]
• Child averaged monte carlo:-0.9333333333333333
• Child probablities:[9.955e+01 2.500e-01 1.900e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=14.0,Q=-0.9333333333333333,M=-0.9333333333333333
----
 Tree depth: 67
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[38.53788084  2.11702974  0.98106256  0.20653949  0.        ]
• Child averaged monte carlo:-0.9285714285714286
• Child probablities:[9.935e+01 4.100e-01 1.900e-01 4.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=13.0,Q=-0.9285714285714286,M=-0.9285714285714286
----
 Tree depth: 68
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[40.09936337  2.58734359  2.58734359  0.14926982  0.04975661]
• Child averaged monte carlo:-0.9230769230769231
• Child probablities:[9.892e+01 5.200e-01 5.200e-01 3.000e-02 1.000e-02]
• Child visitation:[1 0 0 0 0]
• N=12.0,Q=-0.9230769230769231,M=-0.9230769230769231
----
 Tree depth: 69
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[42.27584827  1.95998869  0.90828744  0.0956092   0.        ]
• Child averaged monte carlo:-0.9166666666666666
• Child probablities:[9.937e+01 4.100e-01 1.900e-01 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=11.0,Q=-0.9166666666666666,M=-0.9166666666666666
----
 Tree depth: 70
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[44.5581899   2.38000994  0.68654133  0.          0.        ]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[99.32  0.52  0.15  0.    0.  ]
• Child visitation:[1 0 0 0 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 71
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[4.70708464e+01 2.92384191e+00 1.74557726e+00 4.36394316e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.9
• Child probablities:[9.891e+01 6.700e-01 4.000e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=9.0,Q=-0.9,M=-0.9
----
 Tree depth: 72
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[50.42994982  1.69739999  1.69739999  0.1656      0.        ]
• Child averaged monte carlo:-0.8888888888888888
• Child probablities:[9.914e+01 4.100e-01 4.100e-01 4.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=8.0,Q=-0.8888888888888888,M=-0.8888888888888888
----
 Tree depth: 73
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[54.5185305   1.60032406  0.97580735  0.11709688  0.        ]
• Child averaged monte carlo:-0.875
• Child probablities:[9.931e+01 4.100e-01 2.500e-01 3.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=7.0,Q=-0.875,M=-0.875
----
 Tree depth: 74
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[5.97633671e+01 1.16836377e+00 3.28602312e-01 3.65113680e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.8571428571428571
• Child probablities:[9.958e+01 3.200e-01 9.000e-02 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=6.0,Q=-0.8571428571428571,M=-0.8571428571428571
----
 Tree depth: 75
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[6.65016900e+01 8.45073958e-01 6.42256208e-01 3.38029583e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.8333333333333334
• Child probablities:[9.955e+01 2.500e-01 1.900e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=5.0,Q=-0.8333333333333334,M=-0.8333333333333334
----
 Tree depth: 76
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[7.58234768e+01 1.26516726e+00 9.87447615e-01 3.08577380e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.8
• Child probablities:[9.926e+01 4.100e-01 3.200e-01 1.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=4.0,Q=-0.8,M=-0.8
----
 Tree depth: 77
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[9.06525330e+01 1.84919999e+00 1.38000000e-01 5.51999998e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.75
• Child probablities:[9.926e+01 6.700e-01 5.000e-02 2.000e-02 0.000e+00]
• Child visitation:[1 0 0 0 0]
• N=3.0,Q=-0.75,M=-0.75
----
 Tree depth: 78
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[1.18294436e+02 1.24291966e+00 1.67316107e-01 2.39023011e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.6666666666666666
• Child probablities:[9.94e+01 5.20e-01 7.00e-02 1.00e-02 0.00e+00]
• Child visitation:[1 0 0 0 0]
• N=2.0,Q=-0.6666666666666666,M=-0.6666666666666666
----
 Tree depth: 79
 Node: action=0
• state:// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
• Child Action scores:[1.94127115e+02 8.00162031e-01 2.34193765e-01 1.95161471e-02
 0.00000000e+00]
• Child averaged monte carlo:-0.5
• Child probablities:[9.947e+01 4.100e-01 1.200e-01 1.000e-02 0.000e+00]
• Child visitation:[0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
END ROBUST/MAX VALUES:
Adding child.
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.61, 0.19, 0.19, 0.01, 0.0]
Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.549928 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  102
Trimming the result to last instance of endmodule...
Running getPromptScore: 
getLLMestimates: prior state:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Tokens: ['```', '\n', '``', 'module', "Here's"]
Probs: [99.61, 0.19, 0.19, 0.01, 0.0]
Getting terminal state (rollout). Temp:  0
Current prompt:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
API response time: 0.599608 seconds
Initiating comile/functionality check.
VERILOG CODE:
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````assign out = in[sel*4 +: 4];
endmodule
Compilation check...
Verilog compilation failed, error:  2
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: warning: macro assign undefined (and assumed null) at this point.\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: syntax error\n/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/github_mcts/MCTS/mcts_dump_gpt4o//97194_top_module/97194_top_module.v:12: error: invalid module item.\n'
Rollout raw response:  ```verilog
    assign out = in[sel*4 +: 4];
endmodule
```
Depth of rollout:  102
Trimming the result to last instance of endmodule...
Running getPromptScore: 
MCTS Total Time:  117.642995
