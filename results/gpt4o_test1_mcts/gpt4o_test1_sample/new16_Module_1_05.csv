Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,0,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,1,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,2,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,3,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,4,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,5,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,6,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,7,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,8,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,9,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,10,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,11,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,12,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,13,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,14,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,15,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,16,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,17,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,18,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,19,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,20,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,21,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,22,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,23,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,24,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,25,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,26,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,27,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,28,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,29,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,30,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,31,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,32,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,33,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,34,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,35,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,36,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,37,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,38,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,39,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,40,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,41,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,42,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,43,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,44,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,45,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,46,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,47,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,48,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,49,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,50,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,51,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,52,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,53,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,54,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,55,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,56,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,57,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,58,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,59,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,60,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,61,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,62,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,63,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,64,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,65,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,66,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,67,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,68,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,69,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,70,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,71,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,72,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,73,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,74,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,75,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,76,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,77,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,78,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,79,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,80,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,81,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,82,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,83,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,84,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,85,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,86,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,87,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,88,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,89,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a),
        .in2(b),
        .out(out)
    );
endmodule"
N/A,N/A,-1,90,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,91,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,92,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,93,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,94,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,95,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,96,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,97,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,98,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
N/A,N/A,-1,99,0,"// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
verilog
    mod_a instance_name (
        .in1(a), 
        .in2(b), 
        .out(out)
    );
endmodule"
