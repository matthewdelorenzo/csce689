Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,0,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,1,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,2,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,3,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,4,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,5,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,6,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,7,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,8,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,9,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,10,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,11,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,12,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,13,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,14,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,15,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,16,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,17,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,18,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] cout_intermediate;

    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout_intermediate[0]),
        .sum(sum[3:0])
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout_intermediate[0]),
        .cout(cout_intermediate[1]),
        .sum(sum[7:4])
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout_intermediate[1]),
        .cout(cout_intermediate[2]),
        .sum(sum[11:8])
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout_intermediate[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,19,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,20,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,21,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,22,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,23,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,24,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,25,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,26,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,27,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,28,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,29,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Concatenate the sums and assign the final carry-out
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,30,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,31,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,32,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] cout_intermediate;

    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout_intermediate[0]),
        .sum(sum[3:0])
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout_intermediate[0]),
        .cout(cout_intermediate[1]),
        .sum(sum[7:4])
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout_intermediate[1]),
        .cout(cout_intermediate[2]),
        .sum(sum[11:8])
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout_intermediate[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,33,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,34,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,35,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,36,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,37,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,38,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,39,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,40,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,41,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,42,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] cout_intermediate;

    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout_intermediate[0]),
        .sum(sum[3:0])
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout_intermediate[0]),
        .cout(cout_intermediate[1]),
        .sum(sum[7:4])
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout_intermediate[1]),
        .cout(cout_intermediate[2]),
        .sum(sum[11:8])
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout_intermediate[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,43,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,44,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,45,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,46,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,47,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,48,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,49,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] cout_intermediate;

    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout_intermediate[0]),
        .sum(sum[3:0])
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout_intermediate[0]),
        .cout(cout_intermediate[1]),
        .sum(sum[7:4])
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout_intermediate[1]),
        .cout(cout_intermediate[2]),
        .sum(sum[11:8])
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout_intermediate[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,50,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,51,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,52,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] cout_intermediate;

    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout_intermediate[0]),
        .sum(sum[3:0])
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout_intermediate[0]),
        .cout(cout_intermediate[1]),
        .sum(sum[7:4])
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout_intermediate[1]),
        .cout(cout_intermediate[2]),
        .sum(sum[11:8])
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout_intermediate[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,53,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,54,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,55,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,56,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,57,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,58,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,59,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,60,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,61,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,62,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,63,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,64,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,65,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,66,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,67,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,68,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,69,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,70,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,71,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,72,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,73,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,74,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,75,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,76,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,77,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,78,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,79,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,80,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,81,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,82,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,83,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,84,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,85,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,86,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] cout_intermediate;

    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout_intermediate[0]),
        .sum(sum[3:0])
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout_intermediate[0]),
        .cout(cout_intermediate[1]),
        .sum(sum[7:4])
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout_intermediate[1]),
        .cout(cout_intermediate[2]),
        .sum(sum[11:8])
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout_intermediate[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,87,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,88,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four BCD adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,89,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,90,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] carry;

    bcd_fadd digit0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(carry[0]),
        .sum(sum[3:0])
    );

    bcd_fadd digit1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(carry[0]),
        .cout(carry[1]),
        .sum(sum[7:4])
    );

    bcd_fadd digit2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(carry[1]),
        .cout(carry[2]),
        .sum(sum[11:8])
    );

    bcd_fadd digit3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(carry[2]),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule"
N/A,N/A,-1,91,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,92,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,93,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2, cout3;

    // Instantiate four bcd_fadd modules for each digit
    bcd_fadd u0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd u1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd u2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd u3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout3),
        .sum(sum3)
    );

    // Assign the final outputs
    assign sum = {sum3, sum2, sum1, sum0};
    assign cout = cout3;

endmodule"
N/A,N/A,-1,94,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,95,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,96,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,97,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,98,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
N/A,N/A,-1,99,0,"// You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.

// Hint: The BCD representation for the 5-digit decimal number 12345 is 20'h12345. This is not the same as 14'd12345 (which is 14'h3039).
// The circuit is structured just like a binary ripple-carry adder, except the adders are base-10 rather than base-2.


module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

wire [3:0] sum0, sum1, sum2, sum3;
    wire cout0, cout1, cout2;

    // Instantiate 4 BCD full adders
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(cout0),
        .sum(sum0)
    );

    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(cout0),
        .cout(cout1),
        .sum(sum1)
    );

    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(cout1),
        .cout(cout2),
        .sum(sum2)
    );

    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(cout2),
        .cout(cout),
        .sum(sum3)
    );

    // Concatenate the sums to form the 16-bit output sum
    assign sum = {sum3, sum2, sum1, sum0};

endmodule"
