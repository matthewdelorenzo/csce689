Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-0.1,2.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,3.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,4.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,5.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,6.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,7.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,8.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,9.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,10.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,11.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,12.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always @(posedge clk or posedge reset)
begin
    if (reset)
        cnt <= 4'b0000;
    else if (cnt == 4'b1001)
        cnt <= 4'b0000;
    else
        cnt <= cnt + 1'b1;
end

assign q = cnt;

endmodule"
N/A,N/A,-0.1,13.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,14.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
   //reg [3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,15.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,16.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always @(posedge clk or posedge reset)
begin
    if (reset)
        counter <= 4'b0000; // Reset counter to 0
    else if (counter == 4'b1001) // If counter is 9, reset to 0
        counter <= 4'b0000;
    else
        counter <= counter + 1'b1; // Increment counter
end

assign q = counter; // Assign output to counter

endmodule"
N/A,N/A,-0.1,17.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-0.1,18.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedge clk or posedge reset)
begin
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
end

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-1,19.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//always@(posedge clk or posedge reset)
    begin
        if (reset)
            q <= 4'b0000; // Reset the counter to 0
        else if (q == 4'b1001) // If the counter reaches 9
            q <= 4'b0000; // Reset the counter to 0
        else
            q <= q + 1'b1; // Increment the counter
    end
endmodule"
N/A,N/A,-0.1,20.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-0.1,21.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedge clk or posedge reset)
begin
    if (reset)
        counter <= 4'b0000; // Reset counter to 0
    else if (counter == 4'b1001) // If counter is 9
        counter <= 4'b0000; // Reset counter to 0
    else
        counter <= counter + 1'b1; // Increment counter
end

assign q = counter;

endmodule"
N/A,N/A,-1,22.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//initialbeginreg [3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,23.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclk or posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-0.1,24.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedge clk or posedge reset)
begin
    if (reset)
        cnt <= 4'b0000;
    else if (cnt == 4'b1001)
        cnt <= 4'b0000;
    else
        cnt <= cnt + 1'b1;
end

assign q = cnt;

endmodule"
N/A,N/A,-1,25.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkor posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,26.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the counter reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count;

endmodule"
N/A,N/A,-0.1,27.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedge clk or posedge reset)
begin
    if (reset)
        counter <= 4'b0000;
    else if (counter == 4'b1001)
        counter <= 4'b0000;
    else
        counter <= counter + 1'b1;
end

assign q = counter;

endmodule"
N/A,N/A,-1,28.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
   //reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,29.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,30.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]q_reg;

always @(posedge clk or posedge reset)
begin
    if (reset)
        q_reg <= 4'b0000;
    else if (q_reg == 4'b1001)
        q_reg <= 4'b0000;
    else
        q_reg <= q_reg + 1'b1;
end

assign q = q_reg;

endmodule"
N/A,N/A,-0.1,31.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedge clk or posedge reset)
begin
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
end

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-1,32.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-0.1,33.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,34.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposededgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,35.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]q    reg [3:0] count;

    always @(posedge clk or posedge reset) begin
        if (reset)
            count <= 4'b0000;
        else if (count == 4'b1001)
            count <= 4'b0000;
        else
            count <= count + 1'b1;
    end

    assign q = count;

endmodule"
N/A,N/A,-0.1,36.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedge clk or posedge reset)
begin
    if (reset)
        counter <= 4'b0000;
    else if (counter == 4'b1001)
        counter <= 4'b0000;
    else
        counter <= counter + 1'b1;
end

assign q = counter;

endmodule"
N/A,N/A,-1,37.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedgeclk or posedge reset)
begin
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
end

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-1,38.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//always@(posededge clk or posedge reset)
    begin
        if (reset)
            q <= 4'b0000; // Reset the counter to 0
        else if (q == 4'b1001) // If the counter reaches 9
            q <= 4'b0000; // Reset the counter to 0
        else
            q <= q + 1'b1; // Increment the counter
    end
endmodule"
N/A,N/A,-1,39.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclk,posedgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-0.1,40.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;

always@(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,41.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedgeclk or posedge reset)
begin
    if (reset)
        counter <= 4'b0000; // Reset counter to 0
    else if (counter == 4'b1001) // If counter is 9
        counter <= 4'b0000; // Reset counter to 0
    else
        counter <= counter + 1'b1; // Increment counter
end

assign q = counter;

endmodule"
N/A,N/A,-1,42.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//initialbeginreg[3:0] count;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        count <= 4'b0000;
    end
    else begin
        if (count == 4'b1001) begin
            count <= 4'b0000;
        end
        else begin
            count <= count + 1'b1;
        end
    end
end

assign q = count;

endmodule"
N/A,N/A,-1,43.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedgeclkor posedge reset)
begin
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
end

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-0.1,44.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
   reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,45.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposededgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,46.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]q       reg [3:0] count;

    always @(posedge clk or posedge reset) begin
        if (reset)
            count <= 4'b0000;
        else if (count == 4'b1001)
            count <= 4'b0000;
        else
            count <= count + 1'b1;
    end

    assign q = count;

endmodule"
N/A,N/A,-1,47.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,48.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedgeclkor posedge reset)
begin
    if (reset)
        counter <= 4'b0000;
    else if (counter == 4'b1001)
        counter <= 4'b0000;
    else
        counter <= counter + 1'b1;
end

assign q = counter;

endmodule"
N/A,N/A,-1,49.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]q      reg [3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,50.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt=4'b0;

always @(posedge clk or posedge reset)
begin
    if (reset)
        cnt <= 4'b0;
    else if (cnt == 4'b1001)
        cnt <= 4'b0;
    else
        cnt <= cnt + 1'b1;
end

assign q = cnt;

endmodule"
N/A,N/A,-1,51.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposededgereset)
{
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
}

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,52.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclk,posedgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,53.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]count   reg [3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,54.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedgeclkorposedge reset)
begin
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
end

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-1,55.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedgeclkorposedge reset)
begin
    if (reset)
        counter <= 4'b0000;
    else if (counter == 4'b1001)
        counter <= 4'b0000;
    else
        counter <= counter + 1'b1;
end

assign q = counter;

endmodule"
N/A,N/A,-1,56.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//always@(posededgeclk or posedge reset)
begin
    if (reset)
        q <= 4'b0000; // Reset the counter to 0
    else if (q == 4'b1001) // If the counter reaches 9
        q <= 4'b0000; // Reset the counter to 0
    else
        q <= q + 1'b1; // Increment the counter
end

endmodule"
N/A,N/A,-1,57.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedgereset)
{
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
}

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,58.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
   //reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,59.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposededgereset)
{
if (reset)
    count <= 4'b0000;
else if (count == 4'b1001)
    count <= 4'b0000;
else
    count <= count + 1'b1;
}

assign q = count;

endmodule"
N/A,N/A,-0.1,60.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;

always@(posedge clk or posedge reset)
begin
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
end

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-1,61.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]qreg   reg [3:0] qreg;

always @(posedge clk or posedge reset)
begin
    if (reset)
        qreg <= 4'b0000;
    else if (qreg == 4'b1001)
        qreg <= 4'b0000;
    else
        qreg <= qreg + 1'b1;
end

assign q = qreg;

endmodule"
N/A,N/A,-1,62.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedgereset)
{
if (reset)
    count <= 4'b0000;
else
    count <= (count == 4'b1001) ? 4'b0000 : count + 4'b0001;
}

assign q = count;

endmodule"
N/A,N/A,-1,63.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedgeclkorposedge reset)
begin
    if (reset)
        counter <= 4'b0000;
    else if (counter == 4'b1001)
        counter <= 4'b0000;
    else
        counter <= counter + 1'b1;
end

assign q = counter;

endmodule"
N/A,N/A,-1,64.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//initialbeginreg[3:0] count = 4'b0000;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        count <= 4'b0000;
    end
    else begin
        if (count == 4'b1001) begin
            count <= 4'b0000;
        end
        else begin
            count <= count + 1'b1;
        end
    end
end

assign q = count;

endmodule"
N/A,N/A,-1,65.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclk,posedgereset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,66.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,67.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedgeclkorposededge reset)
begin
    if (reset)
        cnt <= 4'b0000;
    else if (cnt == 4'b1001)
        cnt <= 4'b0000;
    else
        cnt <= cnt + 1'b1;
end

assign q = cnt;

endmodule"
N/A,N/A,-1,68.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposededgereset)
{
if(reset)
    count <= 4'b0000;
else
    if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
}

assign q = count;

endmodule"
N/A,N/A,-1,69.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]cntreg    reg [3:0] cntreg;

    always @(posedge clk or posedge reset) begin
        if (reset)
            cntreg <= 4'b0000;
        else if (cntreg == 4'b1001)
            cntreg <= 4'b0000;
        else
            cntreg <= cntreg + 1'b1;
    end

    assign q = cntreg;

endmodule"
N/A,N/A,-0.1,70.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;

always@(posedge clk or posedge reset)
begin
    if (reset)
        counter <= 4'b0000; // Reset counter to 0
    else if (counter == 4'b1001) // If counter is 9
        counter <= 4'b0000; // Reset counter to 0
    else
        counter <= counter + 1'b1; // Increment counter
end

assign q = counter;

endmodule"
N/A,N/A,-0.1,71.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;

always@(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,72.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
////reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,73.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
   reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,74.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedgeclkorposededgereset)
begin
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
end

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-1,75.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedgereset)
{
if(reset)
    count <= 4'b0000;
else
    if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
}

assign q = count;

endmodule"
N/A,N/A,-1,76.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedgeclkorposedgereset)
begin
    if (reset)
        counter <= 4'b0000; // Reset the counter to 0
    else if (counter == 4'b1001) // If the counter reaches 9
        counter <= 4'b0000; // Reset the counter to 0
    else
        counter <= counter + 1'b1; // Increment the counter
end

assign q = counter;

endmodule"
N/A,N/A,-1,77.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]q         reg [3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,78.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclk,posedgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (clk)
        if (count == 4'b1001) // If the count reaches 9
            count <= 4'b0000; // Reset the counter to 0
        else
            count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,79.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedgeclkorposededgereset)
begin
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
end

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-1,80.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]count   reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,81.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposededgereset)
{
if(reset)
    count <= 4'b0000;
else
    if(count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
}

assign q = count;

endmodule"
N/A,N/A,-1,82.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedgeclkorposedgereset)
begin
    if (reset)
        counter <= 4'b0000; // Reset counter to 0
    else if (counter == 4'b1001) // If counter is 9
        counter <= 4'b0000; // Reset counter to 0
    else
        counter <= counter + 1'b1; // Increment counter
end

assign q = counter;

endmodule"
N/A,N/A,-1,83.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//always@(posededgeclkor posedge reset)
begin
    if (reset)
        q <= 4'b0000; // Reset the counter to 0
    else if (q == 4'b1001) // If the counter reaches 9
        q <= 4'b0000; // Reset the counter to 0
    else
        q <= q + 1'b1; // Increment the counter
end

endmodule"
N/A,N/A,-1,84.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedgereset)
{
if(reset)
    count <= 4'b0000;
else
    if(count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
}

assign q = count;

endmodule"
N/A,N/A,-1,85.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedgeclkorposededgereset)
{
    if (reset)
        cnt <= 4'b0000; // Reset the counter to 0
    else if (cnt == 4'b1001) // If the counter reaches 9
        cnt <= 4'b0000; // Reset the counter to 0
    else
        cnt <= cnt + 1'b1; // Increment the counter
}

assign q = cnt; // Assign the output to the counter

endmodule"
N/A,N/A,-0.1,86.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,87.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
   ////reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,88.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposededgereset)
{
if(reset)
    count <= 4'b0000;
else
    if(count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
}

assign q = count;

endmodule"
N/A,N/A,-1,89.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]qreg   reg= 4'b0000; // Initialize the register

always @(posedge clk or posedge reset) begin
    if (reset) begin
        qreg <= 4'b0000; // Reset the counter to 0
    end
    else begin
        if (qreg == 4'b1001) begin
            qreg <= 4'b0000; // Reset the counter to 0 after reaching 9
        end
        else begin
            qreg <= qreg + 1'b1; // Increment the counter
        end
    end
end

assign q = qreg; // Assign the output to the register

endmodule"
N/A,N/A,-1,90.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclk,posedgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,91.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedgeclkorposedgereset)
{
    if (reset)
        counter <= 4'b0000;
    else if (counter == 4'b1001)
        counter <= 4'b0000;
    else
        counter <= counter + 1'b1;
}

assign q = counter;

endmodule"
N/A,N/A,-1,92.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//initialbeginreg[3:0] count = 4'b0000;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        count <= 4'b0000;
    end
    else begin
        if (count == 4'b1001) begin
            count <= 4'b0000;
        end
        else begin
            count <= count + 1'b1;
        end
    end
end

assign q = count;

endmodule"
N/A,N/A,-1,93.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt;
always@(posedgeclkorposededgereset)
{
if (reset)
    cnt <= 4'b0000;
else if (cnt == 4'b1001)
    cnt <= 4'b0000;
else
    cnt <= cnt + 1'b1;
}

assign q = cnt;

endmodule"
N/A,N/A,-1,94.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (clk)
        if (count == 4'b1001) // If the count reaches 9
            count <= 4'b0000; // Reset the counter to 0
        else
            count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,95.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposedgereset)
begin
    if (reset)
        count <= 4'b0000; // Reset the counter to 0
    else if (count == 4'b1001) // If the count reaches 9
        count <= 4'b0000; // Reset the counter to 0
    else
        count <= count + 1'b1; // Increment the counter
end

assign q = count; // Assign the output to the counter

endmodule"
N/A,N/A,-1,96.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//reg[3:0]q   reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-0.1,97.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]cnt=4'b0000; // Initialize counter to 0

always @(posedge clk or posedge reset) begin
    if (reset) begin
        cnt <= 4'b0000; // Reset counter to 0
    end
    else begin
        if (cnt == 4'b1001) begin
            cnt <= 4'b0000; // Reset counter to 0 after reaching 9
        end
        else begin
            cnt <= cnt + 1'b1; // Increment counter
        end
    end
end

assign q = cnt; // Assign counter value to output

endmodule"
N/A,N/A,-1,98.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]counter;
always@(posedgeclkorposedgereset)
{
if (reset)
    counter <= 4'b0000;
else
    counter <= counter + 4'b0001;
}

assign q = counter;

endmodule"
N/A,N/A,-0.1,99.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    
reg[3:0] count;

always @(posedge clk or posedge reset)
begin
    if (reset)
        count <= 4'b0000;
    else if (count == 4'b1001)
        count <= 4'b0000;
    else
        count <= count + 1'b1;
end

assign q = count;

endmodule"
N/A,N/A,-1,100.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
//   //wire [3:0] next_q;
assign next_q = (q == 4'd9) ? 4'd0 : q + 4'd1;

always @(posedge clk or posedge reset) begin
    if (reset)
        q <= 4'd0;
    else
        q <= next_q;
end

endmodule"
N/A,N/A,-1,101.0,1,"// Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
reg[3:0]count;
always@(posedgeclkorposededgereset)
{
   if(reset)
      count <= 4'b0000;
   else
      count <= count + 4'b0001;
}

assign q = (count == 4'b1010) ? 4'b0000 : count;

endmodule"
