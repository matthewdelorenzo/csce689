Using GPU
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_prompts/Module_name.v
Prompt str:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
Loading LLM model...
Loaded LLM:  shailja/fine-tuned-codegen-16B-Verilog
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  100
********-- EPISODE-1--************
ORIG MODULE:  top_module
--------MCTS-------
Env seed:  42
Initializing MCTS tree.
Initialize search (creating root node)

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
LLMEstimate:  
    mod_a instance1 (out1 1
LLMEstimate:  
    mod_a instance1 (out1 1
LLMEstimate:  

assign out1 = a;
 1
LLMEstimate:  

    mod_a instance1 (out1 1
LLMEstimate:  

assign out1 = a | b 1
LLMEstimate:  

    mod_a instance1 (out1 1
LLMEstimate:  


endmodule 1
LLMEstimate:  

    mod_a instance1 (out1 1
LLMEstimate:  

    mod_a instance1 (out1 1
LLMEstimate:  

    mod_a instance1 (out1 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  198 50284  4666    62    64  4554    16   357   448    16]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198 50284  4666    62    64  4554    16   357   448    16]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  10
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11   288  1776   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198, 50284,  4666,    62,
            64,  4554,    16,   357,   448,    16,    11,   503,    17,    11,
           257,    11,   275,    11,   269,    11,   288,  1776,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  1.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  198 50284  4666    62    64  4554    16   357   448    16]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[ 11 503  17  11 257  11 275  11 269  11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11   288  1776   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198, 50284,  4666,    62,
            64,  4554,    16,   357,   448,    16,    11,   503,    17,    11,
           257,    11,   275,    11,   269,    11,   288,  1776,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.907150033999997
-------------------------------------------------------
MCTS Iteration:  2.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  198 50284  4666    62    64  4554    16   357   448    16]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[ 11 503  17  11 257  11 275  11 269  11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11   288  1776   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198, 50284,  4666,    62,
            64,  4554,    16,   357,   448,    16,    11,   503,    17,    11,
           257,    11,   275,    11,   269,    11,   288,  1776,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.919837020999992
-------------------------------------------------------
MCTS Iteration:  3.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[198 198 562 570 503  16 796 257  26 198]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
LLMEstimate:  assign out2 = b;

end 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[562 570 503  17 796 275  26 198 198 437]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  21
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.721967458000009
-------------------------------------------------------
MCTS Iteration:  4.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  628 50284  4666    62    64  4554    16   357   448    16]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[ 11 503  17  11 257  11 275  11 269  11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11   288  1776   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   628, 50284,  4666,    62,
            64,  4554,    16,   357,   448,    16,    11,   503,    17,    11,
           257,    11,   275,    11,   269,    11,   288,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.979520102999999
-------------------------------------------------------
MCTS Iteration:  5.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[198 198 562 570 503  16 796 257 930 275]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   | c;
assign out2 = d 1
LLMEstimate:  ;
assign out2 = c | d 1
LLMEstimate:  ;
assign out2 = c | d 1
LLMEstimate:   | c;
assign out2 = d 1
LLMEstimate:   | c;
assign out2 = d 1
LLMEstimate:  ;
assign out2 = c | d 1
LLMEstimate:   | c;
assign out2 = d 1
LLMEstimate:   | c;
assign out2 = d 1
LLMEstimate:   | c;
assign out2 = d 1
LLMEstimate:   | c;
assign out2 = d 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[ 26 198 562 570 503  17 796 269 930 288]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[ 26 198 562 570 503  17 796 269 930 288]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b;
assign out2 = c | d;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275    26   198   562   570   503    17   796   269
    930   288    26   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,   930,   275,    26,   198,   562,   570,
           503,    17,   796,   269,   930,   288,    26,   198,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b;
assign out2 = c | d;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.938661542000006
-------------------------------------------------------
MCTS Iteration:  6.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  628 50284  4666    62    64  4554    16   357   448    16]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[ 11 503  17  11 257  11 275  11 269  11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11   288  1776   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   628, 50284,  4666,    62,
            64,  4554,    16,   357,   448,    16,    11,   503,    17,    11,
           257,    11,   275,    11,   269,    11,   288,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.995136846999998
-------------------------------------------------------
MCTS Iteration:  7.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  628   198   437 21412]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.00211854700000913
-------------------------------------------------------
MCTS Iteration:  8.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  628 50284  4666    62    64  4554    16   357   448    16]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[ 11 503  17  11 257  11 275  11 269  11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11   288  1776   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   628, 50284,  4666,    62,
            64,  4554,    16,   357,   448,    16,    11,   503,    17,    11,
           257,    11,   275,    11,   269,    11,   288,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.983343691999977
-------------------------------------------------------
MCTS Iteration:  9.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  628 50284  4666    62    64  4554    16   357   448    16]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[ 11 503  17  11 257  11 275  11 269  11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11   288  1776   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   628, 50284,  4666,    62,
            64,  4554,    16,   357,   448,    16,    11,   503,    17,    11,
           257,    11,   275,    11,   269,    11,   288,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.992492590000012
-------------------------------------------------------
MCTS Iteration:  10.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]  taking action:  9
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
SEQUENCE:  [[  628 50284  4666    62    64  4554    16   357   448    16]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
LLMEstimate:  , out2, a, b, c, 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[ 11 503  17  11 257  11 275  11 269  11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11   288  1776   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   628, 50284,  4666,    62,
            64,  4554,    16,   357,   448,    16,    11,   503,    17,    11,
           257,    11,   275,    11,   269,    11,   288,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.999950791000003
-------------------------------------------------------
MCTS Iteration:  11.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.8902302 1.8902302 1.8902302 1.8902302 1.8902302 1.8902302 1.8902302
 1.8902302 1.8902302 1.8902302]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.290475649000001
-------------------------------------------------------
MCTS Iteration:  12.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9918869 1.9878304 1.9878304 1.9878304 1.9878304 1.9878304 1.9878304
 1.9878304 1.9878304 1.9878304]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.300702012999977
-------------------------------------------------------
MCTS Iteration:  13.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0544956 1.0544956 2.0817435 2.0817435 2.0817435 2.0817435 2.0817435
 2.0817435 2.0817435 2.0817435]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
// You are given a module named mod 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
//
// Copyright (c) 1999 1
LLMEstimate:  module
// This is a testbench for the 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198  1003   921   389  1813   257  8265  3706   953]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[21412   198  1003   921   389  1813   257  8265  3706   953]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198  1003   921   389  1813   257  8265  3706   953
     62    64   326   468   362 23862   290   604 17311    11   287   617
   1502    13   220   198  1003   921  1276  2018   262   718 14090   416
   1438   284   534  1353    12  5715  8265   338 14090    25   198   198
   1003  4347   287   953    62    64   197 13924   287  1353    62 21412
    198  1003  5072   503    16   197   448    16   198  1003  5072   503
     17   197   448    17   198  1003  5128   287    16   197    64   198
   1003  5128   287    17   197    65   198  1003  5128   287    18   197
     66   198  1003  5128   287    19   197    67   198   198  1003   921
    389  1813   262  1708  8265    25   198   198 21412   953    62    64
    357  5072   503    16    11  5072   503    17    11  5128   287    16
     11  5128   287    17    11  5128   287    18    11  5128   287    19
   1776   628   198 21412  1353    62 21412   357   220   198 50284 15414
    257    11   220   198 50284 15414   275    11   220   198 50284 15414
    269    11   198 50284 15414   288    11   198 50284 22915   503    16
     11   198 50284 22915   503    17   198  1776   198   198   562   570
    503    16   796   257    26   198   562   570   503    17   796   275
     26   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198,  1003,   921,
           389,  1813,   257,  8265,  3706,   953,    62,    64,   326,   468,
           362, 23862,   290,   604, 17311,    11,   287,   617,  1502,    13,
           220,   198,  1003,   921,  1276,  2018,   262,   718, 14090,   416,
          1438,   284,   534,  1353,    12,  5715,  8265,   338, 14090,    25,
           198,   198,  1003,  4347,   287,   953,    62,    64,   197, 13924,
           287,  1353,    62, 21412,   198,  1003,  5072,   503,    16,   197,
           448,    16,   198,  1003,  5072,   503,    17,   197,   448,    17,
           198,  1003,  5128,   287,    16,   197,    64,   198,  1003,  5128,
           287,    17,   197,    65,   198,  1003,  5128,   287,    18,   197,
            66,   198,  1003,  5128,   287,    19,   197,    67,   198,   198,
          1003,   921,   389,  1813,   262,  1708,  8265,    25,   198,   198,
         21412,   953,    62,    64,   357,  5072,   503,    16,    11,  5072,
           503,    17,    11,  5128,   287,    16,    11,  5128,   287,    17,
            11,  5128,   287,    18,    11,  5128,   287,    19,  1776,   628,
           198, 21412,  1353,    62, 21412,   357,   220,   198, 50284, 15414,
           257,    11,   220,   198, 50284, 15414,   275,    11,   220,   198,
         50284, 15414,   269,    11,   198, 50284, 15414,   288,    11,   198,
         50284, 22915,   503,    16,    11,   198, 50284, 22915,   503,    17,
           198,  1776,   198,   198,   562,   570,   503,    16,   796,   257,
            26,   198,   562,   570,   503,    17,   796,   275,    26,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  227
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  19.60502022700001
-------------------------------------------------------
MCTS Iteration:  14.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1149056 1.1149056 1.1149056 2.1723585 2.1723585 2.1723585 2.1723585
 2.1723585 2.1723585 2.1723585]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.310104822
-------------------------------------------------------
MCTS Iteration:  15.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1733334 1.1733334 1.1733334 1.1733334 2.26      2.26      2.26
 2.26      2.26      2.26     ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[930 269  26 198 562 570 503  17 796 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:   | ~(a | b | c);
 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
SEQUENCE:  [[ 930  357   64 1222  275    8  930  357   65 1222]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[ 930  357   64 1222  275    8  930  357   65 1222]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | (a & b) | (b & c);

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288   930   357    64  1222   275     8   930   357    65  1222
    269  1776   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,   930,   275,   930,   269,    26,   198,
           562,   570,   503,    17,   796,   288,   930,   357,    64,  1222,
           275,     8,   930,   357,    65,  1222,   269,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  36
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | (a & b) | (b & c);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.055604595000005
-------------------------------------------------------
MCTS Iteration:  16.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2299619 1.2299619 1.2299619 1.2299619 1.2299619 2.3449428 2.3449428
 2.3449428 2.3449428 2.3449428]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.318071383000017
-------------------------------------------------------
MCTS Iteration:  17.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2849481 1.2849481 1.2849481 1.2849481 1.2849481 1.2849481 2.427422
 2.427422  2.427422  2.427422 ]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0017466349999892827
-------------------------------------------------------
MCTS Iteration:  18.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3384268 1.3384268 1.3384268 1.3384268 1.3384268 1.3384268 1.3384268
 2.5076404 2.5076404 2.5076404]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.31276199300001
-------------------------------------------------------
MCTS Iteration:  19.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3905158 1.3905158 1.3905158 1.3905158 1.3905158 1.3905158 1.3905158
 1.3905158 2.5857737 2.5857737]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.301831211000007
-------------------------------------------------------
MCTS Iteration:  20.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.441318  1.441318  1.441318  1.441318  1.441318  1.441318  1.441318
 1.441318  1.441318  2.6619773]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.308558189999985
-------------------------------------------------------
MCTS Iteration:  21.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.4909244 1.4909244 1.4909244 1.4909244 1.4909244 1.4909244 1.4909244
 1.4909244 1.4909244 1.4909244]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.316760915999964
-------------------------------------------------------
MCTS Iteration:  22.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9045619 1.5394158 1.5394158 1.5394158 1.5394158 1.5394158 1.5394158
 1.5394158 1.5394158 1.5394158]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.338527897999995
-------------------------------------------------------
MCTS Iteration:  23.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9401479 0.9401479 1.5868638 1.5868638 1.5868638 1.5868638 1.5868638
 1.5868638 1.5868638 1.5868638]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
//
// Copyright (c) 1999 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A simple example of a module with 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module

// This is the testbench for 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module
module top_module (
    input 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198 21412  1353    62 21412     7   198 50284 15414]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[21412   198 21412  1353    62 21412     7   198 50284 15414]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output walk_left,
    output walk_right,
    output aaah,
    output digging ); 

    parameter LEFT=0, RIGHT=1, FALL_L=2, FALL_R=3, DIG_L=4, DIG_R=5, SPLAT=6, DONE=7;
    reg [2:0] PS, NS;
    
    assign walk_left = (PS == LEFT)? 1:0;
    assign walk_right = (PS == RIGHT)? 1:0;
    assign aaah = ((PS == FALL_L) | (PS == FALL_R) | (PS == SPLAT))? 1:0;
    assign digging = ((PS == DIG_L) | (PS == DIG_R))? 1:0;
    
    always @(posedge clk, posedge areset)
        if(areset)
            PS <= LEFT;
    	else
            PS <= NS;
    
    always @(*)
        case(PS)
            LEFT:begin
                if(~ground)
                    NS <= FALL_L;
                else if(dig)
                    NS <= DIG_L;
                else if(bump_left)
                    NS <= RIGHT;
                else
                    NS <= LEFT;
            end
            RIGHT:begin
                if(~ground)
                    NS <= FALL_R;
                else if(dig)
                    NS <= DIG_R;
                else if(bump_right)
                    NS <= LEFT;
                else
                    NS <= RIGHT;
            end
            FALL_L:begin
                if(~ground)
                    NS <= FALL_L;
                else
                    NS <= LEFT;
            end
            FALL_R:begin
                if(~ground)
                    NS <= FALL_R;
                else
                    NS <= RIGHT;
            end
            DIG_L:begin
                if(~ground)
                    NS <= DIG_L;
                else
                    NS <= LEFT;
            end
            DIG_R:begin
                if(~ground)
                    NS <= DIG_R;
                else
                    NS <= RIGHT;
            end
            SPLAT:begin
                NS <= SPLAT;
            end
            DONE:begin
                NS <= DONE;
            end
            default: NS <= PS;
        endcase
    
endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198 21412  1353    62 21412     7   198 50284 15414
    537    74    11   198 50284 15414   389  2617    11 50284  1003 20138
    306  3632 45462 20607    76   654  2513  1364    13   198 50284 15414
  13852    62  9464    11   198 50284 15414 13852    62  3506    11   198
  50284 15414  2323    11   198 50284 15414  3100    11   198 50284 22915
   2513    62  9464    11   198 50284 22915  2513    62  3506    11   198
  50284 22915   257 37500    11   198 50284 22915 18894  5619   220   628
  50284 17143  2357 12509  9792    28    15    11 33621    28    16    11
    376  7036    62    43    28    17    11   376  7036    62    49    28
     18    11   360  3528    62    43    28    19    11   360  3528    62
     49    28    20    11 46341  1404    28    21    11   360 11651    28
     22    26   198 50284  2301   685    17    25    15    60  6599    11
  10896    26   198 50284   198 50284   562   570  2513    62  9464   796
    357  3705  6624 12509  9792 19427   352    25    15    26   198 50284
    562   570  2513    62  3506   796   357  3705  6624 33621 19427   352
     25    15    26   198 50284   562   570   257 37500   796 14808  3705
   6624   376  7036    62    43     8   930   357  3705  6624   376  7036
     62    49     8   930   357  3705  6624 46341  1404  4008    30   352
     25    15    26   198 50284   562   570 18894   796 14808  3705  6624
    360  3528    62    43     8   930   357  3705  6624   360  3528    62
     49  4008    30   352    25    15    26   198 50284   198 50284 33770
   2488     7 29813   469   537    74    11 15459   469   389  2617     8
    198 50280   361     7  3565   316     8   198 50276  3705 19841 12509
   9792    26   198 50284   197 17772   198 50276  3705 19841 10896    26
    198 50284   198 50284 33770  2488     7 28104   198 50280  7442     7
   3705     8   198 50276  2538  9792    25 27471   198 50272   361     7
     93  2833     8   198 50268  8035 19841   376  7036    62    43    26
    198 50272 17772   611     7 12894     8   198 50268  8035 19841   360
   3528    62    43    26   198 50272 17772   611     7    65   931    62
   9464     8   198 50268  8035 19841 33621    26   198 50272 17772   198
  50268  8035 19841 12509  9792    26   198 50276   437   198 50276    49
   9947    25 27471   198 50272   361     7    93  2833     8   198 50268
   8035 19841   376  7036    62    49    26   198 50272 17772   611     7
  12894     8   198 50268  8035 19841   360  3528    62    49    26   198
  50272 17772   611     7    65   931    62  3506     8   198 50268  8035
  19841 12509  9792    26   198 50272 17772   198 50268  8035 19841 33621
     26   198 50276   437   198 50276    37  7036    62    43    25 27471
    198 50272   361     7    93  2833     8   198 50268  8035 19841   376
   7036    62    43    26   198 50272 17772   198 50268  8035 19841 12509
   9792    26   198 50276   437   198 50276    37  7036    62    49    25
  27471   198 50272   361     7    93  2833     8   198 50268  8035 19841
    376  7036    62    49    26   198 50272 17772   198 50268  8035 19841
  33621    26   198 50276   437   198 50276    35  3528    62    43    25
  27471   198 50272   361     7    93  2833     8   198 50268  8035 19841
    360  3528    62    43    26   198 50272 17772   198 50268  8035 19841
  12509  9792    26   198 50276   437   198 50276    35  3528    62    49
     25 27471   198 50272   361     7    93  2833     8   198 50268  8035
  19841   360  3528    62    49    26   198 50272 17772   198 50268  8035
  19841 33621    26   198 50276   437   198 50276  4303    43  1404    25
  27471   198 50272  8035 19841 46341  1404    26   198 50276   437   198
  50276    35 11651    25 27471   198 50272  8035 19841   360 11651    26
    198 50276   437   198 50276 12286    25 10896 19841  6599    26   198
  50280   437  7442   198 50284   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198, 21412,  1353,
            62, 21412,     7,   198, 50284, 15414,   537,    74,    11,   198,
         50284, 15414,   389,  2617,    11, 50284,  1003, 20138,   306,  3632,
         45462, 20607,    76,   654,  2513,  1364,    13,   198, 50284, 15414,
         13852,    62,  9464,    11,   198, 50284, 15414, 13852,    62,  3506,
            11,   198, 50284, 15414,  2323,    11,   198, 50284, 15414,  3100,
            11,   198, 50284, 22915,  2513,    62,  9464,    11,   198, 50284,
         22915,  2513,    62,  3506,    11,   198, 50284, 22915,   257, 37500,
            11,   198, 50284, 22915, 18894,  5619,   220,   628, 50284, 17143,
          2357, 12509,  9792,    28,    15,    11, 33621,    28,    16,    11,
           376,  7036,    62,    43,    28,    17,    11,   376,  7036,    62,
            49,    28,    18,    11,   360,  3528,    62,    43,    28,    19,
            11,   360,  3528,    62,    49,    28,    20,    11, 46341,  1404,
            28,    21,    11,   360, 11651,    28,    22,    26,   198, 50284,
          2301,   685,    17,    25,    15,    60,  6599,    11, 10896,    26,
           198, 50284,   198, 50284,   562,   570,  2513,    62,  9464,   796,
           357,  3705,  6624, 12509,  9792, 19427,   352,    25,    15,    26,
           198, 50284,   562,   570,  2513,    62,  3506,   796,   357,  3705,
          6624, 33621, 19427,   352,    25,    15,    26,   198, 50284,   562,
           570,   257, 37500,   796, 14808,  3705,  6624,   376,  7036,    62,
            43,     8,   930,   357,  3705,  6624,   376,  7036,    62,    49,
             8,   930,   357,  3705,  6624, 46341,  1404,  4008,    30,   352,
            25,    15,    26,   198, 50284,   562,   570, 18894,   796, 14808,
          3705,  6624,   360,  3528,    62,    43,     8,   930,   357,  3705,
          6624,   360,  3528,    62,    49,  4008,    30,   352,    25,    15,
            26,   198, 50284,   198, 50284, 33770,  2488,     7, 29813,   469,
           537,    74,    11, 15459,   469,   389,  2617,     8,   198, 50280,
           361,     7,  3565,   316,     8,   198, 50276,  3705, 19841, 12509,
          9792,    26,   198, 50284,   197, 17772,   198, 50276,  3705, 19841,
         10896,    26,   198, 50284,   198, 50284, 33770,  2488,     7, 28104,
           198, 50280,  7442,     7,  3705,     8,   198, 50276,  2538,  9792,
            25, 27471,   198, 50272,   361,     7,    93,  2833,     8,   198,
         50268,  8035, 19841,   376,  7036,    62,    43,    26,   198, 50272,
         17772,   611,     7, 12894,     8,   198, 50268,  8035, 19841,   360,
          3528,    62,    43,    26,   198, 50272, 17772,   611,     7,    65,
           931,    62,  9464,     8,   198, 50268,  8035, 19841, 33621,    26,
           198, 50272, 17772,   198, 50268,  8035, 19841, 12509,  9792,    26,
           198, 50276,   437,   198, 50276,    49,  9947,    25, 27471,   198,
         50272,   361,     7,    93,  2833,     8,   198, 50268,  8035, 19841,
           376,  7036,    62,    49,    26,   198, 50272, 17772,   611,     7,
         12894,     8,   198, 50268,  8035, 19841,   360,  3528,    62,    49,
            26,   198, 50272, 17772,   611,     7,    65,   931,    62,  3506,
             8,   198, 50268,  8035, 19841, 12509,  9792,    26,   198, 50272,
         17772,   198, 50268,  8035, 19841, 33621,    26,   198, 50276,   437,
           198, 50276,    37,  7036,    62,    43,    25, 27471,   198, 50272,
           361,     7,    93,  2833,     8,   198, 50268,  8035, 19841,   376,
          7036,    62,    43,    26,   198, 50272, 17772,   198, 50268,  8035,
         19841, 12509,  9792,    26,   198, 50276,   437,   198, 50276,    37,
          7036,    62,    49,    25, 27471,   198, 50272,   361,     7,    93,
          2833,     8,   198, 50268,  8035, 19841,   376,  7036,    62,    49,
            26,   198, 50272, 17772,   198, 50268,  8035, 19841, 33621,    26,
           198, 50276,   437,   198, 50276,    35,  3528,    62,    43,    25,
         27471,   198, 50272,   361,     7,    93,  2833,     8,   198, 50268,
          8035, 19841,   360,  3528,    62,    43,    26,   198, 50272, 17772,
           198, 50268,  8035, 19841, 12509,  9792,    26,   198, 50276,   437,
           198, 50276,    35,  3528,    62,    49,    25, 27471,   198, 50272,
           361,     7,    93,  2833,     8,   198, 50268,  8035, 19841,   360,
          3528,    62,    49,    26,   198, 50272, 17772,   198, 50268,  8035,
         19841, 33621,    26,   198, 50276,   437,   198, 50276,  4303,    43,
          1404,    25, 27471,   198, 50272,  8035, 19841, 46341,  1404,    26,
           198, 50276,   437,   198, 50276,    35, 11651,    25, 27471,   198,
         50272,  8035, 19841,   360, 11651,    26,   198, 50276,   437,   198,
         50276, 12286,    25, 10896, 19841,  6599,    26,   198, 50280,   437,
          7442,   198, 50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  650
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output walk_left,
    output walk_right,
    output aaah,
    output digging ); 

    parameter LEFT=0, RIGHT=1, FALL_L=2, FALL_R=3, DIG_L=4, DIG_R=5, SPLAT=6, DONE=7;
    reg [2:0] PS, NS;
    
    assign walk_left = (PS == LEFT)? 1:0;
    assign walk_right = (PS == RIGHT)? 1:0;
    assign aaah = ((PS == FALL_L) | (PS == FALL_R) | (PS == SPLAT))? 1:0;
    assign digging = ((PS == DIG_L) | (PS == DIG_R))? 1:0;
    
    always @(posedge clk, posedge areset)
        if(areset)
            PS <= LEFT;
    	else
            PS <= NS;
    
    always @(*)
        case(PS)
            LEFT:begin
                if(~ground)
                    NS <= FALL_L;
                else if(dig)
                    NS <= DIG_L;
                else if(bump_left)
                    NS <= RIGHT;
                else
                    NS <= LEFT;
            end
            RIGHT:begin
                if(~ground)
                    NS <= FALL_R;
                else if(dig)
                    NS <= DIG_R;
                else if(bump_right)
                    NS <= LEFT;
                else
                    NS <= RIGHT;
            end
            FALL_L:begin
                if(~ground)
                    NS <= FALL_L;
                else
                    NS <= LEFT;
            end
            FALL_R:begin
                if(~ground)
                    NS <= FALL_R;
                else
                    NS <= RIGHT;
            end
            DIG_L:begin
                if(~ground)
                    NS <= DIG_L;
                else
                    NS <= LEFT;
            end
            DIG_R:begin
                if(~ground)
                    NS <= DIG_R;
                else
                    NS <= RIGHT;
            end
            SPLAT:begin
                NS <= SPLAT;
            end
            DONE:begin
                NS <= DONE;
            end
            default: NS <= PS;
        endcase
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  41.14554813199999
-------------------------------------------------------
MCTS Iteration:  24.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.975     0.975     0.975     1.6333332 1.6333332 1.6333332 1.6333332
 1.6333332 1.6333332 1.6333332]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.348359573999971
-------------------------------------------------------
MCTS Iteration:  25.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0091617 1.0091617 1.0091617 1.0091617 1.6788821 1.6788821 1.6788821
 1.6788821 1.6788821 1.6788821]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[ 26 198 562 570 503  17 796 269 930 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275    26   198   562   570   503    17   796   269
    930   288]]
SEQUENCE:  [[   26   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[   26   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b;
assign out2 = c | d;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.344598985000005
-------------------------------------------------------
MCTS Iteration:  26.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0426726 1.0426726 1.0426726 1.0426726 1.0426726 1.7235634 1.7235634
 1.7235634 1.7235634 1.7235634]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.337318836999998
-------------------------------------------------------
MCTS Iteration:  27.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0755684 1.0755684 1.0755684 1.0755684 1.0755684 1.0755684 1.7674246
 1.7674246 1.7674246 1.7674246]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0017699040000138666
-------------------------------------------------------
MCTS Iteration:  28.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1078819 1.1078819 1.1078819 1.1078819 1.1078819 1.1078819 1.1078819
 1.8105092 1.8105092 1.8105092]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.336082698000041
-------------------------------------------------------
MCTS Iteration:  29.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1396428 1.1396428 1.1396428 1.1396428 1.1396428 1.1396428 1.1396428
 1.1396428 1.8528571 1.8528571]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.337891848000027
-------------------------------------------------------
MCTS Iteration:  30.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1708786 1.1708786 1.1708786 1.1708786 1.1708786 1.1708786 1.1708786
 1.1708786 1.1708786 1.8945048]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.344764397000006
-------------------------------------------------------
MCTS Iteration:  31.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2016147 1.2016147 1.2016147 1.2016147 1.2016147 1.2016147 1.2016147
 1.2016147 1.2016147 1.2016147]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.348844993
-------------------------------------------------------
MCTS Iteration:  32.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7854993 1.2318741 1.2318741 1.2318741 1.2318741 1.2318741 1.2318741
 1.2318741 1.2318741 1.2318741]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.351522481000018
-------------------------------------------------------
MCTS Iteration:  33.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8093428 0.8093428 1.2616785 1.2616785 1.2616785 1.2616785 1.2616785
 1.2616785 1.2616785 1.2616785]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
//
// Copyright (c) 1999 1
LLMEstimate:  module
// A simple example of a module with 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
module top_module (
    input 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198  1003   317  2829  1672   286   257  8265   351]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[21412   198  1003   317  2829  1672   286   257  8265   351]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// A simple example of a module with a single input and a single output.

module top_module (
    input a,
    input b,
    input c,
    input d,
    output out  ); 
    
    assign out = a | b | c | d;
    
endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198  1003   317  2829  1672   286   257  8265   351
    257  2060  5128   290   257  2060  5072    13   198   198 21412  1353
     62 21412   357   198 50284 15414   257    11   198 50284 15414   275
     11   198 50284 15414   269    11   198 50284 15414   288    11   198
  50284 22915   503 50286  1776   220   198 50284   198 50284   562   570
    503   796   257   930   275   930   269   930   288    26   198 50284
    198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198,  1003,   317,
          2829,  1672,   286,   257,  8265,   351,   257,  2060,  5128,   290,
           257,  2060,  5072,    13,   198,   198, 21412,  1353,    62, 21412,
           357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,   275,
            11,   198, 50284, 15414,   269,    11,   198, 50284, 15414,   288,
            11,   198, 50284, 22915,   503, 50286,  1776,   220,   198, 50284,
           198, 50284,   562,   570,   503,   796,   257,   930,   275,   930,
           269,   930,   288,    26,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  93
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// A simple example of a module with a single input and a single output.

module top_module (
    input a,
    input b,
    input c,
    input d,
    output out  ); 
    
    assign out = a | b | c | d;
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  12.923438804
-------------------------------------------------------
MCTS Iteration:  34.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.832838  0.832838  0.832838  1.2910476 1.2910476 1.2910476 1.2910476
 1.2910476 1.2910476 1.2910476]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.337110703999997
-------------------------------------------------------
MCTS Iteration:  35.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8559999 0.8559999 0.8559999 0.8559999 1.3199999 1.3199999 1.3199999
 1.3199999 1.3199999 1.3199999]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[ 26 198 562 570 503  17 796 269 930 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275    26   198   562   570   503    17   796   269
    930   288]]
SEQUENCE:  [[   26   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[   26   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b;
assign out2 = c | d;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.34159529599998
-------------------------------------------------------
MCTS Iteration:  36.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.87884253 0.87884253 0.87884253 0.87884253 0.87884253 1.3485532
 1.3485532  1.3485532  1.3485532  1.3485532 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.346798016000037
-------------------------------------------------------
MCTS Iteration:  37.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9013782 0.9013782 0.9013782 0.9013782 0.9013782 0.9013782 1.3767228
 1.3767228 1.3767228 1.3767228]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0017240189999938593
-------------------------------------------------------
MCTS Iteration:  38.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.92361945 0.92361945 0.92361945 0.92361945 0.92361945 0.92361945
 0.92361945 1.4045243  1.4045243  1.4045243 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.342989701000022
-------------------------------------------------------
MCTS Iteration:  39.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9455772 0.9455772 0.9455772 0.9455772 0.9455772 0.9455772 0.9455772
 0.9455772 1.4319715 1.4319715]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.348181513000043
-------------------------------------------------------
MCTS Iteration:  40.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9672622 0.9672622 0.9672622 0.9672622 0.9672622 0.9672622 0.9672622
 0.9672622 0.9672622 1.4590778]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.348338573000035
-------------------------------------------------------
MCTS Iteration:  41.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9886845 0.9886845 0.9886845 0.9886845 0.9886845 0.9886845 0.9886845
 0.9886845 0.9886845 0.9886845]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.346800513999995
-------------------------------------------------------
MCTS Iteration:  42.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.67487746 1.0098529  1.0098529  1.0098529  1.0098529  1.0098529
 1.0098529  1.0098529  1.0098529  1.0098529 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.346339188000002
-------------------------------------------------------
MCTS Iteration:  43.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6923142 0.6923142 1.030777  1.030777  1.030777  1.030777  1.030777
 1.030777  1.030777  1.030777 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module

// This is the testbench for 1
LLMEstimate:  module

// This is the testbench for 1
LLMEstimate:  module
// This is a testbench for the 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module

// This is the top-level 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module

// This module has 3 outputs and 1
LLMEstimate:  module

// You are given the following module 1
LLMEstimate:  module
// This is a testbench for the 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198   198  1003   770   318   262  1353    12  5715]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[21412   198   198  1003   770   318   262  1353    12  5715]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule

// This is the top-level module of the test bench. It connects the 
// top-level module to the modules you design.

module top_module(
    input clk,
    input areset,    // Asynchronous reset to OFF
    input j,
    input k,
    output out); //  

    parameter OFF=0, ON=1; 
    reg state, next_state;

    always @(*) begin
        // State transition logic
        case(state)
            OFF: begin
                if(j==0)next_state = OFF;
                else	next_state = ON;
            end
            ON: begin
                if(k==0)next_state = ON;
                else	next_state = OFF;
            end
        endcase
    end

    always @(posedge clk, posedge areset) begin
        // State flip-flops with asynchronous reset
        if(areset)
            state <= OFF;
        else if(clk)
            state <= next_state;
    end

    // Output logic
    assign out = (state == OFF)? 0 : 1;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198   198  1003   770   318   262  1353    12  5715
   8265   286   262  1332  7624    13   632 20417   262   220   198  1003
   1353    12  5715  8265   284   262 13103   345  1486    13   198   198
  21412  1353    62 21412     7   198 50284 15414   537    74    11   198
  50284 15414   389  2617    11 50284  1003  1081 31301 13259   284 18562
    198 50284 15414   474    11   198 50284 15414   479    11   198 50284
  22915   503  1776  3373 50286   628 50284 17143  2357 18562    28    15
     11  6177    28    16    26   220   198 50284  2301  1181    11  1306
     62  5219    26   628 50284 33770  2488     7 28104  2221   198 50280
   1003  1812  6801  9156   198 50280  7442     7  5219     8   198 50276
  27977    25  2221   198 50272   361     7    73   855    15     8 19545
     62  5219   796 18562    26   198 50272 17772   197 19545    62  5219
    796  6177    26   198 50276   437   198 50276  1340    25  2221   198
  50272   361     7    74   855    15     8 19545    62  5219   796  6177
     26   198 50272 17772   197 19545    62  5219   796 18562    26   198
  50276   437   198 50280   437  7442   198 50284   437   628 50284 33770
   2488     7 29813   469   537    74    11 15459   469   389  2617     8
   2221   198 50280  1003  1812 14283    12  2704  2840   351 39354 13259
    198 50280   361     7  3565   316     8   198 50276  5219 19841 18562
     26   198 50280 17772   611     7   565    74     8   198 50276  5219
  19841  1306    62  5219    26   198 50284   437   628 50284  1003 25235
   9156   198 50284   562   570   503   796   357  5219  6624 18562 19427
    657  1058   352    26   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198,   198,  1003,
           770,   318,   262,  1353,    12,  5715,  8265,   286,   262,  1332,
          7624,    13,   632, 20417,   262,   220,   198,  1003,  1353,    12,
          5715,  8265,   284,   262, 13103,   345,  1486,    13,   198,   198,
         21412,  1353,    62, 21412,     7,   198, 50284, 15414,   537,    74,
            11,   198, 50284, 15414,   389,  2617,    11, 50284,  1003,  1081,
         31301, 13259,   284, 18562,   198, 50284, 15414,   474,    11,   198,
         50284, 15414,   479,    11,   198, 50284, 22915,   503,  1776,  3373,
         50286,   628, 50284, 17143,  2357, 18562,    28,    15,    11,  6177,
            28,    16,    26,   220,   198, 50284,  2301,  1181,    11,  1306,
            62,  5219,    26,   628, 50284, 33770,  2488,     7, 28104,  2221,
           198, 50280,  1003,  1812,  6801,  9156,   198, 50280,  7442,     7,
          5219,     8,   198, 50276, 27977,    25,  2221,   198, 50272,   361,
             7,    73,   855,    15,     8, 19545,    62,  5219,   796, 18562,
            26,   198, 50272, 17772,   197, 19545,    62,  5219,   796,  6177,
            26,   198, 50276,   437,   198, 50276,  1340,    25,  2221,   198,
         50272,   361,     7,    74,   855,    15,     8, 19545,    62,  5219,
           796,  6177,    26,   198, 50272, 17772,   197, 19545,    62,  5219,
           796, 18562,    26,   198, 50276,   437,   198, 50280,   437,  7442,
           198, 50284,   437,   628, 50284, 33770,  2488,     7, 29813,   469,
           537,    74,    11, 15459,   469,   389,  2617,     8,  2221,   198,
         50280,  1003,  1812, 14283,    12,  2704,  2840,   351, 39354, 13259,
           198, 50280,   361,     7,  3565,   316,     8,   198, 50276,  5219,
         19841, 18562,    26,   198, 50280, 17772,   611,     7,   565,    74,
             8,   198, 50276,  5219, 19841,  1306,    62,  5219,    26,   198,
         50284,   437,   628, 50284,  1003, 25235,  9156,   198, 50284,   562,
           570,   503,   796,   357,  5219,  6624, 18562,     8,  5633,   657,
          1058,   352,    26,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  290
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule

// This is the top-level module of the test bench. It connects the 
// top-level module to the modules you design.

module top_module(
    input clk,
    input areset,    // Asynchronous reset to OFF
    input j,
    input k,
    output out); //  

    parameter OFF=0, ON=1; 
    reg state, next_state;

    always @(*) begin
        // State transition logic
        case(state)
            OFF: begin
                if(j==0)next_state = OFF;
                else	next_state = ON;
            end
            ON: begin
                if(k==0)next_state = ON;
                else	next_state = OFF;
            end
        endcase
    end

    always @(posedge clk, posedge areset) begin
        // State flip-flops with asynchronous reset
        if(areset)
            state <= OFF;
        else if(clk)
            state <= next_state;
    end

    // Output logic
    assign out = (state == OFF)? 0 : 1;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  22.884707271000025
-------------------------------------------------------
MCTS Iteration:  44.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.70955354 0.70955354 0.70955354 1.0514643  1.0514643  1.0514643
 1.0514643  1.0514643  1.0514643  1.0514643 ]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.343138737999993
-------------------------------------------------------
MCTS Iteration:  45.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7266026 0.7266026 0.7266026 0.7266026 1.071923  1.071923  1.071923
 1.071923  1.071923  1.071923 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[930 269  26 198 562 570 503  17 796 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   | (a & b) | (a & 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | a | b | c;

end 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | a;

endmodule 1
LLMEstimate:   | ~(a | b | c);
 1
LLMEstimate:   | a | b | c;

end 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
SEQUENCE:  [[930 257 930 275 930 269  26 198 198 437]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[930 257 930 275 930 269  26 198 198 437]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | a | b | c;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288   930   257   930   275   930   269    26   198   198   437
  21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,   930,   275,   930,   269,    26,   198,
           562,   570,   503,    17,   796,   288,   930,   257,   930,   275,
           930,   269,    26,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  31
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | a | b | c;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.835931911999978
-------------------------------------------------------
MCTS Iteration:  46.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.74346715 0.74346715 0.74346715 0.74346715 0.74346715 1.0921607
 1.0921607  1.0921607  1.0921607  1.0921607 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.345791766999923
-------------------------------------------------------
MCTS Iteration:  47.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7601535 0.7601535 0.7601535 0.7601535 0.7601535 0.7601535 1.112184
 1.112184  1.112184  1.112184 ]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.001722975999996379
-------------------------------------------------------
MCTS Iteration:  48.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7766667 0.7766667 0.7766667 0.7766667 0.7766667 0.7766667 0.7766667
 1.132     1.132     1.132    ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.343317447000004
-------------------------------------------------------
MCTS Iteration:  49.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7930123 0.7930123 0.7930123 0.7930123 0.7930123 0.7930123 0.7930123
 0.7930123 1.1516147 1.1516147]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.351949132999948
-------------------------------------------------------
MCTS Iteration:  50.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8091952 0.8091952 0.8091952 0.8091952 0.8091952 0.8091952 0.8091952
 0.8091952 0.8091952 1.1710343]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.344738700999983
-------------------------------------------------------
MCTS Iteration:  51.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8252203 0.8252203 0.8252203 0.8252203 0.8252203 0.8252203 0.8252203
 0.8252203 0.8252203 0.8252203]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.337109139999939
-------------------------------------------------------
MCTS Iteration:  52.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5780788  0.84109193 0.84109193 0.84109193 0.84109193 0.84109193
 0.84109193 0.84109193 0.84109193 0.84109193]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.343703122999955
-------------------------------------------------------
MCTS Iteration:  53.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5915553  0.5915553  0.85681456 0.85681456 0.85681456 0.85681456
 0.85681456 0.85681456 0.85681456 0.85681456]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// This is the top-level module 1
LLMEstimate:  module
// This is a testbench for the 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// This is the top-level module 1
LLMEstimate:  module
// This is a simple example of a 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module
// This is a testbench for the 1
LLMEstimate:  module
module top_module(
    input 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198  1003   770   318   262  1353    12  5715  8265]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[21412   198  1003   770   318   262  1353    12  5715  8265]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// This is the top-level module of the 2-to-1 multiplexer.
// It takes two inputs, in1 and in2, and returns one of them,
// depending on the value of sel.

module top_module(
    input in1,
    input in2,
    input sel,
    output out);

    assign out = sel? in2 : in1;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198  1003   770   318   262  1353    12  5715  8265
    286   262   362    12  1462    12    16  3294    87   263    13   198
   1003   632  2753   734 17311    11   287    16   290   287    17    11
    290  5860   530   286   606    11   198  1003  6906   319   262  1988
    286   384    75    13   198   198 21412  1353    62 21412     7   198
  50284 15414   287    16    11   198 50284 15414   287    17    11   198
  50284 15414   384    75    11   198 50284 22915   503  1776   628 50284
    562   570   503   796   384    75    30   287    17  1058   287    16
     26   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198,  1003,   770,
           318,   262,  1353,    12,  5715,  8265,   286,   262,   362,    12,
          1462,    12,    16,  3294,    87,   263,    13,   198,  1003,   632,
          2753,   734, 17311,    11,   287,    16,   290,   287,    17,    11,
           290,  5860,   530,   286,   606,    11,   198,  1003,  6906,   319,
           262,  1988,   286,   384,    75,    13,   198,   198, 21412,  1353,
            62, 21412,     7,   198, 50284, 15414,   287,    16,    11,   198,
         50284, 15414,   287,    17,    11,   198, 50284, 15414,   384,    75,
            11,   198, 50284, 22915,   503,  1776,   628, 50284,   562,   570,
           503,   796,   384,    75,  5633,   287,    17,  1058,   287,    16,
            26,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  119
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// This is the top-level module of the 2-to-1 multiplexer.
// It takes two inputs, in1 and in2, and returns one of them,
// depending on the value of sel.

module top_module(
    input in1,
    input in2,
    input sel,
    output out);

    assign out = sel? in2 : in1;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  14.229481814999986
-------------------------------------------------------
MCTS Iteration:  54.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6049077  0.6049077  0.6049077  0.87239236 0.87239236 0.87239236
 0.87239236 0.87239236 0.87239236 0.87239236]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.347752970000101
-------------------------------------------------------
MCTS Iteration:  55.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6181391 0.6181391 0.6181391 0.6181391 0.887829  0.887829  0.887829
 0.887829  0.887829  0.887829 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[930 269  26 198 562 570 503  17 796 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | a | b | c;

end 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | a | b;

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
SEQUENCE:  [[  930   257   930   275    26   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  930   257   930   275    26   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  29
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | a | b;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.353279839000038
-------------------------------------------------------
MCTS Iteration:  56.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.63125306 0.63125306 0.63125306 0.63125306 0.63125306 0.9031287
 0.9031287  0.9031287  0.9031287  0.9031287 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.351749065000035
-------------------------------------------------------
MCTS Iteration:  57.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.64425236 0.64425236 0.64425236 0.64425236 0.64425236 0.64425236
 0.9182945  0.9182945  0.9182945  0.9182945 ]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0017723209999758183
-------------------------------------------------------
MCTS Iteration:  58.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6571402  0.6571402  0.6571402  0.6571402  0.6571402  0.6571402
 0.6571402  0.93333024 0.93333024 0.93333024]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.338056085000062
-------------------------------------------------------
MCTS Iteration:  59.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6699192 0.6699192 0.6699192 0.6699192 0.6699192 0.6699192 0.6699192
 0.6699192 0.948239  0.948239 ]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.340325661999941
-------------------------------------------------------
MCTS Iteration:  60.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6825921 0.6825921 0.6825921 0.6825921 0.6825921 0.6825921 0.6825921
 0.6825921 0.6825921 0.9630242]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.351733883999941
-------------------------------------------------------
MCTS Iteration:  61.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6951615 0.6951615 0.6951615 0.6951615 0.6951615 0.6951615 0.6951615
 0.6951615 0.6951615 0.6951615]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.34287714100003
-------------------------------------------------------
MCTS Iteration:  62.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.49417627 0.70763    0.70763    0.70763    0.70763    0.70763
 0.70763    0.70763    0.70763    0.70763   ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.339024238999968
-------------------------------------------------------
MCTS Iteration:  63.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.505      0.505      0.71999997 0.71999997 0.71999997 0.71999997
 0.71999997 0.71999997 0.71999997 0.71999997]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
// A simple test of the top- 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
// You are given a module named mod 1
LLMEstimate:  module
// A module with a parameter.
 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// This is a simple example of a 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// This is a simple example of a 1
LLMEstimate:  module
module top_module (
    input 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198  1003   921   389  1813   257  8265  3706   953]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[21412   198  1003   921   389  1813   257  8265  3706   953]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198  1003   921   389  1813   257  8265  3706   953
     62    64   326   468   362 23862   290   604 17311    11   287   617
   1502    13   220   198  1003   921  1276  2018   262   718 14090   416
   1438   284   534  1353    12  5715  8265   338 14090    25   198   198
   1003  4347   287   953    62    64   197 13924   287  1353    62 21412
    198  1003  5072   503    16   197   448    16   198  1003  5072   503
     17   197   448    17   198  1003  5128   287    16   197    64   198
   1003  5128   287    17   197    65   198  1003  5128   287    18   197
     66   198  1003  5128   287    19   197    67   198   198  1003   921
    389  1813   262  1708  8265    25   198   198 21412   953    62    64
    357  5072   503    16    11  5072   503    17    11  5128   287    16
     11  5128   287    17    11  5128   287    18    11  5128   287    19
   1776   628   198 21412  1353    62 21412   357   220   198 50284 15414
    257    11   220   198 50284 15414   275    11   220   198 50284 15414
    269    11   198 50284 15414   288    11   198 50284 22915   503    16
     11   198 50284 22915   503    17   198  1776   198   198   562   570
    503    16   796   257    26   198   562   570   503    17   796   275
     26   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198,  1003,   921,
           389,  1813,   257,  8265,  3706,   953,    62,    64,   326,   468,
           362, 23862,   290,   604, 17311,    11,   287,   617,  1502,    13,
           220,   198,  1003,   921,  1276,  2018,   262,   718, 14090,   416,
          1438,   284,   534,  1353,    12,  5715,  8265,   338, 14090,    25,
           198,   198,  1003,  4347,   287,   953,    62,    64,   197, 13924,
           287,  1353,    62, 21412,   198,  1003,  5072,   503,    16,   197,
           448,    16,   198,  1003,  5072,   503,    17,   197,   448,    17,
           198,  1003,  5128,   287,    16,   197,    64,   198,  1003,  5128,
           287,    17,   197,    65,   198,  1003,  5128,   287,    18,   197,
            66,   198,  1003,  5128,   287,    19,   197,    67,   198,   198,
          1003,   921,   389,  1813,   262,  1708,  8265,    25,   198,   198,
         21412,   953,    62,    64,   357,  5072,   503,    16,    11,  5072,
           503,    17,    11,  5128,   287,    16,    11,  5128,   287,    17,
            11,  5128,   287,    18,    11,  5128,   287,    19,  1776,   628,
           198, 21412,  1353,    62, 21412,   357,   220,   198, 50284, 15414,
           257,    11,   220,   198, 50284, 15414,   275,    11,   220,   198,
         50284, 15414,   269,    11,   198, 50284, 15414,   288,    11,   198,
         50284, 22915,   503,    16,    11,   198, 50284, 22915,   503,    17,
           198,  1776,   198,   198,   562,   570,   503,    16,   796,   257,
            26,   198,   562,   570,   503,    17,   796,   275,    26,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  227
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  19.643370553000068
-------------------------------------------------------
MCTS Iteration:  64.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.51573944 0.51573944 0.51573944 0.73227364 0.73227364 0.73227364
 0.73227364 0.73227364 0.73227364 0.73227364]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.34139341499997
-------------------------------------------------------
MCTS Iteration:  65.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.52639663 0.52639663 0.52639663 0.52639663 0.74445325 0.74445325
 0.74445325 0.74445325 0.74445325 0.74445325]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[ 26 198 562 570 503  17 796 269 930 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:  ;

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275    26   198   562   570   503    17   796   269
    930   288]]
SEQUENCE:  [[   26   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[   26   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b;
assign out2 = c | d;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.342047039000022
-------------------------------------------------------
MCTS Iteration:  66.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.53697336 0.53697336 0.53697336 0.53697336 0.53697336 0.75654095
 0.75654095 0.75654095 0.75654095 0.75654095]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.343795018999913
-------------------------------------------------------
MCTS Iteration:  67.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5474714 0.5474714 0.5474714 0.5474714 0.5474714 0.5474714 0.7685388
 0.7685388 0.7685388 0.7685388]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.001768211000012343
-------------------------------------------------------
MCTS Iteration:  68.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.55789256 0.55789256 0.55789256 0.55789256 0.55789256 0.55789256
 0.55789256 0.7804486  0.7804486  0.7804486 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.34603756499996
-------------------------------------------------------
MCTS Iteration:  69.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5682385 0.5682385 0.5682385 0.5682385 0.5682385 0.5682385 0.5682385
 0.5682385 0.7922725 0.7922725]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.346142557000007
-------------------------------------------------------
MCTS Iteration:  70.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5785109 0.5785109 0.5785109 0.5785109 0.5785109 0.5785109 0.5785109
 0.5785109 0.5785109 0.8040125]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.342831436999973
-------------------------------------------------------
MCTS Iteration:  71.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.588711 0.588711 0.588711 0.588711 0.588711 0.588711 0.588711 0.588711
 0.588711 0.588711]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.33655184500003
-------------------------------------------------------
MCTS Iteration:  72.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.42119163 0.5988406  0.5988406  0.5988406  0.5988406  0.5988406
 0.5988406  0.5988406  0.5988406  0.5988406 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.344110748000048
-------------------------------------------------------
MCTS Iteration:  73.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.43013436 0.43013436 0.60890114 0.60890114 0.60890114 0.60890114
 0.60890114 0.60890114 0.60890114 0.60890114]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A simple example of a module that 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module
module top_module( 
     1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
//
// Copyright (c) 1999 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198 21412  1353    62 21412   357   198 50284 15414]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[21412   198 21412  1353    62 21412   357   198 50284 15414]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
module top_module (
    input clk,
    input reset,
    input enable,
    output [3:0] Q,
    output c_enable,
    output c_load,
    output [3:0] c_d
); //

reg [3:0] temp;

always @(posedge clk)
begin
    if(reset)
        temp <= 4'd0;
    else if(enable)
        temp <= Q + 1;
end

assign c_enable = enable;
assign c_load = reset | (Q == 4'd12 & enable == 1'b1);
assign c_d = 4'b1;

assign Q = temp;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198 21412  1353    62 21412   357   198 50284 15414
    537    74    11   198 50284 15414 13259    11   198 50284 15414  7139
     11   198 50284 22915   685    18    25    15    60  1195    11   198
  50284 22915   269    62 21633    11   198 50284 22915   269    62  2220
     11   198 50284 22915   685    18    25    15    60   269    62    67
    198  1776  3373   198   198  2301   685    18    25    15    60 20218
     26   198   198 33770  2488     7 29813   469   537    74     8   198
  27471   198 50284   361     7 42503     8   198 50280 29510 19841   604
   1549    15    26   198 50284 17772   611     7 21633     8   198 50280
  29510 19841  1195  1343   352    26   198   437   198   198   562   570
    269    62 21633   796  7139    26   198   562   570   269    62  2220
    796 13259   930   357    48  6624   604  1549  1065  1222  7139  6624
    352     6    65    16  1776   198   562   570   269    62    67   796
    604     6    65    16    26   198   198   562   570  1195   796 20218
     26   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198, 21412,  1353,
            62, 21412,   357,   198, 50284, 15414,   537,    74,    11,   198,
         50284, 15414, 13259,    11,   198, 50284, 15414,  7139,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,  1195,    11,   198,
         50284, 22915,   269,    62, 21633,    11,   198, 50284, 22915,   269,
            62,  2220,    11,   198, 50284, 22915,   685,    18,    25,    15,
            60,   269,    62,    67,   198,  1776,  3373,   198,   198,  2301,
           685,    18,    25,    15,    60, 20218,    26,   198,   198, 33770,
          2488,     7, 29813,   469,   537,    74,     8,   198, 27471,   198,
         50284,   361,     7, 42503,     8,   198, 50280, 29510, 19841,   604,
          1549,    15,    26,   198, 50284, 17772,   611,     7, 21633,     8,
           198, 50280, 29510, 19841,  1195,  1343,   352,    26,   198,   437,
           198,   198,   562,   570,   269,    62, 21633,   796,  7139,    26,
           198,   562,   570,   269,    62,  2220,   796, 13259,   930,   357,
            48,  6624,   604,  1549,  1065,  1222,  7139,  6624,   352,     6,
            65,    16,  1776,   198,   562,   570,   269,    62,    67,   796,
           604,     6,    65,    16,    26,   198,   198,   562,   570,  1195,
           796, 20218,    26,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  191
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
module top_module (
    input clk,
    input reset,
    input enable,
    output [3:0] Q,
    output c_enable,
    output c_load,
    output [3:0] c_d
); //

reg [3:0] temp;

always @(posedge clk)
begin
    if(reset)
        temp <= 4'd0;
    else if(enable)
        temp <= Q + 1;
end

assign c_enable = enable;
assign c_load = reset | (Q == 4'd12 & enable == 1'b1);
assign c_d = 4'b1;

assign Q = temp;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  17.830778383999927
-------------------------------------------------------
MCTS Iteration:  74.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.43901676 0.43901676 0.43901676 0.61889386 0.61889386 0.61889386
 0.61889386 0.61889386 0.61889386 0.61889386]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.349548408000032
-------------------------------------------------------
MCTS Iteration:  75.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.44784015 0.44784015 0.44784015 0.44784015 0.6288202  0.6288202
 0.6288202  0.6288202  0.6288202  0.6288202 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[930 269  26 198 562 570 503  17 796 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | a;

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | ~(a | b | c);
 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:  ;

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
SEQUENCE:  [[ 930  357   64 1222  275    8  930  357   65 1222]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[ 930  357   64 1222  275    8  930  357   65 1222]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | (a & b) | (b & c);

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288   930   357    64  1222   275     8   930   357    65  1222
    269  1776   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,   930,   275,   930,   269,    26,   198,
           562,   570,   503,    17,   796,   288,   930,   357,    64,  1222,
           275,     8,   930,   357,    65,  1222,   269,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  36
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | (a & b) | (b & c);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.09140455499994
-------------------------------------------------------
MCTS Iteration:  76.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.45660573 0.45660573 0.45660573 0.45660573 0.45660573 0.6386814
 0.6386814  0.6386814  0.6386814  0.6386814 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.346832978999942
-------------------------------------------------------
MCTS Iteration:  77.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.46531445 0.46531445 0.46531445 0.46531445 0.46531445 0.46531445
 0.64847875 0.64847875 0.64847875 0.64847875]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.001737214999934622
-------------------------------------------------------
MCTS Iteration:  78.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4739675 0.4739675 0.4739675 0.4739675 0.4739675 0.4739675 0.4739675
 0.6582135 0.6582135 0.6582135]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.345433348000029
-------------------------------------------------------
MCTS Iteration:  79.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.48256606 0.48256606 0.48256606 0.48256606 0.48256606 0.48256606
 0.48256606 0.48256606 0.66788685 0.66788685]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.336453692999953
-------------------------------------------------------
MCTS Iteration:  80.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4911111 0.4911111 0.4911111 0.4911111 0.4911111 0.4911111 0.4911111
 0.4911111 0.4911111 0.6775   ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.341549255000018
-------------------------------------------------------
MCTS Iteration:  81.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.49960345 0.49960345 0.49960345 0.49960345 0.49960345 0.49960345
 0.49960345 0.49960345 0.49960345 0.49960345]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.347522996999942
-------------------------------------------------------
MCTS Iteration:  82.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.35723984 0.5080442  0.5080442  0.5080442  0.5080442  0.5080442
 0.5080442  0.5080442  0.5080442  0.5080442 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.344912751000038
-------------------------------------------------------
MCTS Iteration:  83.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.36479092 0.36479092 0.5164344  0.5164344  0.5164344  0.5164344
 0.5164344  0.5164344  0.5164344  0.5164344 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// This is a testbench for the 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module(
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A module that implements a simple counter 1
LLMEstimate:  module
module top_module (
    input 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198 21412  1353    62 21412     7   198 50284 15414]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[21412   198 21412  1353    62 21412     7   198 50284 15414]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
module top_module(
    input clk,
    input reset,    // Active-high synchronous reset to 5'h1
    output [4:0] q
); 
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 5'h1;
            else
                begin
                    q[4] <= q[0];
                    q[3] <= q[4];
                    q[2] <= q[3] ^ q[0];
                    q[1] <= q[2];
                    q[0] <= q[1] ^ q[0];
                end
        end

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198 21412  1353    62 21412     7   198 50284 15414
    537    74    11   198 50284 15414 13259    11 50284  1003 14199    12
   8929 18305   516 13259   284   642     6    71    16   198 50284 22915
    685    19    25    15    60 10662   198  1776   220   198 50284   198
  50284 33770  2488   357 29813   469   537    74     8   198 50280 27471
    198 50276   361     7 42503     8   198 50272    80 19841   642     6
     71    16    26   198 50276 17772   198 50272 27471   198 50268    80
     58    19    60 19841 10662    58    15 11208   198 50268    80    58
     18    60 19841 10662    58    19 11208   198 50268    80    58    17
     60 19841 10662    58    18    60 10563 10662    58    15 11208   198
  50268    80    58    16    60 19841 10662    58    17 11208   198 50268
     80    58    15    60 19841 10662    58    16    60 10563 10662    58
     15 11208   198 50272   437   198 50280   437   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198, 21412,  1353,
            62, 21412,     7,   198, 50284, 15414,   537,    74,    11,   198,
         50284, 15414, 13259,    11, 50284,  1003, 14199,    12,  8929, 18305,
           516, 13259,   284,   642,     6,    71,    16,   198, 50284, 22915,
           685,    19,    25,    15,    60, 10662,   198,  1776,   220,   198,
         50284,   198, 50284, 33770,  2488,   357, 29813,   469,   537,    74,
             8,   198, 50280, 27471,   198, 50276,   361,     7, 42503,     8,
           198, 50272,    80, 19841,   642,     6,    71,    16,    26,   198,
         50276, 17772,   198, 50272, 27471,   198, 50268,    80,    58,    19,
            60, 19841, 10662,    58,    15, 11208,   198, 50268,    80,    58,
            18,    60, 19841, 10662,    58,    19, 11208,   198, 50268,    80,
            58,    17,    60, 19841, 10662,    58,    18,    60, 10563, 10662,
            58,    15, 11208,   198, 50268,    80,    58,    16,    60, 19841,
         10662,    58,    17, 11208,   198, 50268,    80,    58,    15,    60,
         19841, 10662,    58,    16,    60, 10563, 10662,    58,    15, 11208,
           198, 50272,   437,   198, 50280,   437,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  174
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
module top_module(
    input clk,
    input reset,    // Active-high synchronous reset to 5'h1
    output [4:0] q
); 
    
    always @ (posedge clk)
        begin
            if(reset)
                q <= 5'h1;
            else
                begin
                    q[4] <= q[0];
                    q[3] <= q[4];
                    q[2] <= q[3] ^ q[0];
                    q[1] <= q[2];
                    q[0] <= q[1] ^ q[0];
                end
        end

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  16.983884818999968
-------------------------------------------------------
MCTS Iteration:  84.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.37229717 0.37229717 0.37229717 0.5247745  0.5247745  0.5247745
 0.5247745  0.5247745  0.5247745  0.5247745 ]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.344265249999921
-------------------------------------------------------
MCTS Iteration:  85.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3797593  0.3797593  0.3797593  0.3797593  0.53306586 0.53306586
 0.53306586 0.53306586 0.53306586 0.53306586]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[930 269  26 198 562 570 503  17 796 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   | a;

endmodule 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | (a & b) | (a & 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | ~(a | b | c);
 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | ~(a | b | c);
 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
SEQUENCE:  [[ 930 5299    7   64  930  275  930  269 1776  198]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[ 930 5299    7   64  930  275  930  269 1776  198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | ~(a | b | c);

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288   930  5299     7    64   930   275   930   269  1776   198
    198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,   930,   275,   930,   269,    26,   198,
           562,   570,   503,    17,   796,   288,   930,  5299,     7,    64,
           930,   275,   930,   269,  1776,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  33
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | ~(a | b | c);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.94142766899995
-------------------------------------------------------
MCTS Iteration:  86.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3871783 0.3871783 0.3871783 0.3871783 0.3871783 0.5413093 0.5413093
 0.5413093 0.5413093 0.5413093]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.34212831100001
-------------------------------------------------------
MCTS Iteration:  87.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.39455473 0.39455473 0.39455473 0.39455473 0.39455473 0.39455473
 0.5495052  0.5495052  0.5495052  0.5495052 ]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0017292349999706857
-------------------------------------------------------
MCTS Iteration:  88.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.40188944 0.40188944 0.40188944 0.40188944 0.40188944 0.40188944
 0.40188944 0.5576549  0.5576549  0.5576549 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.338399708999987
-------------------------------------------------------
MCTS Iteration:  89.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4091829  0.4091829  0.4091829  0.4091829  0.4091829  0.4091829
 0.4091829  0.4091829  0.56575876 0.56575876]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.341109681000034
-------------------------------------------------------
MCTS Iteration:  90.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.41643608 0.41643608 0.41643608 0.41643608 0.41643608 0.41643608
 0.41643608 0.41643608 0.41643608 0.5738179 ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.338843448000034
-------------------------------------------------------
MCTS Iteration:  91.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.42364955 0.42364955 0.42364955 0.42364955 0.42364955 0.42364955
 0.42364955 0.42364955 0.42364955 0.42364955]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.345106862999955
-------------------------------------------------------
MCTS Iteration:  92.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.30074888 0.4308238  0.4308238  0.4308238  0.4308238  0.4308238
 0.4308238  0.4308238  0.4308238  0.4308238 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
LLMEstimate:   d);
endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  288  1776   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.351170835000062
-------------------------------------------------------
MCTS Iteration:  93.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.30723602 0.30723602 0.43795967 0.43795967 0.43795967 0.43795967
 0.43795967 0.43795967 0.43795967 0.43795967]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
SEQUENCE:  [[562 570 503  17 796 275  26 198 198 437]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
module top_module (
    input 1
LLMEstimate:  module
// This is a testbench for the 1
LLMEstimate:  module
// A simple testbench for the top 1
LLMEstimate:  module
// This is the top-level module 1
LLMEstimate:  module
// This is the top-level module 1
LLMEstimate:  module
module top_module(
    input 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
SEQUENCE:  [[21412   198  1003   317  2829  1332 26968   329   262  1353]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[21412   198  1003   317  2829  1332 26968   329   262  1353]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// A simple testbench for the top-level module.

`include "mod_a.v"

module top_module (
    input a,
    input b,
    input c,
    input d,
    output out1,
    output out2
);
    assign out1 = a;
    assign out2 = b;

endmodule
[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437 21412   198  1003   317  2829  1332 26968   329   262  1353
     12  5715  8265    13   198   198    63 17256   366  4666    62    64
     13    85     1   198   198 21412  1353    62 21412   357   198 50284
  15414   257    11   198 50284 15414   275    11   198 50284 15414   269
     11   198 50284 15414   288    11   198 50284 22915   503    16    11
    198 50284 22915   503    17   198  1776   198 50284   562   570   503
     16   796   257    26   198 50284   562   570   503    17   796   275
     26   198   198   437 21412]]
tensor([[   68,   294,  1003,   921,   389,  1813,   257,  8265,  3706,   953,
            62,    64,   326,   468,   362, 23862,   290,   604, 17311,    11,
           287,   617,  1502,    13,   220,   198,  1003,   921,  1276,  2018,
           262,   718, 14090,   416,  1438,   284,   534,  1353,    12,  5715,
          8265,   338, 14090,    25,   198,   198,  1003,  4347,   287,   953,
            62,    64,   197, 13924,   287,  1353,    62, 21412,   198,  1003,
          5072,   503,    16,   197,   448,    16,   198,  1003,  5072,   503,
            17,   197,   448,    17,   198,  1003,  5128,   287,    16,   197,
            64,   198,  1003,  5128,   287,    17,   197,    65,   198,  1003,
          5128,   287,    18,   197,    66,   198,  1003,  5128,   287,    19,
           197,    67,   198,   198,  1003,   921,   389,  1813,   262,  1708,
          8265,    25,   198,   198, 21412,   953,    62,    64,   357,  5072,
           503,    16,    11,  5072,   503,    17,    11,  5128,   287,    16,
            11,  5128,   287,    17,    11,  5128,   287,    18,    11,  5128,
           287,    19,  1776,   628,   198, 21412,  1353,    62, 21412,   357,
           220,   198, 50284, 15414,   257,    11,   220,   198, 50284, 15414,
           275,    11,   220,   198, 50284, 15414,   269,    11,   198, 50284,
         15414,   288,    11,   198, 50284, 22915,   503,    16,    11,   198,
         50284, 22915,   503,    17,   198,  1776,   198,   198,   562,   570,
           503,    16,   796,   257,    26,   198,   562,   570,   503,    17,
           796,   275,    26,   198,   198,   437, 21412,   198,  1003,   317,
          2829,  1332, 26968,   329,   262,  1353,    12,  5715,  8265,    13,
           198,   198,    63, 17256,   366,  4666,    62,    64,    13,    85,
             1,   198,   198, 21412,  1353,    62, 21412,   357,   198, 50284,
         15414,   257,    11,   198, 50284, 15414,   275,    11,   198, 50284,
         15414,   269,    11,   198, 50284, 15414,   288,    11,   198, 50284,
         22915,   503,    16,    11,   198, 50284, 22915,   503,    17,   198,
          1776,   198, 50284,   562,   570,   503,    16,   796,   257,    26,
           198, 50284,   562,   570,   503,    17,   796,   275,    26,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  107
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a;
assign out2 = b;

endmodule
// A simple testbench for the top-level module.

`include "mod_a.v"

module top_module (
    input a,
    input b,
    input c,
    input d,
    output out1,
    output out2
);
    assign out1 = a;
    assign out2 = b;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.636225023999941
-------------------------------------------------------
MCTS Iteration:  94.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3136887  0.3136887  0.3136887  0.44505763 0.44505763 0.44505763
 0.44505763 0.44505763 0.44505763 0.44505763]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.346342434000007
-------------------------------------------------------
MCTS Iteration:  95.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.32010752 0.32010752 0.32010752 0.32010752 0.45211828 0.45211828
 0.45211828 0.45211828 0.45211828 0.45211828]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
SEQUENCE:  [[930 269  26 198 562 570 503  17 796 288]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | a | b;

endmodule 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | (a & b) | (b & 1
LLMEstimate:   | (a & b);

endmodule 1
LLMEstimate:   | (a & b);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
SEQUENCE:  [[  930   257   930   275    26   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  930   257   930   275    26   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  29
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

assign out1 = a | b | c;
assign out2 = d | a | b;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.342309306000061
-------------------------------------------------------
MCTS Iteration:  96.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.32649308 0.32649308 0.32649308 0.32649308 0.32649308 0.45914245
 0.45914245 0.45914245 0.45914245 0.45914245]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.341194101000042
-------------------------------------------------------
MCTS Iteration:  97.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.33284563 0.33284563 0.33284563 0.33284563 0.33284563 0.33284563
 0.46613026 0.46613026 0.46613026 0.46613026]  taking action:  6
Leaf selection - depth:  1
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  4
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0017353959999582003
-------------------------------------------------------
MCTS Iteration:  98.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.339166   0.339166   0.339166   0.339166   0.339166   0.339166
 0.339166   0.47308266 0.47308266 0.47308266]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.347051995000015
-------------------------------------------------------
MCTS Iteration:  99.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3454545  0.3454545  0.3454545  0.3454545  0.3454545  0.3454545
 0.3454545  0.3454545  0.48000002 0.48000002]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.346779502000004
-------------------------------------------------------
MCTS Iteration:  100.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3517117  0.3517117  0.3517117  0.3517117  0.3517117  0.3517117
 0.3517117  0.3517117  0.3517117  0.48688293]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
SEQUENCE:  [[ 11 503  17  11 257  11 275  11 269  11]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
LLMEstimate:   d);

endmodule 1
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  288  1776   198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Checking if done:
tokens generated:  26
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a instance1 (out1, out2, a, b, c, d);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.340989678999904
----
 Tree depth: 0
 Node: action=None
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776]]
• Child Action scores:[0.35793787 0.35793787 0.35793787 0.35793787 0.35793787 0.35793787
 0.35793787 0.35793787 0.35793787 0.35793787]
• Child averaged monte carlo:-0.9901960784313726
• Child probablities:[4.05774210e-13 2.03511615e-03 8.52882650e-26 4.23441617e-40
 2.86368626e-06 4.07079948e-55 1.47962020e-01 1.40213632e-23
 3.97182509e-16 4.70567548e-11]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=101.0,Q=-0.9901960784313726,M=-0.9901960784313726
----
 Tree depth: 1
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628   198   437 21412]]
• Child Action scores:[4.5769424 4.5769424 4.5769424 4.5769424 4.5769424 4.5769424 4.5769424
 4.5769424 4.5769424 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=9
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257    26   198   562   570   503    17   796   275    26   198
    198   437]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275    26   198   562   570   503    17   796   269
    930   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275    26   198   562   570   503    17   796   269
    930   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275    26   198   562   570   503    17   796   269
    930   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198   198   562   570   503    16
    796   257   930   275   930   269    26   198   562   570   503    17
    796   288]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   628 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
END ROBUST/MAX VALUES:
Adding child.
STATE:  [[   68   294  1003   921   389  1813   257  8265  3706   953    62    64
    326   468   362 23862   290   604 17311    11   287   617  1502    13
    220   198  1003   921  1276  2018   262   718 14090   416  1438   284
    534  1353    12  5715  8265   338 14090    25   198   198  1003  4347
    287   953    62    64   197 13924   287  1353    62 21412   198  1003
   5072   503    16   197   448    16   198  1003  5072   503    17   197
    448    17   198  1003  5128   287    16   197    64   198  1003  5128
    287    17   197    65   198  1003  5128   287    18   197    66   198
   1003  5128   287    19   197    67   198   198  1003   921   389  1813
    262  1708  8265    25   198   198 21412   953    62    64   357  5072
    503    16    11  5072   503    17    11  5128   287    16    11  5128
    287    17    11  5128   287    18    11  5128   287    19  1776   628
    198 21412  1353    62 21412   357   220   198 50284 15414   257    11
    220   198 50284 15414   275    11   220   198 50284 15414   269    11
    198 50284 15414   288    11   198 50284 22915   503    16    11   198
  50284 22915   503    17   198  1776   198 50284  4666    62    64  4554
     16   357   448    16    11   503    17    11   257    11   275    11
    269    11]]
SEQUENCE:  [[  288  1776   198   437 21412]]
Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Checking if done:
tokens generated:  25
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
e th// You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. 
// You must connect the 6 ports by name to your top-level module's ports:

// Port in mod_a	Port in top_module
// output out1	out1
// output out2	out2
// input in1	a
// input in2	b
// input in3	c
// input in4	d

// You are given the following module:

module mod_a ( output out1, output out2, input in1, input in2, input in3, input in4);


module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 (out1, out2, a, b, c, d);
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_name/Module_name_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Total Time:  957.5726
