Using GPU
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_prompts/Mux256to1v.v
Prompt str:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );
Loading LLM model...
Loaded LLM:  shailja/fine-tuned-codegen-16B-Verilog
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  100
********-- EPISODE-1--************
ORIG MODULE:  top_module
--------MCTS-------
Env seed:  42
Initializing MCTS tree.
Initialize search (creating root node)

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[sel* 1
LLMEstimate:  

    assign out = in[ sel 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  628 50284   562   570   503   796   287    58   741     9]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  1.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.325014706999994
-------------------------------------------------------
MCTS Iteration:  2.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.338546304000005
-------------------------------------------------------
MCTS Iteration:  3.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.342135386999999
-------------------------------------------------------
MCTS Iteration:  4.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.336476454999996
-------------------------------------------------------
MCTS Iteration:  5.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.340772873999995
-------------------------------------------------------
MCTS Iteration:  6.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.34544756699998
-------------------------------------------------------
MCTS Iteration:  7.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.365645020000017
-------------------------------------------------------
MCTS Iteration:  8.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.349790840999987
-------------------------------------------------------
MCTS Iteration:  9.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   741     9]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
LLMEstimate:  4+3 : sel*4];
 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[   19    10    18  1058   384    75     9    19 11208   198]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.356993191000015
-------------------------------------------------------
MCTS Iteration:  10.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]  taking action:  9
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
SEQUENCE:  [[  628 50284   562   570   503   796   287    58   384    75]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
LLMEstimate:  *4+3 : sel*4 ]; 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[    9    19    10    18  1058   384    75     9    19 28013]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013   198   198   437 21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   384,    75,     9,
            19,    10,    18,  1058,   384,    75,     9,    19, 28013,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.426231116999986
-------------------------------------------------------
MCTS Iteration:  11.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.8902302 1.8902302 1.8902302 1.8902302 1.8902302 1.8902302 1.8902302
 1.8902302 1.8902302 1.8902302]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.470996195999987
-------------------------------------------------------
MCTS Iteration:  12.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9918869 1.9878304 1.9878304 1.9878304 1.9878304 1.9878304 1.9878304
 1.9878304 1.9878304 1.9878304]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.475832588999992
-------------------------------------------------------
MCTS Iteration:  13.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0544956 1.0544956 2.0817435 2.0817435 2.0817435 2.0817435 2.0817435
 2.0817435 2.0817435 2.0817435]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.474233283000018
-------------------------------------------------------
MCTS Iteration:  14.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1149056 1.1149056 1.1149056 2.1723585 2.1723585 2.1723585 2.1723585
 2.1723585 2.1723585 2.1723585]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.479852319999992
-------------------------------------------------------
MCTS Iteration:  15.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1733334 1.1733334 1.1733334 1.1733334 2.26      2.26      2.26
 2.26      2.26      2.26     ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.477655327000008
-------------------------------------------------------
MCTS Iteration:  16.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2299619 1.2299619 1.2299619 1.2299619 1.2299619 2.3449428 2.3449428
 2.3449428 2.3449428 2.3449428]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.483144151999994
-------------------------------------------------------
MCTS Iteration:  17.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2849481 1.2849481 1.2849481 1.2849481 1.2849481 1.2849481 2.427422
 2.427422  2.427422  2.427422 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.489088372999987
-------------------------------------------------------
MCTS Iteration:  18.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3384268 1.3384268 1.3384268 1.3384268 1.3384268 1.3384268 1.3384268
 2.5076404 2.5076404 2.5076404]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.48530905299998
-------------------------------------------------------
MCTS Iteration:  19.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3905158 1.3905158 1.3905158 1.3905158 1.3905158 1.3905158 1.3905158
 1.3905158 2.5857737 2.5857737]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.484212010000022
-------------------------------------------------------
MCTS Iteration:  20.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.441318  1.441318  1.441318  1.441318  1.441318  1.441318  1.441318
 1.441318  1.441318  2.6619773]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.494023080999966
-------------------------------------------------------
MCTS Iteration:  21.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.4909244 1.4909244 1.4909244 1.4909244 1.4909244 1.4909244 1.4909244
 1.4909244 1.4909244 1.4909244]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.491824585000018
-------------------------------------------------------
MCTS Iteration:  22.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9045619 1.5394158 1.5394158 1.5394158 1.5394158 1.5394158 1.5394158
 1.5394158 1.5394158 1.5394158]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.491985830000033
-------------------------------------------------------
MCTS Iteration:  23.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9401479 0.9401479 1.5868638 1.5868638 1.5868638 1.5868638 1.5868638
 1.5868638 1.5868638 1.5868638]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.506045695000012
-------------------------------------------------------
MCTS Iteration:  24.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.975     0.975     0.975     1.6333332 1.6333332 1.6333332 1.6333332
 1.6333332 1.6333332 1.6333332]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.488866937000012
-------------------------------------------------------
MCTS Iteration:  25.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0091617 1.0091617 1.0091617 1.0091617 1.6788821 1.6788821 1.6788821
 1.6788821 1.6788821 1.6788821]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.488294327000006
-------------------------------------------------------
MCTS Iteration:  26.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0426726 1.0426726 1.0426726 1.0426726 1.0426726 1.7235634 1.7235634
 1.7235634 1.7235634 1.7235634]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.494353783000008
-------------------------------------------------------
MCTS Iteration:  27.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0755684 1.0755684 1.0755684 1.0755684 1.0755684 1.0755684 1.7674246
 1.7674246 1.7674246 1.7674246]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.500655018000032
-------------------------------------------------------
MCTS Iteration:  28.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1078819 1.1078819 1.1078819 1.1078819 1.1078819 1.1078819 1.1078819
 1.8105092 1.8105092 1.8105092]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.494868009000015
-------------------------------------------------------
MCTS Iteration:  29.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1396428 1.1396428 1.1396428 1.1396428 1.1396428 1.1396428 1.1396428
 1.1396428 1.8528571 1.8528571]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.495238650999966
-------------------------------------------------------
MCTS Iteration:  30.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1708786 1.1708786 1.1708786 1.1708786 1.1708786 1.1708786 1.1708786
 1.1708786 1.1708786 1.8945048]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498374263000017
-------------------------------------------------------
MCTS Iteration:  31.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2016147 1.2016147 1.2016147 1.2016147 1.2016147 1.2016147 1.2016147
 1.2016147 1.2016147 1.2016147]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.497913227999959
-------------------------------------------------------
MCTS Iteration:  32.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7854993 1.2318741 1.2318741 1.2318741 1.2318741 1.2318741 1.2318741
 1.2318741 1.2318741 1.2318741]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498654228999953
-------------------------------------------------------
MCTS Iteration:  33.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8093428 0.8093428 1.2616785 1.2616785 1.2616785 1.2616785 1.2616785
 1.2616785 1.2616785 1.2616785]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.496296625000014
-------------------------------------------------------
MCTS Iteration:  34.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.832838  0.832838  0.832838  1.2910476 1.2910476 1.2910476 1.2910476
 1.2910476 1.2910476 1.2910476]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.490805819999991
-------------------------------------------------------
MCTS Iteration:  35.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8559999 0.8559999 0.8559999 0.8559999 1.3199999 1.3199999 1.3199999
 1.3199999 1.3199999 1.3199999]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498682870999971
-------------------------------------------------------
MCTS Iteration:  36.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.87884253 0.87884253 0.87884253 0.87884253 0.87884253 1.3485532
 1.3485532  1.3485532  1.3485532  1.3485532 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.497120607999989
-------------------------------------------------------
MCTS Iteration:  37.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9013782 0.9013782 0.9013782 0.9013782 0.9013782 0.9013782 1.3767228
 1.3767228 1.3767228 1.3767228]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.495305298999995
-------------------------------------------------------
MCTS Iteration:  38.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.92361945 0.92361945 0.92361945 0.92361945 0.92361945 0.92361945
 0.92361945 1.4045243  1.4045243  1.4045243 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.492122679999966
-------------------------------------------------------
MCTS Iteration:  39.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9455772 0.9455772 0.9455772 0.9455772 0.9455772 0.9455772 0.9455772
 0.9455772 1.4319715 1.4319715]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.502053315000012
-------------------------------------------------------
MCTS Iteration:  40.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9672622 0.9672622 0.9672622 0.9672622 0.9672622 0.9672622 0.9672622
 0.9672622 0.9672622 1.4590778]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.495893521000028
-------------------------------------------------------
MCTS Iteration:  41.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9886845 0.9886845 0.9886845 0.9886845 0.9886845 0.9886845 0.9886845
 0.9886845 0.9886845 0.9886845]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.494704633000026
-------------------------------------------------------
MCTS Iteration:  42.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.67487746 1.0098529  1.0098529  1.0098529  1.0098529  1.0098529
 1.0098529  1.0098529  1.0098529  1.0098529 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.496575944000028
-------------------------------------------------------
MCTS Iteration:  43.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6923142 0.6923142 1.030777  1.030777  1.030777  1.030777  1.030777
 1.030777  1.030777  1.030777 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.48275114699993
-------------------------------------------------------
MCTS Iteration:  44.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.70955354 0.70955354 0.70955354 1.0514643  1.0514643  1.0514643
 1.0514643  1.0514643  1.0514643  1.0514643 ]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.492220526999972
-------------------------------------------------------
MCTS Iteration:  45.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7266026 0.7266026 0.7266026 0.7266026 1.071923  1.071923  1.071923
 1.071923  1.071923  1.071923 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.497439385000007
-------------------------------------------------------
MCTS Iteration:  46.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.74346715 0.74346715 0.74346715 0.74346715 0.74346715 1.0921607
 1.0921607  1.0921607  1.0921607  1.0921607 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498638517000018
-------------------------------------------------------
MCTS Iteration:  47.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7601535 0.7601535 0.7601535 0.7601535 0.7601535 0.7601535 1.112184
 1.112184  1.112184  1.112184 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.503192726999941
-------------------------------------------------------
MCTS Iteration:  48.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7766667 0.7766667 0.7766667 0.7766667 0.7766667 0.7766667 0.7766667
 1.132     1.132     1.132    ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.496383889000072
-------------------------------------------------------
MCTS Iteration:  49.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7930123 0.7930123 0.7930123 0.7930123 0.7930123 0.7930123 0.7930123
 0.7930123 1.1516147 1.1516147]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.500853856999925
-------------------------------------------------------
MCTS Iteration:  50.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8091952 0.8091952 0.8091952 0.8091952 0.8091952 0.8091952 0.8091952
 0.8091952 0.8091952 1.1710343]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.499075364999953
-------------------------------------------------------
MCTS Iteration:  51.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8252203 0.8252203 0.8252203 0.8252203 0.8252203 0.8252203 0.8252203
 0.8252203 0.8252203 0.8252203]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.490078180000069
-------------------------------------------------------
MCTS Iteration:  52.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5780788  0.84109193 0.84109193 0.84109193 0.84109193 0.84109193
 0.84109193 0.84109193 0.84109193 0.84109193]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.502496486000041
-------------------------------------------------------
MCTS Iteration:  53.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5915553  0.5915553  0.85681456 0.85681456 0.85681456 0.85681456
 0.85681456 0.85681456 0.85681456 0.85681456]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.495615052999938
-------------------------------------------------------
MCTS Iteration:  54.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6049077  0.6049077  0.6049077  0.87239236 0.87239236 0.87239236
 0.87239236 0.87239236 0.87239236 0.87239236]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498615825999991
-------------------------------------------------------
MCTS Iteration:  55.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6181391 0.6181391 0.6181391 0.6181391 0.887829  0.887829  0.887829
 0.887829  0.887829  0.887829 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.501939808999964
-------------------------------------------------------
MCTS Iteration:  56.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.63125306 0.63125306 0.63125306 0.63125306 0.63125306 0.9031287
 0.9031287  0.9031287  0.9031287  0.9031287 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.497593409000046
-------------------------------------------------------
MCTS Iteration:  57.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.64425236 0.64425236 0.64425236 0.64425236 0.64425236 0.64425236
 0.9182945  0.9182945  0.9182945  0.9182945 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.507472724999957
-------------------------------------------------------
MCTS Iteration:  58.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6571402  0.6571402  0.6571402  0.6571402  0.6571402  0.6571402
 0.6571402  0.93333024 0.93333024 0.93333024]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.48826945799999
-------------------------------------------------------
MCTS Iteration:  59.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6699192 0.6699192 0.6699192 0.6699192 0.6699192 0.6699192 0.6699192
 0.6699192 0.948239  0.948239 ]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.48968017499999
-------------------------------------------------------
MCTS Iteration:  60.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6825921 0.6825921 0.6825921 0.6825921 0.6825921 0.6825921 0.6825921
 0.6825921 0.6825921 0.9630242]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.501984459000028
-------------------------------------------------------
MCTS Iteration:  61.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6951615 0.6951615 0.6951615 0.6951615 0.6951615 0.6951615 0.6951615
 0.6951615 0.6951615 0.6951615]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.495786705
-------------------------------------------------------
MCTS Iteration:  62.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.49417627 0.70763    0.70763    0.70763    0.70763    0.70763
 0.70763    0.70763    0.70763    0.70763   ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498830438000027
-------------------------------------------------------
MCTS Iteration:  63.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.505      0.505      0.71999997 0.71999997 0.71999997 0.71999997
 0.71999997 0.71999997 0.71999997 0.71999997]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.490455670000074
-------------------------------------------------------
MCTS Iteration:  64.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.51573944 0.51573944 0.51573944 0.73227364 0.73227364 0.73227364
 0.73227364 0.73227364 0.73227364 0.73227364]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.494222762999925
-------------------------------------------------------
MCTS Iteration:  65.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.52639663 0.52639663 0.52639663 0.52639663 0.74445325 0.74445325
 0.74445325 0.74445325 0.74445325 0.74445325]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.493534828000065
-------------------------------------------------------
MCTS Iteration:  66.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.53697336 0.53697336 0.53697336 0.53697336 0.53697336 0.75654095
 0.75654095 0.75654095 0.75654095 0.75654095]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.49958997400006
-------------------------------------------------------
MCTS Iteration:  67.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5474714 0.5474714 0.5474714 0.5474714 0.5474714 0.5474714 0.7685388
 0.7685388 0.7685388 0.7685388]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.49949845599997
-------------------------------------------------------
MCTS Iteration:  68.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.55789256 0.55789256 0.55789256 0.55789256 0.55789256 0.55789256
 0.55789256 0.7804486  0.7804486  0.7804486 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.491444718000025
-------------------------------------------------------
MCTS Iteration:  69.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5682385 0.5682385 0.5682385 0.5682385 0.5682385 0.5682385 0.5682385
 0.5682385 0.7922725 0.7922725]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.495187919999921
-------------------------------------------------------
MCTS Iteration:  70.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5785109 0.5785109 0.5785109 0.5785109 0.5785109 0.5785109 0.5785109
 0.5785109 0.5785109 0.8040125]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.497399124000026
-------------------------------------------------------
MCTS Iteration:  71.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.588711 0.588711 0.588711 0.588711 0.588711 0.588711 0.588711 0.588711
 0.588711 0.588711]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.490931585999988
-------------------------------------------------------
MCTS Iteration:  72.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.42119163 0.5988406  0.5988406  0.5988406  0.5988406  0.5988406
 0.5988406  0.5988406  0.5988406  0.5988406 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.497574786999962
-------------------------------------------------------
MCTS Iteration:  73.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.43013436 0.43013436 0.60890114 0.60890114 0.60890114 0.60890114
 0.60890114 0.60890114 0.60890114 0.60890114]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198 50284  1003   383  2029   460   307 27009    11]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[50284   198 50284  1003   383  2029   460   307 27009    11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
    // The above can be simplified, using part selects and part selects can be done on vectors.
    // The below is a simplified example of what the above could be.
    // assign out = {in[sel*4+3], in[sel*4+2], in[sel*4+1], in[sel*4+0]};
    
    // Yet another option is to use a for loop to do the assignment.
    // assign out = 0;
    // for (int i=0; i<sel; i++) begin
    //     out = out + in[i*4+3 : i*4];
    // end
    
    // Yet another option is to use a generate-for loop to do the assignment.
    // This is the cleanest solution but you have to know how to use the generate-for loop.
    // See the example in the generate-for loop section.
    
    // Yet another option is to use a function.
    // Convert the function to a module.
    
    // Yet another option is to use a case statement.
    // This is the most readable solution.
    
endmodule
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198 50284   198 50284  1003   383
   2029   460   307 27009    11  1262   636 40573   290   636 40573   460
    307  1760   319 30104    13   198 50284  1003   383  2174   318   257
  27009  1672   286   644   262  2029   714   307    13   198 50284  1003
   8333   503   796  1391   259    58   741     9    19    10    18  4357
    287    58   741     9    19    10    17  4357   287    58   741     9
     19    10    16  4357   287    58   741     9    19    10    15    60
  19629   198 50284   198 50284  1003  6430  1194  3038   318   284   779
    257   329  9052   284   466   262 16237    13   198 50284  1003  8333
    503   796   657    26   198 50284  1003   329   357   600  1312    28
     15    26  1312    27   741    26  1312 29577  2221   198 50284  1003
  50283   448   796   503  1343   287    58    72     9    19    10    18
   1058  1312     9    19 11208   198 50284  1003   886   198 50284   198
  50284  1003  6430  1194  3038   318   284   779   257  7716    12  1640
   9052   284   466   262 16237    13   198 50284  1003   770   318   262
   3424   395  4610   475   345   423   284   760   703   284   779   262
   7716    12  1640  9052    13   198 50284  1003  4091   262  1672   287
    262  7716    12  1640  9052  2665    13   198 50284   198 50284  1003
   6430  1194  3038   318   284   779   257  2163    13   198 50284  1003
  38240   262  2163   284   257  8265    13   198 50284   198 50284  1003
   6430  1194  3038   318   284   779   257  1339  2643    13   198 50284
   1003   770   318   262   749 31744  4610    13   198 50284   198   437
  21412]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198, 50284,
           198, 50284,  1003,   383,  2029,   460,   307, 27009,    11,  1262,
           636, 40573,   290,   636, 40573,   460,   307,  1760,   319, 30104,
            13,   198, 50284,  1003,   383,  2174,   318,   257, 27009,  1672,
           286,   644,   262,  2029,   714,   307,    13,   198, 50284,  1003,
          8333,   503,   796,  1391,   259,    58,   741,     9,    19,    10,
            18,  4357,   287,    58,   741,     9,    19,    10,    17,  4357,
           287,    58,   741,     9,    19,    10,    16,  4357,   287,    58,
           741,     9,    19,    10,    15,    60, 19629,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,   318,   284,   779,   257,   329,
          9052,   284,   466,   262, 16237,    13,   198, 50284,  1003,  8333,
           503,   796,   657,    26,   198, 50284,  1003,   329,   357,   600,
          1312,    28,    15,    26,  1312,    27,   741,    26,  1312, 29577,
          2221,   198, 50284,  1003, 50283,   448,   796,   503,  1343,   287,
            58,    72,     9,    19,    10,    18,  1058,  1312,     9,    19,
         11208,   198, 50284,  1003,   886,   198, 50284,   198, 50284,  1003,
          6430,  1194,  3038,   318,   284,   779,   257,  7716,    12,  1640,
          9052,   284,   466,   262, 16237,    13,   198, 50284,  1003,   770,
           318,   262,  3424,   395,  4610,   475,   345,   423,   284,   760,
           703,   284,   779,   262,  7716,    12,  1640,  9052,    13,   198,
         50284,  1003,  4091,   262,  1672,   287,   262,  7716,    12,  1640,
          9052,  2665,    13,   198, 50284,   198, 50284,  1003,  6430,  1194,
          3038,   318,   284,   779,   257,  2163,    13,   198, 50284,  1003,
         38240,   262,  2163,   284,   257,  8265,    13,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,   318,   284,   779,   257,  1339,
          2643,    13,   198, 50284,  1003,   770,   318,   262,   749, 31744,
          4610,    13,   198, 50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  278
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
    // The above can be simplified, using part selects and part selects can be done on vectors.
    // The below is a simplified example of what the above could be.
    // assign out = {in[sel*4+3], in[sel*4+2], in[sel*4+1], in[sel*4+0]};
    
    // Yet another option is to use a for loop to do the assignment.
    // assign out = 0;
    // for (int i=0; i<sel; i++) begin
    //     out = out + in[i*4+3 : i*4];
    // end
    
    // Yet another option is to use a generate-for loop to do the assignment.
    // This is the cleanest solution but you have to know how to use the generate-for loop.
    // See the example in the generate-for loop section.
    
    // Yet another option is to use a function.
    // Convert the function to a module.
    
    // Yet another option is to use a case statement.
    // This is the most readable solution.
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  23.51294360399993
-------------------------------------------------------
MCTS Iteration:  74.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.43901676 0.43901676 0.43901676 0.61889386 0.61889386 0.61889386
 0.61889386 0.61889386 0.61889386 0.61889386]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.493916638000087
-------------------------------------------------------
MCTS Iteration:  75.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.44784015 0.44784015 0.44784015 0.44784015 0.6288202  0.6288202
 0.6288202  0.6288202  0.6288202  0.6288202 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.488510065000014
-------------------------------------------------------
MCTS Iteration:  76.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.45660573 0.45660573 0.45660573 0.45660573 0.45660573 0.6386814
 0.6386814  0.6386814  0.6386814  0.6386814 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498693550999974
-------------------------------------------------------
MCTS Iteration:  77.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.46531445 0.46531445 0.46531445 0.46531445 0.46531445 0.46531445
 0.64847875 0.64847875 0.64847875 0.64847875]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.486322985000015
-------------------------------------------------------
MCTS Iteration:  78.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4739675 0.4739675 0.4739675 0.4739675 0.4739675 0.4739675 0.4739675
 0.6582135 0.6582135 0.6582135]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.49140747499996
-------------------------------------------------------
MCTS Iteration:  79.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.48256606 0.48256606 0.48256606 0.48256606 0.48256606 0.48256606
 0.48256606 0.48256606 0.66788685 0.66788685]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.49487039500002
-------------------------------------------------------
MCTS Iteration:  80.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4911111 0.4911111 0.4911111 0.4911111 0.4911111 0.4911111 0.4911111
 0.4911111 0.4911111 0.6775   ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.503969211999902
-------------------------------------------------------
MCTS Iteration:  81.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.49960345 0.49960345 0.49960345 0.49960345 0.49960345 0.49960345
 0.49960345 0.49960345 0.49960345 0.49960345]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498213906999922
-------------------------------------------------------
MCTS Iteration:  82.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.35723984 0.5080442  0.5080442  0.5080442  0.5080442  0.5080442
 0.5080442  0.5080442  0.5080442  0.5080442 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.491368297999998
-------------------------------------------------------
MCTS Iteration:  83.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.36479092 0.36479092 0.5164344  0.5164344  0.5164344  0.5164344
 0.5164344  0.5164344  0.5164344  0.5164344 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.497936563999929
-------------------------------------------------------
MCTS Iteration:  84.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.37229717 0.37229717 0.37229717 0.5247745  0.5247745  0.5247745
 0.5247745  0.5247745  0.5247745  0.5247745 ]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.49552269600008
-------------------------------------------------------
MCTS Iteration:  85.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3797593  0.3797593  0.3797593  0.3797593  0.53306586 0.53306586
 0.53306586 0.53306586 0.53306586 0.53306586]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.503678698000044
-------------------------------------------------------
MCTS Iteration:  86.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3871783 0.3871783 0.3871783 0.3871783 0.3871783 0.5413093 0.5413093
 0.5413093 0.5413093 0.5413093]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.497278480999967
-------------------------------------------------------
MCTS Iteration:  87.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.39455473 0.39455473 0.39455473 0.39455473 0.39455473 0.39455473
 0.5495052  0.5495052  0.5495052  0.5495052 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.492191337000008
-------------------------------------------------------
MCTS Iteration:  88.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.40188944 0.40188944 0.40188944 0.40188944 0.40188944 0.40188944
 0.40188944 0.5576549  0.5576549  0.5576549 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.498201291999976
-------------------------------------------------------
MCTS Iteration:  89.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4091829  0.4091829  0.4091829  0.4091829  0.4091829  0.4091829
 0.4091829  0.4091829  0.56575876 0.56575876]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.490803397999912
-------------------------------------------------------
MCTS Iteration:  90.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.41643608 0.41643608 0.41643608 0.41643608 0.41643608 0.41643608
 0.41643608 0.41643608 0.41643608 0.5738179 ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.493547070999966
-------------------------------------------------------
MCTS Iteration:  91.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.42364955 0.42364955 0.42364955 0.42364955 0.42364955 0.42364955
 0.42364955 0.42364955 0.42364955 0.42364955]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198 50284  1003   383  2029   460   307 27009    11]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[50284   198 50284  1003   383  2029   460   307 27009    11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
    // The above can be simplified, but this is the intended implementation:
    // assign out = in[sel*4+3 -: 4];
    
    // The above can be simplified further:
    // assign out = in[sel*4 +: 4];
    
    // Yet another option:
    // assign out = in[sel*8 +: 4];
    
    // Yet another option:
    // assign out = in[(sel*8)+3 -: 4];
    
    // Yet another option:
    // assign out = in[(sel*8)+: 4];
    
    // Yet another option:
    // assign out = in[(sel*8) +: 4];
    
    // Yet another option:
    // assign out = in[(sel*8)-: 4];
    
    // Yet another option:
    // assign out = in[sel*8 -: 4];
    
    // Yet another option:
    // assign out = in[sel*16 +: 4];
    
    // Yet another option:
    // assign out = in[sel*16 -: 4];
    
    // Yet another option:
    // assign out = in[sel*32 +: 4];
    
    // Yet another option:
    // assign out = in[sel*32 -: 4];
    
    // Yet another option:
    // assign out = in[sel*64 +: 4];
    
    // Yet another option:
    // assign out = in[sel*64 -: 4];
    
    // Yet another option:
    // assign out = in[sel*128 +: 4];
    
    // Yet another option:
    // assign out = in[sel*128 -: 4];
    
    // Yet another option:
    // assign out = in[sel*256 +: 4];
    
    // Yet another option:
    // assign out = in[sel*256 -: 4];
    
    // Yet another option:
    // assign out = in[sel*512 +: 4];
    
    // Yet another option:
    // assign out = in[sel*512 -: 4];
    
    // Yet another option:
    // assign out = in[sel*1024 +: 4];
    
    // Yet another option:
    // assign out = in[sel*1024 -: 4];
    
    // Yet another option:
    // assign out = in[sel*2048 +: 4];
    
    // Yet another option:
    // assign out = in[sel*2048 -: 4];
    
    // Yet another option:
    // assign out = in[sel*4096 +: 4];
    
    // Yet another option:
    // assign out = in[sel*4096 -: 4];
    
    // Yet another option:
    // assign out = in[sel*8192 +: 4];
    
    // Yet another option:
    // assign out = in[sel*8192 -: 4];
    
    // Yet another option:
    // assign out = in[sel*16384 +: 4];
    
    // Yet another option:
    //
[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198 50284   198 50284  1003   383
   2029   460   307 27009    11   475   428   318   262  5292  7822    25
    198 50284  1003  8333   503   796   287    58   741     9    19    10
     18   532    25   604 11208   198 50284   198 50284  1003   383  2029
    460   307 27009  2252    25   198 50284  1003  8333   503   796   287
     58   741     9    19  1343    25   604 11208   198 50284   198 50284
   1003  6430  1194  3038    25   198 50284  1003  8333   503   796   287
     58   741     9    23  1343    25   604 11208   198 50284   198 50284
   1003  6430  1194  3038    25   198 50284  1003  8333   503   796   287
     58     7   741     9    23 47762    18   532    25   604 11208   198
  50284   198 50284  1003  6430  1194  3038    25   198 50284  1003  8333
    503   796   287    58     7   741     9    23 47762    25   604 11208
    198 50284   198 50284  1003  6430  1194  3038    25   198 50284  1003
   8333   503   796   287    58     7   741     9    23     8  1343    25
    604 11208   198 50284   198 50284  1003  6430  1194  3038    25   198
  50284  1003  8333   503   796   287    58     7   741     9    23 13219
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9    23   532
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9  1433  1343
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9  1433   532
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9  2624  1343
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9  2624   532
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9  2414  1343
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9  2414   532
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9 12762  1343
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9 12762   532
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9 11645  1343
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9 11645   532
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9 25836  1343
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9 25836   532
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9 35500  1343
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9 35500   532
     25   604 11208   198 50284   198 50284  1003  6430  1194  3038    25
    198 50284  1003  8333   503   796   287    58   741     9  1238  2780
   1343    25   604 11208   198 50284   198 50284  1003  6430  1194  3038
     25   198 50284  1003  8333   503   796   287    58   741     9  1238
   2780   532    25   604 11208   198 50284   198 50284  1003  6430  1194
   3038    25   198 50284  1003  8333   503   796   287    58   741     9
   1821  4846  1343    25   604 11208   198 50284   198 50284  1003  6430
   1194  3038    25   198 50284  1003  8333   503   796   287    58   741
      9  1821  4846   532    25   604 11208   198 50284   198 50284  1003
   6430  1194  3038    25   198 50284  1003  8333   503   796   287    58
    741     9    23 17477  1343    25   604 11208   198 50284   198 50284
   1003  6430  1194  3038    25   198 50284  1003  8333   503   796   287
     58   741     9    23 17477   532    25   604 11208   198 50284   198
  50284  1003  6430  1194  3038    25   198 50284  1003  8333   503   796
    287    58   741     9  1433 22842  1343    25   604 11208   198 50284
    198 50284  1003  6430  1194  3038    25   198 50284  1003]]
tensor([[ 1003, 13610,   257,   604,    12,  2545,  3094,    11, 17759,    12,
          1462,    12,    16,  3294,    87,   263,    13,   383, 17759,   604,
            12,  2545, 17311,   389,   477, 11856,   656,   257,  2060, 28119,
            12,  2545,  5128, 15879,    13,   220,   198,  1003,   384,    75,
            28,    15,   815,  2922, 10340,   287,    58,    18,    25,    15,
          4357,   384,    75,    28,    16, 40573, 10340,   287,    58,    22,
            25,    19,  4357,   384,    75,    28,    17, 40573, 10340,   287,
            58,  1157,    25,    23,  4357,  3503,    13,   198,   198,  1003,
           367,   600,    25,  2080,   428,   867,  3689,    11,   257,  1339,
          2643,  2125,   470,   523,  4465,    13,   198,  1003, 20650, 36525,
           460,   307,  7885,    11,   355,   890,   355,   262, 24983,  7509,
           460,  3785,   503,   326,   262,  9647,   286,   262, 10340,   852,
          6163,   318,  6937,    13,   632,   338,   407,  1464,   922,   379,
           428,    13,  1052,  4049,  2282, 27896,   318,   407,   257,  6937,
             1,  1724,   340,  3521,   470,  5879,   326,   262,  2922,  9647,
           318,  6937,    13,   554,  1948,    11,   287,    58,   384,    75,
             9,    19,    10,    18,  1058,   384,    75,     9,    19,  2361,
           857,   407,   670,    13,   198,  1003,  4722, 49289,  5855, 15732,
           276, 15879,   636,  2922,  1600,  1201,  4643,   346,   519,    12,
         14585,     8,   468,   281,   772,   517, 16001, 15582,    13,   198,
           198, 21412,  1353,    62, 21412,     7,   220,   198, 50284, 15414,
           685,   940,  1954,    25,    15,    60,   287,    11,   198, 50284,
         15414,   685,    22,    25,    15,    60,   384,    75,    11,   198,
         50284, 22915,   685,    18,    25,    15,    60,   503,  5619,   628,
         50284,   562,   570,   503,   796,   287,    58,   741,     9,    19,
            10,    18,  1058,   384,    75,     9,    19, 11208,   198, 50284,
           198, 50284,  1003,   383,  2029,   460,   307, 27009,    11,   475,
           428,   318,   262,  5292,  7822,    25,   198, 50284,  1003,  8333,
           503,   796,   287,    58,   741,     9,    19,    10,    18,   532,
            25,   604, 11208,   198, 50284,   198, 50284,  1003,   383,  2029,
           460,   307, 27009,  2252,    25,   198, 50284,  1003,  8333,   503,
           796,   287,    58,   741,     9,    19,  1343,    25,   604, 11208,
           198, 50284,   198, 50284,  1003,  6430,  1194,  3038,    25,   198,
         50284,  1003,  8333,   503,   796,   287,    58,   741,     9,    23,
          1343,    25,   604, 11208,   198, 50284,   198, 50284,  1003,  6430,
          1194,  3038,    25,   198, 50284,  1003,  8333,   503,   796,   287,
            58,     7,   741,     9,    23, 47762,    18,   532,    25,   604,
         11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,    25,
           198, 50284,  1003,  8333,   503,   796,   287,    58,     7,   741,
             9,    23, 47762,    25,   604, 11208,   198, 50284,   198, 50284,
          1003,  6430,  1194,  3038,    25,   198, 50284,  1003,  8333,   503,
           796,   287,    58,     7,   741,     9,    23,     8,  1343,    25,
           604, 11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,
            25,   198, 50284,  1003,  8333,   503,   796,   287,    58,     7,
           741,     9,    23, 13219,    25,   604, 11208,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,    25,   198, 50284,  1003,  8333,
           503,   796,   287,    58,   741,     9,    23,   532,    25,   604,
         11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,    25,
           198, 50284,  1003,  8333,   503,   796,   287,    58,   741,     9,
          1433,  1343,    25,   604, 11208,   198, 50284,   198, 50284,  1003,
          6430,  1194,  3038,    25,   198, 50284,  1003,  8333,   503,   796,
           287,    58,   741,     9,  1433,   532,    25,   604, 11208,   198,
         50284,   198, 50284,  1003,  6430,  1194,  3038,    25,   198, 50284,
          1003,  8333,   503,   796,   287,    58,   741,     9,  2624,  1343,
            25,   604, 11208,   198, 50284,   198, 50284,  1003,  6430,  1194,
          3038,    25,   198, 50284,  1003,  8333,   503,   796,   287,    58,
           741,     9,  2624,   532,    25,   604, 11208,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,    25,   198, 50284,  1003,  8333,
           503,   796,   287,    58,   741,     9,  2414,  1343,    25,   604,
         11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,    25,
           198, 50284,  1003,  8333,   503,   796,   287,    58,   741,     9,
          2414,   532,    25,   604, 11208,   198, 50284,   198, 50284,  1003,
          6430,  1194,  3038,    25,   198, 50284,  1003,  8333,   503,   796,
           287,    58,   741,     9, 12762,  1343,    25,   604, 11208,   198,
         50284,   198, 50284,  1003,  6430,  1194,  3038,    25,   198, 50284,
          1003,  8333,   503,   796,   287,    58,   741,     9, 12762,   532,
            25,   604, 11208,   198, 50284,   198, 50284,  1003,  6430,  1194,
          3038,    25,   198, 50284,  1003,  8333,   503,   796,   287,    58,
           741,     9, 11645,  1343,    25,   604, 11208,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,    25,   198, 50284,  1003,  8333,
           503,   796,   287,    58,   741,     9, 11645,   532,    25,   604,
         11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,    25,
           198, 50284,  1003,  8333,   503,   796,   287,    58,   741,     9,
         25836,  1343,    25,   604, 11208,   198, 50284,   198, 50284,  1003,
          6430,  1194,  3038,    25,   198, 50284,  1003,  8333,   503,   796,
           287,    58,   741,     9, 25836,   532,    25,   604, 11208,   198,
         50284,   198, 50284,  1003,  6430,  1194,  3038,    25,   198, 50284,
          1003,  8333,   503,   796,   287,    58,   741,     9, 35500,  1343,
            25,   604, 11208,   198, 50284,   198, 50284,  1003,  6430,  1194,
          3038,    25,   198, 50284,  1003,  8333,   503,   796,   287,    58,
           741,     9, 35500,   532,    25,   604, 11208,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,    25,   198, 50284,  1003,  8333,
           503,   796,   287,    58,   741,     9,  1238,  2780,  1343,    25,
           604, 11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,
            25,   198, 50284,  1003,  8333,   503,   796,   287,    58,   741,
             9,  1238,  2780,   532,    25,   604, 11208,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,    25,   198, 50284,  1003,  8333,
           503,   796,   287,    58,   741,     9,  1821,  4846,  1343,    25,
           604, 11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,
            25,   198, 50284,  1003,  8333,   503,   796,   287,    58,   741,
             9,  1821,  4846,   532,    25,   604, 11208,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,    25,   198, 50284,  1003,  8333,
           503,   796,   287,    58,   741,     9,    23, 17477,  1343,    25,
           604, 11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,
            25,   198, 50284,  1003,  8333,   503,   796,   287,    58,   741,
             9,    23, 17477,   532,    25,   604, 11208,   198, 50284,   198,
         50284,  1003,  6430,  1194,  3038,    25,   198, 50284,  1003,  8333,
           503,   796,   287,    58,   741,     9,  1433, 22842,  1343,    25,
           604, 11208,   198, 50284,   198, 50284,  1003,  6430,  1194,  3038,
            25,   198, 50284,  1003]], device='cuda:0')
Checking if done:
tokens generated:  755
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.816330290999986
-------------------------------------------------------
MCTS Iteration:  92.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.30074888 0.4308238  0.4308238  0.4308238  0.4308238  0.4308238
 0.4308238  0.4308238  0.4308238  0.4308238 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.483727132000013
-------------------------------------------------------
MCTS Iteration:  93.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.30723602 0.30723602 0.43795967 0.43795967 0.43795967 0.43795967
 0.43795967 0.43795967 0.43795967 0.43795967]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.495616377000033
-------------------------------------------------------
MCTS Iteration:  94.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3136887  0.3136887  0.3136887  0.44505763 0.44505763 0.44505763
 0.44505763 0.44505763 0.44505763 0.44505763]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.483633988000065
-------------------------------------------------------
MCTS Iteration:  95.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.32010752 0.32010752 0.32010752 0.32010752 0.45211828 0.45211828
 0.45211828 0.45211828 0.45211828 0.45211828]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
    // The above can be simplified, 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.493424089999962
-------------------------------------------------------
MCTS Iteration:  96.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.32649308 0.32649308 0.32649308 0.32649308 0.32649308 0.45914245
 0.45914245 0.45914245 0.45914245 0.45914245]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.488393034999945
-------------------------------------------------------
MCTS Iteration:  97.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.33284563 0.33284563 0.33284563 0.33284563 0.33284563 0.33284563
 0.46613026 0.46613026 0.46613026 0.46613026]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.499637355000004
-------------------------------------------------------
MCTS Iteration:  98.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.339166   0.339166   0.339166   0.339166   0.339166   0.339166
 0.339166   0.47308266 0.47308266 0.47308266]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  23
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.493184566999844
-------------------------------------------------------
MCTS Iteration:  99.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3454545  0.3454545  0.3454545  0.3454545  0.3454545  0.3454545
 0.3454545  0.3454545  0.48000002 0.48000002]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
SEQUENCE:  [[   19    10    18  1058   384    75     9    19 11208   198]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:      
endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[50284   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.492411941
-------------------------------------------------------
MCTS Iteration:  100.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3517117  0.3517117  0.3517117  0.3517117  0.3517117  0.3517117
 0.3517117  0.3517117  0.3517117  0.48688293]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
SEQUENCE:  [[    9    19    10    18  1058   384    75     9    19 28013]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
LLMEstimate:  

endmodule 1
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
SEQUENCE:  [[  198   198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[ sel*4+3 : sel*4 ];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.496220309999899
----
 Tree depth: 0
 Node: action=None
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619]]
• Child Action scores:[0.35793787 0.35793787 0.35793787 0.35793787 0.35793787 0.35793787
 0.35793787 0.35793787 0.35793787 0.35793787]
• Child averaged monte carlo:-0.9901960784313726
• Child probablities:[4.05774210e-13 2.03511615e-03 8.52882650e-26 4.23441617e-40
 2.86368626e-06 4.07079948e-55 1.47962020e-01 1.40213632e-23
 3.97182509e-16 4.70567548e-11]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=101.0,Q=-0.9901960784313726,M=-0.9901960784313726
----
 Tree depth: 1
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=9
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   384    75     9    19    10
     18  1058   384    75     9    19 28013]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
END ROBUST/MAX VALUES:
Adding child.
STATE:  [[ 1003 13610   257   604    12  2545  3094    11 17759    12  1462    12
     16  3294    87   263    13   383 17759   604    12  2545 17311   389
    477 11856   656   257  2060 28119    12  2545  5128 15879    13   220
    198  1003   384    75    28    15   815  2922 10340   287    58    18
     25    15  4357   384    75    28    16 40573 10340   287    58    22
     25    19  4357   384    75    28    17 40573 10340   287    58  1157
     25    23  4357  3503    13   198   198  1003   367   600    25  2080
    428   867  3689    11   257  1339  2643  2125   470   523  4465    13
    198  1003 20650 36525   460   307  7885    11   355   890   355   262
  24983  7509   460  3785   503   326   262  9647   286   262 10340   852
   6163   318  6937    13   632   338   407  1464   922   379   428    13
   1052  4049  2282 27896   318   407   257  6937     1  1724   340  3521
    470  5879   326   262  2922  9647   318  6937    13   554  1948    11
    287    58   384    75     9    19    10    18  1058   384    75     9
     19  2361   857   407   670    13   198  1003  4722 49289  5855 15732
    276 15879   636  2922  1600  1201  4643   346   519    12 14585     8
    468   281   772   517 16001 15582    13   198   198 21412  1353    62
  21412     7   220   198 50284 15414   685   940  1954    25    15    60
    287    11   198 50284 15414   685    22    25    15    60   384    75
     11   198 50284 22915   685    18    25    15    60   503  5619   628
  50284   562   570   503   796   287    58   741     9    19    10    18
   1058   384    75     9    19 11208   198]]
SEQUENCE:  [[50284   198   437 21412]]
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Checking if done:
tokens generated:  24
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. 
// sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.

// Hint: With this many options, a case statement isn't so useful.
// Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying "... is not a constant" means it couldn't prove that the select width is constant. In particular, in[ sel*4+3 : sel*4 ] does not work.
// Bit slicing ("Indexed vector part select", since Verilog-2001) has an even more compact syntax.

module top_module( 
    input [1023:0] in,
    input [7:0] sel,
    output [3:0] out );

    assign out = in[sel*4+3 : sel*4];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Mux256to1v/Mux256to1v_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Total Time:  1113.777294
