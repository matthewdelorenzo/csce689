Area,Delay,Score,Current Run,Episode,Verilog
300.314,1228.16,0.1,0,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_out;
  assign temp_sum = in1 + in2 + cin;
  assign sum = temp_sum[31:0];
  assign cout = temp_sum[32];
endmodule"
300.314,1228.16,0.1,1,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //design implementation
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.1,2,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire [31:0] in1_shifted;
  wire [31:0] in2_shifted;
  wire of1;
  wire of2;
  wire carry_in_n;
  wire [31:0] carry_in;
  //summing
  assign sum_temp = in1 + in2;
  //shifting
  assign in1_shifted = in1 << 2;
  assign in2_shifted = in2 << 2;
  //overflow detection
  assign of1 = in1[31] & in2[31] & (~ sum_temp[31]);
  assign of2 = in1[31] & (~ in2[31]) & (sum_temp[31]);
  //carry in
  assign carry_in_n = 1'b1;
  assign carry_in = {carry_in_n, cin};
  //output assignment
  assign cout = (sum_temp[31]) & carry_in_n;
  assign sum = sum_temp[31:0];
endmodule"
N/A,N/A,-0.1,3,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;
  //summing
  assign sum_temp = in1 + in2 + cin;
  //overflow condition
  assign cout_temp = (in1[31] == in2[31] && in1[31]!= sum_temp[31])? 1'b1 : 1'b0;
  //32-bit input signals
  assign in1_temp = (in1[31] == 1'b0 && in1[31] == sum_temp[31])? 32'd0 : in1;
  assign in2_temp = (in2[31] == 1'b0 && in2[31] == sum_temp[31])? 32'd0 : in2;
  assign cin_temp = (in1[31] == 1'b0 && in2[31] == 1'b0 && in1[31]!= sum_temp[31])? 1'b1 : 1'b0;
  //assign outputs
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-1,4,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
  full_adder FA5(sum[4], c3, in1[4], in2[4], c3);
  full_adder FA6(sum[5], c3, in1[5], in2[5], c3);
  full_adder FA7(sum[6], c3, in1[6], in2[6], c3);
  full_adder FA8(sum[7], c3, in1[7], in2[7], c3);
  full_adder FA9(sum[8], c3, in1[8], in2[8], c3);
  full_adder FA10(sum[9], c3, in1[9], in2[9], c3);
  full_adder FA11(sum[10], c3, in1[10], in2[10], c3);
  full_adder FA12(sum[11], c3, in1[11], in2[11], c3);
  full_adder FA13(sum[12], c3, in1[12], in2[12], c3);
  full_adder FA14(sum[13], c3, in1[13], in2[13], c3);
  full_adder FA15(sum[14], c3, in1[14], in2[14], c3);
  full_adder FA16(sum[15], c3, in1[15], in2[15], c3);
  full_adder FA17(sum[16], c3, in1[16], in2[16], c3);
  full_adder FA18(sum[17], c3, in1[17], in2[17], c3);
  full_adder FA19(sum[18], c3, in1[18], in2[18], c3);
  full_adder FA20(sum[19], c3, in1[19], in2[19], c3);
  full_adder FA21(sum[20], c3, in1[20], in2[20], c3);
  full_adder FA22(sum[21], c3, in1[21], in2[21], c3);
  full_adder FA23(sum[22], c3, in1[22], in2[22], c3);
  full_adder FA24(sum[23], c3, in1[23], in2[23], c3);
  full_adder FA25(sum[24], c3, in1[24], in2[24], c3);
  full_adder FA26(sum[25], c3, in1[25], in2[25], c3);
  full_adder FA27(sum[26], c3, in1[26], in2[26], c3);
  full_adder FA28(sum[27], c3, in1[27], in2[27], c3);
  full_adder FA29(sum[28], c3, in1[28], in2[28], c3);
  full_adder FA30(sum[29], c3, in1[29], in2[29], c3);
  full_adder FA31(sum[30], c3, in1[30], in2[30], c3);
  full_adder FA32(sum[31], cout, in1[31], in2[31], c3);
endmodule"
