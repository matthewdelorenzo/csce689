Using GPU
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_prompts/Bcdadd100.v
Prompt str:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );
Loading LLM model...
Loaded LLM:  shailja/fine-tuned-codegen-16B-Verilog
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  100
********-- EPISODE-1--************
ORIG MODULE:  top_module
--------MCTS-------
Env seed:  42
Initializing MCTS tree.
Initialize search (creating root node)

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
LLMEstimate:  

    wire [99:0] carry; 1
LLMEstimate:  

    wire [99:0] carry; 1
LLMEstimate:  

    wire [3:0] c; 1
LLMEstimate:  

    wire [99:0] carry; 1
LLMEstimate:  

    wire [99:0] carry; 1
LLMEstimate:  

    bcd_fadd inst1 ( 1
LLMEstimate:  

    wire [3:0] c; 1
LLMEstimate:  

    assign top_module.cout 1
LLMEstimate:  

    bcd_fadd inst1 ( 1
LLMEstimate:  

    bcd_fadd inst_f 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284 21809   685  2079    25    15    60  3283    26]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  628 50284 21809   685  2079    25    15    60  3283    26]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            begin : adder
                bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
            end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8   198 50276 27471  1058   751
    263   198 50272    65 10210    62    69  2860   916   357    64    58
     72    10    18    25    72  4357   275    58    72    10    18    25
     72  4357  3283    58    72    12    19  4357  3283    58    72  4357
   2160    58    72    10    18    25    72 36563   198 50276   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,   198, 50276, 27471,  1058,   751,
           263,   198, 50272,    65, 10210,    62,    69,  2860,   916,   357,
            64,    58,    72,    10,    18,    25,    72,  4357,   275,    58,
            72,    10,    18,    25,    72,  4357,  3283,    58,    72,    12,
            19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,    10,
            18,    25,    72, 36563,   198, 50276,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  144
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            begin : adder
                bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
            end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  1.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284 21809   685  2079    25    15    60  3283    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
    bcd_fadd fadd1 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    bcd_fadd fadd_ 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            assign carry[i/4] = (i/4 == 1)? carry[i/4-1] :
                                (i/4 == 2)? carry[i/4-2] :
                                (i/4 == 3)? carry[i/4-3] : 0;
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8   198 50276   562   570
   3283    58    72    14    19    60   796   357    72    14    19  6624
    352 19427  3283    58    72    14    19    12    16    60  1058   198
  50257   357    72    14    19  6624   362 19427  3283    58    72    14
     19    12    17    60  1058   198 50257   357    72    14    19  6624
    513 19427  3283    58    72    14    19    12    18    60  1058   657
     26   198 50284   437  8612   378   198 50284   562   570 42304   796
   3283    58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,   198, 50276,   562,   570,
          3283,    58,    72,    14,    19,    60,   796,   357,    72,    14,
            19,  6624,   352,     8,  5633,  3283,    58,    72,    14,    19,
            12,    16,    60,  1058,   198, 50257,   357,    72,    14,    19,
          6624,   362,     8,  5633,  3283,    58,    72,    14,    19,    12,
            17,    60,  1058,   198, 50257,   357,    72,    14,    19,  6624,
           513,     8,  5633,  3283,    58,    72,    14,    19,    12,    18,
            60,  1058,   657,    26,   198, 50284,   437,  8612,   378,   198,
         50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  158
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            assign carry[i/4] = (i/4 == 1)? carry[i/4-1] :
                                (i/4 == 2)? carry[i/4-2] :
                                (i/4 == 3)? carry[i/4-3] : 0;
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  17.123279988999997
-------------------------------------------------------
MCTS Iteration:  2.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284 21809   685  2079    25    15    60  3283    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
    bcd_fadd fadd0 1
LLMEstimate:  
    bcd_fadd fadd_ 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    bcd_fadd fadd_ 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    bcd_fadd fadd0 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    genvar i;
    generate 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin
            bcd_fadd f(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640   357    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8  2221   198 50276    65
  10210    62    69  2860   277     7    64    58    18     9    72    10
     25    18  4357   275    58    18     9    72    10    25    18  4357
    269   259    11  3283    58    72  4357  2160    58    18     9    72
     10    25    18 36563   198 50280   437   198 50284   437  8612   378
    198 50284   562   570 42304   796  3283    58  3064 11208   198   198
    437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,   357,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
          2221,   198, 50276,    65, 10210,    62,    69,  2860,   277,     7,
            64,    58,    18,     9,    72,    10,    25,    18,  4357,   275,
            58,    18,     9,    72,    10,    25,    18,  4357,   269,   259,
            11,  3283,    58,    72,  4357,  2160,    58,    18,     9,    72,
            10,    25,    18, 36563,   198, 50280,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          3064, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  104
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin
            bcd_fadd f(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  14.261232132000004
-------------------------------------------------------
MCTS Iteration:  3.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284 21809   685    18    25    15    60   269    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
    bcd_fadd fadd1 1
LLMEstimate:  
    bcd_fadd fadd1 1
LLMEstimate:  
    bcd_fadd a1( 1
LLMEstimate:  
    bcd_fadd f1 ( 1
LLMEstimate:  
    bcd_fadd f1 ( 1
LLMEstimate:  
    bcd_fadd fadd0 1
LLMEstimate:  
    bcd_fadd f1 ( 1
LLMEstimate:  
    bcd_fadd f1 ( 1
LLMEstimate:  
    bcd_fadd a1( 1
LLMEstimate:  
    bcd_fadd fadd1 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277    16   357]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198 50284    65 10210    62    69  2860   277    16   357]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    generate
        genvar i;
        for (i=4; i<400; i=i+4) begin: add
            bcd_fadd f (a[i+3:i], b[i+3:i], c[i-4], c[i-3], sum[i+3:i]);
        end
    endgenerate
    assign cout = c[399];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72    28    19    26  1312    27  7029
     26  1312    28    72    10    19     8  2221    25   751   198 50276
     65 10210    62    69  2860   277   357    64    58    72    10    18
     25    72  4357   275    58    72    10    18    25    72  4357   269
     58    72    12    19  4357   269    58    72    12    18  4357  2160
     58    72    10    18    25    72 36563   198 50280   437   198 50284
    437  8612   378   198 50284   562   570 42304   796   269    58 28771
  11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,    28,    19,    26,  1312,    27,  7029,    26,  1312,
            28,    72,    10,    19,     8,  2221,    25,   751,   198, 50276,
            65, 10210,    62,    69,  2860,   277,   357,    64,    58,    72,
            10,    18,    25,    72,  4357,   275,    58,    72,    10,    18,
            25,    72,  4357,   269,    58,    72,    12,    19,  4357,   269,
            58,    72,    12,    18,  4357,  2160,    58,    72,    10,    18,
            25,    72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,
           378,   198, 50284,   562,   570, 42304,   796,   269,    58, 28771,
         11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  143
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    generate
        genvar i;
        for (i=4; i<400; i=i+4) begin: add
            bcd_fadd f (a[i+3:i], b[i+3:i], c[i-4], c[i-3], sum[i+3:i]);
        end
    endgenerate
    assign cout = c[399];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  16.211745235999985
-------------------------------------------------------
MCTS Iteration:  4.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284 21809   685  2079    25    15    60  3283    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
    bcd_fadd fadd_ 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    bcd_fadd fadd0 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    bcd_fadd fadd_ 1
LLMEstimate:  
    bcd_fadd fadd1 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    bcd_fadd fadd_ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198 50284    65 10210    62    69  2860   916    16   357]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i=4; i<400; i=i+4)
            begin : adder
                bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
            end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72    28    19    26  1312    27  7029
     26  1312    28    72    10    19     8   198 50276 27471  1058   751
    263   198 50272    65 10210    62    69  2860   916   357    64    58
     72    10    18    25    72  4357   275    58    72    10    18    25
     72  4357  3283    58    72    12    19  4357  3283    58    72  4357
   2160    58    72    10    18    25    72 36563   198 50276   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,    28,    19,    26,  1312,    27,  7029,    26,  1312,
            28,    72,    10,    19,     8,   198, 50276, 27471,  1058,   751,
           263,   198, 50272,    65, 10210,    62,    69,  2860,   916,   357,
            64,    58,    72,    10,    18,    25,    72,  4357,   275,    58,
            72,    10,    18,    25,    72,  4357,  3283,    58,    72,    12,
            19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,    10,
            18,    25,    72, 36563,   198, 50276,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  144
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i=4; i<400; i=i+4)
            begin : adder
                bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
            end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  16.271281786000003
-------------------------------------------------------
MCTS Iteration:  5.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284 21809   685  2079    25    15    60  3283    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    bcd_fadd fadd1 1
LLMEstimate:  
    bcd_fadd fadd_ 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    genvar i;
    generate 1
LLMEstimate:  
    bcd_fadd fadd0 1
LLMEstimate:  
    bcd_fadd fadd0 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    62]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  198 50284    65 10210    62    69  2860   277  2860    62]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0 (
       .a(a[3:0]),
       .b(b[3:0]),
       .cin(cin),
       .cout(carry[0]),
       .sum(sum[3:0])
    );
    generate
        genvar i;
        for (i=1; i<100; i=i+1) begin: adder
            bcd_fadd fadd_i (
               .a(a[(4*i)+3:4*i]),
               .b(b[(4*i)+3:4*i]),
               .cin(carry[i-1]),
               .cout(carry[i]),
               .sum(sum[(4*i)+3:4*i])
            );
        end
    endgenerate
    assign cout = carry[99];
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62    15   357   198 50281    13    64     7    64    58    18
     25    15 46570   198 50281    13    65     7    65    58    18    25
     15 46570   198 50281    13 17879     7 17879   828   198 50281    13
     66   448     7 34993    58    15 46570   198 50281    13 16345     7
  16345    58    18    25    15 12962   198 50284  1776   198 50284  8612
    378   198 50280  5235  7785  1312    26   198 50280  1640   357    72
     28    16    26  1312    27  3064    26  1312    28    72    10    16
      8  2221    25   751   263   198 50276    65 10210    62    69  2860
    277  2860    62    72   357   198 50273    13    64     7    64    58
      7    19     9    72 47762    18    25    19     9    72 46570   198
  50273    13    65     7    65    58     7    19     9    72 47762    18
     25    19     9    72 46570   198 50273    13 17879     7 34993    58
     72    12    16 46570   198 50273    13    66   448     7 34993    58
     72 46570   198 50273    13 16345     7 16345    58     7    19     9
     72 47762    18    25    19     9    72 12962   198 50276  1776   198
  50280   437   198 50284   437  8612   378   198 50284   562   570 42304
    796  3283    58  2079 11208   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    62,    15,   357,   198, 50280,    13,    64,     7,    64,
            58,    18,    25,    15, 46570,   198, 50280,    13,    65,     7,
            65,    58,    18,    25,    15, 46570,   198, 50280,    13, 17879,
             7, 17879,   828,   198, 50280,    13,    66,   448,     7, 34993,
            58,    15, 46570,   198, 50280,    13, 16345,     7, 16345,    58,
            18,    25,    15, 12962,   198, 50284,  1776,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,    28,    16,    26,  1312,    27,  3064,    26,  1312,
            28,    72,    10,    16,     8,  2221,    25,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   277,  2860,    62,    72,
           357,   198, 50272,    13,    64,     7,    64,    58,     7,    19,
             9,    72, 47762,    18,    25,    19,     9,    72, 46570,   198,
         50272,    13,    65,     7,    65,    58,     7,    19,     9,    72,
         47762,    18,    25,    19,     9,    72, 46570,   198, 50272,    13,
         17879,     7, 34993,    58,    72,    12,    16, 46570,   198, 50272,
            13,    66,   448,     7, 34993,    58,    72, 46570,   198, 50272,
            13, 16345,     7, 16345,    58,     7,    19,     9,    72, 47762,
            18,    25,    19,     9,    72, 12962,   198, 50276,  1776,   198,
         50280,   437,   198, 50284,   437,  8612,   378,   198, 50284,   562,
           570, 42304,   796,  3283,    58,  2079, 11208,   198, 50284,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  220
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0 (
      .a(a[3:0]),
      .b(b[3:0]),
      .cin(cin),
      .cout(carry[0]),
      .sum(sum[3:0])
    );
    generate
        genvar i;
        for (i=1; i<100; i=i+1) begin: adder
            bcd_fadd fadd_i (
              .a(a[(4*i)+3:4*i]),
              .b(b[(4*i)+3:4*i]),
              .cin(carry[i-1]),
              .cout(carry[i]),
              .sum(sum[(4*i)+3:4*i])
            );
        end
    endgenerate
    assign cout = carry[99];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  20.100815928999992
-------------------------------------------------------
MCTS Iteration:  6.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout, cout, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout, cout, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout, cout, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout, cout, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout, cout, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout, cout, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout, cout, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout, cout, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout, cout, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout, cout, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout, cout, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout, cout, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout, cout, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout, cout, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout, cout, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout, cout, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout, cout, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout, cout, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout, cout, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout, cout, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout, cout, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout, cout, sum[91:88]);
    bcd_fadd inst24 (a[95:92], b[95:92], cout, cout, sum[95:92]);
    bcd_fadd inst25 (a[99
[[1003  921  389 ...   64   58 2079]]
tensor([[1003,  921,  389,  ...,   64,   58, 2079]], device='cuda:0')
Checking if done:
tokens generated:  782
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  48.84092370399998
-------------------------------------------------------
MCTS Iteration:  7.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284 21809   685    18    25    15    60   269    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
    bcd_fadd fadd1 1
LLMEstimate:  
    bcd_fadd fadd0 1
LLMEstimate:  
    bcd_fadd fadd1 1
LLMEstimate:  
    bcd_fadd f1 ( 1
LLMEstimate:  
    bcd_fadd inst1 ( 1
LLMEstimate:  
    bcd_fadd fadd1 1
LLMEstimate:  
    bcd_fadd fadd0 1
LLMEstimate:  
    bcd_fadd inst_f 1
LLMEstimate:  
    bcd_fadd a0( 1
LLMEstimate:  
    bcd_fadd f1 ( 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   257    15     7]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198 50284    65 10210    62    69  2860   257    15     7]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd a0(a[3:0], b[3:0], cin, cout, sum[3:0]);
    bcd_fadd a1(a[7:4], b[7:4], cout, c[0], sum[7:4]);
    bcd_fadd a2(a[11:8], b[11:8], c[0], c[1], sum[11:8]);
    bcd_fadd a3(a[15:12], b[15:12], c[1], c[2], sum[15:12]);
    bcd_fadd a4(a[19:16], b[19:16], c[2], c[3], sum[19:16]);
    bcd_fadd a5(a[23:20], b[23:20], c[3], cout, sum[23:20]);
    bcd_fadd a6(a[27:24], b[27:24], cout, c[4], sum[27:24]);
    bcd_fadd a7(a[31:28], b[31:28], c[4], c[5], sum[31:28]);
    bcd_fadd a8(a[35:32], b[35:32], c[5], c[6], sum[35:32]);
    bcd_fadd a9(a[39:36], b[39:36], c[6], c[7], sum[39:36]);
    bcd_fadd a10(a[43:40], b[43:40], c[7], c[8], sum[43:40]);
    bcd_fadd a11(a[47:44], b[47:44], c[8], c[9], sum[47:44]);
    bcd_fadd a12(a[51:48], b[51:48], c[9], c[10], sum[51:48]);
    bcd_fadd a13(a[55:52], b[55:52], c[10], c[11], sum[55:52]);
    bcd_fadd a14(a[59:56], b[59:56], c[11], c[12], sum[59:56]);
    bcd_fadd a15(a[63:60], b[63:60], c[12], c[13], sum[63:60]);
    bcd_fadd a16(a[67:64], b[67:64], c[13], c[14], sum[67:64]);
    bcd_fadd a17(a[71:68], b[71:68], c[14], c[15], sum[71:68]);
    bcd_fadd a18(a[75:72], b[75:72], c[15], c[16], sum[75:72]);
    bcd_fadd a19(a[79:76], b[79:76], c[16], c[17], sum[79:76]);
    bcd_fadd a20(a[83:80], b[83:80], c[17], c[18], sum[83:80]);
    bcd_fadd a21(a[87:84], b[87:84], c[18
[[1003  921  389 ...  269   58 1507]]
tensor([[1003,  921,  389,  ...,  269,   58, 1507]], device='cuda:0')
Checking if done:
tokens generated:  782
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  48.84148505599998
-------------------------------------------------------
MCTS Iteration:  8.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284   562   570  1353    62 21412    13    66   448]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
LLMEstimate:   = bcd_fadd(a[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  796   275 10210    62    69  2860     7    64    58    18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout, top_module.sum[3:0]);
    assign top_module.sum[399:4] = a[399:4] + b[399:4] + top_module.cout;

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13    66   448    11  1353    62 21412
     13 16345    58    18    25    15 36563   198 50284   562   570  1353
     62 21412    13 16345    58 28771    25    19    60   796   257    58
  28771    25    19    60  1343   275    58 28771    25    19    60  1343
   1353    62 21412    13    66   448    26   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13,    66,   448,
            11,  1353,    62, 21412,    13, 16345,    58,    18,    25,    15,
         36563,   198, 50284,   562,   570,  1353,    62, 21412,    13, 16345,
            58, 28771,    25,    19,    60,   796,   257,    58, 28771,    25,
            19,    60,  1343,   275,    58, 28771,    25,    19,    60,  1343,
          1353,    62, 21412,    13,    66,   448,    26,   198,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  89
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout, top_module.sum[3:0]);
    assign top_module.sum[399:4] = a[399:4] + b[399:4] + top_module.cout;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.547453286999996
-------------------------------------------------------
MCTS Iteration:  9.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22, cout23, sum[91:88]);
[[ 1003   921   389 ...    25  3459 36563]]
tensor([[ 1003,   921,   389,  ...,    25,  3459, 36563]], device='cuda:0')
Checking if done:
tokens generated:  782
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  48.84299404199999
-------------------------------------------------------
MCTS Iteration:  10.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]  taking action:  9
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
SEQUENCE:  [[  628 50284    65 10210    62    69  2860   916    62    69]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  add[99:0];
    
     1
LLMEstimate:  add0 (
       .a(a[ 1
LLMEstimate:  add[99:0];
    
     1
LLMEstimate:  add[99:0];
    
     1
LLMEstimate:  add0 (a[3:0], b 1
LLMEstimate:  add0 (
       .a(a[ 1
LLMEstimate:  add0 (
       .a(a[ 1
LLMEstimate:  add0 (
       .a(a[ 1
LLMEstimate:  add0 (a[3:0], b 1
LLMEstimate:  add0 (
       .a(a[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[ 2860    15   357   198 50281    13    64     7    64    58]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[ 2860    15   357   198 50281    13    64     7    64    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
      .a(a[3:0]),
      .b(b[3:0]),
      .cin(cin),
      .cout(cout[0]),
      .sum(sum[3:0])
    );

    generate
       genvar i;
       for (i=1; i<100; i=i+1) begin: inst_fadd
           bcd_fadd inst_fadd0 (
              .a(a[(4*(i-1)+3):(4*(i-1))]),
              .b(b[(4*(i-1)+3):(4*(i-1))]),
              .cin(cout[i-1]),
              .cout(cout[i]),
              .sum(sum[(4*(i-1)+3):(4*(i-1))])
           );
       end
    endgenerate

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50282    13    64     7
     64    58    18    25    15 46570   198 50282    13    65     7    65
     58    18    25    15 46570   198 50282    13 17879     7 17879   828
    198 50282    13    66   448     7    66   448    58    15 46570   198
  50282    13 16345     7 16345    58    18    25    15 12962   198 50284
   1776   628 50284  8612   378   198 50281  5235  7785  1312    26   198
  50281  1640   357    72    28    16    26  1312    27  3064    26  1312
     28    72    10    16     8  2221    25   916    62    69  2860   198
  50277    65 10210    62    69  2860   916    62    69  2860    15   357
    198 50274    13    64     7    64    58     7    19     9     7    72
     12    16 47762    18  2599     7    19     9     7    72    12    16
   4008 46570   198 50274    13    65     7    65    58     7    19     9
      7    72    12    16 47762    18  2599     7    19     9     7    72
     12    16  4008 46570   198 50274    13 17879     7    66   448    58
     72    12    16 46570   198 50274    13    66   448     7    66   448
     58    72 46570   198 50274    13 16345     7 16345    58     7    19
      9     7    72    12    16 47762    18  2599     7    19     9     7
     72    12    16  4008 12962   198 50277  1776   198 50281   437   198
  50284   437  8612   378   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    15,   357,   198, 50281,    13,    64,     7,
            64,    58,    18,    25,    15, 46570,   198, 50281,    13,    65,
             7,    65,    58,    18,    25,    15, 46570,   198, 50281,    13,
         17879,     7, 17879,   828,   198, 50281,    13,    66,   448,     7,
            66,   448,    58,    15, 46570,   198, 50281,    13, 16345,     7,
         16345,    58,    18,    25,    15, 12962,   198, 50284,  1776,   628,
         50284,  8612,   378,   198, 50281,  5235,  7785,  1312,    26,   198,
         50281,  1640,   357,    72,    28,    16,    26,  1312,    27,  3064,
            26,  1312,    28,    72,    10,    16,     8,  2221,    25,   916,
            62,    69,  2860,   198, 50277,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    15,   357,   198, 50273,    13,    64,
             7,    64,    58,     7,    19,     9,     7,    72,    12,    16,
         47762,    18,  2599,     7,    19,     9,     7,    72,    12,    16,
          4008, 46570,   198, 50273,    13,    65,     7,    65,    58,     7,
            19,     9,     7,    72,    12,    16, 47762,    18,  2599,     7,
            19,     9,     7,    72,    12,    16,  4008, 46570,   198, 50273,
            13, 17879,     7,    66,   448,    58,    72,    12,    16, 46570,
           198, 50273,    13,    66,   448,     7,    66,   448,    58,    72,
         46570,   198, 50273,    13, 16345,     7, 16345,    58,     7,    19,
             9,     7,    72,    12,    16, 47762,    18,  2599,     7,    19,
             9,     7,    72,    12,    16,  4008, 12962,   198, 50277,  1776,
           198, 50281,   437,   198, 50284,   437,  8612,   378,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  230
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
     .a(a[3:0]),
     .b(b[3:0]),
     .cin(cin),
     .cout(cout[0]),
     .sum(sum[3:0])
    );

    generate
       genvar i;
       for (i=1; i<100; i=i+1) begin: inst_fadd
           bcd_fadd inst_fadd0 (
             .a(a[(4*(i-1)+3):(4*(i-1))]),
             .b(b[(4*(i-1)+3):(4*(i-1))]),
             .cin(cout[i-1]),
             .cout(cout[i]),
             .sum(sum[(4*(i-1)+3):(4*(i-1))])
           );
       end
    endgenerate

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  20.642347384999994
-------------------------------------------------------
MCTS Iteration:  11.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.8902302 1.8902302 1.8902302 1.8902302 1.8902302 1.8902302 1.8902302
 1.8902302 1.8902302 1.8902302]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            assign carry[i/4] = (i/4 == 1)? carry[i/4-1] :
                                (i/4 == 2)? carry[i/4-2] :
                                (i/4 == 3)? carry[i/4-3] : 0;
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8   198 50276   562   570
   3283    58    72    14    19    60   796   357    72    14    19  6624
    352 19427  3283    58    72    14    19    12    16    60  1058   198
  50257   357    72    14    19  6624   362 19427  3283    58    72    14
     19    12    17    60  1058   198 50257   357    72    14    19  6624
    513 19427  3283    58    72    14    19    12    18    60  1058   657
     26   198 50284   437  8612   378   198 50284   562   570 42304   796
   3283    58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,   198, 50276,   562,   570,
          3283,    58,    72,    14,    19,    60,   796,   357,    72,    14,
            19,  6624,   352,     8,  5633,  3283,    58,    72,    14,    19,
            12,    16,    60,  1058,   198, 50257,   357,    72,    14,    19,
          6624,   362,     8,  5633,  3283,    58,    72,    14,    19,    12,
            17,    60,  1058,   198, 50257,   357,    72,    14,    19,  6624,
           513,     8,  5633,  3283,    58,    72,    14,    19,    12,    18,
            60,  1058,   657,    26,   198, 50284,   437,  8612,   378,   198,
         50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  158
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            assign carry[i/4] = (i/4 == 1)? carry[i/4-1] :
                                (i/4 == 2)? carry[i/4-2] :
                                (i/4 == 3)? carry[i/4-3] : 0;
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  16.691278485999987
-------------------------------------------------------
MCTS Iteration:  12.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9918869 1.9878304 1.9878304 1.9878304 1.9878304 1.9878304 1.9878304
 1.9878304 1.9878304 1.9878304]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    15]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8  2221  1058   751   263
    198 50276    65 10210    62    69  2860   277  2860   357    64    58
     72    10    18    25    72  4357   275    58    72    10    18    25
     72  4357  3283    58    72    12    19  4357  3283    58    72  4357
   2160    58    72    10    18    25    72 36563   198 50280   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    15,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,
           198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,   357,
            64,    58,    72,    10,    18,    25,    72,  4357,   275,    58,
            72,    10,    18,    25,    72,  4357,  3283,    58,    72,    12,
            19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,    10,
            18,    25,    72, 36563,   198, 50280,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  144
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.82583723800002
-------------------------------------------------------
MCTS Iteration:  13.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0544956 1.0544956 2.0817435 2.0817435 2.0817435 2.0817435 2.0817435
 2.0817435 2.0817435 2.0817435]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, cout, sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin: adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], cout, c[i/4], sum[i+3:i]);
        end
    endgenerate

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11 42304    11  2160    58    18    25
     15 36563   198 50284  8612   378   198 50280  5235  7785  1312    26
    198 50280  1640   357    72   796   604    26  1312  1279  7337    26
   1312   796  1312  1343   604     8  2221    25   751   263   198 50276
     65 10210    62    69  2860   277  2860   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
  42304    11   269    58    72    14    19  4357  2160    58    72    10
     18    25    72 36563   198 50280   437   198 50284   437  8612   378
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11, 42304,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,   378,
           198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,   357,
            72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,   796,
          1312,  1343,   604,     8,  2221,    25,   751,   263,   198, 50276,
            65, 10210,    62,    69,  2860,   277,  2860,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357, 42304,    11,   269,    58,    72,    14,
            19,  4357,  2160,    58,    72,    10,    18,    25,    72, 36563,
           198, 50280,   437,   198, 50284,   437,  8612,   378,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  130
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, cout, sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin: adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], cout, c[i/4], sum[i+3:i]);
        end
    endgenerate

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.118257004999975
-------------------------------------------------------
MCTS Iteration:  14.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1149056 1.1149056 1.1149056 2.1723585 2.1723585 2.1723585 2.1723585
 2.1723585 2.1723585 2.1723585]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    62]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (
       .a(a[3 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (
       .a(a[3 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
SEQUENCE:  [[   15   357   198 50281    13    64     7    64    58    18]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[   15   357   198 50281    13    64     7    64    58    18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0 (
      .a(a[3:0]),
      .b(b[3:0]),
      .cin(cin),
      .cout(carry[0]),
      .sum(sum[3:0])
    );
    
    generate
        genvar i;
        for (i=1; i<100; i=i+1) begin: adder
            bcd_fadd fadd_i (
               .a(a[(4*i)+3:4*i]),
               .b(b[(4*i)+3:4*i]),
               .cin(carry[i-1]),
               .cout(carry[i]),
               .sum(sum[(4*i)+3:4*i])
            );
        end
    endgenerate
    
    assign cout = carry[99];
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62    15   357   198 50282    13    64     7    64    58    18
     25    15 46570   198 50282    13    65     7    65    58    18    25
     15 46570   198 50282    13 17879     7 17879   828   198 50282    13
     66   448     7 34993    58    15 46570   198 50282    13 16345     7
  16345    58    18    25    15 12962   198 50284  1776   198 50284   198
  50284  8612   378   198 50280  5235  7785  1312    26   198 50280  1640
    357    72    28    16    26  1312    27  3064    26  1312    28    72
     10    16     8  2221    25   751   263   198 50276    65 10210    62
     69  2860   277  2860    62    72   357   198 50273    13    64     7
     64    58     7    19     9    72 47762    18    25    19     9    72
  46570   198 50273    13    65     7    65    58     7    19     9    72
  47762    18    25    19     9    72 46570   198 50273    13 17879     7
  34993    58    72    12    16 46570   198 50273    13    66   448     7
  34993    58    72 46570   198 50273    13 16345     7 16345    58     7
     19     9    72 47762    18    25    19     9    72 12962   198 50276
   1776   198 50280   437   198 50284   437  8612   378   198 50284   198
  50284   562   570 42304   796  3283    58  2079 11208   198 50284   198
    437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    62,    15,   357,   198, 50281,    13,    64,     7,    64,
            58,    18,    25,    15, 46570,   198, 50281,    13,    65,     7,
            65,    58,    18,    25,    15, 46570,   198, 50281,    13, 17879,
             7, 17879,   828,   198, 50281,    13,    66,   448,     7, 34993,
            58,    15, 46570,   198, 50281,    13, 16345,     7, 16345,    58,
            18,    25,    15, 12962,   198, 50284,  1776,   198, 50284,   198,
         50284,  8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198,
         50280,  1640,   357,    72,    28,    16,    26,  1312,    27,  3064,
            26,  1312,    28,    72,    10,    16,     8,  2221,    25,   751,
           263,   198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,
            62,    72,   357,   198, 50272,    13,    64,     7,    64,    58,
             7,    19,     9,    72, 47762,    18,    25,    19,     9,    72,
         46570,   198, 50272,    13,    65,     7,    65,    58,     7,    19,
             9,    72, 47762,    18,    25,    19,     9,    72, 46570,   198,
         50272,    13, 17879,     7, 34993,    58,    72,    12,    16, 46570,
           198, 50272,    13,    66,   448,     7, 34993,    58,    72, 46570,
           198, 50272,    13, 16345,     7, 16345,    58,     7,    19,     9,
            72, 47762,    18,    25,    19,     9,    72, 12962,   198, 50276,
          1776,   198, 50280,   437,   198, 50284,   437,  8612,   378,   198,
         50284,   198, 50284,   562,   570, 42304,   796,  3283,    58,  2079,
         11208,   198, 50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  224
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0 (
     .a(a[3:0]),
     .b(b[3:0]),
     .cin(cin),
     .cout(carry[0]),
     .sum(sum[3:0])
    );
    
    generate
        genvar i;
        for (i=1; i<100; i=i+1) begin: adder
            bcd_fadd fadd_i (
              .a(a[(4*i)+3:4*i]),
              .b(b[(4*i)+3:4*i]),
              .cin(carry[i-1]),
              .cout(carry[i]),
              .sum(sum[(4*i)+3:4*i])
            );
        end
    endgenerate
    
    assign cout = carry[99];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  19.868767704999982
-------------------------------------------------------
MCTS Iteration:  15.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1733334 1.1733334 1.1733334 1.1733334 2.26      2.26      2.26
 2.26      2.26      2.26     ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
   3283    58    72    12    19  4357  3283    58    72  4357  2160    58
     72    10    18    25    72 36563   198 50280   437   198 50284   437
   8612   378   198 50284   562   570 42304   796  3283    58  2079 11208
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,  3283,    58,    72,    12,    19,  4357,
          3283,    58,    72,  4357,  2160,    58,    72,    10,    18,    25,
            72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  142
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.750671085000022
-------------------------------------------------------
MCTS Iteration:  16.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2299619 1.2299619 1.2299619 1.2299619 1.2299619 2.3449428 2.3449428
 2.3449428 2.3449428 2.3449428]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.913193345000025
-------------------------------------------------------
MCTS Iteration:  17.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2849481 1.2849481 1.2849481 1.2849481 1.2849481 1.2849481 2.427422
 2.427422  2.427422  2.427422 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[   7   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[   7   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1(a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd2(a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd3(a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd4(a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd5(a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16     7    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11   269    58    15  4357  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   277
   2860    17     7    64    58    22    25    19  4357   275    58    22
     25    19  4357   269    58    15  4357   269    58    16  4357  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    277  2860    18     7    64    58  1157    25    23  4357   275    58
   1157    25    23  4357   269    58    16  4357   269    58    17  4357
   2160    58  1157    25    23 36563   198 50284    65 10210    62    69
   2860   277  2860    19     7    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357   269    58    17  4357   269    58    18
   4357  2160    58  1314    25  1065 36563   198 50284    65 10210    62
     69  2860   277  2860    20     7    64    58  1129    25  1433  4357
    275    58  1129    25  1433  4357   269    58    18  4357 42304    11
   2160    58  1129    25  1433 36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,     7,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,   269,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   277,  2860,    17,     7,    64,
            58,    22,    25,    19,  4357,   275,    58,    22,    25,    19,
          4357,   269,    58,    15,  4357,   269,    58,    16,  4357,  2160,
            58,    22,    25,    19, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,  2860,    18,     7,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357,   269,    58,
            16,  4357,   269,    58,    17,  4357,  2160,    58,  1157,    25,
            23, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    19,     7,    64,    58,  1314,    25,  1065,  4357,   275,
            58,  1314,    25,  1065,  4357,   269,    58,    17,  4357,   269,
            58,    18,  4357,  2160,    58,  1314,    25,  1065, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,  2860,    20,     7,
            64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,    25,
          1433,  4357,   269,    58,    18,  4357, 42304,    11,  2160,    58,
          1129,    25,  1433, 36563,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  197
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1(a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd2(a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd3(a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd4(a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd5(a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.526549673999966
-------------------------------------------------------
MCTS Iteration:  18.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3384268 1.3384268 1.3384268 1.3384268 1.3384268 1.3384268 1.3384268
 2.5076404 2.5076404 2.5076404]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.sum[3:0]);
    assign top_module.sum = a + b + cin;

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13 16345    58    18    25    15 36563
    198 50284   562   570  1353    62 21412    13 16345   796   257  1343
    275  1343   269   259    26   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13, 16345,    58,
            18,    25,    15, 36563,   198, 50284,   562,   570,  1353,    62,
         21412,    13, 16345,   796,   257,  1343,   275,  1343,   269,   259,
            26,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  63
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.sum[3:0]);
    assign top_module.sum = a + b + cin;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  11.79355689099998
-------------------------------------------------------
MCTS Iteration:  19.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3905158 1.3905158 1.3905158 1.3905158 1.3905158 1.3905158 1.3905158
 1.3905158 2.5857737 2.5857737]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    15    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[   15  4357   269   259    11 42304    15    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout0, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout0, cout1, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout1, cout2, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout2, cout3, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout3, cout4, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout4, cout5, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout5, cout6, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout6, cout7, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout7, cout8, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout8, cout9, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout9, cout10, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout10, cout11, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout11, cout12, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout12, cout13, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout13, cout14, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout14, cout15, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout15, cout16, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout16, cout17, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout17, cout18, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout18, cout19, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout19, cout20, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout20, cout21, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout21
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    15    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    15    11 42304    16    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    16    11 42304    17    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    17
     11 42304    18    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    18    11 42304
     19    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    19    11 42304    20    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    20    11 42304    21    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    21    11 42304    22    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    22    11 42304    23    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    23
     11 42304    24    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304    24    11 42304
    940    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304   940    11 42304  1157    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1157    11 42304  1065    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1065    11 42304  1485    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1485    11 42304  1415    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1415
     11 42304  1314    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1314    11 42304
   1433    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1433    11 42304  1558    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1558    11 42304  1507    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1507    11 42304  1129    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1129    11 42304  1238    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  1238
     11 42304  2481    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  2481]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    15,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    15,
            11, 42304,    16,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    16,    11, 42304,    17,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    17,    11, 42304,
            18,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    18,    11, 42304,    19,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    19,    11, 42304,    20,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    20,
            11, 42304,    21,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    21,    11, 42304,    22,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    22,    11, 42304,
            23,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    23,    11, 42304,    24,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,    24,    11, 42304,   940,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,   940,
            11, 42304,  1157,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1157,    11, 42304,  1065,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1065,    11, 42304,
          1485,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1485,    11, 42304,  1415,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1415,    11, 42304,  1314,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1314,
            11, 42304,  1433,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1433,    11, 42304,  1558,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1558,    11, 42304,
          1507,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1507,    11, 42304,  1129,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1129,    11, 42304,  1238,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  1238,
            11, 42304,  2481,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  2481]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.86062017699999
-------------------------------------------------------
MCTS Iteration:  20.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.441318  1.441318  1.441318  1.441318  1.441318  1.441318  1.441318
 1.441318  1.441318  2.6619773]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[ 2860    58  2079    25    15 11208   198 50284   198 50284]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign inst_fadd[0].c 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign inst_fadd[0].a 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign cout = inst_fadd[99 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284]]
SEQUENCE:  [[ 562  570 1391   66  448   11 2160   92  796  916]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[ 562  570 1391   66  448   11 2160   92  796  916]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd[99:0];
    
    assign {cout, sum} = inst_fadd[99].fadd(a, b, cin);

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284   562   570  1391    66   448    11  2160    92   796   916
     62    69  2860    58  2079  4083    69  2860     7    64    11   275
     11   269   259  1776   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    58,  2079,    25,    15, 11208,   198, 50284,
           198, 50284,   562,   570,  1391,    66,   448,    11,  2160,    92,
           796,   916,    62,    69,  2860,    58,  2079,  4083,    69,  2860,
             7,    64,    11,   275,    11,   269,   259,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  50
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd[99:0];
    
    assign {cout, sum} = inst_fadd[99].fadd(a, b, cin);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  11.133675241999981
-------------------------------------------------------
MCTS Iteration:  21.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.4909244 1.4909244 1.4909244 1.4909244 1.4909244 1.4909244 1.4909244
 1.4909244 1.4909244 1.4909244]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i=4; i<400; i=i+4)
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72    28    19    26  1312    27  7029
     26  1312    28    72    10    19     8   198 50276    65 10210    62
     69  2860   916   357    64    58    72    10    18    25    72  4357
    275    58    72    10    18    25    72  4357  3283    58    72    12
     19  4357  3283    58    72  4357  2160    58    72    10    18    25
     72 36563   198 50284   437  8612   378   198 50284   562   570 42304
    796  3283    58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,    28,    19,    26,  1312,    27,  7029,    26,  1312,
            28,    72,    10,    19,     8,   198, 50276,    65, 10210,    62,
            69,  2860,   916,   357,    64,    58,    72,    10,    18,    25,
            72,  4357,   275,    58,    72,    10,    18,    25,    72,  4357,
          3283,    58,    72,    12,    19,  4357,  3283,    58,    72,  4357,
          2160,    58,    72,    10,    18,    25,    72, 36563,   198, 50284,
           437,  8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,
            58,  2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  135
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i=4; i<400; i=i+4)
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.37615211100001
-------------------------------------------------------
MCTS Iteration:  22.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9045619 1.5394158 1.5394158 1.5394158 1.5394158 1.5394158 1.5394158
 1.5394158 1.5394158 1.5394158]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    62]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
SEQUENCE:  [[  15    7   64   58   18   25   15 4357  275   58]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  15    7   64   58   18   25   15 4357  275   58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0(a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin: adder
            bcd_fadd fadd(a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62    15     7    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11  3283    58    15  4357  2160
     58    18    25    15 36563   198 50284  8612   378   198 50280  5235
   7785  1312    26   198 50280  1640   357    72   796   604    26  1312
   1279  7337    26  1312   796  1312  1343   604     8  2221    25   751
    263   198 50276    65 10210    62    69  2860   277  2860     7    64
     58    72    10    18    25    72  4357   275    58    72    10    18
     25    72  4357  3283    58    72    12    19  4357  3283    58    72
   4357  2160    58    72    10    18    25    72 36563   198 50280   437
    198 50284   437  8612   378   198 50284   562   570 42304   796  3283
     58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    62,    15,     7,    64,    58,    18,    25,    15,  4357,
           275,    58,    18,    25,    15,  4357,   269,   259,    11,  3283,
            58,    15,  4357,  2160,    58,    18,    25,    15, 36563,   198,
         50284,  8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198,
         50280,  1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,
            26,  1312,   796,  1312,  1343,   604,     8,  2221,    25,   751,
           263,   198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,
             7,    64,    58,    72,    10,    18,    25,    72,  4357,   275,
            58,    72,    10,    18,    25,    72,  4357,  3283,    58,    72,
            12,    19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,
            10,    18,    25,    72, 36563,   198, 50280,   437,   198, 50284,
           437,  8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,
            58,  2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  145
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0(a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin: adder
            bcd_fadd fadd(a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.906142584000008
-------------------------------------------------------
MCTS Iteration:  23.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9401479 0.9401479 1.5868638 1.5868638 1.5868638 1.5868638 1.5868638
 1.5868638 1.5868638 1.5868638]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11   269    58    15  4357  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   277
   2860    17   357    64    58    22    25    19  4357   275    58    22
     25    19  4357   269    58    15  4357   269    58    16  4357  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    277  2860    18   357    64    58  1157    25    23  4357   275    58
   1157    25    23  4357   269    58    16  4357   269    58    17  4357
   2160    58  1157    25    23 36563   198 50284    65 10210    62    69
   2860   277  2860    19   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357   269    58    17  4357   269    58    18
   4357  2160    58  1314    25  1065 36563   198 50284    65 10210    62
     69  2860   277  2860    20   357    64    58  1129    25  1433  4357
    275    58  1129    25  1433  4357   269    58    18  4357 42304    11
   2160    58  1129    25  1433 36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,   269,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   277,  2860,    17,   357,    64,
            58,    22,    25,    19,  4357,   275,    58,    22,    25,    19,
          4357,   269,    58,    15,  4357,   269,    58,    16,  4357,  2160,
            58,    22,    25,    19, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,  2860,    18,   357,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357,   269,    58,
            16,  4357,   269,    58,    17,  4357,  2160,    58,  1157,    25,
            23, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    19,   357,    64,    58,  1314,    25,  1065,  4357,   275,
            58,  1314,    25,  1065,  4357,   269,    58,    17,  4357,   269,
            58,    18,  4357,  2160,    58,  1314,    25,  1065, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,  2860,    20,   357,
            64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,    25,
          1433,  4357,   269,    58,    18,  4357, 42304,    11,  2160,    58,
          1129,    25,  1433, 36563,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  197
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.51177480299998
-------------------------------------------------------
MCTS Iteration:  24.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.975     0.975     0.975     1.6333332 1.6333332 1.6333332 1.6333332
 1.6333332 1.6333332 1.6333332]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640     7    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  198 50280  1640     7    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0; i<100; i=i+1) begin: adder
            bcd_fadd add(
               .a(a[3*i+:3]),
               .b(b[3*i+:3]),
               .cin(carry[i]),
               .cout(carry[i+1]),
               .sum(sum[3*i+:3])
            );
        end
    endgenerate
    assign carry[100] = cin;
    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640     7    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8  2221    25   751   263
    198 50276    65 10210    62    69  2860   751     7   198 50273    13
     64     7    64    58    18     9    72    10    25    18 46570   198
  50273    13    65     7    65    58    18     9    72    10    25    18
  46570   198 50273    13 17879     7 34993    58    72 46570   198 50273
     13    66   448     7 34993    58    72    10    16 46570   198 50273
     13 16345     7 16345    58    18     9    72    10    25    18 12962
    198 50276  1776   198 50280   437   198 50284   437  8612   378   198
  50284   562   570  3283    58  3064    60   796   269   259    26   198
  50284   562   570 42304   796  3283    58  3064 11208   198   198   437
  21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,     7,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
          2221,    25,   751,   263,   198, 50276,    65, 10210,    62,    69,
          2860,   751,     7,   198, 50272,    13,    64,     7,    64,    58,
            18,     9,    72,    10,    25,    18, 46570,   198, 50272,    13,
            65,     7,    65,    58,    18,     9,    72,    10,    25,    18,
         46570,   198, 50272,    13, 17879,     7, 34993,    58,    72, 46570,
           198, 50272,    13,    66,   448,     7, 34993,    58,    72,    10,
            16, 46570,   198, 50272,    13, 16345,     7, 16345,    58,    18,
             9,    72,    10,    25,    18, 12962,   198, 50276,  1776,   198,
         50280,   437,   198, 50284,   437,  8612,   378,   198, 50284,   562,
           570,  3283,    58,  3064,    60,   796,   269,   259,    26,   198,
         50284,   562,   570, 42304,   796,  3283,    58,  3064, 11208,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  151
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0; i<100; i=i+1) begin: adder
            bcd_fadd add(
              .a(a[3*i+:3]),
              .b(b[3*i+:3]),
              .cin(carry[i]),
              .cout(carry[i+1]),
              .sum(sum[3*i+:3])
            );
        end
    endgenerate
    assign carry[100] = cin;
    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  16.202292216000046
-------------------------------------------------------
MCTS Iteration:  25.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0091617 1.0091617 1.0091617 1.0091617 1.6788821 1.6788821 1.6788821
 1.6788821 1.6788821 1.6788821]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8  2221   198 50276    65
  10210    62    69  2860   277  2860   357    64    58    72    10    18
     25    72  4357   275    58    72    10    18    25    72  4357  3283
     58    72    12    19  4357  3283    58    72  4357  2160    58    72
     10    18    25    72 36563   198 50280   437   198 50284   437  8612
    378   198 50284   562   570 42304   796  3283    58  2079 11208   198
    198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,  2221,   198, 50276,    65,
         10210,    62,    69,  2860,   277,  2860,   357,    64,    58,    72,
            10,    18,    25,    72,  4357,   275,    58,    72,    10,    18,
            25,    72,  4357,  3283,    58,    72,    12,    19,  4357,  3283,
            58,    72,  4357,  2160,    58,    72,    10,    18,    25,    72,
         36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,   198,
         50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  141
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.678194899999994
-------------------------------------------------------
MCTS Iteration:  26.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0426726 1.0426726 1.0426726 1.0426726 1.0426726 1.7235634 1.7235634
 1.7235634 1.7235634 1.7235634]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.86741727000003
-------------------------------------------------------
MCTS Iteration:  27.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0755684 1.0755684 1.0755684 1.0755684 1.0755684 1.0755684 1.7674246
 1.7674246 1.7674246 1.7674246]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    15]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd1 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd2 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd3 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd4 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11   269    58    15  4357  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    22    25    19  4357   275    58    22
     25    19  4357   269    58    15  4357   269    58    16  4357  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    277  2860    17   357    64    58  1157    25    23  4357   275    58
   1157    25    23  4357   269    58    16  4357   269    58    17  4357
   2160    58  1157    25    23 36563   198 50284    65 10210    62    69
   2860   277  2860    18   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357   269    58    17  4357   269    58    18
   4357  2160    58  1314    25  1065 36563   198 50284    65 10210    62
     69  2860   277  2860    19   357    64    58  1129    25  1433  4357
    275    58  1129    25  1433  4357   269    58    18  4357 42304    11
   2160    58  1129    25  1433 36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    15,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,   269,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   277,  2860,    16,   357,    64,
            58,    22,    25,    19,  4357,   275,    58,    22,    25,    19,
          4357,   269,    58,    15,  4357,   269,    58,    16,  4357,  2160,
            58,    22,    25,    19, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,  2860,    17,   357,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357,   269,    58,
            16,  4357,   269,    58,    17,  4357,  2160,    58,  1157,    25,
            23, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    18,   357,    64,    58,  1314,    25,  1065,  4357,   275,
            58,  1314,    25,  1065,  4357,   269,    58,    17,  4357,   269,
            58,    18,  4357,  2160,    58,  1314,    25,  1065, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,  2860,    19,   357,
            64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,    25,
          1433,  4357,   269,    58,    18,  4357, 42304,    11,  2160,    58,
          1129,    25,  1433, 36563,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  197
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd1 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd2 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd3 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd4 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.511986281999953
-------------------------------------------------------
MCTS Iteration:  28.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1078819 1.1078819 1.1078819 1.1078819 1.1078819 1.1078819 1.1078819
 1.8105092 1.8105092 1.8105092]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout, top_module.sum[3:0]);
    assign top_module.sum[399:4] = a[399:4] + b[399:4] + top_module.cout;

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13    66   448    11  1353    62 21412
     13 16345    58    18    25    15 36563   198 50284   562   570  1353
     62 21412    13 16345    58 28771    25    19    60   796   257    58
  28771    25    19    60  1343   275    58 28771    25    19    60  1343
   1353    62 21412    13    66   448    26   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13,    66,   448,
            11,  1353,    62, 21412,    13, 16345,    58,    18,    25,    15,
         36563,   198, 50284,   562,   570,  1353,    62, 21412,    13, 16345,
            58, 28771,    25,    19,    60,   796,   257,    58, 28771,    25,
            19,    60,  1343,   275,    58, 28771,    25,    19,    60,  1343,
          1353,    62, 21412,    13,    66,   448,    26,   198,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  89
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout, top_module.sum[3:0]);
    assign top_module.sum[399:4] = a[399:4] + b[399:4] + top_module.cout;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.092141549000075
-------------------------------------------------------
MCTS Iteration:  29.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1396428 1.1396428 1.1396428 1.1396428 1.1396428 1.1396428 1.1396428
 1.1396428 1.8528571 1.8528571]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    11  2160    58    18]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[   15  4357   269   259    11 42304    11  2160    58    18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout, cout, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout, cout, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout, cout, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout, cout, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout, cout, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout, cout, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout, cout, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout, cout, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout, cout, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout, cout, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout, cout, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout, cout, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout, cout, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout, cout, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout, cout, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout, cout, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout, cout, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout, cout, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout, cout, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout, cout, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout, cout, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout, cout, sum[91:88]);
    bcd_fadd inst24 (a[95:92], b[95:92], cout, cout, sum[95:92]);
    b
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    11  2160    58    18
     25    15 36563   198 50284    65 10210    62    69  2860   916    17
    357    64    58    22    25    19  4357   275    58    22    25    19
   4357 42304    11 42304    11  2160    58    22    25    19 36563   198
  50284    65 10210    62    69  2860   916    18   357    64    58  1157
     25    23  4357   275    58  1157    25    23  4357 42304    11 42304
     11  2160    58  1157    25    23 36563   198 50284    65 10210    62
     69  2860   916    19   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357 42304    11 42304    11  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   916    20
    357    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357 42304    11 42304    11  2160    58  1129    25  1433 36563   198
  50284    65 10210    62    69  2860   916    21   357    64    58  1954
     25  1238  4357   275    58  1954    25  1238  4357 42304    11 42304
     11  2160    58  1954    25  1238 36563   198 50284    65 10210    62
     69  2860   916    22   357    64    58  1983    25  1731  4357   275
     58  1983    25  1731  4357 42304    11 42304    11  2160    58  1983
     25  1731 36563   198 50284    65 10210    62    69  2860   916    23
    357    64    58  3132    25  2078  4357   275    58  3132    25  2078
   4357 42304    11 42304    11  2160    58  3132    25  2078 36563   198
  50284    65 10210    62    69  2860   916    24   357    64    58  2327
     25  2624  4357   275    58  2327    25  2624  4357 42304    11 42304
     11  2160    58  2327    25  2624 36563   198 50284    65 10210    62
     69  2860   916   940   357    64    58  2670    25  2623  4357   275
     58  2670    25  2623  4357 42304    11 42304    11  2160    58  2670
     25  2623 36563   198 50284    65 10210    62    69  2860   916  1157
    357    64    58  3559    25  1821  4357   275    58  3559    25  1821
   4357 42304    11 42304    11  2160    58  3559    25  1821 36563   198
  50284    65 10210    62    69  2860   916  1065   357    64    58  2857
     25  2598  4357   275    58  2857    25  2598  4357 42304    11 42304
     11  2160    58  2857    25  2598 36563   198 50284    65 10210    62
     69  2860   916  1485   357    64    58  4349    25  2780  4357   275
     58  4349    25  2780  4357 42304    11 42304    11  2160    58  4349
     25  2780 36563   198 50284    65 10210    62    69  2860   916  1415
    357    64    58  2816    25  4309  4357   275    58  2816    25  4309
   4357 42304    11 42304    11  2160    58  2816    25  4309 36563   198
  50284    65 10210    62    69  2860   916  1314   357    64    58  3270
     25  3980  4357   275    58  3270    25  3980  4357 42304    11 42304
     11  2160    58  3270    25  3980 36563   198 50284    65 10210    62
     69  2860   916  1433   357    64    58  5066    25  1899  4357   275
     58  5066    25  1899  4357 42304    11 42304    11  2160    58  5066
     25  1899 36563   198 50284    65 10210    62    69  2860   916  1558
    357    64    58  3134    25  2414  4357   275    58  3134    25  2414
   4357 42304    11 42304    11  2160    58  3134    25  2414 36563   198
  50284    65 10210    62    69  2860   916  1507   357    64    58  4869
     25  3104  4357   275    58  4869    25  3104  4357 42304    11 42304
     11  2160    58  4869    25  3104 36563   198 50284    65 10210    62
     69  2860   916  1129   357    64    58  2425    25  4761  4357   275
     58  2425    25  4761  4357 42304    11 42304    11  2160    58  2425
     25  4761 36563   198 50284    65 10210    62    69  2860   916  1238
    357    64    58  3720    25  4304  4357   275    58  3720    25  4304
   4357 42304    11 42304    11  2160    58  3720    25  4304 36563   198
  50284    65 10210    62    69  2860   916  2481   357    64    58  5999
     25  1795  4357   275    58  5999    25  1795  4357 42304    11 42304
     11  2160    58  5999    25  1795 36563   198 50284    65 10210    62
     69  2860   916  1828   357    64    58  5774    25  5705  4357   275
     58  5774    25  5705  4357 42304    11 42304    11  2160    58  5774
     25  5705 36563   198 50284    65 10210    62    69  2860   916  1954
    357    64    58  6420    25  3459  4357   275    58  6420    25  3459
   4357 42304    11 42304    11  2160    58  6420    25  3459 36563   198
  50284    65 10210    62    69  2860   916  1731   357    64    58  3865
     25  5892  4357   275    58  3865    25  5892  4357 42304    11 42304
     11  2160    58  3865    25  5892 36563   198 50284    65]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    11,  2160,
            58,    18,    25,    15, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   916,    17,   357,    64,    58,    22,    25,    19,
          4357,   275,    58,    22,    25,    19,  4357, 42304,    11, 42304,
            11,  2160,    58,    22,    25,    19, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   916,    18,   357,    64,    58,  1157,
            25,    23,  4357,   275,    58,  1157,    25,    23,  4357, 42304,
            11, 42304,    11,  2160,    58,  1157,    25,    23, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   916,    19,   357,    64,
            58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,  1065,
          4357, 42304,    11, 42304,    11,  2160,    58,  1314,    25,  1065,
         36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,    20,
           357,    64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,
            25,  1433,  4357, 42304,    11, 42304,    11,  2160,    58,  1129,
            25,  1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    21,   357,    64,    58,  1954,    25,  1238,  4357,   275,
            58,  1954,    25,  1238,  4357, 42304,    11, 42304,    11,  2160,
            58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   916,    22,   357,    64,    58,  1983,    25,  1731,
          4357,   275,    58,  1983,    25,  1731,  4357, 42304,    11, 42304,
            11,  2160,    58,  1983,    25,  1731, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   916,    23,   357,    64,    58,  3132,
            25,  2078,  4357,   275,    58,  3132,    25,  2078,  4357, 42304,
            11, 42304,    11,  2160,    58,  3132,    25,  2078, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   916,    24,   357,    64,
            58,  2327,    25,  2624,  4357,   275,    58,  2327,    25,  2624,
          4357, 42304,    11, 42304,    11,  2160,    58,  2327,    25,  2624,
         36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,   940,
           357,    64,    58,  2670,    25,  2623,  4357,   275,    58,  2670,
            25,  2623,  4357, 42304,    11, 42304,    11,  2160,    58,  2670,
            25,  2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,
            58,  3559,    25,  1821,  4357, 42304,    11, 42304,    11,  2160,
            58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1065,   357,    64,    58,  2857,    25,  2598,
          4357,   275,    58,  2857,    25,  2598,  4357, 42304,    11, 42304,
            11,  2160,    58,  2857,    25,  2598, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   916,  1485,   357,    64,    58,  4349,
            25,  2780,  4357,   275,    58,  4349,    25,  2780,  4357, 42304,
            11, 42304,    11,  2160,    58,  4349,    25,  2780, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   916,  1415,   357,    64,
            58,  2816,    25,  4309,  4357,   275,    58,  2816,    25,  4309,
          4357, 42304,    11, 42304,    11,  2160,    58,  2816,    25,  4309,
         36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,  1314,
           357,    64,    58,  3270,    25,  3980,  4357,   275,    58,  3270,
            25,  3980,  4357, 42304,    11, 42304,    11,  2160,    58,  3270,
            25,  3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,
            58,  5066,    25,  1899,  4357, 42304,    11, 42304,    11,  2160,
            58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1558,   357,    64,    58,  3134,    25,  2414,
          4357,   275,    58,  3134,    25,  2414,  4357, 42304,    11, 42304,
            11,  2160,    58,  3134,    25,  2414, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   916,  1507,   357,    64,    58,  4869,
            25,  3104,  4357,   275,    58,  4869,    25,  3104,  4357, 42304,
            11, 42304,    11,  2160,    58,  4869,    25,  3104, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   916,  1129,   357,    64,
            58,  2425,    25,  4761,  4357,   275,    58,  2425,    25,  4761,
          4357, 42304,    11, 42304,    11,  2160,    58,  2425,    25,  4761,
         36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,  1238,
           357,    64,    58,  3720,    25,  4304,  4357,   275,    58,  3720,
            25,  4304,  4357, 42304,    11, 42304,    11,  2160,    58,  3720,
            25,  4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,
            58,  5999,    25,  1795,  4357, 42304,    11, 42304,    11,  2160,
            58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1828,   357,    64,    58,  5774,    25,  5705,
          4357,   275,    58,  5774,    25,  5705,  4357, 42304,    11, 42304,
            11,  2160,    58,  5774,    25,  5705, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   916,  1954,   357,    64,    58,  6420,
            25,  3459,  4357,   275,    58,  6420,    25,  3459,  4357, 42304,
            11, 42304,    11,  2160,    58,  6420,    25,  3459, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   916,  1731,   357,    64,
            58,  3865,    25,  5892,  4357,   275,    58,  3865,    25,  5892,
          4357, 42304,    11, 42304,    11,  2160,    58,  3865,    25,  5892,
         36563,   198, 50284,    65]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.92969588400001
-------------------------------------------------------
MCTS Iteration:  30.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1708786 1.1708786 1.1708786 1.1708786 1.1708786 1.1708786 1.1708786
 1.1708786 1.1708786 1.8945048]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[ 2860    15   357   198 50281    13    64     7    64    58]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50281    13    64     7
     64    58]]
SEQUENCE:  [[   18    25    15 46570   198 50282    13    65     7    65]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[   18    25    15 46570   198 50282    13    65     7    65]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
      .a(a[3:0]),
     .b(b[3:0]),
      .cin(cin),
     .cout(cout[0]),
     .sum(sum[3:0])
    );
    
    generate
        genvar i;
        for (i=1; i<400; i=i+1) begin: adder
        bcd_fadd inst_fadd(
          .a(a[(4*(i-1))+3:4*(i-1)]),
          .b(b[(4*(i-1))+3:4*(i-1)]),
          .cin(cout[i-1]),
          .cout(cout[i]),
          .sum(sum[(4*(i-1))+3:4*(i-1)])
        );
        end
    endgenerate
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50282    13    64     7
     64    58    18    25    15 46570   198 50283    13    65     7    65
     58    18    25    15 46570   198 50282    13 17879     7 17879   828
    198 50283    13    66   448     7    66   448    58    15 46570   198
  50283    13 16345     7 16345    58    18    25    15 12962   198 50284
   1776   198 50284   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72    28    16    26  1312    27  7029
     26  1312    28    72    10    16     8  2221    25   751   263   198
  50280    65 10210    62    69  2860   916    62    69  2860     7   198
  50278    13    64     7    64    58     7    19     9     7    72    12
     16  4008    10    18    25    19     9     7    72    12    16 15437
    828   198 50278    13    65     7    65    58     7    19     9     7
     72    12    16  4008    10    18    25    19     9     7    72    12
     16 15437   828   198 50278    13 17879     7    66   448    58    72
     12    16 46570   198 50278    13    66   448     7    66   448    58
     72 46570   198 50278    13 16345     7 16345    58     7    19     9
      7    72    12    16  4008    10    18    25    19     9     7    72
     12    16     8 12962   198 50280  1776   198 50280   437   198 50284
    437  8612   378   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    15,   357,   198, 50281,    13,    64,     7,
            64,    58,    18,    25,    15, 46570,   198, 50282,    13,    65,
             7,    65,    58,    18,    25,    15, 46570,   198, 50281,    13,
         17879,     7, 17879,   828,   198, 50282,    13,    66,   448,     7,
            66,   448,    58,    15, 46570,   198, 50282,    13, 16345,     7,
         16345,    58,    18,    25,    15, 12962,   198, 50284,  1776,   198,
         50284,   198, 50284,  8612,   378,   198, 50280,  5235,  7785,  1312,
            26,   198, 50280,  1640,   357,    72,    28,    16,    26,  1312,
            27,  7029,    26,  1312,    28,    72,    10,    16,     8,  2221,
            25,   751,   263,   198, 50280,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,     7,   198, 50277,    13,    64,     7,
            64,    58,     7,    19,     9,     7,    72,    12,    16,  4008,
            10,    18,    25,    19,     9,     7,    72,    12,    16, 15437,
           828,   198, 50277,    13,    65,     7,    65,    58,     7,    19,
             9,     7,    72,    12,    16,  4008,    10,    18,    25,    19,
             9,     7,    72,    12,    16, 15437,   828,   198, 50277,    13,
         17879,     7,    66,   448,    58,    72,    12,    16, 46570,   198,
         50277,    13,    66,   448,     7,    66,   448,    58,    72, 46570,
           198, 50277,    13, 16345,     7, 16345,    58,     7,    19,     9,
             7,    72,    12,    16,  4008,    10,    18,    25,    19,     9,
             7,    72,    12,    16,     8, 12962,   198, 50280,  1776,   198,
         50280,   437,   198, 50284,   437,  8612,   378,   198, 50284,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  230
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
     .a(a[3:0]),
    .b(b[3:0]),
     .cin(cin),
    .cout(cout[0]),
    .sum(sum[3:0])
    );
    
    generate
        genvar i;
        for (i=1; i<400; i=i+1) begin: adder
        bcd_fadd inst_fadd(
         .a(a[(4*(i-1))+3:4*(i-1)]),
         .b(b[(4*(i-1))+3:4*(i-1)]),
         .cin(cout[i-1]),
         .cout(cout[i]),
         .sum(sum[(4*(i-1))+3:4*(i-1)])
        );
        end
    endgenerate
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  20.198257282999975
-------------------------------------------------------
MCTS Iteration:  31.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2016147 1.2016147 1.2016147 1.2016147 1.2016147 1.2016147 1.2016147
 1.2016147 1.2016147 1.2016147]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
   3283    58    72    12    19  4357  3283    58    72  4357  2160    58
     72    10    18    25    72 36563   198 50280   437   198 50284   437
   8612   378   198 50284   562   570 42304   796  3283    58  2079 11208
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,  3283,    58,    72,    12,    19,  4357,
          3283,    58,    72,  4357,  2160,    58,    72,    10,    18,    25,
            72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  142
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.750405315999956
-------------------------------------------------------
MCTS Iteration:  32.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7854993 1.2318741 1.2318741 1.2318741 1.2318741 1.2318741 1.2318741
 1.2318741 1.2318741 1.2318741]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640     7    72    28    15    26    72    27]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  198 50280  1640     7    72    28    15    26    72    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0;i<100;i=i+1) begin
            bcd_fadd f(a[3*i+:3],b[3*i+:3],carry[i],carry[i+1],sum[3*i+:3]);
        end
    endgenerate

    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640     7    72    28    15    26    72    27
   3064    26    72    28    72    10    16     8  2221   198 50276    65
  10210    62    69  2860   277     7    64    58    18     9    72    10
     25    18  4357    65    58    18     9    72    10    25    18  4357
  34993    58    72  4357 34993    58    72    10    16  4357 16345    58
     18     9    72    10    25    18 36563   198 50280   437   198 50284
    437  8612   378   628 50284   562   570 42304   796  3283    58  3064
  11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,     7,    72,    28,    15,    26,
            72,    27,  3064,    26,    72,    28,    72,    10,    16,     8,
          2221,   198, 50276,    65, 10210,    62,    69,  2860,   277,     7,
            64,    58,    18,     9,    72,    10,    25,    18,  4357,    65,
            58,    18,     9,    72,    10,    25,    18,  4357, 34993,    58,
            72,  4357, 34993,    58,    72,    10,    16,  4357, 16345,    58,
            18,     9,    72,    10,    25,    18, 36563,   198, 50280,   437,
           198, 50284,   437,  8612,   378,   628, 50284,   562,   570, 42304,
           796,  3283,    58,  3064, 11208,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  107
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0;i<100;i=i+1) begin
            bcd_fadd f(a[3*i+:3],b[3*i+:3],carry[i],carry[i+1],sum[3*i+:3]);
        end
    endgenerate

    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  14.008073109000065
-------------------------------------------------------
MCTS Iteration:  33.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8093428 0.8093428 1.2616785 1.2616785 1.2616785 1.2616785 1.2616785
 1.2616785 1.2616785 1.2616785]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   257    16     7]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     16     7]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd a1(a[3:0], b[3:0], cin, cout, sum[3:0]);
    bcd_fadd a2(a[7:4], b[7:4], cout, c[0], sum[7:4]);
    bcd_fadd a3(a[11:8], b[11:8], c[0], c[1], sum[11:8]);
    bcd_fadd a4(a[15:12], b[15:12], c[1], c[2], sum[15:12]);
    bcd_fadd a5(a[19:16], b[19:16], c[2], c[3], sum[19:16]);
    bcd_fadd a6(a[23:20], b[23:20], c[3], cout, sum[23:20]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     16     7    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11 42304    11  2160    58    18    25    15
  36563   198 50284    65 10210    62    69  2860   257    17     7    64
     58    22    25    19  4357   275    58    22    25    19  4357 42304
     11   269    58    15  4357  2160    58    22    25    19 36563   198
  50284    65 10210    62    69  2860   257    18     7    64    58  1157
     25    23  4357   275    58  1157    25    23  4357   269    58    15
   4357   269    58    16  4357  2160    58  1157    25    23 36563   198
  50284    65 10210    62    69  2860   257    19     7    64    58  1314
     25  1065  4357   275    58  1314    25  1065  4357   269    58    16
   4357   269    58    17  4357  2160    58  1314    25  1065 36563   198
  50284    65 10210    62    69  2860   257    20     7    64    58  1129
     25  1433  4357   275    58  1129    25  1433  4357   269    58    17
   4357   269    58    18  4357  2160    58  1129    25  1433 36563   198
  50284    65 10210    62    69  2860   257    21     7    64    58  1954
     25  1238  4357   275    58  1954    25  1238  4357   269    58    18
   4357 42304    11  2160    58  1954    25  1238 36563   198 50284   198
    437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   257,
            16,     7,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    11,  2160,
            58,    18,    25,    15, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   257,    17,     7,    64,    58,    22,    25,    19,
          4357,   275,    58,    22,    25,    19,  4357, 42304,    11,   269,
            58,    15,  4357,  2160,    58,    22,    25,    19, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   257,    18,     7,    64,
            58,  1157,    25,    23,  4357,   275,    58,  1157,    25,    23,
          4357,   269,    58,    15,  4357,   269,    58,    16,  4357,  2160,
            58,  1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   257,    19,     7,    64,    58,  1314,    25,  1065,
          4357,   275,    58,  1314,    25,  1065,  4357,   269,    58,    16,
          4357,   269,    58,    17,  4357,  2160,    58,  1314,    25,  1065,
         36563,   198, 50284,    65, 10210,    62,    69,  2860,   257,    20,
             7,    64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,
            25,  1433,  4357,   269,    58,    17,  4357,   269,    58,    18,
          4357,  2160,    58,  1129,    25,  1433, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   257,    21,     7,    64,    58,  1954,
            25,  1238,  4357,   275,    58,  1954,    25,  1238,  4357,   269,
            58,    18,  4357, 42304,    11,  2160,    58,  1954,    25,  1238,
         36563,   198, 50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  224
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd a1(a[3:0], b[3:0], cin, cout, sum[3:0]);
    bcd_fadd a2(a[7:4], b[7:4], cout, c[0], sum[7:4]);
    bcd_fadd a3(a[11:8], b[11:8], c[0], c[1], sum[11:8]);
    bcd_fadd a4(a[15:12], b[15:12], c[1], c[2], sum[15:12]);
    bcd_fadd a5(a[19:16], b[19:16], c[2], c[3], sum[19:16]);
    bcd_fadd a6(a[23:20], b[23:20], c[3], cout, sum[23:20]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  19.891524512000046
-------------------------------------------------------
MCTS Iteration:  34.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.832838  0.832838  0.832838  1.2910476 1.2910476 1.2910476 1.2910476
 1.2910476 1.2910476 1.2910476]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    15]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            begin : adder
                bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
            end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8   198 50276 27471  1058
    751   263   198 50272    65 10210    62    69  2860   277  2860   357
     64    58    72    10    18    25    72  4357   275    58    72    10
     18    25    72  4357  3283    58    72    12    19  4357  3283    58
     72  4357  2160    58    72    10    18    25    72 36563   198 50276
    437   198 50284   437  8612   378   198 50284   562   570 42304   796
   3283    58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    15,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,   198, 50276, 27471,  1058,
           751,   263,   198, 50272,    65, 10210,    62,    69,  2860,   277,
          2860,   357,    64,    58,    72,    10,    18,    25,    72,  4357,
           275,    58,    72,    10,    18,    25,    72,  4357,  3283,    58,
            72,    12,    19,  4357,  3283,    58,    72,  4357,  2160,    58,
            72,    10,    18,    25,    72, 36563,   198, 50276,   437,   198,
         50284,   437,  8612,   378,   198, 50284,   562,   570, 42304,   796,
          3283,    58,  2079, 11208,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  146
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            begin : adder
                bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
            end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.957612511999969
-------------------------------------------------------
MCTS Iteration:  35.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8559999 0.8559999 0.8559999 0.8559999 1.3199999 1.3199999 1.3199999
 1.3199999 1.3199999 1.3199999]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    62]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
SEQUENCE:  [[  15  357   64   58   18   25   15 4357  275   58]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  15  357   64   58   18   25   15 4357  275   58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            assign carry[i/4] = (a[i] & b[i]) | (a[i] & carry[i-4]) | (b[i] & carry[i-4]);
        assign cout = carry[99];
    endgenerate

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62    15   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11  3283    58    15  4357  2160
     58    18    25    15 36563   198 50284  8612   378   198 50280  5235
   7785  1312    26   198 50280  1640   357    72   796   604    26  1312
   1279  7337    26  1312   796  1312  1343   604     8   198 50276   562
    570  3283    58    72    14    19    60   796   357    64    58    72
     60  1222   275    58    72 12962   930   357    64    58    72    60
   1222  3283    58    72    12    19 12962   930   357    65    58    72
     60  1222  3283    58    72    12    19 36563   198 50280   562   570
  42304   796  3283    58  2079 11208   198 50284   437  8612   378   198
    198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    62,    15,   357,    64,    58,    18,    25,    15,  4357,
           275,    58,    18,    25,    15,  4357,   269,   259,    11,  3283,
            58,    15,  4357,  2160,    58,    18,    25,    15, 36563,   198,
         50284,  8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198,
         50280,  1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,
            26,  1312,   796,  1312,  1343,   604,     8,   198, 50276,   562,
           570,  3283,    58,    72,    14,    19,    60,   796,   357,    64,
            58,    72,    60,  1222,   275,    58,    72, 12962,   930,   357,
            64,    58,    72,    60,  1222,  3283,    58,    72,    12,    19,
         12962,   930,   357,    65,    58,    72,    60,  1222,  3283,    58,
            72,    12,    19, 36563,   198, 50280,   562,   570, 42304,   796,
          3283,    58,  2079, 11208,   198, 50284,   437,  8612,   378,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  141
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            assign carry[i/4] = (a[i] & b[i]) | (a[i] & carry[i-4]) | (b[i] & carry[i-4]);
        assign cout = carry[99];
    endgenerate

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.707100546999982
-------------------------------------------------------
MCTS Iteration:  36.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.87884253 0.87884253 0.87884253 0.87884253 0.87884253 1.3485532
 1.3485532  1.3485532  1.3485532  1.3485532 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.84072742000001
-------------------------------------------------------
MCTS Iteration:  37.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9013782 0.9013782 0.9013782 0.9013782 0.9013782 0.9013782 1.3767228
 1.3767228 1.3767228 1.3767228]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11   269    58    15  4357  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   277
   2860    17   357    64    58    22    25    19  4357   275    58    22
     25    19  4357   269    58    15  4357   269    58    16  4357  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    277  2860    18   357    64    58  1157    25    23  4357   275    58
   1157    25    23  4357   269    58    16  4357   269    58    17  4357
   2160    58  1157    25    23 36563   198 50284    65 10210    62    69
   2860   277  2860    19   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357   269    58    17  4357   269    58    18
   4357  2160    58  1314    25  1065 36563   198 50284    65 10210    62
     69  2860   277  2860    20   357    64    58  1129    25  1433  4357
    275    58  1129    25  1433  4357   269    58    18  4357 42304    11
   2160    58  1129    25  1433 36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,   269,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   277,  2860,    17,   357,    64,
            58,    22,    25,    19,  4357,   275,    58,    22,    25,    19,
          4357,   269,    58,    15,  4357,   269,    58,    16,  4357,  2160,
            58,    22,    25,    19, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,  2860,    18,   357,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357,   269,    58,
            16,  4357,   269,    58,    17,  4357,  2160,    58,  1157,    25,
            23, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    19,   357,    64,    58,  1314,    25,  1065,  4357,   275,
            58,  1314,    25,  1065,  4357,   269,    58,    17,  4357,   269,
            58,    18,  4357,  2160,    58,  1314,    25,  1065, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,  2860,    20,   357,
            64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,    25,
          1433,  4357,   269,    58,    18,  4357, 42304,    11,  2160,    58,
          1129,    25,  1433, 36563,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  197
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.491087537
-------------------------------------------------------
MCTS Iteration:  38.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.92361945 0.92361945 0.92361945 0.92361945 0.92361945 0.92361945
 0.92361945 1.4045243  1.4045243  1.4045243 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout, top_module.sum[3:0]);
    assign top_module.sum[399:4] = a[399:4] + b[399:4] + top_module.cout;

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13    66   448    11  1353    62 21412
     13 16345    58    18    25    15 36563   198 50284   562   570  1353
     62 21412    13 16345    58 28771    25    19    60   796   257    58
  28771    25    19    60  1343   275    58 28771    25    19    60  1343
   1353    62 21412    13    66   448    26   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13,    66,   448,
            11,  1353,    62, 21412,    13, 16345,    58,    18,    25,    15,
         36563,   198, 50284,   562,   570,  1353,    62, 21412,    13, 16345,
            58, 28771,    25,    19,    60,   796,   257,    58, 28771,    25,
            19,    60,  1343,   275,    58, 28771,    25,    19,    60,  1343,
          1353,    62, 21412,    13,    66,   448,    26,   198,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  89
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout, top_module.sum[3:0]);
    assign top_module.sum[399:4] = a[399:4] + b[399:4] + top_module.cout;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.077621340000064
-------------------------------------------------------
MCTS Iteration:  39.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9455772 0.9455772 0.9455772 0.9455772 0.9455772 0.9455772 0.9455772
 0.9455772 1.4319715 1.4319715]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.86371421699994
-------------------------------------------------------
MCTS Iteration:  40.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9672622 0.9672622 0.9672622 0.9672622 0.9672622 0.9672622 0.9672622
 0.9672622 0.9672622 1.4590778]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[ 2860    58  2079    25    15 11208   198 50284   198 50284]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign inst_fadd[0].c 1
LLMEstimate:  assign inst_fadd[0].c 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign {cout, sum} = inst 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284]]
SEQUENCE:  [[ 562  570 1391   66  448   11 2160   92  796  916]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[ 562  570 1391   66  448   11 2160   92  796  916]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd[99:0];
    
    assign {cout, sum} = inst_fadd[99].add(a, b, cin);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284   562   570  1391    66   448    11  2160    92   796   916
     62    69  2860    58  2079  4083  2860     7    64    11   275    11
    269   259  1776   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    58,  2079,    25,    15, 11208,   198, 50284,
           198, 50284,   562,   570,  1391,    66,   448,    11,  2160,    92,
           796,   916,    62,    69,  2860,    58,  2079,  4083,  2860,     7,
            64,    11,   275,    11,   269,   259,  1776,   198, 50284,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  50
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd[99:0];
    
    assign {cout, sum} = inst_fadd[99].add(a, b, cin);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  11.136833296000077
-------------------------------------------------------
MCTS Iteration:  41.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9886845 0.9886845 0.9886845 0.9886845 0.9886845 0.9886845 0.9886845
 0.9886845 0.9886845 0.9886845]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640   357    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198 50280  1640   357    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin
            bcd_fadd fadd(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640   357    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8  2221   198 50276    65
  10210    62    69  2860   277  2860     7    64    58    18     9    72
     10    25    18  4357   275    58    18     9    72    10    25    18
   4357   269   259    11  3283    58    72  4357  2160    58    18     9
     72    10    25    18 36563   198 50280   437   198 50284   437  8612
    378   198 50284   562   570 42304   796  3283    58  3064 11208   198
    198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,   357,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
          2221,   198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,
             7,    64,    58,    18,     9,    72,    10,    25,    18,  4357,
           275,    58,    18,     9,    72,    10,    25,    18,  4357,   269,
           259,    11,  3283,    58,    72,  4357,  2160,    58,    18,     9,
            72,    10,    25,    18, 36563,   198, 50280,   437,   198, 50284,
           437,  8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,
            58,  3064, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  105
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin
            bcd_fadd fadd(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.88564883399988
-------------------------------------------------------
MCTS Iteration:  42.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.67487746 1.0098529  1.0098529  1.0098529  1.0098529  1.0098529
 1.0098529  1.0098529  1.0098529  1.0098529 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640     7    72    28    15    26    72    27]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198 50280  1640     7    72    28    15    26    72    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0;i<100;i=i+1) begin
            bcd_fadd f(a[3*i+:3],b[3*i+:3],cin,carry[i],sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640     7    72    28    15    26    72    27
   3064    26    72    28    72    10    16     8  2221   198 50276    65
  10210    62    69  2860   277     7    64    58    18     9    72    10
     25    18  4357    65    58    18     9    72    10    25    18  4357
  17879    11 34993    58    72  4357 16345    58    18     9    72    10
     25    18 36563   198 50280   437   198 50284   437  8612   378   198
  50284   562   570 42304   796  3283    58  3064 11208   198   198   437
  21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,     7,    72,    28,    15,    26,
            72,    27,  3064,    26,    72,    28,    72,    10,    16,     8,
          2221,   198, 50276,    65, 10210,    62,    69,  2860,   277,     7,
            64,    58,    18,     9,    72,    10,    25,    18,  4357,    65,
            58,    18,     9,    72,    10,    25,    18,  4357, 17879,    11,
         34993,    58,    72,  4357, 16345,    58,    18,     9,    72,    10,
            25,    18, 36563,   198, 50280,   437,   198, 50284,   437,  8612,
           378,   198, 50284,   562,   570, 42304,   796,  3283,    58,  3064,
         11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  103
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0;i<100;i=i+1) begin
            bcd_fadd f(a[3*i+:3],b[3*i+:3],cin,carry[i],sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.804692312000043
-------------------------------------------------------
MCTS Iteration:  43.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6923142 0.6923142 1.030777  1.030777  1.030777  1.030777  1.030777
 1.030777  1.030777  1.030777 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284    65 10210    62    69  2860   277    17
    357    64    58    22    25    19  4357   275    58    22    25    19
   4357   269    58    15  4357   269    58    16  4357  2160    58    22
     25    19 36563   198 50284    65 10210    62    69  2860   277    18
    357    64    58  1157    25    23  4357   275    58  1157    25    23
   4357   269    58    16  4357   269    58    17  4357  2160    58  1157
     25    23 36563   198 50284    65 10210    62    69  2860   277    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357   269    58    17  4357   269    58    18  4357  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   277    20
    357    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357   269    58    18  4357 42304    11  2160    58  1129    25  1433
  36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   277,    17,   357,    64,    58,    22,
            25,    19,  4357,   275,    58,    22,    25,    19,  4357,   269,
            58,    15,  4357,   269,    58,    16,  4357,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           277,    18,   357,    64,    58,  1157,    25,    23,  4357,   275,
            58,  1157,    25,    23,  4357,   269,    58,    16,  4357,   269,
            58,    17,  4357,  2160,    58,  1157,    25,    23, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,    19,   357,    64,
            58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,  1065,
          4357,   269,    58,    17,  4357,   269,    58,    18,  4357,  2160,
            58,  1314,    25,  1065, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,    20,   357,    64,    58,  1129,    25,  1433,
          4357,   275,    58,  1129,    25,  1433,  4357,   269,    58,    18,
          4357, 42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198,
         50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  192
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.247154433999867
-------------------------------------------------------
MCTS Iteration:  44.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.70955354 0.70955354 0.70955354 1.0514643  1.0514643  1.0514643
 1.0514643  1.0514643  1.0514643  1.0514643 ]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
   3283    58    72    12    19  4357  3283    58    72  4357  2160    58
     72    10    18    25    72 36563   198 50280   437   198 50284   437
   8612   378   198 50284   562   570 42304   796  3283    58  2079 11208
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,  3283,    58,    72,    12,    19,  4357,
          3283,    58,    72,  4357,  2160,    58,    72,    10,    18,    25,
            72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  142
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.76612464599998
-------------------------------------------------------
MCTS Iteration:  45.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7266026 0.7266026 0.7266026 0.7266026 1.071923  1.071923  1.071923
 1.071923  1.071923  1.071923 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640   357    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  198 50280  1640   357    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin
            bcd_fadd f(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640   357    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8  2221   198 50276    65
  10210    62    69  2860   277     7    64    58    18     9    72    10
     25    18  4357   275    58    18     9    72    10    25    18  4357
    269   259    11  3283    58    72  4357  2160    58    18     9    72
     10    25    18 36563   198 50280   437   198 50284   437  8612   378
    198 50284   562   570 42304   796  3283    58  3064 11208   198 50284
    198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,   357,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
          2221,   198, 50276,    65, 10210,    62,    69,  2860,   277,     7,
            64,    58,    18,     9,    72,    10,    25,    18,  4357,   275,
            58,    18,     9,    72,    10,    25,    18,  4357,   269,   259,
            11,  3283,    58,    72,  4357,  2160,    58,    18,     9,    72,
            10,    25,    18, 36563,   198, 50280,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          3064, 11208,   198, 50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  105
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin
            bcd_fadd f(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.9028697440001
-------------------------------------------------------
MCTS Iteration:  46.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.74346715 0.74346715 0.74346715 0.74346715 0.74346715 1.0921607
 1.0921607  1.0921607  1.0921607  1.0921607 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.92208448799988
-------------------------------------------------------
MCTS Iteration:  47.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7601535 0.7601535 0.7601535 0.7601535 0.7601535 0.7601535 1.112184
 1.112184  1.112184  1.112184 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284    65 10210    62    69  2860   277    17
    357    64    58    22    25    19  4357   275    58    22    25    19
   4357   269    58    15  4357   269    58    16  4357  2160    58    22
     25    19 36563   198 50284    65 10210    62    69  2860   277    18
    357    64    58  1157    25    23  4357   275    58  1157    25    23
   4357   269    58    16  4357   269    58    17  4357  2160    58  1157
     25    23 36563   198 50284    65 10210    62    69  2860   277    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357   269    58    17  4357   269    58    18  4357  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   277    20
    357    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357   269    58    18  4357 42304    11  2160    58  1129    25  1433
  36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   277,    17,   357,    64,    58,    22,
            25,    19,  4357,   275,    58,    22,    25,    19,  4357,   269,
            58,    15,  4357,   269,    58,    16,  4357,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           277,    18,   357,    64,    58,  1157,    25,    23,  4357,   275,
            58,  1157,    25,    23,  4357,   269,    58,    16,  4357,   269,
            58,    17,  4357,  2160,    58,  1157,    25,    23, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,    19,   357,    64,
            58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,  1065,
          4357,   269,    58,    17,  4357,   269,    58,    18,  4357,  2160,
            58,  1314,    25,  1065, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,    20,   357,    64,    58,  1129,    25,  1433,
          4357,   275,    58,  1129,    25,  1433,  4357,   269,    58,    18,
          4357, 42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198,
         50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  192
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.278427239000166
-------------------------------------------------------
MCTS Iteration:  48.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7766667 0.7766667 0.7766667 0.7766667 0.7766667 0.7766667 0.7766667
 1.132     1.132     1.132    ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout, sum[3:0]);
    assign top_module.cout = bcd_fadd(a[7:4], b[7:4], top_module.cout, top_module.cout2, sum[7:4]);
    assign top_module.cout = bcd_fadd(a[11:8], b[11:8], top_module.cout2, top_module.cout3, sum[11:8]);
    assign top_module.cout = bcd_fadd(a[15:12], b[15:12], top_module.cout3, top_module.cout4, sum[15:12]);
    assign top_module.cout = bcd_fadd(a[19:16], b[19:16], top_module.cout4, top_module.cout5, sum[19:16]);
    assign top_module.cout = bcd_fadd(a[23:20], b[23:20], top_module.cout5, top_module.cout6, sum[23:20]);
    assign top_module.cout = bcd_fadd(a[27:24], b[27:24], top_module.cout6, top_module.cout7, sum[27:24]);
    assign top_module.cout = bcd_fadd(a[31:28], b[31:28], top_module.cout7, top_module.cout8, sum[31:28]);
    assign top_module.cout = bcd_fadd(a[35:32], b[35:32], top_module.cout8, top_module.cout9, sum[35:32]);
    assign top_module.cout = bcd_fadd(a[39:36], b[39:36], top_module.cout9, top_module.cout10, sum[39:36]);
    assign top_module.cout = bcd_fadd(a[43:40], b[43:40], top_module.cout10, top_module.cout11, sum[43:40]);
    assign top_module.cout = bcd_fadd(a[47:44], b[47:44], top_module.cout11, top_module.cout12, sum[47:44]);
    assign top_module.cout = bcd_fadd(a[51:48], b[51:48], top_module.cout12, top_module.cout13, sum[51:48]);
    assign top_module.cout = bcd_fadd(a[55:52], b[55:52], top_module.cout13, top_module.cout14, sum[55:52]);
    assign top_module.cout = bcd_fadd(a[59:56], b[59:56], top_module.cout14, top_module.cout15, sum[59:56]);
    assign top_module.cout = bcd_
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13    66   448    11  2160    58    18
     25    15 36563   198 50284   562   570  1353    62 21412    13    66
    448   796   275 10210    62    69  2860     7    64    58    22    25
     19  4357   275    58    22    25    19  4357  1353    62 21412    13
     66   448    11  1353    62 21412    13    66   448    17    11  2160
     58    22    25    19 36563   198 50284   562   570  1353    62 21412
     13    66   448   796   275 10210    62    69  2860     7    64    58
   1157    25    23  4357   275    58  1157    25    23  4357  1353    62
  21412    13    66   448    17    11  1353    62 21412    13    66   448
     18    11  2160    58  1157    25    23 36563   198 50284   562   570
   1353    62 21412    13    66   448   796   275 10210    62    69  2860
      7    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357  1353    62 21412    13    66   448    18    11  1353    62 21412
     13    66   448    19    11  2160    58  1314    25  1065 36563   198
  50284   562   570  1353    62 21412    13    66   448   796   275 10210
     62    69  2860     7    64    58  1129    25  1433  4357   275    58
   1129    25  1433  4357  1353    62 21412    13    66   448    19    11
   1353    62 21412    13    66   448    20    11  2160    58  1129    25
   1433 36563   198 50284   562   570  1353    62 21412    13    66   448
    796   275 10210    62    69  2860     7    64    58  1954    25  1238
   4357   275    58  1954    25  1238  4357  1353    62 21412    13    66
    448    20    11  1353    62 21412    13    66   448    21    11  2160
     58  1954    25  1238 36563   198 50284   562   570  1353    62 21412
     13    66   448   796   275 10210    62    69  2860     7    64    58
   1983    25  1731  4357   275    58  1983    25  1731  4357  1353    62
  21412    13    66   448    21    11  1353    62 21412    13    66   448
     22    11  2160    58  1983    25  1731 36563   198 50284   562   570
   1353    62 21412    13    66   448   796   275 10210    62    69  2860
      7    64    58  3132    25  2078  4357   275    58  3132    25  2078
   4357  1353    62 21412    13    66   448    22    11  1353    62 21412
     13    66   448    23    11  2160    58  3132    25  2078 36563   198
  50284   562   570  1353    62 21412    13    66   448   796   275 10210
     62    69  2860     7    64    58  2327    25  2624  4357   275    58
   2327    25  2624  4357  1353    62 21412    13    66   448    23    11
   1353    62 21412    13    66   448    24    11  2160    58  2327    25
   2624 36563   198 50284   562   570  1353    62 21412    13    66   448
    796   275 10210    62    69  2860     7    64    58  2670    25  2623
   4357   275    58  2670    25  2623  4357  1353    62 21412    13    66
    448    24    11  1353    62 21412    13    66   448   940    11  2160
     58  2670    25  2623 36563   198 50284   562   570  1353    62 21412
     13    66   448   796   275 10210    62    69  2860     7    64    58
   3559    25  1821  4357   275    58  3559    25  1821  4357  1353    62
  21412    13    66   448   940    11  1353    62 21412    13    66   448
   1157    11  2160    58  3559    25  1821 36563   198 50284   562   570
   1353    62 21412    13    66   448   796   275 10210    62    69  2860
      7    64    58  2857    25  2598  4357   275    58  2857    25  2598
   4357  1353    62 21412    13    66   448  1157    11  1353    62 21412
     13    66   448  1065    11  2160    58  2857    25  2598 36563   198
  50284   562   570  1353    62 21412    13    66   448   796   275 10210
     62    69  2860     7    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357  1353    62 21412    13    66   448  1065    11
   1353    62 21412    13    66   448  1485    11  2160    58  4349    25
   2780 36563   198 50284   562   570  1353    62 21412    13    66   448
    796   275 10210    62    69  2860     7    64    58  2816    25  4309
   4357   275    58  2816    25  4309  4357  1353    62 21412    13    66
    448  1485    11  1353    62 21412    13    66   448  1415    11  2160
     58  2816    25  4309 36563   198 50284   562   570  1353    62 21412
     13    66   448   796   275 10210    62    69  2860     7    64    58
   3270    25  3980  4357   275    58  3270    25  3980  4357  1353    62
  21412    13    66   448  1415    11  1353    62 21412    13    66   448
   1314    11  2160    58  3270    25  3980 36563   198 50284   562   570
   1353    62 21412    13    66   448   796   275 10210    62]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13,    66,   448,
            11,  2160,    58,    18,    25,    15, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,    22,    25,    19,  4357,
           275,    58,    22,    25,    19,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    17,
            11,  2160,    58,    22,    25,    19, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  1157,    25,    23,  4357,
           275,    58,  1157,    25,    23,  4357,  1353,    62, 21412,    13,
            66,   448,    17,    11,  1353,    62, 21412,    13,    66,   448,
            18,    11,  2160,    58,  1157,    25,    23, 36563,   198, 50284,
           562,   570,  1353,    62, 21412,    13,    66,   448,   796,   275,
         10210,    62,    69,  2860,     7,    64,    58,  1314,    25,  1065,
          4357,   275,    58,  1314,    25,  1065,  4357,  1353,    62, 21412,
            13,    66,   448,    18,    11,  1353,    62, 21412,    13,    66,
           448,    19,    11,  2160,    58,  1314,    25,  1065, 36563,   198,
         50284,   562,   570,  1353,    62, 21412,    13,    66,   448,   796,
           275, 10210,    62,    69,  2860,     7,    64,    58,  1129,    25,
          1433,  4357,   275,    58,  1129,    25,  1433,  4357,  1353,    62,
         21412,    13,    66,   448,    19,    11,  1353,    62, 21412,    13,
            66,   448,    20,    11,  2160,    58,  1129,    25,  1433, 36563,
           198, 50284,   562,   570,  1353,    62, 21412,    13,    66,   448,
           796,   275, 10210,    62,    69,  2860,     7,    64,    58,  1954,
            25,  1238,  4357,   275,    58,  1954,    25,  1238,  4357,  1353,
            62, 21412,    13,    66,   448,    20,    11,  1353,    62, 21412,
            13,    66,   448,    21,    11,  2160,    58,  1954,    25,  1238,
         36563,   198, 50284,   562,   570,  1353,    62, 21412,    13,    66,
           448,   796,   275, 10210,    62,    69,  2860,     7,    64,    58,
          1983,    25,  1731,  4357,   275,    58,  1983,    25,  1731,  4357,
          1353,    62, 21412,    13,    66,   448,    21,    11,  1353,    62,
         21412,    13,    66,   448,    22,    11,  2160,    58,  1983,    25,
          1731, 36563,   198, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,  2078,
          4357,  1353,    62, 21412,    13,    66,   448,    22,    11,  1353,
            62, 21412,    13,    66,   448,    23,    11,  2160,    58,  3132,
            25,  2078, 36563,   198, 50284,   562,   570,  1353,    62, 21412,
            13,    66,   448,   796,   275, 10210,    62,    69,  2860,     7,
            64,    58,  2327,    25,  2624,  4357,   275,    58,  2327,    25,
          2624,  4357,  1353,    62, 21412,    13,    66,   448,    23,    11,
          1353,    62, 21412,    13,    66,   448,    24,    11,  2160,    58,
          2327,    25,  2624, 36563,   198, 50284,   562,   570,  1353,    62,
         21412,    13,    66,   448,   796,   275, 10210,    62,    69,  2860,
             7,    64,    58,  2670,    25,  2623,  4357,   275,    58,  2670,
            25,  2623,  4357,  1353,    62, 21412,    13,    66,   448,    24,
            11,  1353,    62, 21412,    13,    66,   448,   940,    11,  2160,
            58,  2670,    25,  2623, 36563,   198, 50284,   562,   570,  1353,
            62, 21412,    13,    66,   448,   796,   275, 10210,    62,    69,
          2860,     7,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357,  1353,    62, 21412,    13,    66,   448,
           940,    11,  1353,    62, 21412,    13,    66,   448,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,   562,   570,
          1353,    62, 21412,    13,    66,   448,   796,   275, 10210,    62,
            69,  2860,     7,    64,    58,  2857,    25,  2598,  4357,   275,
            58,  2857,    25,  2598,  4357,  1353,    62, 21412,    13,    66,
           448,  1157,    11,  1353,    62, 21412,    13,    66,   448,  1065,
            11,  2160,    58,  2857,    25,  2598, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  4349,    25,  2780,  4357,
           275,    58,  4349,    25,  2780,  4357,  1353,    62, 21412,    13,
            66,   448,  1065,    11,  1353,    62, 21412,    13,    66,   448,
          1485,    11,  2160,    58,  4349,    25,  2780, 36563,   198, 50284,
           562,   570,  1353,    62, 21412,    13,    66,   448,   796,   275,
         10210,    62,    69,  2860,     7,    64,    58,  2816,    25,  4309,
          4357,   275,    58,  2816,    25,  4309,  4357,  1353,    62, 21412,
            13,    66,   448,  1485,    11,  1353,    62, 21412,    13,    66,
           448,  1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198,
         50284,   562,   570,  1353,    62, 21412,    13,    66,   448,   796,
           275, 10210,    62,    69,  2860,     7,    64,    58,  3270,    25,
          3980,  4357,   275,    58,  3270,    25,  3980,  4357,  1353,    62,
         21412,    13,    66,   448,  1415,    11,  1353,    62, 21412,    13,
            66,   448,  1314,    11,  2160,    58,  3270,    25,  3980, 36563,
           198, 50284,   562,   570,  1353,    62, 21412,    13,    66,   448,
           796,   275, 10210,    62]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.91245928500007
-------------------------------------------------------
MCTS Iteration:  49.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7930123 0.7930123 0.7930123 0.7930123 0.7930123 0.7930123 0.7930123
 0.7930123 1.1516147 1.1516147]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    15    11  2160    15]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[   15  4357   269   259    11 42304    15    11  2160    15]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout0, sum0);
    bcd_fadd inst2 (a[7:4], b[7:4], cout0, cout1, sum1);
    bcd_fadd inst3 (a[11:8], b[11:8], cout1, cout2, sum2);
    bcd_fadd inst4 (a[15:12], b[15:12], cout2, cout3, sum3);
    bcd_fadd inst5 (a[19:16], b[19:16], cout3, cout4, sum4);
    bcd_fadd inst6 (a[23:20], b[23:20], cout4, cout5, sum5);
    bcd_fadd inst7 (a[27:24], b[27:24], cout5, cout6, sum6);
    bcd_fadd inst8 (a[31:28], b[31:28], cout6, cout7, sum7);
    bcd_fadd inst9 (a[35:32], b[35:32], cout7, cout8, sum8);
    bcd_fadd inst10 (a[39:36], b[39:36], cout8, cout9, sum9);
    bcd_fadd inst11 (a[43:40], b[43:40], cout9, cout10, sum10);
    bcd_fadd inst12 (a[47:44], b[47:44], cout10, cout11, sum11);
    bcd_fadd inst13 (a[51:48], b[51:48], cout11, cout12, sum12);
    bcd_fadd inst14 (a[55:52], b[55:52], cout12, cout13, sum13);
    bcd_fadd inst15 (a[59:56], b[59:56], cout13, cout14, sum14);
    bcd_fadd inst16 (a[63:60], b[63:60], cout14, cout15, sum15);
    bcd_fadd inst17 (a[67:64], b[67:64], cout15, cout16, sum16);
    bcd_fadd inst18 (a[71:68], b[71:68], cout16, cout17, sum17);
    bcd_fadd inst19 (a[75:72], b[75:72], cout17, cout18, sum18);
    bcd_fadd inst20 (a[79:76], b[79:76], cout18, cout19, sum19);
    bcd_fadd inst21 (a[83:80], b[83:80], cout19, cout20, sum20);
    bcd_fadd inst22 (a[87:84], b[87:84], cout20, cout21, sum21);
    bcd_fadd inst23 (a[91:88], b[91:88], cout21, cout22, sum22);
    bcd_fadd inst24 (a[95:92], b[95:92], cout22, cout23, sum23);
    bcd_fadd inst25 (a[99:96], b[99:96], cout23, cout24,
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    15    11  2160    15
   1776   198 50284    65 10210    62    69  2860   916    17   357    64
     58    22    25    19  4357   275    58    22    25    19  4357 42304
     15    11 42304    16    11  2160    16  1776   198 50284    65 10210
     62    69  2860   916    18   357    64    58  1157    25    23  4357
    275    58  1157    25    23  4357 42304    16    11 42304    17    11
   2160    17  1776   198 50284    65 10210    62    69  2860   916    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357 42304    17    11 42304    18    11  2160    18  1776   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    18    11 42304
     19    11  2160    19  1776   198 50284    65 10210    62    69  2860
    916    21   357    64    58  1954    25  1238  4357   275    58  1954
     25  1238  4357 42304    19    11 42304    20    11  2160    20  1776
    198 50284    65 10210    62    69  2860   916    22   357    64    58
   1983    25  1731  4357   275    58  1983    25  1731  4357 42304    20
     11 42304    21    11  2160    21  1776   198 50284    65 10210    62
     69  2860   916    23   357    64    58  3132    25  2078  4357   275
     58  3132    25  2078  4357 42304    21    11 42304    22    11  2160
     22  1776   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    22    11 42304    23    11  2160    23  1776   198 50284    65
  10210    62    69  2860   916   940   357    64    58  2670    25  2623
   4357   275    58  2670    25  2623  4357 42304    23    11 42304    24
     11  2160    24  1776   198 50284    65 10210    62    69  2860   916
   1157   357    64    58  3559    25  1821  4357   275    58  3559    25
   1821  4357 42304    24    11 42304   940    11  2160   940  1776   198
  50284    65 10210    62    69  2860   916  1065   357    64    58  2857
     25  2598  4357   275    58  2857    25  2598  4357 42304   940    11
  42304  1157    11  2160  1157  1776   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1157    11 42304  1065    11  2160  1065
   1776   198 50284    65 10210    62    69  2860   916  1415   357    64
     58  2816    25  4309  4357   275    58  2816    25  4309  4357 42304
   1065    11 42304  1485    11  2160  1485  1776   198 50284    65 10210
     62    69  2860   916  1314   357    64    58  3270    25  3980  4357
    275    58  3270    25  3980  4357 42304  1485    11 42304  1415    11
   2160  1415  1776   198 50284    65 10210    62    69  2860   916  1433
    357    64    58  5066    25  1899  4357   275    58  5066    25  1899
   4357 42304  1415    11 42304  1314    11  2160  1314  1776   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1314    11 42304
   1433    11  2160  1433  1776   198 50284    65 10210    62    69  2860
    916  1507   357    64    58  4869    25  3104  4357   275    58  4869
     25  3104  4357 42304  1433    11 42304  1558    11  2160  1558  1776
    198 50284    65 10210    62    69  2860   916  1129   357    64    58
   2425    25  4761  4357   275    58  2425    25  4761  4357 42304  1558
     11 42304  1507    11  2160  1507  1776   198 50284    65 10210    62
     69  2860   916  1238   357    64    58  3720    25  4304  4357   275
     58  3720    25  4304  4357 42304  1507    11 42304  1129    11  2160
   1129  1776   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1129    11 42304  1238    11  2160  1238  1776   198 50284    65
  10210    62    69  2860   916  1828   357    64    58  5774    25  5705
   4357   275    58  5774    25  5705  4357 42304  1238    11 42304  2481
     11  2160  2481  1776   198 50284    65 10210    62    69  2860   916
   1954   357    64    58  6420    25  3459  4357   275    58  6420    25
   3459  4357 42304  2481    11 42304  1828    11  2160  1828  1776   198
  50284    65 10210    62    69  2860   916  1731   357    64    58  3865
     25  5892  4357   275    58  3865    25  5892  4357 42304  1828    11
  42304  1954    11  2160  1954  1776   198 50284    65 10210    62    69
   2860   916  1495   357    64    58  2079    25  4846  4357   275    58
   2079    25  4846  4357 42304  1954    11 42304  1731    11]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    15,    11,
          2160,    15,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    17,   357,    64,    58,    22,    25,    19,  4357,   275,
            58,    22,    25,    19,  4357, 42304,    15,    11, 42304,    16,
            11,  2160,    16,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    18,   357,    64,    58,  1157,    25,    23,  4357,
           275,    58,  1157,    25,    23,  4357, 42304,    16,    11, 42304,
            17,    11,  2160,    17,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,    19,   357,    64,    58,  1314,    25,  1065,
          4357,   275,    58,  1314,    25,  1065,  4357, 42304,    17,    11,
         42304,    18,    11,  2160,    18,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    20,   357,    64,    58,  1129,    25,
          1433,  4357,   275,    58,  1129,    25,  1433,  4357, 42304,    18,
            11, 42304,    19,    11,  2160,    19,  1776,   198, 50284,    65,
         10210,    62,    69,  2860,   916,    21,   357,    64,    58,  1954,
            25,  1238,  4357,   275,    58,  1954,    25,  1238,  4357, 42304,
            19,    11, 42304,    20,    11,  2160,    20,  1776,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    22,   357,    64,    58,
          1983,    25,  1731,  4357,   275,    58,  1983,    25,  1731,  4357,
         42304,    20,    11, 42304,    21,    11,  2160,    21,  1776,   198,
         50284,    65, 10210,    62,    69,  2860,   916,    23,   357,    64,
            58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,  2078,
          4357, 42304,    21,    11, 42304,    22,    11,  2160,    22,  1776,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    24,   357,
            64,    58,  2327,    25,  2624,  4357,   275,    58,  2327,    25,
          2624,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    23,
          1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,   940,
           357,    64,    58,  2670,    25,  2623,  4357,   275,    58,  2670,
            25,  2623,  4357, 42304,    23,    11, 42304,    24,    11,  2160,
            24,  1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,    24,    11, 42304,   940,    11,
          2160,   940,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1065,   357,    64,    58,  2857,    25,  2598,  4357,   275,
            58,  2857,    25,  2598,  4357, 42304,   940,    11, 42304,  1157,
            11,  2160,  1157,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1485,   357,    64,    58,  4349,    25,  2780,  4357,
           275,    58,  4349,    25,  2780,  4357, 42304,  1157,    11, 42304,
          1065,    11,  2160,  1065,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,
          4357,   275,    58,  2816,    25,  4309,  4357, 42304,  1065,    11,
         42304,  1485,    11,  2160,  1485,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1314,   357,    64,    58,  3270,    25,
          3980,  4357,   275,    58,  3270,    25,  3980,  4357, 42304,  1485,
            11, 42304,  1415,    11,  2160,  1415,  1776,   198, 50284,    65,
         10210,    62,    69,  2860,   916,  1433,   357,    64,    58,  5066,
            25,  1899,  4357,   275,    58,  5066,    25,  1899,  4357, 42304,
          1415,    11, 42304,  1314,    11,  2160,  1314,  1776,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1558,   357,    64,    58,
          3134,    25,  2414,  4357,   275,    58,  3134,    25,  2414,  4357,
         42304,  1314,    11, 42304,  1433,    11,  2160,  1433,  1776,   198,
         50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,    64,
            58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,  3104,
          4357, 42304,  1433,    11, 42304,  1558,    11,  2160,  1558,  1776,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1129,   357,
            64,    58,  2425,    25,  4761,  4357,   275,    58,  2425,    25,
          4761,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,  1507,
          1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,  1238,
           357,    64,    58,  3720,    25,  4304,  4357,   275,    58,  3720,
            25,  4304,  4357, 42304,  1507,    11, 42304,  1129,    11,  2160,
          1129,  1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1129,    11, 42304,  1238,    11,
          2160,  1238,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1828,   357,    64,    58,  5774,    25,  5705,  4357,   275,
            58,  5774,    25,  5705,  4357, 42304,  1238,    11, 42304,  2481,
            11,  2160,  2481,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1954,   357,    64,    58,  6420,    25,  3459,  4357,
           275,    58,  6420,    25,  3459,  4357, 42304,  2481,    11, 42304,
          1828,    11,  2160,  1828,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1731,   357,    64,    58,  3865,    25,  5892,
          4357,   275,    58,  3865,    25,  5892,  4357, 42304,  1828,    11,
         42304,  1954,    11,  2160,  1954,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1495,   357,    64,    58,  2079,    25,
          4846,  4357,   275,    58,  2079,    25,  4846,  4357, 42304,  1954,
            11, 42304,  1731,    11]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.90221957799986
-------------------------------------------------------
MCTS Iteration:  50.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8091952 0.8091952 0.8091952 0.8091952 0.8091952 0.8091952 0.8091952
 0.8091952 0.8091952 1.1710343]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[ 2860    58  2079    25    15 11208   198 50284   198 50284]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign cout = inst_fadd[99 1
LLMEstimate:  assign {cout, sum} = inst 1
LLMEstimate:  assign cout = inst_fadd[99 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284]]
SEQUENCE:  [[  562   570 42304   796   916    62    69  2860    58  2079]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  562   570 42304   796   916    62    69  2860    58  2079]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd[99:0];
    
    assign cout = inst_fadd[99].cout;
    assign sum = inst_fadd[99].sum;
    
    generate
        genvar i;
        for (i=0; i<100; i=i+1) begin: inst_fadd_loop
            bcd_fadd inst_fadd(
               .a(a[3*i+:3]),
               .b(b[3*i+:3]),
               .cin(cin),
               .cout(inst_fadd[i].cout),
               .sum(inst_fadd[i].sum)
            );
        end
    endgenerate

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284   562   570 42304   796   916    62    69  2860    58  2079
   4083    66   448    26   198 50284   562   570  2160   796   916    62
     69  2860    58  2079  4083 16345    26   198 50284   198 50284  8612
    378   198 50280  5235  7785  1312    26   198 50280  1640   357    72
     28    15    26  1312    27  3064    26  1312    28    72    10    16
      8  2221    25   916    62    69  2860    62 26268   198 50276    65
  10210    62    69  2860   916    62    69  2860     7   198 50273    13
     64     7    64    58    18     9    72    10    25    18 46570   198
  50273    13    65     7    65    58    18     9    72    10    25    18
  46570   198 50273    13 17879     7 17879   828   198 50273    13    66
    448     7  8625    62    69  2860    58    72  4083    66   448   828
    198 50273    13 16345     7  8625    62    69  2860    58    72  4083
  16345     8   198 50276  1776   198 50280   437   198 50284   437  8612
    378   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    58,  2079,    25,    15, 11208,   198, 50284,
           198, 50284,   562,   570, 42304,   796,   916,    62,    69,  2860,
            58,  2079,  4083,    66,   448,    26,   198, 50284,   562,   570,
          2160,   796,   916,    62,    69,  2860,    58,  2079,  4083, 16345,
            26,   198, 50284,   198, 50284,  8612,   378,   198, 50280,  5235,
          7785,  1312,    26,   198, 50280,  1640,   357,    72,    28,    15,
            26,  1312,    27,  3064,    26,  1312,    28,    72,    10,    16,
             8,  2221,    25,   916,    62,    69,  2860,    62, 26268,   198,
         50276,    65, 10210,    62,    69,  2860,   916,    62,    69,  2860,
             7,   198, 50272,    13,    64,     7,    64,    58,    18,     9,
            72,    10,    25,    18, 46570,   198, 50272,    13,    65,     7,
            65,    58,    18,     9,    72,    10,    25,    18, 46570,   198,
         50272,    13, 17879,     7, 17879,   828,   198, 50272,    13,    66,
           448,     7,  8625,    62,    69,  2860,    58,    72,  4083,    66,
           448,   828,   198, 50272,    13, 16345,     7,  8625,    62,    69,
          2860,    58,    72,  4083, 16345,     8,   198, 50276,  1776,   198,
         50280,   437,   198, 50284,   437,  8612,   378,   198,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  179
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd[99:0];
    
    assign cout = inst_fadd[99].cout;
    assign sum = inst_fadd[99].sum;
    
    generate
        genvar i;
        for (i=0; i<100; i=i+1) begin: inst_fadd_loop
            bcd_fadd inst_fadd(
              .a(a[3*i+:3]),
              .b(b[3*i+:3]),
              .cin(cin),
              .cout(inst_fadd[i].cout),
              .sum(inst_fadd[i].sum)
            );
        end
    endgenerate

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  17.609534547000067
-------------------------------------------------------
MCTS Iteration:  51.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8252203 0.8252203 0.8252203 0.8252203 0.8252203 0.8252203 0.8252203
 0.8252203 0.8252203 0.8252203]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
   3283    58    72    12    19  4357  3283    58    72  4357  2160    58
     72    10    18    25    72 36563   198 50280   437   198 50284   437
   8612   378   198 50284   562   570 42304   796  3283    58  2079 11208
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,  3283,    58,    72,    12,    19,  4357,
          3283,    58,    72,  4357,  2160,    58,    72,    10,    18,    25,
            72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  142
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.748175389999915
-------------------------------------------------------
MCTS Iteration:  52.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5780788  0.84109193 0.84109193 0.84109193 0.84109193 0.84109193
 0.84109193 0.84109193 0.84109193 0.84109193]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640   357    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198 50280  1640   357    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin: adder
            bcd_fadd fadd(
               .a(a[3*i+:3]),
               .b(b[3*i+:3]),
               .cin(carry[i]),
               .cout(carry[i+1]),
               .sum(sum[3*i+:3])
            );
        end
    endgenerate

    assign carry[100] = cin;
    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640   357    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8  2221    25   751   263
    198 50276    65 10210    62    69  2860   277  2860     7   198 50273
     13    64     7    64    58    18     9    72    10    25    18 46570
    198 50273    13    65     7    65    58    18     9    72    10    25
     18 46570   198 50273    13 17879     7 34993    58    72 46570   198
  50273    13    66   448     7 34993    58    72    10    16 46570   198
  50273    13 16345     7 16345    58    18     9    72    10    25    18
  12962   198 50276  1776   198 50280   437   198 50284   437  8612   378
    628 50284   562   570  3283    58  3064    60   796   269   259    26
    198 50284   562   570 42304   796  3283    58  3064 11208   198   198
    437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,   357,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
          2221,    25,   751,   263,   198, 50276,    65, 10210,    62,    69,
          2860,   277,  2860,     7,   198, 50272,    13,    64,     7,    64,
            58,    18,     9,    72,    10,    25,    18, 46570,   198, 50272,
            13,    65,     7,    65,    58,    18,     9,    72,    10,    25,
            18, 46570,   198, 50272,    13, 17879,     7, 34993,    58,    72,
         46570,   198, 50272,    13,    66,   448,     7, 34993,    58,    72,
            10,    16, 46570,   198, 50272,    13, 16345,     7, 16345,    58,
            18,     9,    72,    10,    25,    18, 12962,   198, 50276,  1776,
           198, 50280,   437,   198, 50284,   437,  8612,   378,   628, 50284,
           562,   570,  3283,    58,  3064,    60,   796,   269,   259,    26,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  3064, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  152
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin: adder
            bcd_fadd fadd(
              .a(a[3*i+:3]),
              .b(b[3*i+:3]),
              .cin(carry[i]),
              .cout(carry[i+1]),
              .sum(sum[3*i+:3])
            );
        end
    endgenerate

    assign carry[100] = cin;
    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  16.25100998699986
-------------------------------------------------------
MCTS Iteration:  53.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5915553  0.5915553  0.85681456 0.85681456 0.85681456 0.85681456
 0.85681456 0.85681456 0.85681456 0.85681456]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284    65 10210    62    69  2860   277    17
    357    64    58    22    25    19  4357   275    58    22    25    19
   4357   269    58    15  4357   269    58    16  4357  2160    58    22
     25    19 36563   198 50284    65 10210    62    69  2860   277    18
    357    64    58  1157    25    23  4357   275    58  1157    25    23
   4357   269    58    16  4357   269    58    17  4357  2160    58  1157
     25    23 36563   198 50284    65 10210    62    69  2860   277    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357   269    58    17  4357   269    58    18  4357  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   277    20
    357    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357   269    58    18  4357 42304    11  2160    58  1129    25  1433
  36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   277,    17,   357,    64,    58,    22,
            25,    19,  4357,   275,    58,    22,    25,    19,  4357,   269,
            58,    15,  4357,   269,    58,    16,  4357,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           277,    18,   357,    64,    58,  1157,    25,    23,  4357,   275,
            58,  1157,    25,    23,  4357,   269,    58,    16,  4357,   269,
            58,    17,  4357,  2160,    58,  1157,    25,    23, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,    19,   357,    64,
            58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,  1065,
          4357,   269,    58,    17,  4357,   269,    58,    18,  4357,  2160,
            58,  1314,    25,  1065, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,    20,   357,    64,    58,  1129,    25,  1433,
          4357,   275,    58,  1129,    25,  1433,  4357,   269,    58,    18,
          4357, 42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198,
         50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  192
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.268619711000156
-------------------------------------------------------
MCTS Iteration:  54.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6049077  0.6049077  0.6049077  0.87239236 0.87239236 0.87239236
 0.87239236 0.87239236 0.87239236 0.87239236]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    62]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (
       .a(a[3 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
SEQUENCE:  [[  15    7   64   58   18   25   15 4357  275   58]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  15    7   64   58   18   25   15 4357  275   58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0(a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd(a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62    15     7    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11  3283    58    15  4357  2160
     58    18    25    15 36563   198 50284  8612   378   198 50280  5235
   7785  1312    26   198 50280  1640   357    72   796   604    26  1312
   1279  7337    26  1312   796  1312  1343   604     8  2221  1058   751
    263   198 50276    65 10210    62    69  2860   277  2860     7    64
     58    72    10    18    25    72  4357   275    58    72    10    18
     25    72  4357  3283    58    72    12    19  4357  3283    58    72
   4357  2160    58    72    10    18    25    72 36563   198 50280   437
    198 50284   437  8612   378   198 50284   562   570 42304   796  3283
     58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    62,    15,     7,    64,    58,    18,    25,    15,  4357,
           275,    58,    18,    25,    15,  4357,   269,   259,    11,  3283,
            58,    15,  4357,  2160,    58,    18,    25,    15, 36563,   198,
         50284,  8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198,
         50280,  1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,
            26,  1312,   796,  1312,  1343,   604,     8,  2221,  1058,   751,
           263,   198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,
             7,    64,    58,    72,    10,    18,    25,    72,  4357,   275,
            58,    72,    10,    18,    25,    72,  4357,  3283,    58,    72,
            12,    19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,
            10,    18,    25,    72, 36563,   198, 50280,   437,   198, 50284,
           437,  8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,
            58,  2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  145
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0(a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd(a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.88946523300001
-------------------------------------------------------
MCTS Iteration:  55.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6181391 0.6181391 0.6181391 0.6181391 0.887829  0.887829  0.887829
 0.887829  0.887829  0.887829 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
   3283    58    72    12    19  4357  3283    58    72  4357  2160    58
     72    10    18    25    72 36563   198 50280   437   198 50284   437
   8612   378   198 50284   562   570 42304   796  3283    58  2079 11208
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,  3283,    58,    72,    12,    19,  4357,
          3283,    58,    72,  4357,  2160,    58,    72,    10,    18,    25,
            72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  142
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.732254853000086
-------------------------------------------------------
MCTS Iteration:  56.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.63125306 0.63125306 0.63125306 0.63125306 0.63125306 0.9031287
 0.9031287  0.9031287  0.9031287  0.9031287 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.841766391999954
-------------------------------------------------------
MCTS Iteration:  57.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.64425236 0.64425236 0.64425236 0.64425236 0.64425236 0.64425236
 0.9182945  0.9182945  0.9182945  0.9182945 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], c[i-4], c[i-3], sum[i+3:i]);
        end
    endgenerate
    assign cout = c[399];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
    269    58    72    12    19  4357   269    58    72    12    18  4357
   2160    58    72    10    18    25    72 36563   198 50280   437   198
  50284   437  8612   378   198 50284   562   570 42304   796   269    58
  28771 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,   269,    58,    72,    12,    19,  4357,
           269,    58,    72,    12,    18,  4357,  2160,    58,    72,    10,
            18,    25,    72, 36563,   198, 50280,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,   269,    58,
         28771, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  144
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], c[i-4], c[i-3], sum[i+3:i]);
        end
    endgenerate
    assign cout = c[399];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.842070048999858
-------------------------------------------------------
MCTS Iteration:  58.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6571402  0.6571402  0.6571402  0.6571402  0.6571402  0.6571402
 0.6571402  0.93333024 0.93333024 0.93333024]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.sum[3:0]);
    assign top_module.sum = a + b + cin;

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13 16345    58    18    25    15 36563
    198 50284   562   570  1353    62 21412    13 16345   796   257  1343
    275  1343   269   259    26   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13, 16345,    58,
            18,    25,    15, 36563,   198, 50284,   562,   570,  1353,    62,
         21412,    13, 16345,   796,   257,  1343,   275,  1343,   269,   259,
            26,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  63
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.sum[3:0]);
    assign top_module.sum = a + b + cin;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  11.780064491999838
-------------------------------------------------------
MCTS Iteration:  59.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6699192 0.6699192 0.6699192 0.6699192 0.6699192 0.6699192 0.6699192
 0.6699192 0.948239  0.948239 ]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    15    11  2160    15]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[   15  4357   269   259    11 42304    15    11  2160    15]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout0, sum0);
    bcd_fadd inst2 (a[7:4], b[7:4], cout0, cout1, sum1);
    bcd_fadd inst3 (a[11:8], b[11:8], cout1, cout2, sum2);
    bcd_fadd inst4 (a[15:12], b[15:12], cout2, cout3, sum3);
    bcd_fadd inst5 (a[19:16], b[19:16], cout3, cout4, sum4);
    bcd_fadd inst6 (a[23:20], b[23:20], cout4, cout5, sum5);
    bcd_fadd inst7 (a[27:24], b[27:24], cout5, cout6, sum6);
    bcd_fadd inst8 (a[31:28], b[31:28], cout6, cout7, sum7);
    bcd_fadd inst9 (a[35:32], b[35:32], cout7, cout8, sum8);
    bcd_fadd inst10 (a[39:36], b[39:36], cout8, cout9, sum9);
    bcd_fadd inst11 (a[43:40], b[43:40], cout9, cout10, sum10);
    bcd_fadd inst12 (a[47:44], b[47:44], cout10, cout11, sum11);
    bcd_fadd inst13 (a[51:48], b[51:48], cout11, cout12, sum12);
    bcd_fadd inst14 (a[55:52], b[55:52], cout12, cout13, sum13);
    bcd_fadd inst15 (a[59:56], b[59:56], cout13, cout14, sum14);
    bcd_fadd inst16 (a[63:60], b[63:60], cout14, cout15, sum15);
    bcd_fadd inst17 (a[67:64], b[67:64], cout15, cout16, sum16);
    bcd_fadd inst18 (a[71:68], b[71:68], cout16, cout17, sum17);
    bcd_fadd inst19 (a[75:72], b[75:72], cout17, cout18, sum18);
    bcd_fadd inst20 (a[79:76], b[79:76], cout18, cout19, sum19);
    bcd_fadd inst21 (a[83:80], b[83:80], cout19, cout20, sum20);
    bcd_fadd inst22 (a[87:84], b[87:84], cout20, cout21, sum21);
    bcd_fadd inst23 (a[91:88], b[91:88], cout21, cout22, sum22);
    bcd_fadd inst24 (a[95:92], b[95:92], cout22, cout23, sum23);
    bcd_fadd inst25 (a[99:96], b[99:96], cout23, cout24,
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    15    11  2160    15
   1776   198 50284    65 10210    62    69  2860   916    17   357    64
     58    22    25    19  4357   275    58    22    25    19  4357 42304
     15    11 42304    16    11  2160    16  1776   198 50284    65 10210
     62    69  2860   916    18   357    64    58  1157    25    23  4357
    275    58  1157    25    23  4357 42304    16    11 42304    17    11
   2160    17  1776   198 50284    65 10210    62    69  2860   916    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357 42304    17    11 42304    18    11  2160    18  1776   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    18    11 42304
     19    11  2160    19  1776   198 50284    65 10210    62    69  2860
    916    21   357    64    58  1954    25  1238  4357   275    58  1954
     25  1238  4357 42304    19    11 42304    20    11  2160    20  1776
    198 50284    65 10210    62    69  2860   916    22   357    64    58
   1983    25  1731  4357   275    58  1983    25  1731  4357 42304    20
     11 42304    21    11  2160    21  1776   198 50284    65 10210    62
     69  2860   916    23   357    64    58  3132    25  2078  4357   275
     58  3132    25  2078  4357 42304    21    11 42304    22    11  2160
     22  1776   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    22    11 42304    23    11  2160    23  1776   198 50284    65
  10210    62    69  2860   916   940   357    64    58  2670    25  2623
   4357   275    58  2670    25  2623  4357 42304    23    11 42304    24
     11  2160    24  1776   198 50284    65 10210    62    69  2860   916
   1157   357    64    58  3559    25  1821  4357   275    58  3559    25
   1821  4357 42304    24    11 42304   940    11  2160   940  1776   198
  50284    65 10210    62    69  2860   916  1065   357    64    58  2857
     25  2598  4357   275    58  2857    25  2598  4357 42304   940    11
  42304  1157    11  2160  1157  1776   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1157    11 42304  1065    11  2160  1065
   1776   198 50284    65 10210    62    69  2860   916  1415   357    64
     58  2816    25  4309  4357   275    58  2816    25  4309  4357 42304
   1065    11 42304  1485    11  2160  1485  1776   198 50284    65 10210
     62    69  2860   916  1314   357    64    58  3270    25  3980  4357
    275    58  3270    25  3980  4357 42304  1485    11 42304  1415    11
   2160  1415  1776   198 50284    65 10210    62    69  2860   916  1433
    357    64    58  5066    25  1899  4357   275    58  5066    25  1899
   4357 42304  1415    11 42304  1314    11  2160  1314  1776   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1314    11 42304
   1433    11  2160  1433  1776   198 50284    65 10210    62    69  2860
    916  1507   357    64    58  4869    25  3104  4357   275    58  4869
     25  3104  4357 42304  1433    11 42304  1558    11  2160  1558  1776
    198 50284    65 10210    62    69  2860   916  1129   357    64    58
   2425    25  4761  4357   275    58  2425    25  4761  4357 42304  1558
     11 42304  1507    11  2160  1507  1776   198 50284    65 10210    62
     69  2860   916  1238   357    64    58  3720    25  4304  4357   275
     58  3720    25  4304  4357 42304  1507    11 42304  1129    11  2160
   1129  1776   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1129    11 42304  1238    11  2160  1238  1776   198 50284    65
  10210    62    69  2860   916  1828   357    64    58  5774    25  5705
   4357   275    58  5774    25  5705  4357 42304  1238    11 42304  2481
     11  2160  2481  1776   198 50284    65 10210    62    69  2860   916
   1954   357    64    58  6420    25  3459  4357   275    58  6420    25
   3459  4357 42304  2481    11 42304  1828    11  2160  1828  1776   198
  50284    65 10210    62    69  2860   916  1731   357    64    58  3865
     25  5892  4357   275    58  3865    25  5892  4357 42304  1828    11
  42304  1954    11  2160  1954  1776   198 50284    65 10210    62    69
   2860   916  1495   357    64    58  2079    25  4846  4357   275    58
   2079    25  4846  4357 42304  1954    11 42304  1731    11]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    15,    11,
          2160,    15,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    17,   357,    64,    58,    22,    25,    19,  4357,   275,
            58,    22,    25,    19,  4357, 42304,    15,    11, 42304,    16,
            11,  2160,    16,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    18,   357,    64,    58,  1157,    25,    23,  4357,
           275,    58,  1157,    25,    23,  4357, 42304,    16,    11, 42304,
            17,    11,  2160,    17,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,    19,   357,    64,    58,  1314,    25,  1065,
          4357,   275,    58,  1314,    25,  1065,  4357, 42304,    17,    11,
         42304,    18,    11,  2160,    18,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    20,   357,    64,    58,  1129,    25,
          1433,  4357,   275,    58,  1129,    25,  1433,  4357, 42304,    18,
            11, 42304,    19,    11,  2160,    19,  1776,   198, 50284,    65,
         10210,    62,    69,  2860,   916,    21,   357,    64,    58,  1954,
            25,  1238,  4357,   275,    58,  1954,    25,  1238,  4357, 42304,
            19,    11, 42304,    20,    11,  2160,    20,  1776,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    22,   357,    64,    58,
          1983,    25,  1731,  4357,   275,    58,  1983,    25,  1731,  4357,
         42304,    20,    11, 42304,    21,    11,  2160,    21,  1776,   198,
         50284,    65, 10210,    62,    69,  2860,   916,    23,   357,    64,
            58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,  2078,
          4357, 42304,    21,    11, 42304,    22,    11,  2160,    22,  1776,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    24,   357,
            64,    58,  2327,    25,  2624,  4357,   275,    58,  2327,    25,
          2624,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    23,
          1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,   940,
           357,    64,    58,  2670,    25,  2623,  4357,   275,    58,  2670,
            25,  2623,  4357, 42304,    23,    11, 42304,    24,    11,  2160,
            24,  1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,    24,    11, 42304,   940,    11,
          2160,   940,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1065,   357,    64,    58,  2857,    25,  2598,  4357,   275,
            58,  2857,    25,  2598,  4357, 42304,   940,    11, 42304,  1157,
            11,  2160,  1157,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1485,   357,    64,    58,  4349,    25,  2780,  4357,
           275,    58,  4349,    25,  2780,  4357, 42304,  1157,    11, 42304,
          1065,    11,  2160,  1065,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,
          4357,   275,    58,  2816,    25,  4309,  4357, 42304,  1065,    11,
         42304,  1485,    11,  2160,  1485,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1314,   357,    64,    58,  3270,    25,
          3980,  4357,   275,    58,  3270,    25,  3980,  4357, 42304,  1485,
            11, 42304,  1415,    11,  2160,  1415,  1776,   198, 50284,    65,
         10210,    62,    69,  2860,   916,  1433,   357,    64,    58,  5066,
            25,  1899,  4357,   275,    58,  5066,    25,  1899,  4357, 42304,
          1415,    11, 42304,  1314,    11,  2160,  1314,  1776,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1558,   357,    64,    58,
          3134,    25,  2414,  4357,   275,    58,  3134,    25,  2414,  4357,
         42304,  1314,    11, 42304,  1433,    11,  2160,  1433,  1776,   198,
         50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,    64,
            58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,  3104,
          4357, 42304,  1433,    11, 42304,  1558,    11,  2160,  1558,  1776,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1129,   357,
            64,    58,  2425,    25,  4761,  4357,   275,    58,  2425,    25,
          4761,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,  1507,
          1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,  1238,
           357,    64,    58,  3720,    25,  4304,  4357,   275,    58,  3720,
            25,  4304,  4357, 42304,  1507,    11, 42304,  1129,    11,  2160,
          1129,  1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1129,    11, 42304,  1238,    11,
          2160,  1238,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1828,   357,    64,    58,  5774,    25,  5705,  4357,   275,
            58,  5774,    25,  5705,  4357, 42304,  1238,    11, 42304,  2481,
            11,  2160,  2481,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1954,   357,    64,    58,  6420,    25,  3459,  4357,
           275,    58,  6420,    25,  3459,  4357, 42304,  2481,    11, 42304,
          1828,    11,  2160,  1828,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1731,   357,    64,    58,  3865,    25,  5892,
          4357,   275,    58,  3865,    25,  5892,  4357, 42304,  1828,    11,
         42304,  1954,    11,  2160,  1954,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1495,   357,    64,    58,  2079,    25,
          4846,  4357,   275,    58,  2079,    25,  4846,  4357, 42304,  1954,
            11, 42304,  1731,    11]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.89266570300015
-------------------------------------------------------
MCTS Iteration:  60.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6825921 0.6825921 0.6825921 0.6825921 0.6825921 0.6825921 0.6825921
 0.6825921 0.6825921 0.9630242]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[2860   15  357   64   58   18   25   15 4357  275]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout0 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout0 1
LLMEstimate:  [3:0], cin, cout0 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357    64    58    18    25    15
   4357   275]]
SEQUENCE:  [[   58    18    25    15  4357   269   259    11 42304    11]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[   58    18    25    15  4357   269   259    11 42304    11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (a[3:0], b[3:0], cin, cout, sum[3:0]);
    bcd_fadd inst_fadd1 (a[7:4], b[7:4], cout, cout, sum[7:4]);
    bcd_fadd inst_fadd2 (a[11:8], b[11:8], cout, cout, sum[11:8]);
    bcd_fadd inst_fadd3 (a[15:12], b[15:12], cout, cout, sum[15:12]);
    bcd_fadd inst_fadd4 (a[19:16], b[19:16], cout, cout, sum[19:16]);
    bcd_fadd inst_fadd5 (a[23:20], b[23:20], cout, cout, sum[23:20]);
    bcd_fadd inst_fadd6 (a[27:24], b[27:24], cout, cout, sum[27:24]);
    bcd_fadd inst_fadd7 (a[31:28], b[31:28], cout, cout, sum[31:28]);
    bcd_fadd inst_fadd8 (a[35:32], b[35:32], cout, cout, sum[35:32]);
    bcd_fadd inst_fadd9 (a[39:36], b[39:36], cout, cout, sum[39:36]);
    bcd_fadd inst_fadd10 (a[43:40], b[43:40], cout, cout, sum[43:40]);
    bcd_fadd inst_fadd11 (a[47:44], b[47:44], cout, cout, sum[47:44]);
    bcd_fadd inst_fadd12 (a[51:48], b[51:48], cout, cout, sum[51:48]);
    bcd_fadd inst_fadd13 (a[55:52], b[55:52], cout, cout, sum[55:52]);
    bcd_fadd inst_fadd14 (a[59:56], b[59:56], cout, cout, sum[59:56]);
    bcd_fadd inst_fadd15 (a[63:60], b[63:60], cout, cout, sum[63:60]);
    bcd_fadd inst_fadd16 (a[67:64], b[67:64], cout, cout, sum[67:64]);
    bcd_fadd inst_fadd17 (a[71:68], b[71:68], cout, cout, sum[71:68]);
    bcd_fadd inst_fadd18 (a[75:72], b[75:72], cout, cout, sum[75:72]);
    bcd_fadd inst_fadd19 (a[79:76], b[79:76], cout, cout, sum[79:76]);
    bcd_fadd inst_fadd20 (a[83:80], b[83:80], cout, cout, sum[83:80]);
    bcd_fadd inst_fadd21 (a[87:84], b[87:84], cout, cout, sum[87:84]);

[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357    64    58    18    25    15
   4357   275    58    18    25    15  4357   269   259    11 42304    11
   2160    58    18    25    15 36563   198 50284    65 10210    62    69
   2860   916    62    69  2860    16   357    64    58    22    25    19
   4357   275    58    22    25    19  4357 42304    11 42304    11  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    916    62    69  2860    17   357    64    58  1157    25    23  4357
    275    58  1157    25    23  4357 42304    11 42304    11  2160    58
   1157    25    23 36563   198 50284    65 10210    62    69  2860   916
     62    69  2860    18   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357 42304    11 42304    11  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   916    62
     69  2860    19   357    64    58  1129    25  1433  4357   275    58
   1129    25  1433  4357 42304    11 42304    11  2160    58  1129    25
   1433 36563   198 50284    65 10210    62    69  2860   916    62    69
   2860    20   357    64    58  1954    25  1238  4357   275    58  1954
     25  1238  4357 42304    11 42304    11  2160    58  1954    25  1238
  36563   198 50284    65 10210    62    69  2860   916    62    69  2860
     21   357    64    58  1983    25  1731  4357   275    58  1983    25
   1731  4357 42304    11 42304    11  2160    58  1983    25  1731 36563
    198 50284    65 10210    62    69  2860   916    62    69  2860    22
    357    64    58  3132    25  2078  4357   275    58  3132    25  2078
   4357 42304    11 42304    11  2160    58  3132    25  2078 36563   198
  50284    65 10210    62    69  2860   916    62    69  2860    23   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    11 42304    11  2160    58  2327    25  2624 36563   198 50284
     65 10210    62    69  2860   916    62    69  2860    24   357    64
     58  2670    25  2623  4357   275    58  2670    25  2623  4357 42304
     11 42304    11  2160    58  2670    25  2623 36563   198 50284    65
  10210    62    69  2860   916    62    69  2860   940   357    64    58
   3559    25  1821  4357   275    58  3559    25  1821  4357 42304    11
  42304    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916    62    69  2860  1157   357    64    58  2857
     25  2598  4357   275    58  2857    25  2598  4357 42304    11 42304
     11  2160    58  2857    25  2598 36563   198 50284    65 10210    62
     69  2860   916    62    69  2860  1065   357    64    58  4349    25
   2780  4357   275    58  4349    25  2780  4357 42304    11 42304    11
   2160    58  4349    25  2780 36563   198 50284    65 10210    62    69
   2860   916    62    69  2860  1485   357    64    58  2816    25  4309
   4357   275    58  2816    25  4309  4357 42304    11 42304    11  2160
     58  2816    25  4309 36563   198 50284    65 10210    62    69  2860
    916    62    69  2860  1415   357    64    58  3270    25  3980  4357
    275    58  3270    25  3980  4357 42304    11 42304    11  2160    58
   3270    25  3980 36563   198 50284    65 10210    62    69  2860   916
     62    69  2860  1314   357    64    58  5066    25  1899  4357   275
     58  5066    25  1899  4357 42304    11 42304    11  2160    58  5066
     25  1899 36563   198 50284    65 10210    62    69  2860   916    62
     69  2860  1433   357    64    58  3134    25  2414  4357   275    58
   3134    25  2414  4357 42304    11 42304    11  2160    58  3134    25
   2414 36563   198 50284    65 10210    62    69  2860   916    62    69
   2860  1558   357    64    58  4869    25  3104  4357   275    58  4869
     25  3104  4357 42304    11 42304    11  2160    58  4869    25  3104
  36563   198 50284    65 10210    62    69  2860   916    62    69  2860
   1507   357    64    58  2425    25  4761  4357   275    58  2425    25
   4761  4357 42304    11 42304    11  2160    58  2425    25  4761 36563
    198 50284    65 10210    62    69  2860   916    62    69  2860  1129
    357    64    58  3720    25  4304  4357   275    58  3720    25  4304
   4357 42304    11 42304    11  2160    58  3720    25  4304 36563   198
  50284    65 10210    62    69  2860   916    62    69  2860  1238   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304    11 42304    11  2160    58  5999    25  1795 36563   198 50284
     65 10210    62    69  2860   916    62    69  2860  2481   357    64
     58  5774    25  5705  4357   275    58  5774    25  5705  4357 42304
     11 42304    11  2160    58  5774    25  5705 36563   198]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    15,   357,    64,    58,    18,    25,    15,
          4357,   275,    58,    18,    25,    15,  4357,   269,   259,    11,
         42304,    11,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    16,
           357,    64,    58,    22,    25,    19,  4357,   275,    58,    22,
            25,    19,  4357, 42304,    11, 42304,    11,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    17,   357,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357, 42304,    11,
         42304,    11,  2160,    58,  1157,    25,    23, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    18,
           357,    64,    58,  1314,    25,  1065,  4357,   275,    58,  1314,
            25,  1065,  4357, 42304,    11, 42304,    11,  2160,    58,  1314,
            25,  1065, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    19,   357,    64,    58,  1129,    25,
          1433,  4357,   275,    58,  1129,    25,  1433,  4357, 42304,    11,
         42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    20,
           357,    64,    58,  1954,    25,  1238,  4357,   275,    58,  1954,
            25,  1238,  4357, 42304,    11, 42304,    11,  2160,    58,  1954,
            25,  1238, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    21,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    11,
         42304,    11,  2160,    58,  1983,    25,  1731, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    22,
           357,    64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,
            25,  2078,  4357, 42304,    11, 42304,    11,  2160,    58,  3132,
            25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    23,   357,    64,    58,  2327,    25,
          2624,  4357,   275,    58,  2327,    25,  2624,  4357, 42304,    11,
         42304,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    24,
           357,    64,    58,  2670,    25,  2623,  4357,   275,    58,  2670,
            25,  2623,  4357, 42304,    11, 42304,    11,  2160,    58,  2670,
            25,  2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,   940,   357,    64,    58,  3559,    25,
          1821,  4357,   275,    58,  3559,    25,  1821,  4357, 42304,    11,
         42304,    11,  2160,    58,  3559,    25,  1821, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1157,
           357,    64,    58,  2857,    25,  2598,  4357,   275,    58,  2857,
            25,  2598,  4357, 42304,    11, 42304,    11,  2160,    58,  2857,
            25,  2598, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1065,   357,    64,    58,  4349,    25,
          2780,  4357,   275,    58,  4349,    25,  2780,  4357, 42304,    11,
         42304,    11,  2160,    58,  4349,    25,  2780, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1485,
           357,    64,    58,  2816,    25,  4309,  4357,   275,    58,  2816,
            25,  4309,  4357, 42304,    11, 42304,    11,  2160,    58,  2816,
            25,  4309, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1415,   357,    64,    58,  3270,    25,
          3980,  4357,   275,    58,  3270,    25,  3980,  4357, 42304,    11,
         42304,    11,  2160,    58,  3270,    25,  3980, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1314,
           357,    64,    58,  5066,    25,  1899,  4357,   275,    58,  5066,
            25,  1899,  4357, 42304,    11, 42304,    11,  2160,    58,  5066,
            25,  1899, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1433,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,    11,
         42304,    11,  2160,    58,  3134,    25,  2414, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1558,
           357,    64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,
            25,  3104,  4357, 42304,    11, 42304,    11,  2160,    58,  4869,
            25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1507,   357,    64,    58,  2425,    25,
          4761,  4357,   275,    58,  2425,    25,  4761,  4357, 42304,    11,
         42304,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1129,
           357,    64,    58,  3720,    25,  4304,  4357,   275,    58,  3720,
            25,  4304,  4357, 42304,    11, 42304,    11,  2160,    58,  3720,
            25,  4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1238,   357,    64,    58,  5999,    25,
          1795,  4357,   275,    58,  5999,    25,  1795,  4357, 42304,    11,
         42304,    11,  2160,    58,  5999,    25,  1795, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  2481,
           357,    64,    58,  5774,    25,  5705,  4357,   275,    58,  5774,
            25,  5705,  4357, 42304,    11, 42304,    11,  2160,    58,  5774,
            25,  5705, 36563,   198]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.87190509600009
-------------------------------------------------------
MCTS Iteration:  61.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6951615 0.6951615 0.6951615 0.6951615 0.6951615 0.6951615 0.6951615
 0.6951615 0.6951615 0.6951615]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    62]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0(a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
SEQUENCE:  [[  15    7   64   58   18   25   15 4357  275   58]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  15    7   64   58   18   25   15 4357  275   58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0(a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for(i=1; i<100; i=i+1) begin: adder
            bcd_fadd fadd(a[(4*i)+3:4*i], b[(4*i)+3:4*i], carry[i-1], carry[i], sum[(4*i)+3:4*i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62    15     7    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11  3283    58    15  4357  2160
     58    18    25    15 36563   198 50284  8612   378   198 50280  5235
   7785  1312    26   198 50280  1640     7    72    28    16    26  1312
     27  3064    26  1312    28    72    10    16     8  2221    25   751
    263   198 50276    65 10210    62    69  2860   277  2860     7    64
     58     7    19     9    72 47762    18    25    19     9    72  4357
    275    58     7    19     9    72 47762    18    25    19     9    72
   4357  3283    58    72    12    16  4357  3283    58    72  4357  2160
     58     7    19     9    72 47762    18    25    19     9    72 36563
    198 50280   437   198 50284   437  8612   378   198 50284   562   570
  42304   796  3283    58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    62,    15,     7,    64,    58,    18,    25,    15,  4357,
           275,    58,    18,    25,    15,  4357,   269,   259,    11,  3283,
            58,    15,  4357,  2160,    58,    18,    25,    15, 36563,   198,
         50284,  8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198,
         50280,  1640,     7,    72,    28,    16,    26,  1312,    27,  3064,
            26,  1312,    28,    72,    10,    16,     8,  2221,    25,   751,
           263,   198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,
             7,    64,    58,     7,    19,     9,    72, 47762,    18,    25,
            19,     9,    72,  4357,   275,    58,     7,    19,     9,    72,
         47762,    18,    25,    19,     9,    72,  4357,  3283,    58,    72,
            12,    16,  4357,  3283,    58,    72,  4357,  2160,    58,     7,
            19,     9,    72, 47762,    18,    25,    19,     9,    72, 36563,
           198, 50280,   437,   198, 50284,   437,  8612,   378,   198, 50284,
           562,   570, 42304,   796,  3283,    58,  2079, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  160
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0(a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for(i=1; i<100; i=i+1) begin: adder
            bcd_fadd fadd(a[(4*i)+3:4*i], b[(4*i)+3:4*i], carry[i-1], carry[i], sum[(4*i)+3:4*i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  16.64018672400016
-------------------------------------------------------
MCTS Iteration:  62.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.49417627 0.70763    0.70763    0.70763    0.70763    0.70763
 0.70763    0.70763    0.70763    0.70763   ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    62]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0 (
       .a(a[3 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (
       .a(a[3 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (
       .a(a[3 1
LLMEstimate:  0 (a[3:0], b[ 1
LLMEstimate:  0 (a[3:0], b[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
SEQUENCE:  [[  15  357   64   58   18   25   15 4357  275   58]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  15  357   64   58   18   25   15 4357  275   58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd_temp (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62    15   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11  3283    58    15  4357  2160
     58    18    25    15 36563   198 50284  8612   378   198 50280  5235
   7785  1312    26   198 50280  1640   357    72   796   604    26  1312
   1279  7337    26  1312   796  1312  1343   604     8  2221  1058   751
    263   198 50276    65 10210    62    69  2860   277  2860    62 29510
    357    64    58    72    10    18    25    72  4357   275    58    72
     10    18    25    72  4357  3283    58    72    12    19  4357  3283
     58    72  4357  2160    58    72    10    18    25    72 36563   198
  50280   437   198 50284   437  8612   378   198 50284   562   570 42304
    796  3283    58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    62,    15,   357,    64,    58,    18,    25,    15,  4357,
           275,    58,    18,    25,    15,  4357,   269,   259,    11,  3283,
            58,    15,  4357,  2160,    58,    18,    25,    15, 36563,   198,
         50284,  8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198,
         50280,  1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,
            26,  1312,   796,  1312,  1343,   604,     8,  2221,  1058,   751,
           263,   198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,
            62, 29510,   357,    64,    58,    72,    10,    18,    25,    72,
          4357,   275,    58,    72,    10,    18,    25,    72,  4357,  3283,
            58,    72,    12,    19,  4357,  3283,    58,    72,  4357,  2160,
            58,    72,    10,    18,    25,    72, 36563,   198, 50280,   437,
           198, 50284,   437,  8612,   378,   198, 50284,   562,   570, 42304,
           796,  3283,    58,  2079, 11208,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  147
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd_0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd_temp (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.994732926000097
-------------------------------------------------------
MCTS Iteration:  63.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.505      0.505      0.71999997 0.71999997 0.71999997 0.71999997
 0.71999997 0.71999997 0.71999997 0.71999997]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    15]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd1 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd2 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd3 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd4 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11   269    58    15  4357  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    22    25    19  4357   275    58    22
     25    19  4357   269    58    15  4357   269    58    16  4357  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    277  2860    17   357    64    58  1157    25    23  4357   275    58
   1157    25    23  4357   269    58    16  4357   269    58    17  4357
   2160    58  1157    25    23 36563   198 50284    65 10210    62    69
   2860   277  2860    18   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357   269    58    17  4357   269    58    18
   4357  2160    58  1314    25  1065 36563   198 50284    65 10210    62
     69  2860   277  2860    19   357    64    58  1129    25  1433  4357
    275    58  1129    25  1433  4357   269    58    18  4357 42304    11
   2160    58  1129    25  1433 36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    15,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,   269,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   277,  2860,    16,   357,    64,
            58,    22,    25,    19,  4357,   275,    58,    22,    25,    19,
          4357,   269,    58,    15,  4357,   269,    58,    16,  4357,  2160,
            58,    22,    25,    19, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,  2860,    17,   357,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357,   269,    58,
            16,  4357,   269,    58,    17,  4357,  2160,    58,  1157,    25,
            23, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    18,   357,    64,    58,  1314,    25,  1065,  4357,   275,
            58,  1314,    25,  1065,  4357,   269,    58,    17,  4357,   269,
            58,    18,  4357,  2160,    58,  1314,    25,  1065, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,  2860,    19,   357,
            64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,    25,
          1433,  4357,   269,    58,    18,  4357, 42304,    11,  2160,    58,
          1129,    25,  1433, 36563,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  197
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd1 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd2 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd3 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd4 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.487130243000138
-------------------------------------------------------
MCTS Iteration:  64.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.51573944 0.51573944 0.51573944 0.73227364 0.73227364 0.73227364
 0.73227364 0.73227364 0.73227364 0.73227364]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i=4; i<400; i=i+4)
            assign carry[i/4] = a[i] + b[i] + carry[i/4-1];
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72    28    19    26  1312    27
   7029    26  1312    28    72    10    19     8   198 50276   562   570
   3283    58    72    14    19    60   796   257    58    72    60  1343
    275    58    72    60  1343  3283    58    72    14    19    12    16
  11208   198 50284   437  8612   378   198 50284   562   570 42304   796
   3283    58  2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,    28,    19,    26,  1312,    27,  7029,    26,
          1312,    28,    72,    10,    19,     8,   198, 50276,   562,   570,
          3283,    58,    72,    14,    19,    60,   796,   257,    58,    72,
            60,  1343,   275,    58,    72,    60,  1343,  3283,    58,    72,
            14,    19,    12,    16, 11208,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  122
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i=4; i<400; i=i+4)
            assign carry[i/4] = a[i] + b[i] + carry[i/4-1];
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  14.748123823000014
-------------------------------------------------------
MCTS Iteration:  65.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.52639663 0.52639663 0.52639663 0.52639663 0.74445325 0.74445325
 0.74445325 0.74445325 0.74445325 0.74445325]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640     7    72    28    15    26    72    27]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198 50280  1640     7    72    28    15    26    72    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0;i<100;i=i+1) begin
            bcd_fadd fadd(a[3*i+:3],b[3*i+:3],carry[i],carry[i+1],sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640     7    72    28    15    26    72    27
   3064    26    72    28    72    10    16     8  2221   198 50276    65
  10210    62    69  2860   277  2860     7    64    58    18     9    72
     10    25    18  4357    65    58    18     9    72    10    25    18
   4357 34993    58    72  4357 34993    58    72    10    16  4357 16345
     58    18     9    72    10    25    18 36563   198 50280   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   3064 11208   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,     7,    72,    28,    15,    26,
            72,    27,  3064,    26,    72,    28,    72,    10,    16,     8,
          2221,   198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,
             7,    64,    58,    18,     9,    72,    10,    25,    18,  4357,
            65,    58,    18,     9,    72,    10,    25,    18,  4357, 34993,
            58,    72,  4357, 34993,    58,    72,    10,    16,  4357, 16345,
            58,    18,     9,    72,    10,    25,    18, 36563,   198, 50280,
           437,   198, 50284,   437,  8612,   378,   198, 50284,   562,   570,
         42304,   796,  3283,    58,  3064, 11208,   198, 50284,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  109
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0;i<100;i=i+1) begin
            bcd_fadd fadd(a[3*i+:3],b[3*i+:3],carry[i],carry[i+1],sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  14.080732021999893
-------------------------------------------------------
MCTS Iteration:  66.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.53697336 0.53697336 0.53697336 0.53697336 0.53697336 0.75654095
 0.75654095 0.75654095 0.75654095 0.75654095]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.85530379900001
-------------------------------------------------------
MCTS Iteration:  67.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5474714 0.5474714 0.5474714 0.5474714 0.5474714 0.5474714 0.7685388
 0.7685388 0.7685388 0.7685388]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11   269    58    15  4357  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   277
   2860    17   357    64    58    22    25    19  4357   275    58    22
     25    19  4357   269    58    15  4357   269    58    16  4357  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    277  2860    18   357    64    58  1157    25    23  4357   275    58
   1157    25    23  4357   269    58    16  4357   269    58    17  4357
   2160    58  1157    25    23 36563   198 50284    65 10210    62    69
   2860   277  2860    19   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357   269    58    17  4357   269    58    18
   4357  2160    58  1314    25  1065 36563   198 50284    65 10210    62
     69  2860   277  2860    20   357    64    58  1129    25  1433  4357
    275    58  1129    25  1433  4357   269    58    18  4357 42304    11
   2160    58  1129    25  1433 36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,   269,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   277,  2860,    17,   357,    64,
            58,    22,    25,    19,  4357,   275,    58,    22,    25,    19,
          4357,   269,    58,    15,  4357,   269,    58,    16,  4357,  2160,
            58,    22,    25,    19, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,  2860,    18,   357,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357,   269,    58,
            16,  4357,   269,    58,    17,  4357,  2160,    58,  1157,    25,
            23, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    19,   357,    64,    58,  1314,    25,  1065,  4357,   275,
            58,  1314,    25,  1065,  4357,   269,    58,    17,  4357,   269,
            58,    18,  4357,  2160,    58,  1314,    25,  1065, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,  2860,    20,   357,
            64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,    25,
          1433,  4357,   269,    58,    18,  4357, 42304,    11,  2160,    58,
          1129,    25,  1433, 36563,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  197
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.499407195999993
-------------------------------------------------------
MCTS Iteration:  68.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.55789256 0.55789256 0.55789256 0.55789256 0.55789256 0.55789256
 0.55789256 0.7804486  0.7804486  0.7804486 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout_1, top_module.sum[3:0]);
    assign top_module.cout_1 = bcd_fadd(a[7:4], b[7:4], top_module.cout_2, top_module.cout_3, top_module.sum[7:4]);
    assign top_module.cout_2 = bcd_fadd(a[11:8], b[11:8], top_module.cout_4, top_module.cout_5, top_module.sum[11:8]);
    assign top_module.cout_3 = bcd_fadd(a[15:12], b[15:12], top_module.cout_6, top_module.cout_7, top_module.sum[15:12]);
    assign top_module.cout_4 = bcd_fadd(a[19:16], b[19:16], top_module.cout_8, top_module.cout_9, top_module.sum[19:16]);
    assign top_module.cout_5 = bcd_fadd(a[23:20], b[23:20], top_module.cout_10, top_module.cout_11, top_module.sum[23:20]);
    assign top_module.cout_6 = bcd_fadd(a[27:24], b[27:24], top_module.cout_12, top_module.cout_13, top_module.sum[27:24]);
    assign top_module.cout_7 = bcd_fadd(a[31:28], b[31:28], top_module.cout_14, top_module.cout_15, top_module.sum[31:28]);
    assign top_module.cout_8 = bcd_fadd(a[35:32], b[35:32], top_module.cout_16, top_module.cout_17, top_module.sum[35:32]);
    assign top_module.cout_9 = bcd_fadd(a[39:36], b[39:36], top_module.cout_18, top_module.cout_19, top_module.sum[39:36]);
    assign top_module.cout_10 = bcd_fadd(a[43:40], b[43:40], top_module.cout_20, top_module.cout_21, top_module.sum[43:40]);
    assign top_module.cout_11 = bcd_fadd(a[47:44], b[47:44], top_module.cout_22, top_module.cout_23, top_module.sum[47:44]);
    assign top_module.cout_12 = bcd_fadd(a[51:48], b[51:48], top_module.cout_24, top_module.cout_25, top_module.sum[51:48]);
    assign top_module.cout_13 =
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13    66   448    62    16    11  1353
     62 21412    13 16345    58    18    25    15 36563   198 50284   562
    570  1353    62 21412    13    66   448    62    16   796   275 10210
     62    69  2860     7    64    58    22    25    19  4357   275    58
     22    25    19  4357  1353    62 21412    13    66   448    62    17
     11  1353    62 21412    13    66   448    62    18    11  1353    62
  21412    13 16345    58    22    25    19 36563   198 50284   562   570
   1353    62 21412    13    66   448    62    17   796   275 10210    62
     69  2860     7    64    58  1157    25    23  4357   275    58  1157
     25    23  4357  1353    62 21412    13    66   448    62    19    11
   1353    62 21412    13    66   448    62    20    11  1353    62 21412
     13 16345    58  1157    25    23 36563   198 50284   562   570  1353
     62 21412    13    66   448    62    18   796   275 10210    62    69
   2860     7    64    58  1314    25  1065  4357   275    58  1314    25
   1065  4357  1353    62 21412    13    66   448    62    21    11  1353
     62 21412    13    66   448    62    22    11  1353    62 21412    13
  16345    58  1314    25  1065 36563   198 50284   562   570  1353    62
  21412    13    66   448    62    19   796   275 10210    62    69  2860
      7    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357  1353    62 21412    13    66   448    62    23    11  1353    62
  21412    13    66   448    62    24    11  1353    62 21412    13 16345
     58  1129    25  1433 36563   198 50284   562   570  1353    62 21412
     13    66   448    62    20   796   275 10210    62    69  2860     7
     64    58  1954    25  1238  4357   275    58  1954    25  1238  4357
   1353    62 21412    13    66   448    62   940    11  1353    62 21412
     13    66   448    62  1157    11  1353    62 21412    13 16345    58
   1954    25  1238 36563   198 50284   562   570  1353    62 21412    13
     66   448    62    21   796   275 10210    62    69  2860     7    64
     58  1983    25  1731  4357   275    58  1983    25  1731  4357  1353
     62 21412    13    66   448    62  1065    11  1353    62 21412    13
     66   448    62  1485    11  1353    62 21412    13 16345    58  1983
     25  1731 36563   198 50284   562   570  1353    62 21412    13    66
    448    62    22   796   275 10210    62    69  2860     7    64    58
   3132    25  2078  4357   275    58  3132    25  2078  4357  1353    62
  21412    13    66   448    62  1415    11  1353    62 21412    13    66
    448    62  1314    11  1353    62 21412    13 16345    58  3132    25
   2078 36563   198 50284   562   570  1353    62 21412    13    66   448
     62    23   796   275 10210    62    69  2860     7    64    58  2327
     25  2624  4357   275    58  2327    25  2624  4357  1353    62 21412
     13    66   448    62  1433    11  1353    62 21412    13    66   448
     62  1558    11  1353    62 21412    13 16345    58  2327    25  2624
  36563   198 50284   562   570  1353    62 21412    13    66   448    62
     24   796   275 10210    62    69  2860     7    64    58  2670    25
   2623  4357   275    58  2670    25  2623  4357  1353    62 21412    13
     66   448    62  1507    11  1353    62 21412    13    66   448    62
   1129    11  1353    62 21412    13 16345    58  2670    25  2623 36563
    198 50284   562   570  1353    62 21412    13    66   448    62   940
    796   275 10210    62    69  2860     7    64    58  3559    25  1821
   4357   275    58  3559    25  1821  4357  1353    62 21412    13    66
    448    62  1238    11  1353    62 21412    13    66   448    62  2481
     11  1353    62 21412    13 16345    58  3559    25  1821 36563   198
  50284   562   570  1353    62 21412    13    66   448    62  1157   796
    275 10210    62    69  2860     7    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357  1353    62 21412    13    66   448
     62  1828    11  1353    62 21412    13    66   448    62  1954    11
   1353    62 21412    13 16345    58  2857    25  2598 36563   198 50284
    562   570  1353    62 21412    13    66   448    62  1065   796   275
  10210    62    69  2860     7    64    58  4349    25  2780  4357   275
     58  4349    25  2780  4357  1353    62 21412    13    66   448    62
   1731    11  1353    62 21412    13    66   448    62  1495    11  1353
     62 21412    13 16345    58  4349    25  2780 36563   198 50284   562
    570  1353    62 21412    13    66   448    62  1485   796]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13,    66,   448,
            62,    16,    11,  1353,    62, 21412,    13, 16345,    58,    18,
            25,    15, 36563,   198, 50284,   562,   570,  1353,    62, 21412,
            13,    66,   448,    62,    16,   796,   275, 10210,    62,    69,
          2860,     7,    64,    58,    22,    25,    19,  4357,   275,    58,
            22,    25,    19,  4357,  1353,    62, 21412,    13,    66,   448,
            62,    17,    11,  1353,    62, 21412,    13,    66,   448,    62,
            18,    11,  1353,    62, 21412,    13, 16345,    58,    22,    25,
            19, 36563,   198, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,    62,    17,   796,   275, 10210,    62,    69,  2860,
             7,    64,    58,  1157,    25,    23,  4357,   275,    58,  1157,
            25,    23,  4357,  1353,    62, 21412,    13,    66,   448,    62,
            19,    11,  1353,    62, 21412,    13,    66,   448,    62,    20,
            11,  1353,    62, 21412,    13, 16345,    58,  1157,    25,    23,
         36563,   198, 50284,   562,   570,  1353,    62, 21412,    13,    66,
           448,    62,    18,   796,   275, 10210,    62,    69,  2860,     7,
            64,    58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,
          1065,  4357,  1353,    62, 21412,    13,    66,   448,    62,    21,
            11,  1353,    62, 21412,    13,    66,   448,    62,    22,    11,
          1353,    62, 21412,    13, 16345,    58,  1314,    25,  1065, 36563,
           198, 50284,   562,   570,  1353,    62, 21412,    13,    66,   448,
            62,    19,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,  1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,
          4357,  1353,    62, 21412,    13,    66,   448,    62,    23,    11,
          1353,    62, 21412,    13,    66,   448,    62,    24,    11,  1353,
            62, 21412,    13, 16345,    58,  1129,    25,  1433, 36563,   198,
         50284,   562,   570,  1353,    62, 21412,    13,    66,   448,    62,
            20,   796,   275, 10210,    62,    69,  2860,     7,    64,    58,
          1954,    25,  1238,  4357,   275,    58,  1954,    25,  1238,  4357,
          1353,    62, 21412,    13,    66,   448,    62,   940,    11,  1353,
            62, 21412,    13,    66,   448,    62,  1157,    11,  1353,    62,
         21412,    13, 16345,    58,  1954,    25,  1238, 36563,   198, 50284,
           562,   570,  1353,    62, 21412,    13,    66,   448,    62,    21,
           796,   275, 10210,    62,    69,  2860,     7,    64,    58,  1983,
            25,  1731,  4357,   275,    58,  1983,    25,  1731,  4357,  1353,
            62, 21412,    13,    66,   448,    62,  1065,    11,  1353,    62,
         21412,    13,    66,   448,    62,  1485,    11,  1353,    62, 21412,
            13, 16345,    58,  1983,    25,  1731, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,    62,    22,   796,
           275, 10210,    62,    69,  2860,     7,    64,    58,  3132,    25,
          2078,  4357,   275,    58,  3132,    25,  2078,  4357,  1353,    62,
         21412,    13,    66,   448,    62,  1415,    11,  1353,    62, 21412,
            13,    66,   448,    62,  1314,    11,  1353,    62, 21412,    13,
         16345,    58,  3132,    25,  2078, 36563,   198, 50284,   562,   570,
          1353,    62, 21412,    13,    66,   448,    62,    23,   796,   275,
         10210,    62,    69,  2860,     7,    64,    58,  2327,    25,  2624,
          4357,   275,    58,  2327,    25,  2624,  4357,  1353,    62, 21412,
            13,    66,   448,    62,  1433,    11,  1353,    62, 21412,    13,
            66,   448,    62,  1558,    11,  1353,    62, 21412,    13, 16345,
            58,  2327,    25,  2624, 36563,   198, 50284,   562,   570,  1353,
            62, 21412,    13,    66,   448,    62,    24,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  2670,    25,  2623,  4357,
           275,    58,  2670,    25,  2623,  4357,  1353,    62, 21412,    13,
            66,   448,    62,  1507,    11,  1353,    62, 21412,    13,    66,
           448,    62,  1129,    11,  1353,    62, 21412,    13, 16345,    58,
          2670,    25,  2623, 36563,   198, 50284,   562,   570,  1353,    62,
         21412,    13,    66,   448,    62,   940,   796,   275, 10210,    62,
            69,  2860,     7,    64,    58,  3559,    25,  1821,  4357,   275,
            58,  3559,    25,  1821,  4357,  1353,    62, 21412,    13,    66,
           448,    62,  1238,    11,  1353,    62, 21412,    13,    66,   448,
            62,  2481,    11,  1353,    62, 21412,    13, 16345,    58,  3559,
            25,  1821, 36563,   198, 50284,   562,   570,  1353,    62, 21412,
            13,    66,   448,    62,  1157,   796,   275, 10210,    62,    69,
          2860,     7,    64,    58,  2857,    25,  2598,  4357,   275,    58,
          2857,    25,  2598,  4357,  1353,    62, 21412,    13,    66,   448,
            62,  1828,    11,  1353,    62, 21412,    13,    66,   448,    62,
          1954,    11,  1353,    62, 21412,    13, 16345,    58,  2857,    25,
          2598, 36563,   198, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,    62,  1065,   796,   275, 10210,    62,    69,  2860,
             7,    64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,
            25,  2780,  4357,  1353,    62, 21412,    13,    66,   448,    62,
          1731,    11,  1353,    62, 21412,    13,    66,   448,    62,  1495,
            11,  1353,    62, 21412,    13, 16345,    58,  4349,    25,  2780,
         36563,   198, 50284,   562,   570,  1353,    62, 21412,    13,    66,
           448,    62,  1485,   796]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.848268663
-------------------------------------------------------
MCTS Iteration:  69.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5682385 0.5682385 0.5682385 0.5682385 0.5682385 0.5682385 0.5682385
 0.5682385 0.7922725 0.7922725]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    15    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[   15  4357   269   259    11 42304    15    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout0, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout0, cout1, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout1, cout2, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout2, cout3, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout3, cout4, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout4, cout5, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout5, cout6, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout6, cout7, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout7, cout8, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout8, cout9, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout9, cout10, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout10, cout11, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout11, cout12, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout12, cout13, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout13, cout14, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout14, cout15, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout15, cout16, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout16, cout17, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout17, cout18, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout18, cout19, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout19, cout20, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout20, cout21, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout21
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    15    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    15    11 42304    16    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    16    11 42304    17    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    17
     11 42304    18    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    18    11 42304
     19    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    19    11 42304    20    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    20    11 42304    21    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    21    11 42304    22    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    22    11 42304    23    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    23
     11 42304    24    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304    24    11 42304
    940    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304   940    11 42304  1157    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1157    11 42304  1065    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1065    11 42304  1485    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1485    11 42304  1415    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1415
     11 42304  1314    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1314    11 42304
   1433    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1433    11 42304  1558    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1558    11 42304  1507    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1507    11 42304  1129    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1129    11 42304  1238    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  1238
     11 42304  2481    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  2481]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    15,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    15,
            11, 42304,    16,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    16,    11, 42304,    17,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    17,    11, 42304,
            18,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    18,    11, 42304,    19,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    19,    11, 42304,    20,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    20,
            11, 42304,    21,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    21,    11, 42304,    22,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    22,    11, 42304,
            23,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    23,    11, 42304,    24,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,    24,    11, 42304,   940,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,   940,
            11, 42304,  1157,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1157,    11, 42304,  1065,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1065,    11, 42304,
          1485,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1485,    11, 42304,  1415,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1415,    11, 42304,  1314,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1314,
            11, 42304,  1433,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1433,    11, 42304,  1558,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1558,    11, 42304,
          1507,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1507,    11, 42304,  1129,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1129,    11, 42304,  1238,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  1238,
            11, 42304,  2481,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  2481]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.84348180200004
-------------------------------------------------------
MCTS Iteration:  70.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5785109 0.5785109 0.5785109 0.5785109 0.5785109 0.5785109 0.5785109
 0.5785109 0.5785109 0.8040125]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[ 2860    15   357   198 50281    13    64     7    64    58]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50281    13    64     7
     64    58]]
SEQUENCE:  [[   18    25    15 46570   198 50282    13    65     7    65]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[   18    25    15 46570   198 50282    13    65     7    65]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
      .a(a[3:0]),
     .b(b[3:0]),
      .cin(cin),
     .cout(cout[0]),
     .sum(sum[3:0])
    );

    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin: adder
        bcd_fadd inst_fadd0 (
      .a(a[i+3:i]),
     .b(b[i+3:i]),
      .cin(cout[i-4]),
     .cout(cout[i]),
     .sum(sum[i+3:i])
    );
        end
    endgenerate

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50282    13    64     7
     64    58    18    25    15 46570   198 50283    13    65     7    65
     58    18    25    15 46570   198 50282    13 17879     7 17879   828
    198 50283    13    66   448     7    66   448    58    15 46570   198
  50283    13 16345     7 16345    58    18    25    15 12962   198 50284
   1776   628 50284  8612   378   198 50280  5235  7785  1312    26   198
  50280  1640   357    72   796   604    26  1312  1279  7337    26  1312
    796  1312  1343   604     8  2221    25   751   263   198 50280    65
  10210    62    69  2860   916    62    69  2860    15   357   198 50282
     13    64     7    64    58    72    10    18    25    72 46570   198
  50283    13    65     7    65    58    72    10    18    25    72 46570
    198 50282    13 17879     7    66   448    58    72    12    19 46570
    198 50283    13    66   448     7    66   448    58    72 46570   198
  50283    13 16345     7 16345    58    72    10    18    25    72 12962
    198 50284  1776   198 50280   437   198 50284   437  8612   378   198
    198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    15,   357,   198, 50281,    13,    64,     7,
            64,    58,    18,    25,    15, 46570,   198, 50282,    13,    65,
             7,    65,    58,    18,    25,    15, 46570,   198, 50281,    13,
         17879,     7, 17879,   828,   198, 50282,    13,    66,   448,     7,
            66,   448,    58,    15, 46570,   198, 50282,    13, 16345,     7,
         16345,    58,    18,    25,    15, 12962,   198, 50284,  1776,   628,
         50284,  8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198,
         50280,  1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,
            26,  1312,   796,  1312,  1343,   604,     8,  2221,    25,   751,
           263,   198, 50280,    65, 10210,    62,    69,  2860,   916,    62,
            69,  2860,    15,   357,   198, 50281,    13,    64,     7,    64,
            58,    72,    10,    18,    25,    72, 46570,   198, 50282,    13,
            65,     7,    65,    58,    72,    10,    18,    25,    72, 46570,
           198, 50281,    13, 17879,     7,    66,   448,    58,    72,    12,
            19, 46570,   198, 50282,    13,    66,   448,     7,    66,   448,
            58,    72, 46570,   198, 50282,    13, 16345,     7, 16345,    58,
            72,    10,    18,    25,    72, 12962,   198, 50284,  1776,   198,
         50280,   437,   198, 50284,   437,  8612,   378,   198,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  189
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
     .a(a[3:0]),
    .b(b[3:0]),
     .cin(cin),
    .cout(cout[0]),
    .sum(sum[3:0])
    );

    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin: adder
        bcd_fadd inst_fadd0 (
     .a(a[i+3:i]),
    .b(b[i+3:i]),
     .cin(cout[i-4]),
    .cout(cout[i]),
    .sum(sum[i+3:i])
    );
        end
    endgenerate

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.08528769899999
-------------------------------------------------------
MCTS Iteration:  71.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.588711 0.588711 0.588711 0.588711 0.588711 0.588711 0.588711 0.588711
 0.588711 0.588711]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
   3283    58    72    12    19  4357  3283    58    72  4357  2160    58
     72    10    18    25    72 36563   198 50280   437   198 50284   437
   8612   378   198 50284   562   570 42304   796  3283    58  2079 11208
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,  3283,    58,    72,    12,    19,  4357,
          3283,    58,    72,  4357,  2160,    58,    72,    10,    18,    25,
            72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  142
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.734378189999916
-------------------------------------------------------
MCTS Iteration:  72.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.42119163 0.5988406  0.5988406  0.5988406  0.5988406  0.5988406
 0.5988406  0.5988406  0.5988406  0.5988406 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640   357    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198 50280  1640   357    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1)
            full_adder FA (a[i+1], b[i+1], cin, carry[i], sum[i+1]);
    endgenerate
    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640   357    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8   198 50276 12853    62
  26676  9677   357    64    58    72    10    16  4357   275    58    72
     10    16  4357   269   259    11  3283    58    72  4357  2160    58
     72    10    16 36563   198 50284   437  8612   378   198 50284   562
    570 42304   796  3283    58  3064 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,   357,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
           198, 50276, 12853,    62, 26676,  9677,   357,    64,    58,    72,
            10,    16,  4357,   275,    58,    72,    10,    16,  4357,   269,
           259,    11,  3283,    58,    72,  4357,  2160,    58,    72,    10,
            16, 36563,   198, 50284,   437,  8612,   378,   198, 50284,   562,
           570, 42304,   796,  3283,    58,  3064, 11208,   198,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  89
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1)
            full_adder FA (a[i+1], b[i+1], cin, carry[i], sum[i+1]);
    endgenerate
    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.09058775199992
-------------------------------------------------------
MCTS Iteration:  73.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.43013436 0.43013436 0.60890114 0.60890114 0.60890114 0.60890114
 0.60890114 0.60890114 0.60890114 0.60890114]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284    65 10210    62    69  2860   277    17
    357    64    58    22    25    19  4357   275    58    22    25    19
   4357   269    58    15  4357   269    58    16  4357  2160    58    22
     25    19 36563   198 50284    65 10210    62    69  2860   277    18
    357    64    58  1157    25    23  4357   275    58  1157    25    23
   4357   269    58    16  4357   269    58    17  4357  2160    58  1157
     25    23 36563   198 50284    65 10210    62    69  2860   277    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357   269    58    17  4357   269    58    18  4357  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   277    20
    357    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357   269    58    18  4357 42304    11  2160    58  1129    25  1433
  36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   277,    17,   357,    64,    58,    22,
            25,    19,  4357,   275,    58,    22,    25,    19,  4357,   269,
            58,    15,  4357,   269,    58,    16,  4357,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           277,    18,   357,    64,    58,  1157,    25,    23,  4357,   275,
            58,  1157,    25,    23,  4357,   269,    58,    16,  4357,   269,
            58,    17,  4357,  2160,    58,  1157,    25,    23, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,    19,   357,    64,
            58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,  1065,
          4357,   269,    58,    17,  4357,   269,    58,    18,  4357,  2160,
            58,  1314,    25,  1065, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,    20,   357,    64,    58,  1129,    25,  1433,
          4357,   275,    58,  1129,    25,  1433,  4357,   269,    58,    18,
          4357, 42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198,
         50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  192
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.242391236000003
-------------------------------------------------------
MCTS Iteration:  74.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.43901676 0.43901676 0.43901676 0.61889386 0.61889386 0.61889386
 0.61889386 0.61889386 0.61889386 0.61889386]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
   3283    58    72    12    19  4357  3283    58    72  4357  2160    58
     72    10    18    25    72 36563   198 50280   437   198 50284   437
   8612   378   198 50284   562   570 42304   796  3283    58  2079 11208
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,  3283,    58,    72,    12,    19,  4357,
          3283,    58,    72,  4357,  2160,    58,    72,    10,    18,    25,
            72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  142
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.734031861999938
-------------------------------------------------------
MCTS Iteration:  75.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.44784015 0.44784015 0.44784015 0.44784015 0.6288202  0.6288202
 0.6288202  0.6288202  0.6288202  0.6288202 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640   357    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198 50280  1640   357    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin
            bcd_fadd fadd(a[3*i+:3], b[3*i+:3], carry[i], carry[i+1], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640   357    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8  2221   198 50276    65
  10210    62    69  2860   277  2860     7    64    58    18     9    72
     10    25    18  4357   275    58    18     9    72    10    25    18
   4357  3283    58    72  4357  3283    58    72    10    16  4357  2160
     58    18     9    72    10    25    18 36563   198 50280   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   3064 11208   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,   357,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
          2221,   198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,
             7,    64,    58,    18,     9,    72,    10,    25,    18,  4357,
           275,    58,    18,     9,    72,    10,    25,    18,  4357,  3283,
            58,    72,  4357,  3283,    58,    72,    10,    16,  4357,  2160,
            58,    18,     9,    72,    10,    25,    18, 36563,   198, 50280,
           437,   198, 50284,   437,  8612,   378,   198, 50284,   562,   570,
         42304,   796,  3283,    58,  3064, 11208,   198, 50284,   198,   437,
         21412]], device='cuda:0')
Checking if done:
tokens generated:  109
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin
            bcd_fadd fadd(a[3*i+:3], b[3*i+:3], carry[i], carry[i+1], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  14.078689551000025
-------------------------------------------------------
MCTS Iteration:  76.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.45660573 0.45660573 0.45660573 0.45660573 0.45660573 0.6386814
 0.6386814  0.6386814  0.6386814  0.6386814 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.92861570499986
-------------------------------------------------------
MCTS Iteration:  77.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.46531445 0.46531445 0.46531445 0.46531445 0.46531445 0.46531445
 0.64847875 0.64847875 0.64847875 0.64847875]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    15]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd1 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd2 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd3 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd4 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11   269    58    15  4357  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    22    25    19  4357   275    58    22
     25    19  4357   269    58    15  4357   269    58    16  4357  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    277  2860    17   357    64    58  1157    25    23  4357   275    58
   1157    25    23  4357   269    58    16  4357   269    58    17  4357
   2160    58  1157    25    23 36563   198 50284    65 10210    62    69
   2860   277  2860    18   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357   269    58    17  4357   269    58    18
   4357  2160    58  1314    25  1065 36563   198 50284    65 10210    62
     69  2860   277  2860    19   357    64    58  1129    25  1433  4357
    275    58  1129    25  1433  4357   269    58    18  4357 42304    11
   2160    58  1129    25  1433 36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    15,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,   269,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   277,  2860,    16,   357,    64,
            58,    22,    25,    19,  4357,   275,    58,    22,    25,    19,
          4357,   269,    58,    15,  4357,   269,    58,    16,  4357,  2160,
            58,    22,    25,    19, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,  2860,    17,   357,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357,   269,    58,
            16,  4357,   269,    58,    17,  4357,  2160,    58,  1157,    25,
            23, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    18,   357,    64,    58,  1314,    25,  1065,  4357,   275,
            58,  1314,    25,  1065,  4357,   269,    58,    17,  4357,   269,
            58,    18,  4357,  2160,    58,  1314,    25,  1065, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,  2860,    19,   357,
            64,    58,  1129,    25,  1433,  4357,   275,    58,  1129,    25,
          1433,  4357,   269,    58,    18,  4357, 42304,    11,  2160,    58,
          1129,    25,  1433, 36563,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  197
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd fadd1 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd fadd2 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd fadd3 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd fadd4 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.524224515000014
-------------------------------------------------------
MCTS Iteration:  78.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4739675 0.4739675 0.4739675 0.4739675 0.4739675 0.4739675 0.4739675
 0.6582135 0.6582135 0.6582135]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.sum[3:0]);
    
    assign top_module.sum[399:4] = a[399:4] + b[399:4] + {4{cin}};
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13 16345    58    18    25    15 36563
    198 50284   198 50284   562   570  1353    62 21412    13 16345    58
  28771    25    19    60   796   257    58 28771    25    19    60  1343
    275    58 28771    25    19    60  1343  1391    19    90 17879 11709
     26   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13, 16345,    58,
            18,    25,    15, 36563,   198, 50284,   198, 50284,   562,   570,
          1353,    62, 21412,    13, 16345,    58, 28771,    25,    19,    60,
           796,   257,    58, 28771,    25,    19,    60,  1343,   275,    58,
         28771,    25,    19,    60,  1343,  1391,    19,    90, 17879, 11709,
            26,   198, 50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  84
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.sum[3:0]);
    
    assign top_module.sum[399:4] = a[399:4] + b[399:4] + {4{cin}};
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  12.841927194999926
-------------------------------------------------------
MCTS Iteration:  79.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.48256606 0.48256606 0.48256606 0.48256606 0.48256606 0.48256606
 0.48256606 0.48256606 0.66788685 0.66788685]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.88207990900014
-------------------------------------------------------
MCTS Iteration:  80.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4911111 0.4911111 0.4911111 0.4911111 0.4911111 0.4911111 0.4911111
 0.4911111 0.4911111 0.6775   ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[ 2860    15   357   198 50281    13    64     7    64    58]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50281    13    64     7
     64    58]]
SEQUENCE:  [[   18    25    15 46570   198 50282    13    65     7    65]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[   18    25    15 46570   198 50282    13    65     7    65]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
      .a(a[3:0]),
     .b(b[3:0]),
      .cin(cin),
     .cout(cout[0]),
     .sum(sum[3:0])
    );
    
    generate
        genvar i;
        for(i=1;i<400;i=i+1) begin: adder
        bcd_fadd inst_fadd(
       .a(a[(i*4)-1:(i-1)*4]),
       .b(b[(i*4)-1:(i-1)*4]),
       .cin(cout[i-1]),
       .cout(cout[i]),
       .sum(sum[(i*4)-1:(i-1)*4])
        );
        end
    endgenerate

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50282    13    64     7
     64    58    18    25    15 46570   198 50283    13    65     7    65
     58    18    25    15 46570   198 50282    13 17879     7 17879   828
    198 50283    13    66   448     7    66   448    58    15 46570   198
  50283    13 16345     7 16345    58    18    25    15 12962   198 50284
   1776   198 50284   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640     7    72    28    16    26    72    27  7029
     26    72    28    72    10    16     8  2221    25   751   263   198
  50280    65 10210    62    69  2860   916    62    69  2860     7   198
  50281    13    64     7    64    58     7    72     9    19 13219    16
  37498    72    12    16 27493    19 46570   198 50281    13    65     7
     65    58     7    72     9    19 13219    16 37498    72    12    16
  27493    19 46570   198 50281    13 17879     7    66   448    58    72
     12    16 46570   198 50281    13    66   448     7    66   448    58
     72 46570   198 50281    13 16345     7 16345    58     7    72     9
     19 13219    16 37498    72    12    16 27493    19 12962   198 50280
   1776   198 50280   437   198 50284   437  8612   378   198   198   437
  21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    15,   357,   198, 50281,    13,    64,     7,
            64,    58,    18,    25,    15, 46570,   198, 50282,    13,    65,
             7,    65,    58,    18,    25,    15, 46570,   198, 50281,    13,
         17879,     7, 17879,   828,   198, 50282,    13,    66,   448,     7,
            66,   448,    58,    15, 46570,   198, 50282,    13, 16345,     7,
         16345,    58,    18,    25,    15, 12962,   198, 50284,  1776,   198,
         50284,   198, 50284,  8612,   378,   198, 50280,  5235,  7785,  1312,
            26,   198, 50280,  1640,     7,    72,    28,    16,    26,    72,
            27,  7029,    26,    72,    28,    72,    10,    16,     8,  2221,
            25,   751,   263,   198, 50280,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,     7,   198, 50280,    13,    64,     7,
            64,    58,     7,    72,     9,    19, 13219,    16, 37498,    72,
            12,    16, 27493,    19, 46570,   198, 50280,    13,    65,     7,
            65,    58,     7,    72,     9,    19, 13219,    16, 37498,    72,
            12,    16, 27493,    19, 46570,   198, 50280,    13, 17879,     7,
            66,   448,    58,    72,    12,    16, 46570,   198, 50280,    13,
            66,   448,     7,    66,   448,    58,    72, 46570,   198, 50280,
            13, 16345,     7, 16345,    58,     7,    72,     9,    19, 13219,
            16, 37498,    72,    12,    16, 27493,    19, 12962,   198, 50280,
          1776,   198, 50280,   437,   198, 50284,   437,  8612,   378,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  211
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
     .a(a[3:0]),
    .b(b[3:0]),
     .cin(cin),
    .cout(cout[0]),
    .sum(sum[3:0])
    );
    
    generate
        genvar i;
        for(i=1;i<400;i=i+1) begin: adder
        bcd_fadd inst_fadd(
      .a(a[(i*4)-1:(i-1)*4]),
      .b(b[(i*4)-1:(i-1)*4]),
      .cin(cout[i-1]),
      .cout(cout[i]),
      .sum(sum[(i*4)-1:(i-1)*4])
        );
        end
    endgenerate

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  19.213273613999945
-------------------------------------------------------
MCTS Iteration:  81.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.49960345 0.49960345 0.49960345 0.49960345 0.49960345 0.49960345
 0.49960345 0.49960345 0.49960345 0.49960345]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640   357    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198 50280  1640   357    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin: adder
            bcd_fadd f(a[3*i+:3], b[3*i+:3], carry[i], carry[i+1], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640   357    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8  2221    25   751   263
    198 50276    65 10210    62    69  2860   277     7    64    58    18
      9    72    10    25    18  4357   275    58    18     9    72    10
     25    18  4357  3283    58    72  4357  3283    58    72    10    16
   4357  2160    58    18     9    72    10    25    18 36563   198 50280
    437   198 50284   437  8612   378   198 50284   562   570 42304   796
   3283    58  3064 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,   357,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
          2221,    25,   751,   263,   198, 50276,    65, 10210,    62,    69,
          2860,   277,     7,    64,    58,    18,     9,    72,    10,    25,
            18,  4357,   275,    58,    18,     9,    72,    10,    25,    18,
          4357,  3283,    58,    72,  4357,  3283,    58,    72,    10,    16,
          4357,  2160,    58,    18,     9,    72,    10,    25,    18, 36563,
           198, 50280,   437,   198, 50284,   437,  8612,   378,   198, 50284,
           562,   570, 42304,   796,  3283,    58,  3064, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  110
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1) begin: adder
            bcd_fadd f(a[3*i+:3], b[3*i+:3], carry[i], carry[i+1], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  14.134959299000002
-------------------------------------------------------
MCTS Iteration:  82.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.35723984 0.5080442  0.5080442  0.5080442  0.5080442  0.5080442
 0.5080442  0.5080442  0.5080442  0.5080442 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    15]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8  2221  1058   751   263
    198 50276    65 10210    62    69  2860   277  2860   357    64    58
     72    10    18    25    72  4357   275    58    72    10    18    25
     72  4357  3283    58    72    12    19  4357  3283    58    72  4357
   2160    58    72    10    18    25    72 36563   198 50280   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    15,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,
           198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,   357,
            64,    58,    72,    10,    18,    25,    72,  4357,   275,    58,
            72,    10,    18,    25,    72,  4357,  3283,    58,    72,    12,
            19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,    10,
            18,    25,    72, 36563,   198, 50280,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  144
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.826497770999822
-------------------------------------------------------
MCTS Iteration:  83.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.36479092 0.36479092 0.5164344  0.5164344  0.5164344  0.5164344
 0.5164344  0.5164344  0.5164344  0.5164344 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284    65 10210    62    69  2860   277    17
    357    64    58    22    25    19  4357   275    58    22    25    19
   4357   269    58    15  4357   269    58    16  4357  2160    58    22
     25    19 36563   198 50284    65 10210    62    69  2860   277    18
    357    64    58  1157    25    23  4357   275    58  1157    25    23
   4357   269    58    16  4357   269    58    17  4357  2160    58  1157
     25    23 36563   198 50284    65 10210    62    69  2860   277    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357   269    58    17  4357   269    58    18  4357  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   277    20
    357    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357   269    58    18  4357 42304    11  2160    58  1129    25  1433
  36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   277,    17,   357,    64,    58,    22,
            25,    19,  4357,   275,    58,    22,    25,    19,  4357,   269,
            58,    15,  4357,   269,    58,    16,  4357,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           277,    18,   357,    64,    58,  1157,    25,    23,  4357,   275,
            58,  1157,    25,    23,  4357,   269,    58,    16,  4357,   269,
            58,    17,  4357,  2160,    58,  1157,    25,    23, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   277,    19,   357,    64,
            58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,  1065,
          4357,   269,    58,    17,  4357,   269,    58,    18,  4357,  2160,
            58,  1314,    25,  1065, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   277,    20,   357,    64,    58,  1129,    25,  1433,
          4357,   275,    58,  1129,    25,  1433,  4357,   269,    58,    18,
          4357, 42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198,
         50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  192
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd f1 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd f2 (a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd f3 (a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd f4 (a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd f5 (a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.248496969000144
-------------------------------------------------------
MCTS Iteration:  84.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.37229717 0.37229717 0.37229717 0.5247745  0.5247745  0.5247745
 0.5247745  0.5247745  0.5247745  0.5247745 ]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8  2221  1058   751   263   198
  50276    65 10210    62    69  2860   916   357    64    58    72    10
     18    25    72  4357   275    58    72    10    18    25    72  4357
   3283    58    72    12    19  4357  3283    58    72  4357  2160    58
     72    10    18    25    72 36563   198 50280   437   198 50284   437
   8612   378   198 50284   562   570 42304   796  3283    58  2079 11208
    198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,   357,    64,    58,
            72,    10,    18,    25,    72,  4357,   275,    58,    72,    10,
            18,    25,    72,  4357,  3283,    58,    72,    12,    19,  4357,
          3283,    58,    72,  4357,  2160,    58,    72,    10,    18,    25,
            72, 36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,
           198, 50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  142
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.747020668000005
-------------------------------------------------------
MCTS Iteration:  85.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3797593  0.3797593  0.3797593  0.3797593  0.53306586 0.53306586
 0.53306586 0.53306586 0.53306586 0.53306586]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640   357    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198 50280  1640   357    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1)
            bcd_fadd f(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
    endgenerate
    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640   357    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8   198 50276    65 10210
     62    69  2860   277     7    64    58    18     9    72    10    25
     18  4357   275    58    18     9    72    10    25    18  4357   269
    259    11  3283    58    72  4357  2160    58    18     9    72    10
     25    18 36563   198 50284   437  8612   378   198 50284   562   570
  42304   796  3283    58  3064 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,   357,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
           198, 50276,    65, 10210,    62,    69,  2860,   277,     7,    64,
            58,    18,     9,    72,    10,    25,    18,  4357,   275,    58,
            18,     9,    72,    10,    25,    18,  4357,   269,   259,    11,
          3283,    58,    72,  4357,  2160,    58,    18,     9,    72,    10,
            25,    18, 36563,   198, 50284,   437,  8612,   378,   198, 50284,
           562,   570, 42304,   796,  3283,    58,  3064, 11208,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  100
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for (i=0; i<100; i=i+1)
            bcd_fadd f(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
    endgenerate
    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.642479874999935
-------------------------------------------------------
MCTS Iteration:  86.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3871783 0.3871783 0.3871783 0.3871783 0.3871783 0.5413093 0.5413093
 0.5413093 0.5413093 0.5413093]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.913702919000116
-------------------------------------------------------
MCTS Iteration:  87.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.39455473 0.39455473 0.39455473 0.39455473 0.39455473 0.39455473
 0.5495052  0.5495052  0.5495052  0.5495052 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    62    69]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  add0 (
       .a(a[ 1
LLMEstimate:  add0 (
       .a(a[ 1
LLMEstimate:  add0 (a[3:0], b 1
LLMEstimate:  add0 (a[3:0], b 1
LLMEstimate:  add0 (a[3:0], b 1
LLMEstimate:  add0 (a[3:0], b 1
LLMEstimate:  add0 (a[3:0], b 1
LLMEstimate:  add0 (a[3:0], b 1
LLMEstimate:  add0 (
       .a(a[ 1
LLMEstimate:  add0 (a[3:0], b 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   916
     62    69]]
SEQUENCE:  [[2860   15  357   64   58   18   25   15 4357  275]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[2860   15  357   64   58   18   25   15 4357  275]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd inst_fadd0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst_fadd (a[i+3:i], b[i+3:i], c[i-4], c[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = c[399];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   916
     62    69  2860    15   357    64    58    18    25    15  4357   275
     58    18    25    15  4357   269   259    11   269    58    15  4357
   2160    58    18    25    15 36563   198 50284  8612   378   198 50280
   5235  7785  1312    26   198 50280  1640   357    72   796   604    26
   1312  1279  7337    26  1312   796  1312  1343   604     8  2221  1058
    751   263   198 50276    65 10210    62    69  2860   916    62    69
   2860   357    64    58    72    10    18    25    72  4357   275    58
     72    10    18    25    72  4357   269    58    72    12    19  4357
    269    58    72  4357  2160    58    72    10    18    25    72 36563
    198 50280   437   198 50284   437  8612   378   198 50284   562   570
  42304   796   269    58 28771 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    15,   357,    64,    58,    18,    25,    15,
          4357,   275,    58,    18,    25,    15,  4357,   269,   259,    11,
           269,    58,    15,  4357,  2160,    58,    18,    25,    15, 36563,
           198, 50284,  8612,   378,   198, 50280,  5235,  7785,  1312,    26,
           198, 50280,  1640,   357,    72,   796,   604,    26,  1312,  1279,
          7337,    26,  1312,   796,  1312,  1343,   604,     8,  2221,  1058,
           751,   263,   198, 50276,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,   357,    64,    58,    72,    10,    18,    25,
            72,  4357,   275,    58,    72,    10,    18,    25,    72,  4357,
           269,    58,    72,    12,    19,  4357,   269,    58,    72,  4357,
          2160,    58,    72,    10,    18,    25,    72, 36563,   198, 50280,
           437,   198, 50284,   437,  8612,   378,   198, 50284,   562,   570,
         42304,   796,   269,    58, 28771, 11208,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  148
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd inst_fadd0 (a[3:0], b[3:0], cin, c[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd inst_fadd (a[i+3:i], b[i+3:i], c[i-4], c[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = c[399];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  16.049323016000017
-------------------------------------------------------
MCTS Iteration:  88.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.40188944 0.40188944 0.40188944 0.40188944 0.40188944 0.40188944
 0.40188944 0.5576549  0.5576549  0.5576549 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.sum[3:0]);
    assign top_module.sum = a + b + cin;

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13 16345    58    18    25    15 36563
    198 50284   562   570  1353    62 21412    13 16345   796   257  1343
    275  1343   269   259    26   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13, 16345,    58,
            18,    25,    15, 36563,   198, 50284,   562,   570,  1353,    62,
         21412,    13, 16345,   796,   257,  1343,   275,  1343,   269,   259,
            26,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  63
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.sum[3:0]);
    assign top_module.sum = a + b + cin;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  11.785047184000177
-------------------------------------------------------
MCTS Iteration:  89.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4091829  0.4091829  0.4091829  0.4091829  0.4091829  0.4091829
 0.4091829  0.4091829  0.56575876 0.56575876]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    16    11  2160    58]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[   15  4357   269   259    11 42304    16    11  2160    58]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout1, sum[3:0]);
    bcd_fadd inst2 (a[7:4], b[7:4], cout1, cout2, sum[7:4]);
    bcd_fadd inst3 (a[11:8], b[11:8], cout2, cout3, sum[11:8]);
    bcd_fadd inst4 (a[15:12], b[15:12], cout3, cout4, sum[15:12]);
    bcd_fadd inst5 (a[19:16], b[19:16], cout4, cout5, sum[19:16]);
    bcd_fadd inst6 (a[23:20], b[23:20], cout5, cout6, sum[23:20]);
    bcd_fadd inst7 (a[27:24], b[27:24], cout6, cout7, sum[27:24]);
    bcd_fadd inst8 (a[31:28], b[31:28], cout7, cout8, sum[31:28]);
    bcd_fadd inst9 (a[35:32], b[35:32], cout8, cout9, sum[35:32]);
    bcd_fadd inst10 (a[39:36], b[39:36], cout9, cout10, sum[39:36]);
    bcd_fadd inst11 (a[43:40], b[43:40], cout10, cout11, sum[43:40]);
    bcd_fadd inst12 (a[47:44], b[47:44], cout11, cout12, sum[47:44]);
    bcd_fadd inst13 (a[51:48], b[51:48], cout12, cout13, sum[51:48]);
    bcd_fadd inst14 (a[55:52], b[55:52], cout13, cout14, sum[55:52]);
    bcd_fadd inst15 (a[59:56], b[59:56], cout14, cout15, sum[59:56]);
    bcd_fadd inst16 (a[63:60], b[63:60], cout15, cout16, sum[63:60]);
    bcd_fadd inst17 (a[67:64], b[67:64], cout16, cout17, sum[67:64]);
    bcd_fadd inst18 (a[71:68], b[71:68], cout17, cout18, sum[71:68]);
    bcd_fadd inst19 (a[75:72], b[75:72], cout18, cout19, sum[75:72]);
    bcd_fadd inst20 (a[79:76], b[79:76], cout19, cout20, sum[79:76]);
    bcd_fadd inst21 (a[83:80], b[83:80], cout20, cout21, sum[83:80]);
    bcd_fadd inst22 (a[87:84], b[87:84], cout21, cout22, sum[87:84]);
    bcd_fadd inst23 (a[91:88], b[91:88], cout22
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    16    11  2160    58
     18    25    15 36563   198 50284    65 10210    62    69  2860   916
     17   357    64    58    22    25    19  4357   275    58    22    25
     19  4357 42304    16    11 42304    17    11  2160    58    22    25
     19 36563   198 50284    65 10210    62    69  2860   916    18   357
     64    58  1157    25    23  4357   275    58  1157    25    23  4357
  42304    17    11 42304    18    11  2160    58  1157    25    23 36563
    198 50284    65 10210    62    69  2860   916    19   357    64    58
   1314    25  1065  4357   275    58  1314    25  1065  4357 42304    18
     11 42304    19    11  2160    58  1314    25  1065 36563   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    19    11 42304
     20    11  2160    58  1129    25  1433 36563   198 50284    65 10210
     62    69  2860   916    21   357    64    58  1954    25  1238  4357
    275    58  1954    25  1238  4357 42304    20    11 42304    21    11
   2160    58  1954    25  1238 36563   198 50284    65 10210    62    69
   2860   916    22   357    64    58  1983    25  1731  4357   275    58
   1983    25  1731  4357 42304    21    11 42304    22    11  2160    58
   1983    25  1731 36563   198 50284    65 10210    62    69  2860   916
     23   357    64    58  3132    25  2078  4357   275    58  3132    25
   2078  4357 42304    22    11 42304    23    11  2160    58  3132    25
   2078 36563   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    23    11 42304    24    11  2160    58  2327    25  2624 36563
    198 50284    65 10210    62    69  2860   916   940   357    64    58
   2670    25  2623  4357   275    58  2670    25  2623  4357 42304    24
     11 42304   940    11  2160    58  2670    25  2623 36563   198 50284
     65 10210    62    69  2860   916  1157   357    64    58  3559    25
   1821  4357   275    58  3559    25  1821  4357 42304   940    11 42304
   1157    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916  1065   357    64    58  2857    25  2598  4357
    275    58  2857    25  2598  4357 42304  1157    11 42304  1065    11
   2160    58  2857    25  2598 36563   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1065    11 42304  1485    11  2160    58
   4349    25  2780 36563   198 50284    65 10210    62    69  2860   916
   1415   357    64    58  2816    25  4309  4357   275    58  2816    25
   4309  4357 42304  1485    11 42304  1415    11  2160    58  2816    25
   4309 36563   198 50284    65 10210    62    69  2860   916  1314   357
     64    58  3270    25  3980  4357   275    58  3270    25  3980  4357
  42304  1415    11 42304  1314    11  2160    58  3270    25  3980 36563
    198 50284    65 10210    62    69  2860   916  1433   357    64    58
   5066    25  1899  4357   275    58  5066    25  1899  4357 42304  1314
     11 42304  1433    11  2160    58  5066    25  1899 36563   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1433    11 42304
   1558    11  2160    58  3134    25  2414 36563   198 50284    65 10210
     62    69  2860   916  1507   357    64    58  4869    25  3104  4357
    275    58  4869    25  3104  4357 42304  1558    11 42304  1507    11
   2160    58  4869    25  3104 36563   198 50284    65 10210    62    69
   2860   916  1129   357    64    58  2425    25  4761  4357   275    58
   2425    25  4761  4357 42304  1507    11 42304  1129    11  2160    58
   2425    25  4761 36563   198 50284    65 10210    62    69  2860   916
   1238   357    64    58  3720    25  4304  4357   275    58  3720    25
   4304  4357 42304  1129    11 42304  1238    11  2160    58  3720    25
   4304 36563   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1238    11 42304  2481    11  2160    58  5999    25  1795 36563
    198 50284    65 10210    62    69  2860   916  1828   357    64    58
   5774    25  5705  4357   275    58  5774    25  5705  4357 42304  2481
     11 42304  1828    11  2160    58  5774    25  5705 36563   198 50284
     65 10210    62    69  2860   916  1954   357    64    58  6420    25
   3459  4357   275    58  6420    25  3459  4357 42304  1828]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    16,    11,
          2160,    58,    18,    25,    15, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    17,   357,    64,    58,    22,    25,
            19,  4357,   275,    58,    22,    25,    19,  4357, 42304,    16,
            11, 42304,    17,    11,  2160,    58,    22,    25,    19, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    18,   357,
            64,    58,  1157,    25,    23,  4357,   275,    58,  1157,    25,
            23,  4357, 42304,    17,    11, 42304,    18,    11,  2160,    58,
          1157,    25,    23, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    19,   357,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357, 42304,    18,    11, 42304,
            19,    11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    20,   357,    64,    58,
          1129,    25,  1433,  4357,   275,    58,  1129,    25,  1433,  4357,
         42304,    19,    11, 42304,    20,    11,  2160,    58,  1129,    25,
          1433, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            21,   357,    64,    58,  1954,    25,  1238,  4357,   275,    58,
          1954,    25,  1238,  4357, 42304,    20,    11, 42304,    21,    11,
          2160,    58,  1954,    25,  1238, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    22,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    21,
            11, 42304,    22,    11,  2160,    58,  1983,    25,  1731, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    23,   357,
            64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,
          2078,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    58,
          3132,    25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    24,   357,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357, 42304,    23,    11, 42304,
            24,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,   940,   357,    64,    58,
          2670,    25,  2623,  4357,   275,    58,  2670,    25,  2623,  4357,
         42304,    24,    11, 42304,   940,    11,  2160,    58,  2670,    25,
          2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,   940,    11, 42304,  1157,    11,
          2160,    58,  3559,    25,  1821, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1065,   357,    64,    58,  2857,    25,
          2598,  4357,   275,    58,  2857,    25,  2598,  4357, 42304,  1157,
            11, 42304,  1065,    11,  2160,    58,  2857,    25,  2598, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1485,   357,
            64,    58,  4349,    25,  2780,  4357,   275,    58,  4349,    25,
          2780,  4357, 42304,  1065,    11, 42304,  1485,    11,  2160,    58,
          4349,    25,  2780, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357, 42304,  1485,    11, 42304,
          1415,    11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1314,   357,    64,    58,
          3270,    25,  3980,  4357,   275,    58,  3270,    25,  3980,  4357,
         42304,  1415,    11, 42304,  1314,    11,  2160,    58,  3270,    25,
          3980, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1433,   357,    64,    58,  5066,    25,  1899,  4357,   275,    58,
          5066,    25,  1899,  4357, 42304,  1314,    11, 42304,  1433,    11,
          2160,    58,  5066,    25,  1899, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1558,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,  1433,
            11, 42304,  1558,    11,  2160,    58,  3134,    25,  2414, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,
            64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,
          3104,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,    58,
          4869,    25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1129,   357,    64,    58,  2425,    25,  4761,  4357,
           275,    58,  2425,    25,  4761,  4357, 42304,  1507,    11, 42304,
          1129,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1238,   357,    64,    58,
          3720,    25,  4304,  4357,   275,    58,  3720,    25,  4304,  4357,
         42304,  1129,    11, 42304,  1238,    11,  2160,    58,  3720,    25,
          4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1238,    11, 42304,  2481,    11,
          2160,    58,  5999,    25,  1795, 36563,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1828,   357,    64,    58,  5774,    25,
          5705,  4357,   275,    58,  5774,    25,  5705,  4357, 42304,  2481,
            11, 42304,  1828,    11,  2160,    58,  5774,    25,  5705, 36563,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1954,   357,
            64,    58,  6420,    25,  3459,  4357,   275,    58,  6420,    25,
          3459,  4357, 42304,  1828]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.911474624999755
-------------------------------------------------------
MCTS Iteration:  90.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.41643608 0.41643608 0.41643608 0.41643608 0.41643608 0.41643608
 0.41643608 0.41643608 0.41643608 0.5738179 ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[ 2860    15   357   198 50281    13    64     7    64    58]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
LLMEstimate:  3:0]),
      .b(b 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50281    13    64     7
     64    58]]
SEQUENCE:  [[   18    25    15 46570   198 50282    13    65     7    65]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[   18    25    15 46570   198 50282    13    65     7    65]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
      .a(a[3:0]),
     .b(b[3:0]),
      .cin(cin),
     .cout(cout[0]),
     .sum(sum[3:0])
    );
    
    assign cout[1] = cout[0] | (a[3] & b[3]);
    
    generate
        genvar i;
        for(i=4; i<400; i=i+4) begin: adder
            bcd_fadd inst_fadd0 (
               .a(a[i+3:i]),
               .b(b[i+3:i]),
               .cin(cout[i-4]),
               .cout(cout[i]),
               .sum(sum[i+3:i])
            );
        end
    endgenerate
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50282    13    64     7
     64    58    18    25    15 46570   198 50283    13    65     7    65
     58    18    25    15 46570   198 50282    13 17879     7 17879   828
    198 50283    13    66   448     7    66   448    58    15 46570   198
  50283    13 16345     7 16345    58    18    25    15 12962   198 50284
   1776   198 50284   198 50284   562   570 42304    58    16    60   796
  42304    58    15    60   930   357    64    58    18    60  1222   275
     58    18 36563   198 50284   198 50284  8612   378   198 50280  5235
   7785  1312    26   198 50280  1640     7    72    28    19    26  1312
     27  7029    26  1312    28    72    10    19     8  2221    25   751
    263   198 50276    65 10210    62    69  2860   916    62    69  2860
     15   357   198 50273    13    64     7    64    58    72    10    18
     25    72 46570   198 50273    13    65     7    65    58    72    10
     18    25    72 46570   198 50273    13 17879     7    66   448    58
     72    12    19 46570   198 50273    13    66   448     7    66   448
     58    72 46570   198 50273    13 16345     7 16345    58    72    10
     18    25    72 12962   198 50276  1776   198 50280   437   198 50284
    437  8612   378   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    15,   357,   198, 50281,    13,    64,     7,
            64,    58,    18,    25,    15, 46570,   198, 50282,    13,    65,
             7,    65,    58,    18,    25,    15, 46570,   198, 50281,    13,
         17879,     7, 17879,   828,   198, 50282,    13,    66,   448,     7,
            66,   448,    58,    15, 46570,   198, 50282,    13, 16345,     7,
         16345,    58,    18,    25,    15, 12962,   198, 50284,  1776,   198,
         50284,   198, 50284,   562,   570, 42304,    58,    16,    60,   796,
         42304,    58,    15,    60,   930,   357,    64,    58,    18,    60,
          1222,   275,    58,    18, 36563,   198, 50284,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
             7,    72,    28,    19,    26,  1312,    27,  7029,    26,  1312,
            28,    72,    10,    19,     8,  2221,    25,   751,   263,   198,
         50276,    65, 10210,    62,    69,  2860,   916,    62,    69,  2860,
            15,   357,   198, 50272,    13,    64,     7,    64,    58,    72,
            10,    18,    25,    72, 46570,   198, 50272,    13,    65,     7,
            65,    58,    72,    10,    18,    25,    72, 46570,   198, 50272,
            13, 17879,     7,    66,   448,    58,    72,    12,    19, 46570,
           198, 50272,    13,    66,   448,     7,    66,   448,    58,    72,
         46570,   198, 50272,    13, 16345,     7, 16345,    58,    72,    10,
            18,    25,    72, 12962,   198, 50276,  1776,   198, 50280,   437,
           198, 50284,   437,  8612,   378,   198, 50284,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  218
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (
     .a(a[3:0]),
    .b(b[3:0]),
     .cin(cin),
    .cout(cout[0]),
    .sum(sum[3:0])
    );
    
    assign cout[1] = cout[0] | (a[3] & b[3]);
    
    generate
        genvar i;
        for(i=4; i<400; i=i+4) begin: adder
            bcd_fadd inst_fadd0 (
              .a(a[i+3:i]),
              .b(b[i+3:i]),
              .cin(cout[i-4]),
              .cout(cout[i]),
              .sum(sum[i+3:i])
            );
        end
    endgenerate
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  19.5805165769998
-------------------------------------------------------
MCTS Iteration:  91.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.42364955 0.42364955 0.42364955 0.42364955 0.42364955 0.42364955
 0.42364955 0.42364955 0.42364955 0.42364955]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640     7    72    28    15    26    72    27]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198 50280  1640     7    72    28    15    26    72    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0;i<100;i=i+1)
            full_adder fa(a[i+1:i],b[i+1:i],carry[i],sum[i+1:i],carry[i+1]);
    endgenerate

    assign cout = carry[100];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640     7    72    28    15    26    72    27
   3064    26    72    28    72    10    16     8   198 50276 12853    62
  26676 24685     7    64    58    72    10    16    25    72  4357    65
     58    72    10    16    25    72  4357 34993    58    72  4357 16345
     58    72    10    16    25    72  4357 34993    58    72    10    16
  36563   198 50284   437  8612   378   628 50284   562   570 42304   796
   3283    58  3064 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,     7,    72,    28,    15,    26,
            72,    27,  3064,    26,    72,    28,    72,    10,    16,     8,
           198, 50276, 12853,    62, 26676, 24685,     7,    64,    58,    72,
            10,    16,    25,    72,  4357,    65,    58,    72,    10,    16,
            25,    72,  4357, 34993,    58,    72,  4357, 16345,    58,    72,
            10,    16,    25,    72,  4357, 34993,    58,    72,    10,    16,
         36563,   198, 50284,   437,  8612,   378,   628, 50284,   562,   570,
         42304,   796,  3283,    58,  3064, 11208,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  98
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0;i<100;i=i+1)
            full_adder fa(a[i+1:i],b[i+1:i],carry[i],sum[i+1:i],carry[i+1]);
    endgenerate

    assign cout = carry[100];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.5386782329997
-------------------------------------------------------
MCTS Iteration:  92.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.30074888 0.4308238  0.4308238  0.4308238  0.4308238  0.4308238
 0.4308238  0.4308238  0.4308238  0.4308238 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284  5235  7785  1312    26   198 50284  8612   378]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for (i=0; i< 1
LLMEstimate:  
        for(i=0; i< 1
LLMEstimate:  
        for(i=0;i< 1
LLMEstimate:  
        for (i=0; i< 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
SEQUENCE:  [[  198 50280  1640     7    72    28    15    26  1312    27]]
MCTS Stage 2 - Expansion: next action:  5  corresponding to state:  [[  198 50280  1640     7    72    28    15    26  1312    27]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0; i<100; i=i+1) begin
            bcd_fadd f(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378   198 50280  1640     7    72    28    15    26  1312    27
   3064    26  1312    28    72    10    16     8  2221   198 50276    65
  10210    62    69  2860   277     7    64    58    18     9    72    10
     25    18  4357   275    58    18     9    72    10    25    18  4357
    269   259    11  3283    58    72  4357  2160    58    18     9    72
     10    25    18 36563   198 50280   437   198 50284   437  8612   378
    198 50284   562   570 42304   796  3283    58  3064 11208   198 50284
    198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,  5235,  7785,  1312,    26,   198, 50284,
          8612,   378,   198, 50280,  1640,     7,    72,    28,    15,    26,
          1312,    27,  3064,    26,  1312,    28,    72,    10,    16,     8,
          2221,   198, 50276,    65, 10210,    62,    69,  2860,   277,     7,
            64,    58,    18,     9,    72,    10,    25,    18,  4357,   275,
            58,    18,     9,    72,    10,    25,    18,  4357,   269,   259,
            11,  3283,    58,    72,  4357,  2160,    58,    18,     9,    72,
            10,    25,    18, 36563,   198, 50280,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          3064, 11208,   198, 50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  105
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    genvar i;
    generate
        for(i=0; i<100; i=i+1) begin
            bcd_fadd f(a[3*i+:3], b[3*i+:3], cin, carry[i], sum[3*i+:3]);
        end
    endgenerate
    assign cout = carry[100];
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  13.881553362999966
-------------------------------------------------------
MCTS Iteration:  93.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.30723602 0.30723602 0.43795967 0.43795967 0.43795967 0.43795967
 0.43795967 0.43795967 0.43795967 0.43795967]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   257    16     7]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     16     7]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd a1(a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd a2(a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd a3(a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd a4(a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd a5(a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     16     7    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284    65 10210    62    69  2860   257    17
      7    64    58    22    25    19  4357   275    58    22    25    19
   4357   269    58    15  4357   269    58    16  4357  2160    58    22
     25    19 36563   198 50284    65 10210    62    69  2860   257    18
      7    64    58  1157    25    23  4357   275    58  1157    25    23
   4357   269    58    16  4357   269    58    17  4357  2160    58  1157
     25    23 36563   198 50284    65 10210    62    69  2860   257    19
      7    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357   269    58    17  4357   269    58    18  4357  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   257    20
      7    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357   269    58    18  4357 42304    11  2160    58  1129    25  1433
  36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   257,
            16,     7,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   257,    17,     7,    64,    58,    22,
            25,    19,  4357,   275,    58,    22,    25,    19,  4357,   269,
            58,    15,  4357,   269,    58,    16,  4357,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           257,    18,     7,    64,    58,  1157,    25,    23,  4357,   275,
            58,  1157,    25,    23,  4357,   269,    58,    16,  4357,   269,
            58,    17,  4357,  2160,    58,  1157,    25,    23, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   257,    19,     7,    64,
            58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,  1065,
          4357,   269,    58,    17,  4357,   269,    58,    18,  4357,  2160,
            58,  1314,    25,  1065, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   257,    20,     7,    64,    58,  1129,    25,  1433,
          4357,   275,    58,  1129,    25,  1433,  4357,   269,    58,    18,
          4357, 42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198,
         50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  192
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd a1(a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd a2(a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd a3(a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd a4(a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd a5(a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.259106818999953
-------------------------------------------------------
MCTS Iteration:  94.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3136887  0.3136887  0.3136887  0.44505763 0.44505763 0.44505763
 0.44505763 0.44505763 0.44505763 0.44505763]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   916    16   357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            begin : adder
                bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
            end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11  3283    58    15  4357  2160    58    18
     25    15 36563   198 50284  8612   378   198 50280  5235  7785  1312
     26   198 50280  1640   357    72   796   604    26  1312  1279  7337
     26  1312   796  1312  1343   604     8   198 50276 27471  1058   751
    263   198 50272    65 10210    62    69  2860   916   357    64    58
     72    10    18    25    72  4357   275    58    72    10    18    25
     72  4357  3283    58    72    12    19  4357  3283    58    72  4357
   2160    58    72    10    18    25    72 36563   198 50276   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,  3283,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,  8612,
           378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,  1640,
           357,    72,   796,   604,    26,  1312,  1279,  7337,    26,  1312,
           796,  1312,  1343,   604,     8,   198, 50276, 27471,  1058,   751,
           263,   198, 50272,    65, 10210,    62,    69,  2860,   916,   357,
            64,    58,    72,    10,    18,    25,    72,  4357,   275,    58,
            72,    10,    18,    25,    72,  4357,  3283,    58,    72,    12,
            19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,    10,
            18,    25,    72, 36563,   198, 50276,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  144
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd inst1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4)
            begin : adder
                bcd_fadd inst (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
            end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.841637658999844
-------------------------------------------------------
MCTS Iteration:  95.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.32010752 0.32010752 0.32010752 0.32010752 0.45211828 0.45211828
 0.45211828 0.45211828 0.45211828 0.45211828]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   277  2860    15]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:  (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
LLMEstimate:   (a[3:0], b[3 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[ 357   64   58   18   25   15 4357  275   58   18]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8  2221  1058   751   263
    198 50276    65 10210    62    69  2860   277  2860   357    64    58
     72    10    18    25    72  4357   275    58    72    10    18    25
     72  4357  3283    58    72    12    19  4357  3283    58    72  4357
   2160    58    72    10    18    25    72 36563   198 50280   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    15,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,
           198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,   357,
            64,    58,    72,    10,    18,    25,    72,  4357,   275,    58,
            72,    10,    18,    25,    72,  4357,  3283,    58,    72,    12,
            19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,    10,
            18,    25,    72, 36563,   198, 50280,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  144
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd0 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  15.845044754000355
-------------------------------------------------------
MCTS Iteration:  96.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.32649308 0.32649308 0.32649308 0.32649308 0.32649308 0.45914245
 0.45914245 0.45914245 0.45914245 0.45914245]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout0, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    15    11  2160    15]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[   15  4357   269   259    11 42304    15    11  2160    15]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout0, sum0);
    bcd_fadd inst2 (a[7:4], b[7:4], cout0, cout1, sum1);
    bcd_fadd inst3 (a[11:8], b[11:8], cout1, cout2, sum2);
    bcd_fadd inst4 (a[15:12], b[15:12], cout2, cout3, sum3);
    bcd_fadd inst5 (a[19:16], b[19:16], cout3, cout4, sum4);
    bcd_fadd inst6 (a[23:20], b[23:20], cout4, cout5, sum5);
    bcd_fadd inst7 (a[27:24], b[27:24], cout5, cout6, sum6);
    bcd_fadd inst8 (a[31:28], b[31:28], cout6, cout7, sum7);
    bcd_fadd inst9 (a[35:32], b[35:32], cout7, cout8, sum8);
    bcd_fadd inst10 (a[39:36], b[39:36], cout8, cout9, sum9);
    bcd_fadd inst11 (a[43:40], b[43:40], cout9, cout10, sum10);
    bcd_fadd inst12 (a[47:44], b[47:44], cout10, cout11, sum11);
    bcd_fadd inst13 (a[51:48], b[51:48], cout11, cout12, sum12);
    bcd_fadd inst14 (a[55:52], b[55:52], cout12, cout13, sum13);
    bcd_fadd inst15 (a[59:56], b[59:56], cout13, cout14, sum14);
    bcd_fadd inst16 (a[63:60], b[63:60], cout14, cout15, sum15);
    bcd_fadd inst17 (a[67:64], b[67:64], cout15, cout16, sum16);
    bcd_fadd inst18 (a[71:68], b[71:68], cout16, cout17, sum17);
    bcd_fadd inst19 (a[75:72], b[75:72], cout17, cout18, sum18);
    bcd_fadd inst20 (a[79:76], b[79:76], cout18, cout19, sum19);
    bcd_fadd inst21 (a[83:80], b[83:80], cout19, cout20, sum20);
    bcd_fadd inst22 (a[87:84], b[87:84], cout20, cout21, sum21);
    bcd_fadd inst23 (a[91:88], b[91:88], cout21, cout22, sum22);
    bcd_fadd inst24 (a[95:92], b[95:92], cout22, cout23, sum23);
    bcd_fadd inst25 (a[99:96], b[99:96], cout23, cout24,
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    15    11  2160    15
   1776   198 50284    65 10210    62    69  2860   916    17   357    64
     58    22    25    19  4357   275    58    22    25    19  4357 42304
     15    11 42304    16    11  2160    16  1776   198 50284    65 10210
     62    69  2860   916    18   357    64    58  1157    25    23  4357
    275    58  1157    25    23  4357 42304    16    11 42304    17    11
   2160    17  1776   198 50284    65 10210    62    69  2860   916    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357 42304    17    11 42304    18    11  2160    18  1776   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    18    11 42304
     19    11  2160    19  1776   198 50284    65 10210    62    69  2860
    916    21   357    64    58  1954    25  1238  4357   275    58  1954
     25  1238  4357 42304    19    11 42304    20    11  2160    20  1776
    198 50284    65 10210    62    69  2860   916    22   357    64    58
   1983    25  1731  4357   275    58  1983    25  1731  4357 42304    20
     11 42304    21    11  2160    21  1776   198 50284    65 10210    62
     69  2860   916    23   357    64    58  3132    25  2078  4357   275
     58  3132    25  2078  4357 42304    21    11 42304    22    11  2160
     22  1776   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    22    11 42304    23    11  2160    23  1776   198 50284    65
  10210    62    69  2860   916   940   357    64    58  2670    25  2623
   4357   275    58  2670    25  2623  4357 42304    23    11 42304    24
     11  2160    24  1776   198 50284    65 10210    62    69  2860   916
   1157   357    64    58  3559    25  1821  4357   275    58  3559    25
   1821  4357 42304    24    11 42304   940    11  2160   940  1776   198
  50284    65 10210    62    69  2860   916  1065   357    64    58  2857
     25  2598  4357   275    58  2857    25  2598  4357 42304   940    11
  42304  1157    11  2160  1157  1776   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1157    11 42304  1065    11  2160  1065
   1776   198 50284    65 10210    62    69  2860   916  1415   357    64
     58  2816    25  4309  4357   275    58  2816    25  4309  4357 42304
   1065    11 42304  1485    11  2160  1485  1776   198 50284    65 10210
     62    69  2860   916  1314   357    64    58  3270    25  3980  4357
    275    58  3270    25  3980  4357 42304  1485    11 42304  1415    11
   2160  1415  1776   198 50284    65 10210    62    69  2860   916  1433
    357    64    58  5066    25  1899  4357   275    58  5066    25  1899
   4357 42304  1415    11 42304  1314    11  2160  1314  1776   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1314    11 42304
   1433    11  2160  1433  1776   198 50284    65 10210    62    69  2860
    916  1507   357    64    58  4869    25  3104  4357   275    58  4869
     25  3104  4357 42304  1433    11 42304  1558    11  2160  1558  1776
    198 50284    65 10210    62    69  2860   916  1129   357    64    58
   2425    25  4761  4357   275    58  2425    25  4761  4357 42304  1558
     11 42304  1507    11  2160  1507  1776   198 50284    65 10210    62
     69  2860   916  1238   357    64    58  3720    25  4304  4357   275
     58  3720    25  4304  4357 42304  1507    11 42304  1129    11  2160
   1129  1776   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1129    11 42304  1238    11  2160  1238  1776   198 50284    65
  10210    62    69  2860   916  1828   357    64    58  5774    25  5705
   4357   275    58  5774    25  5705  4357 42304  1238    11 42304  2481
     11  2160  2481  1776   198 50284    65 10210    62    69  2860   916
   1954   357    64    58  6420    25  3459  4357   275    58  6420    25
   3459  4357 42304  2481    11 42304  1828    11  2160  1828  1776   198
  50284    65 10210    62    69  2860   916  1731   357    64    58  3865
     25  5892  4357   275    58  3865    25  5892  4357 42304  1828    11
  42304  1954    11  2160  1954  1776   198 50284    65 10210    62    69
   2860   916  1495   357    64    58  2079    25  4846  4357   275    58
   2079    25  4846  4357 42304  1954    11 42304  1731    11]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    15,    11,
          2160,    15,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    17,   357,    64,    58,    22,    25,    19,  4357,   275,
            58,    22,    25,    19,  4357, 42304,    15,    11, 42304,    16,
            11,  2160,    16,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    18,   357,    64,    58,  1157,    25,    23,  4357,
           275,    58,  1157,    25,    23,  4357, 42304,    16,    11, 42304,
            17,    11,  2160,    17,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,    19,   357,    64,    58,  1314,    25,  1065,
          4357,   275,    58,  1314,    25,  1065,  4357, 42304,    17,    11,
         42304,    18,    11,  2160,    18,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    20,   357,    64,    58,  1129,    25,
          1433,  4357,   275,    58,  1129,    25,  1433,  4357, 42304,    18,
            11, 42304,    19,    11,  2160,    19,  1776,   198, 50284,    65,
         10210,    62,    69,  2860,   916,    21,   357,    64,    58,  1954,
            25,  1238,  4357,   275,    58,  1954,    25,  1238,  4357, 42304,
            19,    11, 42304,    20,    11,  2160,    20,  1776,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    22,   357,    64,    58,
          1983,    25,  1731,  4357,   275,    58,  1983,    25,  1731,  4357,
         42304,    20,    11, 42304,    21,    11,  2160,    21,  1776,   198,
         50284,    65, 10210,    62,    69,  2860,   916,    23,   357,    64,
            58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,  2078,
          4357, 42304,    21,    11, 42304,    22,    11,  2160,    22,  1776,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    24,   357,
            64,    58,  2327,    25,  2624,  4357,   275,    58,  2327,    25,
          2624,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    23,
          1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,   940,
           357,    64,    58,  2670,    25,  2623,  4357,   275,    58,  2670,
            25,  2623,  4357, 42304,    23,    11, 42304,    24,    11,  2160,
            24,  1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,    24,    11, 42304,   940,    11,
          2160,   940,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1065,   357,    64,    58,  2857,    25,  2598,  4357,   275,
            58,  2857,    25,  2598,  4357, 42304,   940,    11, 42304,  1157,
            11,  2160,  1157,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1485,   357,    64,    58,  4349,    25,  2780,  4357,
           275,    58,  4349,    25,  2780,  4357, 42304,  1157,    11, 42304,
          1065,    11,  2160,  1065,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,
          4357,   275,    58,  2816,    25,  4309,  4357, 42304,  1065,    11,
         42304,  1485,    11,  2160,  1485,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1314,   357,    64,    58,  3270,    25,
          3980,  4357,   275,    58,  3270,    25,  3980,  4357, 42304,  1485,
            11, 42304,  1415,    11,  2160,  1415,  1776,   198, 50284,    65,
         10210,    62,    69,  2860,   916,  1433,   357,    64,    58,  5066,
            25,  1899,  4357,   275,    58,  5066,    25,  1899,  4357, 42304,
          1415,    11, 42304,  1314,    11,  2160,  1314,  1776,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1558,   357,    64,    58,
          3134,    25,  2414,  4357,   275,    58,  3134,    25,  2414,  4357,
         42304,  1314,    11, 42304,  1433,    11,  2160,  1433,  1776,   198,
         50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,    64,
            58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,  3104,
          4357, 42304,  1433,    11, 42304,  1558,    11,  2160,  1558,  1776,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1129,   357,
            64,    58,  2425,    25,  4761,  4357,   275,    58,  2425,    25,
          4761,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,  1507,
          1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,  1238,
           357,    64,    58,  3720,    25,  4304,  4357,   275,    58,  3720,
            25,  4304,  4357, 42304,  1507,    11, 42304,  1129,    11,  2160,
          1129,  1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1129,    11, 42304,  1238,    11,
          2160,  1238,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1828,   357,    64,    58,  5774,    25,  5705,  4357,   275,
            58,  5774,    25,  5705,  4357, 42304,  1238,    11, 42304,  2481,
            11,  2160,  2481,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1954,   357,    64,    58,  6420,    25,  3459,  4357,
           275,    58,  6420,    25,  3459,  4357, 42304,  2481,    11, 42304,
          1828,    11,  2160,  1828,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1731,   357,    64,    58,  3865,    25,  5892,
          4357,   275,    58,  3865,    25,  5892,  4357, 42304,  1828,    11,
         42304,  1954,    11,  2160,  1954,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1495,   357,    64,    58,  2079,    25,
          4846,  4357,   275,    58,  2079,    25,  4846,  4357, 42304,  1954,
            11, 42304,  1731,    11]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.799251658999765
-------------------------------------------------------
MCTS Iteration:  97.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.33284563 0.33284563 0.33284563 0.33284563 0.33284563 0.33284563
 0.46613026 0.46613026 0.46613026 0.46613026]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
SEQUENCE:  [[  198 50284    65 10210    62    69  2860   257    15     7]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
LLMEstimate:  a[3:0], b[3: 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     15     7]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  64   58   18   25   15 4357  275   58   18   25]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd a0(a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd a1(a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd a2(a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd a3(a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd a4(a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     15     7    64    58    18    25    15  4357   275    58    18    25
     15  4357   269   259    11   269    58    15  4357  2160    58    18
     25    15 36563   198 50284    65 10210    62    69  2860   257    16
      7    64    58    22    25    19  4357   275    58    22    25    19
   4357   269    58    15  4357   269    58    16  4357  2160    58    22
     25    19 36563   198 50284    65 10210    62    69  2860   257    17
      7    64    58  1157    25    23  4357   275    58  1157    25    23
   4357   269    58    16  4357   269    58    17  4357  2160    58  1157
     25    23 36563   198 50284    65 10210    62    69  2860   257    18
      7    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357   269    58    17  4357   269    58    18  4357  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   257    19
      7    64    58  1129    25  1433  4357   275    58  1129    25  1433
   4357   269    58    18  4357 42304    11  2160    58  1129    25  1433
  36563   198 50284   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,    18,    25,    15,    60,
           269,    26,   198, 50284,    65, 10210,    62,    69,  2860,   257,
            15,     7,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11,   269,    58,    15,
          4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,    65,
         10210,    62,    69,  2860,   257,    16,     7,    64,    58,    22,
            25,    19,  4357,   275,    58,    22,    25,    19,  4357,   269,
            58,    15,  4357,   269,    58,    16,  4357,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           257,    17,     7,    64,    58,  1157,    25,    23,  4357,   275,
            58,  1157,    25,    23,  4357,   269,    58,    16,  4357,   269,
            58,    17,  4357,  2160,    58,  1157,    25,    23, 36563,   198,
         50284,    65, 10210,    62,    69,  2860,   257,    18,     7,    64,
            58,  1314,    25,  1065,  4357,   275,    58,  1314,    25,  1065,
          4357,   269,    58,    17,  4357,   269,    58,    18,  4357,  2160,
            58,  1314,    25,  1065, 36563,   198, 50284,    65, 10210,    62,
            69,  2860,   257,    19,     7,    64,    58,  1129,    25,  1433,
          4357,   275,    58,  1129,    25,  1433,  4357,   269,    58,    18,
          4357, 42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198,
         50284,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  192
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [3:0] c;
    bcd_fadd a0(a[3:0], b[3:0], cin, c[0], sum[3:0]);
    bcd_fadd a1(a[7:4], b[7:4], c[0], c[1], sum[7:4]);
    bcd_fadd a2(a[11:8], b[11:8], c[1], c[2], sum[11:8]);
    bcd_fadd a3(a[15:12], b[15:12], c[2], c[3], sum[15:12]);
    bcd_fadd a4(a[19:16], b[19:16], c[3], cout, sum[19:16]);
    
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  18.22480034099999
-------------------------------------------------------
MCTS Iteration:  98.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.339166   0.339166   0.339166   0.339166   0.339166   0.339166
 0.339166   0.47308266 0.47308266 0.47308266]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
SEQUENCE:  [[  796   275 10210    62    69  2860     7    64    58    18]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
LLMEstimate:  :0], b[3:0], c 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
SEQUENCE:  [[  25   15 4357  275   58   18   25   15 4357  269]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  25   15 4357  275   58   18   25   15 4357  269]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    assign top_module.cout = bcd_fadd(a[3:0], b[3:0], cin, top_module.cout, sum[3:0]);
    assign top_module.cout = bcd_fadd(a[7:4], b[7:4], top_module.cout, top_module.cout2, sum[7:4]);
    assign top_module.cout = bcd_fadd(a[11:8], b[11:8], top_module.cout, top_module.cout3, sum[11:8]);
    assign top_module.cout = bcd_fadd(a[15:12], b[15:12], top_module.cout, top_module.cout4, sum[15:12]);
    assign top_module.cout = bcd_fadd(a[19:16], b[19:16], top_module.cout, top_module.cout5, sum[19:16]);
    assign top_module.cout = bcd_fadd(a[23:20], b[23:20], top_module.cout, top_module.cout6, sum[23:20]);
    assign top_module.cout = bcd_fadd(a[27:24], b[27:24], top_module.cout, top_module.cout7, sum[27:24]);
    assign top_module.cout = bcd_fadd(a[31:28], b[31:28], top_module.cout, top_module.cout8, sum[31:28]);
    assign top_module.cout = bcd_fadd(a[35:32], b[35:32], top_module.cout, top_module.cout9, sum[35:32]);
    assign top_module.cout = bcd_fadd(a[39:36], b[39:36], top_module.cout, top_module.cout10, sum[39:36]);
    assign top_module.cout = bcd_fadd(a[43:40], b[43:40], top_module.cout, top_module.cout11, sum[43:40]);
    assign top_module.cout = bcd_fadd(a[47:44], b[47:44], top_module.cout, top_module.cout12, sum[47:44]);
    assign top_module.cout = bcd_fadd(a[51:48], b[51:48], top_module.cout, top_module.cout13, sum[51:48]);
    assign top_module.cout = bcd_fadd(a[55:52], b[55:52], top_module.cout, top_module.cout14, sum[55:52]);
    assign top_module.cout = bcd_fadd(a[59:56], b[59:56], top_module.cout, top_module.cout15, sum[59:56]);
    assign top_module.cout = bcd_fadd(a[63:60], b[63:
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18    25    15  4357   275    58    18    25    15  4357   269
    259    11  1353    62 21412    13    66   448    11  2160    58    18
     25    15 36563   198 50284   562   570  1353    62 21412    13    66
    448   796   275 10210    62    69  2860     7    64    58    22    25
     19  4357   275    58    22    25    19  4357  1353    62 21412    13
     66   448    11  1353    62 21412    13    66   448    17    11  2160
     58    22    25    19 36563   198 50284   562   570  1353    62 21412
     13    66   448   796   275 10210    62    69  2860     7    64    58
   1157    25    23  4357   275    58  1157    25    23  4357  1353    62
  21412    13    66   448    11  1353    62 21412    13    66   448    18
     11  2160    58  1157    25    23 36563   198 50284   562   570  1353
     62 21412    13    66   448   796   275 10210    62    69  2860     7
     64    58  1314    25  1065  4357   275    58  1314    25  1065  4357
   1353    62 21412    13    66   448    11  1353    62 21412    13    66
    448    19    11  2160    58  1314    25  1065 36563   198 50284   562
    570  1353    62 21412    13    66   448   796   275 10210    62    69
   2860     7    64    58  1129    25  1433  4357   275    58  1129    25
   1433  4357  1353    62 21412    13    66   448    11  1353    62 21412
     13    66   448    20    11  2160    58  1129    25  1433 36563   198
  50284   562   570  1353    62 21412    13    66   448   796   275 10210
     62    69  2860     7    64    58  1954    25  1238  4357   275    58
   1954    25  1238  4357  1353    62 21412    13    66   448    11  1353
     62 21412    13    66   448    21    11  2160    58  1954    25  1238
  36563   198 50284   562   570  1353    62 21412    13    66   448   796
    275 10210    62    69  2860     7    64    58  1983    25  1731  4357
    275    58  1983    25  1731  4357  1353    62 21412    13    66   448
     11  1353    62 21412    13    66   448    22    11  2160    58  1983
     25  1731 36563   198 50284   562   570  1353    62 21412    13    66
    448   796   275 10210    62    69  2860     7    64    58  3132    25
   2078  4357   275    58  3132    25  2078  4357  1353    62 21412    13
     66   448    11  1353    62 21412    13    66   448    23    11  2160
     58  3132    25  2078 36563   198 50284   562   570  1353    62 21412
     13    66   448   796   275 10210    62    69  2860     7    64    58
   2327    25  2624  4357   275    58  2327    25  2624  4357  1353    62
  21412    13    66   448    11  1353    62 21412    13    66   448    24
     11  2160    58  2327    25  2624 36563   198 50284   562   570  1353
     62 21412    13    66   448   796   275 10210    62    69  2860     7
     64    58  2670    25  2623  4357   275    58  2670    25  2623  4357
   1353    62 21412    13    66   448    11  1353    62 21412    13    66
    448   940    11  2160    58  2670    25  2623 36563   198 50284   562
    570  1353    62 21412    13    66   448   796   275 10210    62    69
   2860     7    64    58  3559    25  1821  4357   275    58  3559    25
   1821  4357  1353    62 21412    13    66   448    11  1353    62 21412
     13    66   448  1157    11  2160    58  3559    25  1821 36563   198
  50284   562   570  1353    62 21412    13    66   448   796   275 10210
     62    69  2860     7    64    58  2857    25  2598  4357   275    58
   2857    25  2598  4357  1353    62 21412    13    66   448    11  1353
     62 21412    13    66   448  1065    11  2160    58  2857    25  2598
  36563   198 50284   562   570  1353    62 21412    13    66   448   796
    275 10210    62    69  2860     7    64    58  4349    25  2780  4357
    275    58  4349    25  2780  4357  1353    62 21412    13    66   448
     11  1353    62 21412    13    66   448  1485    11  2160    58  4349
     25  2780 36563   198 50284   562   570  1353    62 21412    13    66
    448   796   275 10210    62    69  2860     7    64    58  2816    25
   4309  4357   275    58  2816    25  4309  4357  1353    62 21412    13
     66   448    11  1353    62 21412    13    66   448  1415    11  2160
     58  2816    25  4309 36563   198 50284   562   570  1353    62 21412
     13    66   448   796   275 10210    62    69  2860     7    64    58
   3270    25  3980  4357   275    58  3270    25  3980  4357  1353    62
  21412    13    66   448    11  1353    62 21412    13    66   448  1314
     11  2160    58  3270    25  3980 36563   198 50284   562   570  1353
     62 21412    13    66   448   796   275 10210    62    69  2860     7
     64    58  5066    25  1899  4357   275    58  5066    25]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,   562,   570,  1353,    62, 21412,    13,
            66,   448,   796,   275, 10210,    62,    69,  2860,     7,    64,
            58,    18,    25,    15,  4357,   275,    58,    18,    25,    15,
          4357,   269,   259,    11,  1353,    62, 21412,    13,    66,   448,
            11,  2160,    58,    18,    25,    15, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,    22,    25,    19,  4357,
           275,    58,    22,    25,    19,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    17,
            11,  2160,    58,    22,    25,    19, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  1157,    25,    23,  4357,
           275,    58,  1157,    25,    23,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    18,
            11,  2160,    58,  1157,    25,    23, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  1314,    25,  1065,  4357,
           275,    58,  1314,    25,  1065,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    19,
            11,  2160,    58,  1314,    25,  1065, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  1129,    25,  1433,  4357,
           275,    58,  1129,    25,  1433,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    20,
            11,  2160,    58,  1129,    25,  1433, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  1954,    25,  1238,  4357,
           275,    58,  1954,    25,  1238,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    21,
            11,  2160,    58,  1954,    25,  1238, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  1983,    25,  1731,  4357,
           275,    58,  1983,    25,  1731,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    22,
            11,  2160,    58,  1983,    25,  1731, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  3132,    25,  2078,  4357,
           275,    58,  3132,    25,  2078,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    23,
            11,  2160,    58,  3132,    25,  2078, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  2327,    25,  2624,  4357,
           275,    58,  2327,    25,  2624,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,    24,
            11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  2670,    25,  2623,  4357,
           275,    58,  2670,    25,  2623,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,   940,
            11,  2160,    58,  2670,    25,  2623, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  3559,    25,  1821,  4357,
           275,    58,  3559,    25,  1821,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,  1157,
            11,  2160,    58,  3559,    25,  1821, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  2857,    25,  2598,  4357,
           275,    58,  2857,    25,  2598,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,  1065,
            11,  2160,    58,  2857,    25,  2598, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  4349,    25,  2780,  4357,
           275,    58,  4349,    25,  2780,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,  1485,
            11,  2160,    58,  4349,    25,  2780, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  2816,    25,  4309,  4357,
           275,    58,  2816,    25,  4309,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,  1415,
            11,  2160,    58,  2816,    25,  4309, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  3270,    25,  3980,  4357,
           275,    58,  3270,    25,  3980,  4357,  1353,    62, 21412,    13,
            66,   448,    11,  1353,    62, 21412,    13,    66,   448,  1314,
            11,  2160,    58,  3270,    25,  3980, 36563,   198, 50284,   562,
           570,  1353,    62, 21412,    13,    66,   448,   796,   275, 10210,
            62,    69,  2860,     7,    64,    58,  5066,    25,  1899,  4357,
           275,    58,  5066,    25]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.79332619000024
-------------------------------------------------------
MCTS Iteration:  99.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3454545  0.3454545  0.3454545  0.3454545  0.3454545  0.3454545
 0.3454545  0.3454545  0.48000002 0.48000002]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
SEQUENCE:  [[  64   58   18   25   15 4357  275   58   18   25]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout, sum[3 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout0, sum0 1
LLMEstimate:  0], cin, cout1, sum[ 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
SEQUENCE:  [[   15  4357   269   259    11 42304    15    11  2160    15]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[   15  4357   269   259    11 42304    15    11  2160    15]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst1 (a[3:0], b[3:0], cin, cout0, sum0);
    bcd_fadd inst2 (a[7:4], b[7:4], cout0, cout1, sum1);
    bcd_fadd inst3 (a[11:8], b[11:8], cout1, cout2, sum2);
    bcd_fadd inst4 (a[15:12], b[15:12], cout2, cout3, sum3);
    bcd_fadd inst5 (a[19:16], b[19:16], cout3, cout4, sum4);
    bcd_fadd inst6 (a[23:20], b[23:20], cout4, cout5, sum5);
    bcd_fadd inst7 (a[27:24], b[27:24], cout5, cout6, sum6);
    bcd_fadd inst8 (a[31:28], b[31:28], cout6, cout7, sum7);
    bcd_fadd inst9 (a[35:32], b[35:32], cout7, cout8, sum8);
    bcd_fadd inst10 (a[39:36], b[39:36], cout8, cout9, sum9);
    bcd_fadd inst11 (a[43:40], b[43:40], cout9, cout10, sum10);
    bcd_fadd inst12 (a[47:44], b[47:44], cout10, cout11, sum11);
    bcd_fadd inst13 (a[51:48], b[51:48], cout11, cout12, sum12);
    bcd_fadd inst14 (a[55:52], b[55:52], cout12, cout13, sum13);
    bcd_fadd inst15 (a[59:56], b[59:56], cout13, cout14, sum14);
    bcd_fadd inst16 (a[63:60], b[63:60], cout14, cout15, sum15);
    bcd_fadd inst17 (a[67:64], b[67:64], cout15, cout16, sum16);
    bcd_fadd inst18 (a[71:68], b[71:68], cout16, cout17, sum17);
    bcd_fadd inst19 (a[75:72], b[75:72], cout17, cout18, sum18);
    bcd_fadd inst20 (a[79:76], b[79:76], cout18, cout19, sum19);
    bcd_fadd inst21 (a[83:80], b[83:80], cout19, cout20, sum20);
    bcd_fadd inst22 (a[87:84], b[87:84], cout20, cout21, sum21);
    bcd_fadd inst23 (a[91:88], b[91:88], cout21, cout22, sum22);
    bcd_fadd inst24 (a[95:92], b[95:92], cout22, cout23, sum23);
    bcd_fadd inst25 (a[99:96], b[99:96], cout23, cout24,
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25    15  4357   269   259    11 42304    15    11  2160    15
   1776   198 50284    65 10210    62    69  2860   916    17   357    64
     58    22    25    19  4357   275    58    22    25    19  4357 42304
     15    11 42304    16    11  2160    16  1776   198 50284    65 10210
     62    69  2860   916    18   357    64    58  1157    25    23  4357
    275    58  1157    25    23  4357 42304    16    11 42304    17    11
   2160    17  1776   198 50284    65 10210    62    69  2860   916    19
    357    64    58  1314    25  1065  4357   275    58  1314    25  1065
   4357 42304    17    11 42304    18    11  2160    18  1776   198 50284
     65 10210    62    69  2860   916    20   357    64    58  1129    25
   1433  4357   275    58  1129    25  1433  4357 42304    18    11 42304
     19    11  2160    19  1776   198 50284    65 10210    62    69  2860
    916    21   357    64    58  1954    25  1238  4357   275    58  1954
     25  1238  4357 42304    19    11 42304    20    11  2160    20  1776
    198 50284    65 10210    62    69  2860   916    22   357    64    58
   1983    25  1731  4357   275    58  1983    25  1731  4357 42304    20
     11 42304    21    11  2160    21  1776   198 50284    65 10210    62
     69  2860   916    23   357    64    58  3132    25  2078  4357   275
     58  3132    25  2078  4357 42304    21    11 42304    22    11  2160
     22  1776   198 50284    65 10210    62    69  2860   916    24   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    22    11 42304    23    11  2160    23  1776   198 50284    65
  10210    62    69  2860   916   940   357    64    58  2670    25  2623
   4357   275    58  2670    25  2623  4357 42304    23    11 42304    24
     11  2160    24  1776   198 50284    65 10210    62    69  2860   916
   1157   357    64    58  3559    25  1821  4357   275    58  3559    25
   1821  4357 42304    24    11 42304   940    11  2160   940  1776   198
  50284    65 10210    62    69  2860   916  1065   357    64    58  2857
     25  2598  4357   275    58  2857    25  2598  4357 42304   940    11
  42304  1157    11  2160  1157  1776   198 50284    65 10210    62    69
   2860   916  1485   357    64    58  4349    25  2780  4357   275    58
   4349    25  2780  4357 42304  1157    11 42304  1065    11  2160  1065
   1776   198 50284    65 10210    62    69  2860   916  1415   357    64
     58  2816    25  4309  4357   275    58  2816    25  4309  4357 42304
   1065    11 42304  1485    11  2160  1485  1776   198 50284    65 10210
     62    69  2860   916  1314   357    64    58  3270    25  3980  4357
    275    58  3270    25  3980  4357 42304  1485    11 42304  1415    11
   2160  1415  1776   198 50284    65 10210    62    69  2860   916  1433
    357    64    58  5066    25  1899  4357   275    58  5066    25  1899
   4357 42304  1415    11 42304  1314    11  2160  1314  1776   198 50284
     65 10210    62    69  2860   916  1558   357    64    58  3134    25
   2414  4357   275    58  3134    25  2414  4357 42304  1314    11 42304
   1433    11  2160  1433  1776   198 50284    65 10210    62    69  2860
    916  1507   357    64    58  4869    25  3104  4357   275    58  4869
     25  3104  4357 42304  1433    11 42304  1558    11  2160  1558  1776
    198 50284    65 10210    62    69  2860   916  1129   357    64    58
   2425    25  4761  4357   275    58  2425    25  4761  4357 42304  1558
     11 42304  1507    11  2160  1507  1776   198 50284    65 10210    62
     69  2860   916  1238   357    64    58  3720    25  4304  4357   275
     58  3720    25  4304  4357 42304  1507    11 42304  1129    11  2160
   1129  1776   198 50284    65 10210    62    69  2860   916  2481   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304  1129    11 42304  1238    11  2160  1238  1776   198 50284    65
  10210    62    69  2860   916  1828   357    64    58  5774    25  5705
   4357   275    58  5774    25  5705  4357 42304  1238    11 42304  2481
     11  2160  2481  1776   198 50284    65 10210    62    69  2860   916
   1954   357    64    58  6420    25  3459  4357   275    58  6420    25
   3459  4357 42304  2481    11 42304  1828    11  2160  1828  1776   198
  50284    65 10210    62    69  2860   916  1731   357    64    58  3865
     25  5892  4357   275    58  3865    25  5892  4357 42304  1828    11
  42304  1954    11  2160  1954  1776   198 50284    65 10210    62    69
   2860   916  1495   357    64    58  2079    25  4846  4357   275    58
   2079    25  4846  4357 42304  1954    11 42304  1731    11]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            16,   357,    64,    58,    18,    25,    15,  4357,   275,    58,
            18,    25,    15,  4357,   269,   259,    11, 42304,    15,    11,
          2160,    15,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    17,   357,    64,    58,    22,    25,    19,  4357,   275,
            58,    22,    25,    19,  4357, 42304,    15,    11, 42304,    16,
            11,  2160,    16,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,    18,   357,    64,    58,  1157,    25,    23,  4357,
           275,    58,  1157,    25,    23,  4357, 42304,    16,    11, 42304,
            17,    11,  2160,    17,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,    19,   357,    64,    58,  1314,    25,  1065,
          4357,   275,    58,  1314,    25,  1065,  4357, 42304,    17,    11,
         42304,    18,    11,  2160,    18,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,    20,   357,    64,    58,  1129,    25,
          1433,  4357,   275,    58,  1129,    25,  1433,  4357, 42304,    18,
            11, 42304,    19,    11,  2160,    19,  1776,   198, 50284,    65,
         10210,    62,    69,  2860,   916,    21,   357,    64,    58,  1954,
            25,  1238,  4357,   275,    58,  1954,    25,  1238,  4357, 42304,
            19,    11, 42304,    20,    11,  2160,    20,  1776,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    22,   357,    64,    58,
          1983,    25,  1731,  4357,   275,    58,  1983,    25,  1731,  4357,
         42304,    20,    11, 42304,    21,    11,  2160,    21,  1776,   198,
         50284,    65, 10210,    62,    69,  2860,   916,    23,   357,    64,
            58,  3132,    25,  2078,  4357,   275,    58,  3132,    25,  2078,
          4357, 42304,    21,    11, 42304,    22,    11,  2160,    22,  1776,
           198, 50284,    65, 10210,    62,    69,  2860,   916,    24,   357,
            64,    58,  2327,    25,  2624,  4357,   275,    58,  2327,    25,
          2624,  4357, 42304,    22,    11, 42304,    23,    11,  2160,    23,
          1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,   940,
           357,    64,    58,  2670,    25,  2623,  4357,   275,    58,  2670,
            25,  2623,  4357, 42304,    23,    11, 42304,    24,    11,  2160,
            24,  1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          1157,   357,    64,    58,  3559,    25,  1821,  4357,   275,    58,
          3559,    25,  1821,  4357, 42304,    24,    11, 42304,   940,    11,
          2160,   940,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1065,   357,    64,    58,  2857,    25,  2598,  4357,   275,
            58,  2857,    25,  2598,  4357, 42304,   940,    11, 42304,  1157,
            11,  2160,  1157,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1485,   357,    64,    58,  4349,    25,  2780,  4357,
           275,    58,  4349,    25,  2780,  4357, 42304,  1157,    11, 42304,
          1065,    11,  2160,  1065,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1415,   357,    64,    58,  2816,    25,  4309,
          4357,   275,    58,  2816,    25,  4309,  4357, 42304,  1065,    11,
         42304,  1485,    11,  2160,  1485,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1314,   357,    64,    58,  3270,    25,
          3980,  4357,   275,    58,  3270,    25,  3980,  4357, 42304,  1485,
            11, 42304,  1415,    11,  2160,  1415,  1776,   198, 50284,    65,
         10210,    62,    69,  2860,   916,  1433,   357,    64,    58,  5066,
            25,  1899,  4357,   275,    58,  5066,    25,  1899,  4357, 42304,
          1415,    11, 42304,  1314,    11,  2160,  1314,  1776,   198, 50284,
            65, 10210,    62,    69,  2860,   916,  1558,   357,    64,    58,
          3134,    25,  2414,  4357,   275,    58,  3134,    25,  2414,  4357,
         42304,  1314,    11, 42304,  1433,    11,  2160,  1433,  1776,   198,
         50284,    65, 10210,    62,    69,  2860,   916,  1507,   357,    64,
            58,  4869,    25,  3104,  4357,   275,    58,  4869,    25,  3104,
          4357, 42304,  1433,    11, 42304,  1558,    11,  2160,  1558,  1776,
           198, 50284,    65, 10210,    62,    69,  2860,   916,  1129,   357,
            64,    58,  2425,    25,  4761,  4357,   275,    58,  2425,    25,
          4761,  4357, 42304,  1558,    11, 42304,  1507,    11,  2160,  1507,
          1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,  1238,
           357,    64,    58,  3720,    25,  4304,  4357,   275,    58,  3720,
            25,  4304,  4357, 42304,  1507,    11, 42304,  1129,    11,  2160,
          1129,  1776,   198, 50284,    65, 10210,    62,    69,  2860,   916,
          2481,   357,    64,    58,  5999,    25,  1795,  4357,   275,    58,
          5999,    25,  1795,  4357, 42304,  1129,    11, 42304,  1238,    11,
          2160,  1238,  1776,   198, 50284,    65, 10210,    62,    69,  2860,
           916,  1828,   357,    64,    58,  5774,    25,  5705,  4357,   275,
            58,  5774,    25,  5705,  4357, 42304,  1238,    11, 42304,  2481,
            11,  2160,  2481,  1776,   198, 50284,    65, 10210,    62,    69,
          2860,   916,  1954,   357,    64,    58,  6420,    25,  3459,  4357,
           275,    58,  6420,    25,  3459,  4357, 42304,  2481,    11, 42304,
          1828,    11,  2160,  1828,  1776,   198, 50284,    65, 10210,    62,
            69,  2860,   916,  1731,   357,    64,    58,  3865,    25,  5892,
          4357,   275,    58,  3865,    25,  5892,  4357, 42304,  1828,    11,
         42304,  1954,    11,  2160,  1954,  1776,   198, 50284,    65, 10210,
            62,    69,  2860,   916,  1495,   357,    64,    58,  2079,    25,
          4846,  4357,   275,    58,  2079,    25,  4846,  4357, 42304,  1954,
            11, 42304,  1731,    11]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.797950377000234
-------------------------------------------------------
MCTS Iteration:  100.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3517117  0.3517117  0.3517117  0.3517117  0.3517117  0.3517117
 0.3517117  0.3517117  0.3517117  0.48688293]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
SEQUENCE:  [[2860   15  357   64   58   18   25   15 4357  275]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  [3:0], cin, cout0 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout0 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
LLMEstimate:  [3:0], cin, cout, 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357    64    58    18    25    15
   4357   275]]
SEQUENCE:  [[   58    18    25    15  4357   269   259    11 42304    11]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[   58    18    25    15  4357   269   259    11 42304    11]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    bcd_fadd inst_fadd0 (a[3:0], b[3:0], cin, cout, sum[3:0]);
    bcd_fadd inst_fadd1 (a[7:4], b[7:4], cout, cout, sum[7:4]);
    bcd_fadd inst_fadd2 (a[11:8], b[11:8], cout, cout, sum[11:8]);
    bcd_fadd inst_fadd3 (a[15:12], b[15:12], cout, cout, sum[15:12]);
    bcd_fadd inst_fadd4 (a[19:16], b[19:16], cout, cout, sum[19:16]);
    bcd_fadd inst_fadd5 (a[23:20], b[23:20], cout, cout, sum[23:20]);
    bcd_fadd inst_fadd6 (a[27:24], b[27:24], cout, cout, sum[27:24]);
    bcd_fadd inst_fadd7 (a[31:28], b[31:28], cout, cout, sum[31:28]);
    bcd_fadd inst_fadd8 (a[35:32], b[35:32], cout, cout, sum[35:32]);
    bcd_fadd inst_fadd9 (a[39:36], b[39:36], cout, cout, sum[39:36]);
    bcd_fadd inst_fadd10 (a[43:40], b[43:40], cout, cout, sum[43:40]);
    bcd_fadd inst_fadd11 (a[47:44], b[47:44], cout, cout, sum[47:44]);
    bcd_fadd inst_fadd12 (a[51:48], b[51:48], cout, cout, sum[51:48]);
    bcd_fadd inst_fadd13 (a[55:52], b[55:52], cout, cout, sum[55:52]);
    bcd_fadd inst_fadd14 (a[59:56], b[59:56], cout, cout, sum[59:56]);
    bcd_fadd inst_fadd15 (a[63:60], b[63:60], cout, cout, sum[63:60]);
    bcd_fadd inst_fadd16 (a[67:64], b[67:64], cout, cout, sum[67:64]);
    bcd_fadd inst_fadd17 (a[71:68], b[71:68], cout, cout, sum[71:68]);
    bcd_fadd inst_fadd18 (a[75:72], b[75:72], cout, cout, sum[75:72]);
    bcd_fadd inst_fadd19 (a[79:76], b[79:76], cout, cout, sum[79:76]);
    bcd_fadd inst_fadd20 (a[83:80], b[83:80], cout, cout, sum[83:80]);
    bcd_fadd inst_fadd21 (a[87:84], b[87:84], cout, cout, sum[87:84]);

[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357    64    58    18    25    15
   4357   275    58    18    25    15  4357   269   259    11 42304    11
   2160    58    18    25    15 36563   198 50284    65 10210    62    69
   2860   916    62    69  2860    16   357    64    58    22    25    19
   4357   275    58    22    25    19  4357 42304    11 42304    11  2160
     58    22    25    19 36563   198 50284    65 10210    62    69  2860
    916    62    69  2860    17   357    64    58  1157    25    23  4357
    275    58  1157    25    23  4357 42304    11 42304    11  2160    58
   1157    25    23 36563   198 50284    65 10210    62    69  2860   916
     62    69  2860    18   357    64    58  1314    25  1065  4357   275
     58  1314    25  1065  4357 42304    11 42304    11  2160    58  1314
     25  1065 36563   198 50284    65 10210    62    69  2860   916    62
     69  2860    19   357    64    58  1129    25  1433  4357   275    58
   1129    25  1433  4357 42304    11 42304    11  2160    58  1129    25
   1433 36563   198 50284    65 10210    62    69  2860   916    62    69
   2860    20   357    64    58  1954    25  1238  4357   275    58  1954
     25  1238  4357 42304    11 42304    11  2160    58  1954    25  1238
  36563   198 50284    65 10210    62    69  2860   916    62    69  2860
     21   357    64    58  1983    25  1731  4357   275    58  1983    25
   1731  4357 42304    11 42304    11  2160    58  1983    25  1731 36563
    198 50284    65 10210    62    69  2860   916    62    69  2860    22
    357    64    58  3132    25  2078  4357   275    58  3132    25  2078
   4357 42304    11 42304    11  2160    58  3132    25  2078 36563   198
  50284    65 10210    62    69  2860   916    62    69  2860    23   357
     64    58  2327    25  2624  4357   275    58  2327    25  2624  4357
  42304    11 42304    11  2160    58  2327    25  2624 36563   198 50284
     65 10210    62    69  2860   916    62    69  2860    24   357    64
     58  2670    25  2623  4357   275    58  2670    25  2623  4357 42304
     11 42304    11  2160    58  2670    25  2623 36563   198 50284    65
  10210    62    69  2860   916    62    69  2860   940   357    64    58
   3559    25  1821  4357   275    58  3559    25  1821  4357 42304    11
  42304    11  2160    58  3559    25  1821 36563   198 50284    65 10210
     62    69  2860   916    62    69  2860  1157   357    64    58  2857
     25  2598  4357   275    58  2857    25  2598  4357 42304    11 42304
     11  2160    58  2857    25  2598 36563   198 50284    65 10210    62
     69  2860   916    62    69  2860  1065   357    64    58  4349    25
   2780  4357   275    58  4349    25  2780  4357 42304    11 42304    11
   2160    58  4349    25  2780 36563   198 50284    65 10210    62    69
   2860   916    62    69  2860  1485   357    64    58  2816    25  4309
   4357   275    58  2816    25  4309  4357 42304    11 42304    11  2160
     58  2816    25  4309 36563   198 50284    65 10210    62    69  2860
    916    62    69  2860  1415   357    64    58  3270    25  3980  4357
    275    58  3270    25  3980  4357 42304    11 42304    11  2160    58
   3270    25  3980 36563   198 50284    65 10210    62    69  2860   916
     62    69  2860  1314   357    64    58  5066    25  1899  4357   275
     58  5066    25  1899  4357 42304    11 42304    11  2160    58  5066
     25  1899 36563   198 50284    65 10210    62    69  2860   916    62
     69  2860  1433   357    64    58  3134    25  2414  4357   275    58
   3134    25  2414  4357 42304    11 42304    11  2160    58  3134    25
   2414 36563   198 50284    65 10210    62    69  2860   916    62    69
   2860  1558   357    64    58  4869    25  3104  4357   275    58  4869
     25  3104  4357 42304    11 42304    11  2160    58  4869    25  3104
  36563   198 50284    65 10210    62    69  2860   916    62    69  2860
   1507   357    64    58  2425    25  4761  4357   275    58  2425    25
   4761  4357 42304    11 42304    11  2160    58  2425    25  4761 36563
    198 50284    65 10210    62    69  2860   916    62    69  2860  1129
    357    64    58  3720    25  4304  4357   275    58  3720    25  4304
   4357 42304    11 42304    11  2160    58  3720    25  4304 36563   198
  50284    65 10210    62    69  2860   916    62    69  2860  1238   357
     64    58  5999    25  1795  4357   275    58  5999    25  1795  4357
  42304    11 42304    11  2160    58  5999    25  1795 36563   198 50284
     65 10210    62    69  2860   916    62    69  2860  2481   357    64
     58  5774    25  5705  4357   275    58  5774    25  5705  4357 42304
     11 42304    11  2160    58  5774    25  5705 36563   198]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284,    65, 10210,    62,    69,  2860,   916,
            62,    69,  2860,    15,   357,    64,    58,    18,    25,    15,
          4357,   275,    58,    18,    25,    15,  4357,   269,   259,    11,
         42304,    11,  2160,    58,    18,    25,    15, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    16,
           357,    64,    58,    22,    25,    19,  4357,   275,    58,    22,
            25,    19,  4357, 42304,    11, 42304,    11,  2160,    58,    22,
            25,    19, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    17,   357,    64,    58,  1157,    25,
            23,  4357,   275,    58,  1157,    25,    23,  4357, 42304,    11,
         42304,    11,  2160,    58,  1157,    25,    23, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    18,
           357,    64,    58,  1314,    25,  1065,  4357,   275,    58,  1314,
            25,  1065,  4357, 42304,    11, 42304,    11,  2160,    58,  1314,
            25,  1065, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    19,   357,    64,    58,  1129,    25,
          1433,  4357,   275,    58,  1129,    25,  1433,  4357, 42304,    11,
         42304,    11,  2160,    58,  1129,    25,  1433, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    20,
           357,    64,    58,  1954,    25,  1238,  4357,   275,    58,  1954,
            25,  1238,  4357, 42304,    11, 42304,    11,  2160,    58,  1954,
            25,  1238, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    21,   357,    64,    58,  1983,    25,
          1731,  4357,   275,    58,  1983,    25,  1731,  4357, 42304,    11,
         42304,    11,  2160,    58,  1983,    25,  1731, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    22,
           357,    64,    58,  3132,    25,  2078,  4357,   275,    58,  3132,
            25,  2078,  4357, 42304,    11, 42304,    11,  2160,    58,  3132,
            25,  2078, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,    23,   357,    64,    58,  2327,    25,
          2624,  4357,   275,    58,  2327,    25,  2624,  4357, 42304,    11,
         42304,    11,  2160,    58,  2327,    25,  2624, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,    24,
           357,    64,    58,  2670,    25,  2623,  4357,   275,    58,  2670,
            25,  2623,  4357, 42304,    11, 42304,    11,  2160,    58,  2670,
            25,  2623, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,   940,   357,    64,    58,  3559,    25,
          1821,  4357,   275,    58,  3559,    25,  1821,  4357, 42304,    11,
         42304,    11,  2160,    58,  3559,    25,  1821, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1157,
           357,    64,    58,  2857,    25,  2598,  4357,   275,    58,  2857,
            25,  2598,  4357, 42304,    11, 42304,    11,  2160,    58,  2857,
            25,  2598, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1065,   357,    64,    58,  4349,    25,
          2780,  4357,   275,    58,  4349,    25,  2780,  4357, 42304,    11,
         42304,    11,  2160,    58,  4349,    25,  2780, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1485,
           357,    64,    58,  2816,    25,  4309,  4357,   275,    58,  2816,
            25,  4309,  4357, 42304,    11, 42304,    11,  2160,    58,  2816,
            25,  4309, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1415,   357,    64,    58,  3270,    25,
          3980,  4357,   275,    58,  3270,    25,  3980,  4357, 42304,    11,
         42304,    11,  2160,    58,  3270,    25,  3980, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1314,
           357,    64,    58,  5066,    25,  1899,  4357,   275,    58,  5066,
            25,  1899,  4357, 42304,    11, 42304,    11,  2160,    58,  5066,
            25,  1899, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1433,   357,    64,    58,  3134,    25,
          2414,  4357,   275,    58,  3134,    25,  2414,  4357, 42304,    11,
         42304,    11,  2160,    58,  3134,    25,  2414, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1558,
           357,    64,    58,  4869,    25,  3104,  4357,   275,    58,  4869,
            25,  3104,  4357, 42304,    11, 42304,    11,  2160,    58,  4869,
            25,  3104, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1507,   357,    64,    58,  2425,    25,
          4761,  4357,   275,    58,  2425,    25,  4761,  4357, 42304,    11,
         42304,    11,  2160,    58,  2425,    25,  4761, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  1129,
           357,    64,    58,  3720,    25,  4304,  4357,   275,    58,  3720,
            25,  4304,  4357, 42304,    11, 42304,    11,  2160,    58,  3720,
            25,  4304, 36563,   198, 50284,    65, 10210,    62,    69,  2860,
           916,    62,    69,  2860,  1238,   357,    64,    58,  5999,    25,
          1795,  4357,   275,    58,  5999,    25,  1795,  4357, 42304,    11,
         42304,    11,  2160,    58,  5999,    25,  1795, 36563,   198, 50284,
            65, 10210,    62,    69,  2860,   916,    62,    69,  2860,  2481,
           357,    64,    58,  5774,    25,  5705,  4357,   275,    58,  5774,
            25,  5705,  4357, 42304,    11, 42304,    11,  2160,    58,  5774,
            25,  5705, 36563,   198]], device='cuda:0')
Checking if done:
tokens generated:  772
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  47.80164739100019
----
 Tree depth: 0
 Node: action=None
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619]]
• Child Action scores:[0.35793787 0.35793787 0.35793787 0.35793787 0.35793787 0.35793787
 0.35793787 0.35793787 0.35793787 0.35793787]
• Child averaged monte carlo:-0.9901960784313726
• Child probablities:[4.05774210e-13 2.03511615e-03 8.52882650e-26 4.23441617e-40
 2.86368626e-06 4.07079948e-55 1.47962020e-01 1.40213632e-23
 3.97182509e-16 4.70567548e-11]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=101.0,Q=-0.9901960784313726,M=-0.9901960784313726
----
 Tree depth: 1
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=9
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     16     7]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     16     7]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    62]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284  5235  7785  1312    26   198 50284
   8612   378]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   916
     16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   277
   2860    15]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   916
     62    69]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685    18    25
     15    60   269    26   198 50284    65 10210    62    69  2860   257
     15     7]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284   562   570  1353    62
  21412    13    66   448   796   275 10210    62    69  2860     7    64
     58    18]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    16   357    64    58    18    25    15  4357   275    58
     18    25]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50281    13    64     7
     64    58]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    58  2079    25    15 11208   198 50284
    198 50284]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357    64    58    18    25    15
   4357   275]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50281    13    64     7
     64    58]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50281    13    64     7
     64    58]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357   198 50281    13    64     7
     64    58]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284    65 10210    62    69
   2860   916    62    69  2860    15   357    64    58    18    25    15
   4357   275]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
END ROBUST/MAX VALUES:
Adding child.
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16]]
SEQUENCE:  [[ 357   64   58   18   25   15 4357  275   58   18]]
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18]]
SEQUENCE:  [[  25   15 4357  269  259   11 3283   58   15 4357]]
Setting terminal state to random.
Checking if done:
tokens generated:  40
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8  2221   198 50276    65
  10210    62    69  2860   277  2860   357    64    58    72    10    18
     25    72  4357   275    58    72    10    18    25    72  4357  3283
     58    72    12    19  4357  3283    58    72  4357  2160    58    72
     10    18    25    72 36563   198 50280   437   198 50284   437  8612
    378   198 50284   562   570 42304   796  3283    58  2079 11208   198
    198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,  2221,   198, 50276,    65,
         10210,    62,    69,  2860,   277,  2860,   357,    64,    58,    72,
            10,    18,    25,    72,  4357,   275,    58,    72,    10,    18,
            25,    72,  4357,  3283,    58,    72,    12,    19,  4357,  3283,
            58,    72,  4357,  2160,    58,    72,    10,    18,    25,    72,
         36563,   198, 50280,   437,   198, 50284,   437,  8612,   378,   198,
         50284,   562,   570, 42304,   796,  3283,    58,  2079, 11208,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  141
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
LLMEstimate:  :0], cin, carry[0], 1
STATE:  [[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18]]
SEQUENCE:  [[  25   15 4357  269  259   11 3283   58   15 4357]]
Setting terminal state to random.
Checking if done:
tokens generated:  40
Calling isPromptComplete: 
original text:  // You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
[[ 1003   921   389  2810   351   257   347  8610   530    12 27003   751
    263  3706   275 10210    62    69  2860   326  6673   220   198  1003
    734   347  8610 19561   290  3283    12   259    11   290 11073   257
   2160   290  3283    12   448    13   198   198 21412   275 10210    62
     69  2860   357   198 50284 15414   685    18    25    15    60   257
     11   198 50284 15414   685    18    25    15    60   275    11   198
  50284 15414 50283 17879    11   198 50284 22915 50285    66   448    11
    198 50284 22915   685    18    25    15    60  2160  5619   198 50284
    198  1003 24470  9386  1802  9088   286   275 10210    62    69  2860
    284  2251   257  1802    12 27003   347  8610 42462    12 34993   751
    263    13   220   198  1003  7120   751   263   815   751   734  1802
     12 27003   347  8610  3146   357 34860   656  7337    12  2545 30104
      8   220   198  1003   392   257  3283    12   259   284  4439   257
   1802    12 27003  2160   290  3283   503    13   628   198  1003   367
    600    25  1052  4554  7177   393  7716  2643   561   307  4465   994
     13   198   198 21412  1353    62 21412     7   220   198 50284 15414
    685 28771    25    15    60   257    11   275    11   198 50284 15414
    269   259    11   198 50284 22915 42304    11   198 50284 22915   685
  28771    25    15    60  2160  5619   628 50284 21809   685  2079    25
     15    60  3283    26   198 50284    65 10210    62    69  2860   277
   2860    16   357    64    58    18    25    15  4357   275    58    18
     25    15  4357   269   259    11  3283    58    15  4357  2160    58
     18    25    15 36563   198 50284  8612   378   198 50280  5235  7785
   1312    26   198 50280  1640   357    72   796   604    26  1312  1279
   7337    26  1312   796  1312  1343   604     8  2221  1058   751   263
    198 50276    65 10210    62    69  2860   277  2860   357    64    58
     72    10    18    25    72  4357   275    58    72    10    18    25
     72  4357  3283    58    72    12    19  4357  3283    58    72  4357
   2160    58    72    10    18    25    72 36563   198 50280   437   198
  50284   437  8612   378   198 50284   562   570 42304   796  3283    58
   2079 11208   198   198   437 21412]]
tensor([[ 1003,   921,   389,  2810,   351,   257,   347,  8610,   530,    12,
         27003,   751,   263,  3706,   275, 10210,    62,    69,  2860,   326,
          6673,   220,   198,  1003,   734,   347,  8610, 19561,   290,  3283,
            12,   259,    11,   290, 11073,   257,  2160,   290,  3283,    12,
           448,    13,   198,   198, 21412,   275, 10210,    62,    69,  2860,
           357,   198, 50284, 15414,   685,    18,    25,    15,    60,   257,
            11,   198, 50284, 15414,   685,    18,    25,    15,    60,   275,
            11,   198, 50284, 15414, 50283, 17879,    11,   198, 50284, 22915,
         50285,    66,   448,    11,   198, 50284, 22915,   685,    18,    25,
            15,    60,  2160,  5619,   198, 50284,   198,  1003, 24470,  9386,
          1802,  9088,   286,   275, 10210,    62,    69,  2860,   284,  2251,
           257,  1802,    12, 27003,   347,  8610, 42462,    12, 34993,   751,
           263,    13,   220,   198,  1003,  7120,   751,   263,   815,   751,
           734,  1802,    12, 27003,   347,  8610,  3146,   357, 34860,   656,
          7337,    12,  2545, 30104,     8,   220,   198,  1003,   392,   257,
          3283,    12,   259,   284,  4439,   257,  1802,    12, 27003,  2160,
           290,  3283,   503,    13,   628,   198,  1003,   367,   600,    25,
          1052,  4554,  7177,   393,  7716,  2643,   561,   307,  4465,   994,
            13,   198,   198, 21412,  1353,    62, 21412,     7,   220,   198,
         50284, 15414,   685, 28771,    25,    15,    60,   257,    11,   275,
            11,   198, 50284, 15414,   269,   259,    11,   198, 50284, 22915,
         42304,    11,   198, 50284, 22915,   685, 28771,    25,    15,    60,
          2160,  5619,   628, 50284, 21809,   685,  2079,    25,    15,    60,
          3283,    26,   198, 50284,    65, 10210,    62,    69,  2860,   277,
          2860,    16,   357,    64,    58,    18,    25,    15,  4357,   275,
            58,    18,    25,    15,  4357,   269,   259,    11,  3283,    58,
            15,  4357,  2160,    58,    18,    25,    15, 36563,   198, 50284,
          8612,   378,   198, 50280,  5235,  7785,  1312,    26,   198, 50280,
          1640,   357,    72,   796,   604,    26,  1312,  1279,  7337,    26,
          1312,   796,  1312,  1343,   604,     8,  2221,  1058,   751,   263,
           198, 50276,    65, 10210,    62,    69,  2860,   277,  2860,   357,
            64,    58,    72,    10,    18,    25,    72,  4357,   275,    58,
            72,    10,    18,    25,    72,  4357,  3283,    58,    72,    12,
            19,  4357,  3283,    58,    72,  4357,  2160,    58,    72,    10,
            18,    25,    72, 36563,   198, 50280,   437,   198, 50284,   437,
          8612,   378,   198, 50284,   562,   570, 42304,   796,  3283,    58,
          2079, 11208,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  144
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// You are provided with a BCD one-digit adder named bcd_fadd that adds 
// two BCD digits and carry-in, and produces a sum and carry-out.

module bcd_fadd (
    input [3:0] a,
    input [3:0] b,
    input     cin,
    output   cout,
    output [3:0] sum );
    
// Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. 
//Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) 
//and a carry-in to produce a 100-digit sum and carry out.


// Hint: An instance array or generate statement would be useful here.

module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] carry;
    bcd_fadd fadd1 (a[3:0], b[3:0], cin, carry[0], sum[3:0]);
    generate
        genvar i;
        for (i = 4; i < 400; i = i + 4) begin : adder
            bcd_fadd fadd (a[i+3:i], b[i+3:i], carry[i-4], carry[i], sum[i+3:i]);
        end
    endgenerate
    assign cout = carry[99];

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Bcdadd100/Bcdadd100_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Total Time:  2488.42696
