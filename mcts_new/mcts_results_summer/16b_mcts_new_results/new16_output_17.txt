Using GPU
/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_prompts/Module_1.v
Prompt str:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
Loading LLM model...
Loaded LLM:  shailja/fine-tuned-codegen-16B-Verilog
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  100
********-- EPISODE-1--************
ORIG MODULE:  top_module
--------MCTS-------
Env seed:  42
Initializing MCTS tree.
Initialize search (creating root node)

MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
LLMEstimate:  
    assign out = a & b; 1
LLMEstimate:  
    assign out = a & b; 1
LLMEstimate:  
    assign out = a & b; 1
LLMEstimate:  
    assign out = a & b; 1
LLMEstimate:  

wire w1, w2, w 1
LLMEstimate:  
    assign out = a & b; 1
LLMEstimate:  

//Define a module called mod_ 1
LLMEstimate:  
    assign out = a & b; 1
LLMEstimate:  
    assign out = a & b; 1
LLMEstimate:  
    assign out = a & b; 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198 50284   562   570   503   796   257  1222   275    26]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198, 50284,   562,   570,   503,   796,   257,  1222,
           275,    26,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

-------------------------------------------------------
MCTS Iteration:  1.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.201805006
-------------------------------------------------------
MCTS Iteration:  2.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.199688211000009
-------------------------------------------------------
MCTS Iteration:  3.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.201392635999994
-------------------------------------------------------
MCTS Iteration:  4.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.211637745000004
-------------------------------------------------------
MCTS Iteration:  5.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198   198 21809   266    16    11   266    17    11   266]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  3;

mod_a instance1 ( 1
LLMEstimate:  3;

mod_a instance1 ( 1
LLMEstimate:  3;

mod_a instance1 ( 1
LLMEstimate:  3;

mod_a instance1 ( 1
LLMEstimate:  3;

mod_a instance1 ( 1
LLMEstimate:  3;

mod_a instance1( 1
LLMEstimate:  3;

mod_a instance1 ( 1
LLMEstimate:  3;

mod_a instance1 ( 1
LLMEstimate:  3;

mod_a instance1 ( 1
LLMEstimate:  3;

mod_a instance1 ( 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[  18   26  198  198 4666   62   64 4554   16  357]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (.in1(a),.in2(b),.out(w1) );
mod_a instance2 (.in1(w1),.in2(b),.out(w2) );
mod_a instance3 (.in1(a),.in2(w2),.out(out) );

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16 20262   259    16     7    64
    828    13   259    17     7    65   828    13   448     7    86    16
      8  5619   198  4666    62    64  4554    17 20262   259    16     7
     86    16   828    13   259    17     7    65   828    13   448     7
     86    17     8  5619   198  4666    62    64  4554    18 20262   259
     16     7    64   828    13   259    17     7    86    17   828    13
    448     7   448     8  5619   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,   764,   259,    16,     7,    64,   828,   764,   259,
            17,     7,    65,   828,   764,   448,     7,    86,    16,     8,
          5619,   198,  4666,    62,    64,  4554,    17,   357,   764,   259,
            16,     7,    86,    16,   828,   764,   259,    17,     7,    65,
           828,   764,   448,     7,    86,    17,     8,  5619,   198,  4666,
            62,    64,  4554,    18,   357,   764,   259,    16,     7,    64,
           828,   764,   259,    17,     7,    86,    17,   828,   764,   448,
             7,   448,     8,  5619,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  93
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (.in1(a),.in2(b),.out(w1) );
mod_a instance2 (.in1(w1),.in2(b),.out(w2) );
mod_a instance3 (.in1(a),.in2(w2),.out(out) );

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  12.31525868
-------------------------------------------------------
MCTS Iteration:  6.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.220594648000002
-------------------------------------------------------
MCTS Iteration:  7.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[ 198  198 1003 7469  500  257 8265 1444  953   62]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a that connects two inputs to one output.  1
LLMEstimate:  a, with three ports:
//in1 1
LLMEstimate:  a with three ports. 
//Do not 1
LLMEstimate:  a. It has two ports (a and b 1
LLMEstimate:  a that takes two inputs and an output, then 1
LLMEstimate:  a that connects three ports to three wires.  1
LLMEstimate:  a. It will be made of wires and registers 1
LLMEstimate:  a, with inputs a and b, and outputs 1
LLMEstimate:  a with three ports (in1, in2 1
LLMEstimate:  a with three ports: in1, in2 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64   351  1115 14090   357   259    16    11   287    17]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[   64   351  1115 14090   357   259    16    11   287    17]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a with three ports (in1, in2, and out).
//Define the instance of mod_a called mod_a_instance.

//Connect the ports of mod_a to your top-level module.

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   351
   1115 14090   357   259    16    11   287    17    11   290   503   737
    198  1003  7469   500   262  4554   286   953    62    64  1444   953
     62    64    62 39098    13   198   198  1003 13313   262 14090   286
    953    62    64   284   534  1353    12  5715  8265    13   198   198
    437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,   357,   259,    16,    11,
           287,    17,    11,   290,   503,   737,   198,  1003,  7469,   500,
           262,  4554,   286,   953,    62,    64,  1444,   953,    62,    64,
            62, 39098,    13,   198,   198,  1003, 13313,   262, 14090,   286,
           953,    62,    64,   284,   534,  1353,    12,  5715,  8265,    13,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  62
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a with three ports (in1, in2, and out).
//Define the instance of mod_a called mod_a_instance.

//Connect the ports of mod_a to your top-level module.

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.647726126999999
-------------------------------------------------------
MCTS Iteration:  8.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.229173618000004
-------------------------------------------------------
MCTS Iteration:  9.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.223773374000018
-------------------------------------------------------
MCTS Iteration:  10.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]  taking action:  9
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
SEQUENCE:  [[  198 50284   562   570   503   796   257  1222   275    26]]
Leaf selection - depth:  1
Checking if done:
tokens generated:  10
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
LLMEstimate:  
endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[  198   437 21412]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.230741495000018
-------------------------------------------------------
MCTS Iteration:  11.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.8902302 1.8902302 1.8902302 1.8902302 1.8902302 1.8902302 1.8902302
 1.8902302 1.8902302 1.8902302]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002113156000007166
-------------------------------------------------------
MCTS Iteration:  12.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9918869 1.9878304 1.9878304 1.9878304 1.9878304 1.9878304 1.9878304
 1.9878304 1.9878304 1.9878304]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002082148999988931
-------------------------------------------------------
MCTS Iteration:  13.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0544956 1.0544956 2.0817435 2.0817435 2.0817435 2.0817435 2.0817435
 2.0817435 2.0817435 2.0817435]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0021108649999916906
-------------------------------------------------------
MCTS Iteration:  14.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1149056 1.1149056 1.1149056 2.1723585 2.1723585 2.1723585 2.1723585
 2.1723585 2.1723585 2.1723585]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020220650000055684
-------------------------------------------------------
MCTS Iteration:  15.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1733334 1.1733334 1.1733334 1.1733334 2.26      2.26      2.26
 2.26      2.26      2.26     ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
SEQUENCE:  [[ 13 259  16   7  64 828  13 259  17   7]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[ 13 259  16   7  64 828  13 259  17   7]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (.in1(a),.in2(b),.out(w1));
mod_a instance2 (.in1(a),.in2(b),.out(w2));
mod_a instance3 (.in1(a),.in2(b),.out(w3));

assign out = w1 | w2 | w3;

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16 20262   259    16     7    64
    828    13   259    17     7    65   828    13   448     7    86    16
  18125   198  4666    62    64  4554    17 20262   259    16     7    64
    828    13   259    17     7    65   828    13   448     7    86    17
  18125   198  4666    62    64  4554    18 20262   259    16     7    64
    828    13   259    17     7    65   828    13   448     7    86    18
  18125   198   198   562   570   503   796   266    16   930   266    17
    930   266    18    26   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,    13,   259,    16,     7,    64,   828,    13,   259,
            17,     7,    65,   828,    13,   448,     7,    86,    16, 18125,
           198,  4666,    62,    64,  4554,    17,   357,    13,   259,    16,
             7,    64,   828,    13,   259,    17,     7,    65,   828,    13,
           448,     7,    86,    17, 18125,   198,  4666,    62,    64,  4554,
            18,   357,    13,   259,    16,     7,    64,   828,    13,   259,
            17,     7,    65,   828,    13,   448,     7,    86,    18, 18125,
           198,   198,   562,   570,   503,   796,   266,    16,   930,   266,
            17,   930,   266,    18,    26,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  104
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (.in1(a),.in2(b),.out(w1));
mod_a instance2 (.in1(a),.in2(b),.out(w2));
mod_a instance3 (.in1(a),.in2(b),.out(w3));

assign out = w1 | w2 | w3;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  12.456684865
-------------------------------------------------------
MCTS Iteration:  16.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2299619 1.2299619 1.2299619 1.2299619 1.2299619 2.3449428 2.3449428
 2.3449428 2.3449428 2.3449428]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0021183659999906013
-------------------------------------------------------
MCTS Iteration:  17.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2849481 1.2849481 1.2849481 1.2849481 1.2849481 1.2849481 2.427422
 2.427422  2.427422  2.427422 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64   326 20417   734 17311   284   530  5072    13   220]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
//Define the module's ports as wires 1
LLMEstimate:  
//Define the module's ports as wires 1
LLMEstimate:  
//Define three wires (in1, 1
LLMEstimate:  
//Define the module's ports as wires 1
LLMEstimate:  
//Inside the module, assign a wire called 1
LLMEstimate:  
//Define the instance of the module mod 1
LLMEstimate:  
//Define a module called mod_b 1
LLMEstimate:  
//Inside the module, assign a wire called 1
LLMEstimate:  
//Define the module's ports as wires 1
LLMEstimate:  
//Define the module's ports (input 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
  20417   734 17311   284   530  5072    13   220]]
SEQUENCE:  [[  198  1003  7469   500   262  8265   338 14090   355 19474]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  198  1003  7469   500   262  8265   338 14090   355 19474]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a that connects two inputs to one output. 
//Define the module's ports as wires. 
//Connect the input wires to the ports on the top-level module. 
//Connect the output wire to the output port on the top-level module. 
module top_module (
    input a,
    input b,
    output out );

    assign out = ~(a ^ b);

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
  20417   734 17311   284   530  5072    13   220   198  1003  7469   500
    262  8265   338 14090   355 19474    13   220   198  1003 13313   262
   5128 19474   284   262 14090   319   262  1353    12  5715  8265    13
    220   198  1003 13313   262  5072  6503   284   262  5072  2493   319
    262  1353    12  5715  8265    13   220   198 21412  1353    62 21412
    357   198 50284 15414   257    11   198 50284 15414   275    11   198
  50284 22915   503  5619   628 50284   562   570   503   796  5299     7
     64 10563   275  1776   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   326, 20417,   734, 17311,   284,   530,  5072,
            13,   220,   198,  1003,  7469,   500,   262,  8265,   338, 14090,
           355, 19474,    13,   220,   198,  1003, 13313,   262,  5128, 19474,
           284,   262, 14090,   319,   262,  1353,    12,  5715,  8265,    13,
           220,   198,  1003, 13313,   262,  5072,  6503,   284,   262,  5072,
          2493,   319,   262,  1353,    12,  5715,  8265,    13,   220,   198,
         21412,  1353,    62, 21412,   357,   198, 50284, 15414,   257,    11,
           198, 50284, 15414,   275,    11,   198, 50284, 22915,   503,  5619,
           628, 50284,   562,   570,   503,   796,  5299,     7,    64, 10563,
           275,  1776,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  104
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a that connects two inputs to one output. 
//Define the module's ports as wires. 
//Connect the input wires to the ports on the top-level module. 
//Connect the output wire to the output port on the top-level module. 
module top_module (
    input a,
    input b,
    output out );

    assign out = ~(a ^ b);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  12.31776317699999
-------------------------------------------------------
MCTS Iteration:  18.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3384268 1.3384268 1.3384268 1.3384268 1.3384268 1.3384268 1.3384268
 2.5076404 2.5076404 2.5076404]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020561870000221916
-------------------------------------------------------
MCTS Iteration:  19.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.3905158 1.3905158 1.3905158 1.3905158 1.3905158 1.3905158 1.3905158
 1.3905158 2.5857737 2.5857737]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020473120000019662
-------------------------------------------------------
MCTS Iteration:  20.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.441318  1.441318  1.441318  1.441318  1.441318  1.441318  1.441318
 1.441318  1.441318  2.6619773]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]  taking action:  0
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002078689000001077
-------------------------------------------------------
MCTS Iteration:  21.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.4909244 1.4909244 1.4909244 1.4909244 1.4909244 1.4909244 1.4909244
 1.4909244 1.4909244 1.4909244]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002000942999984545
-------------------------------------------------------
MCTS Iteration:  22.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9045619 1.5394158 1.5394158 1.5394158 1.5394158 1.5394158 1.5394158
 1.5394158 1.5394158 1.5394158]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020575829999813777
-------------------------------------------------------
MCTS Iteration:  23.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9401479 0.9401479 1.5868638 1.5868638 1.5868638 1.5868638 1.5868638
 1.5868638 1.5868638 1.5868638]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002039779000000408
-------------------------------------------------------
MCTS Iteration:  24.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.975     0.975     0.975     1.6333332 1.6333332 1.6333332 1.6333332
 1.6333332 1.6333332 1.6333332]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002086910999992142
-------------------------------------------------------
MCTS Iteration:  25.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0091617 1.0091617 1.0091617 1.0091617 1.6788821 1.6788821 1.6788821
 1.6788821 1.6788821 1.6788821]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
SEQUENCE:  [[  64   11  275   11  266   16 1776  198 4666   62]]
MCTS Stage 2 - Expansion: next action:  1  corresponding to state:  [[  64   11  275   11  266   16 1776  198 4666   62]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (a, b, w1);
mod_a instance2 (a, w1, w2);
mod_a instance3 (a, w2, w3);
mod_a instance4 (w3, b, out);

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357    64    11   275    11
    266    16  1776   198  4666    62    64  4554    17   357    64    11
    266    16    11   266    17  1776   198  4666    62    64  4554    18
    357    64    11   266    17    11   266    18  1776   198  4666    62
     64  4554    19   357    86    18    11   275    11   503  1776   198
    198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,    64,    11,   275,    11,   266,    16,  1776,   198,
          4666,    62,    64,  4554,    17,   357,    64,    11,   266,    16,
            11,   266,    17,  1776,   198,  4666,    62,    64,  4554,    18,
           357,    64,    11,   266,    17,    11,   266,    18,  1776,   198,
          4666,    62,    64,  4554,    19,   357,    86,    18,    11,   275,
            11,   503,  1776,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  75
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (a, b, w1);
mod_a instance2 (a, w1, w2);
mod_a instance3 (a, w2, w3);
mod_a instance4 (w3, b, out);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.88477997999999
-------------------------------------------------------
MCTS Iteration:  26.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0426726 1.0426726 1.0426726 1.0426726 1.0426726 1.7235634 1.7235634
 1.7235634 1.7235634 1.7235634]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002106077999997069
-------------------------------------------------------
MCTS Iteration:  27.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.0755684 1.0755684 1.0755684 1.0755684 1.0755684 1.0755684 1.7674246
 1.7674246 1.7674246 1.7674246]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64    11   351  1115 14090    25   198  1003   259    16]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , in2, and out. 
// 1
LLMEstimate:  , in2, and out.

end 1
LLMEstimate:  , in2, and out.

end 1
LLMEstimate:  , in2, and out.

end 1
LLMEstimate:  , in2, and out.

// 1
LLMEstimate:  , in2, and out.

// 1
LLMEstimate:  , in2, and out.

end 1
LLMEstimate:  , in2, and out. 
// 1
LLMEstimate:  , in2, and out.

// 1
LLMEstimate:  , in2, and out. 
// 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    11
    351  1115 14090    25   198  1003   259    16]]
SEQUENCE:  [[ 11 287  17  11 290 503  13 198 198 437]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[ 11 287  17  11 290 503  13 198 198 437]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a, with three ports:
//in1, in2, and out.

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    11
    351  1115 14090    25   198  1003   259    16    11   287    17    11
    290   503    13   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,    11,   351,  1115, 14090,    25,   198,  1003,
           259,    16,    11,   287,    17,    11,   290,   503,    13,   198,
           198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  31
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a, with three ports:
//in1, in2, and out.

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.698863383000003
-------------------------------------------------------
MCTS Iteration:  28.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1078819 1.1078819 1.1078819 1.1078819 1.1078819 1.1078819 1.1078819
 1.8105092 1.8105092 1.8105092]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0021362390000092546
-------------------------------------------------------
MCTS Iteration:  29.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1396428 1.1396428 1.1396428 1.1396428 1.1396428 1.1396428 1.1396428
 1.1396428 1.8528571 1.8528571]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020351269999991928
-------------------------------------------------------
MCTS Iteration:  30.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.1708786 1.1708786 1.1708786 1.1708786 1.1708786 1.1708786 1.1708786
 1.1708786 1.1708786 1.8945048]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6951151 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302 2.3902302
 2.3902302 2.3902302 2.3902302]  taking action:  1
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002035258000006479
-------------------------------------------------------
MCTS Iteration:  31.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [1.2016147 1.2016147 1.2016147 1.2016147 1.2016147 1.2016147 1.2016147
 1.2016147 1.2016147 1.2016147]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020485200000166515
-------------------------------------------------------
MCTS Iteration:  32.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7854993 1.2318741 1.2318741 1.2318741 1.2318741 1.2318741 1.2318741
 1.2318741 1.2318741 1.2318741]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020442160000015974
-------------------------------------------------------
MCTS Iteration:  33.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8093428 0.8093428 1.2616785 1.2616785 1.2616785 1.2616785 1.2616785
 1.2616785 1.2616785 1.2616785]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002042583000019249
-------------------------------------------------------
MCTS Iteration:  34.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.832838  0.832838  0.832838  1.2910476 1.2910476 1.2910476 1.2910476
 1.2910476 1.2910476 1.2910476]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.00204197799999406
-------------------------------------------------------
MCTS Iteration:  35.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8559999 0.8559999 0.8559999 0.8559999 1.3199999 1.3199999 1.3199999
 1.3199999 1.3199999 1.3199999]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
SEQUENCE:  [[ 257   11  275   11  266   16 5619  198 4666   62]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[ 257   11  275   11  266   16 5619  198 4666   62]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 ( a, b, w1 );
mod_a instance2 ( w1, b, w2 );
mod_a instance3 ( a, w2, out );

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357   257    11   275    11
    266    16  5619   198  4666    62    64  4554    17   357   266    16
     11   275    11   266    17  5619   198  4666    62    64  4554    18
    357   257    11   266    17    11   503  5619   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,   257,    11,   275,    11,   266,    16,  5619,   198,
          4666,    62,    64,  4554,    17,   357,   266,    16,    11,   275,
            11,   266,    17,  5619,   198,  4666,    62,    64,  4554,    18,
           357,   257,    11,   266,    17,    11,   503,  5619,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  60
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 ( a, b, w1 );
mod_a instance2 ( w1, b, w2 );
mod_a instance3 ( a, w2, out );

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.143306819000003
-------------------------------------------------------
MCTS Iteration:  36.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.87884253 0.87884253 0.87884253 0.87884253 0.87884253 1.3485532
 1.3485532  1.3485532  1.3485532  1.3485532 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020828470000253674
-------------------------------------------------------
MCTS Iteration:  37.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9013782 0.9013782 0.9013782 0.9013782 0.9013782 0.9013782 1.3767228
 1.3767228 1.3767228 1.3767228]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64   351  1115 14090    13   220   198  1003  5211   407]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   change the module name, or the port names. 1
LLMEstimate:   change the module name, or the port names. 1
LLMEstimate:   change the module name, and do not change the 1
LLMEstimate:   change the module name, or the port names. 1
LLMEstimate:   change the module name, and do not change the 1
LLMEstimate:   change the module name, or the port names. 1
LLMEstimate:   change the module name, or the port names. 1
LLMEstimate:   change the module name or the port names.  1
LLMEstimate:   change the module name, and do not change the 1
LLMEstimate:   change the module name, or the port names. 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   351
   1115 14090    13   220   198  1003  5211   407]]
SEQUENCE:  [[1487  262 8265 1438   11  290  466  407 1487  262]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[1487  262 8265 1438   11  290  466  407 1487  262]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top_module (
    input a,
    input b,
    output out );

//Define a module called mod_a with three ports. 
//Do not change the module name, and do not change the port names. 
module top
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   351
   1115 14090    13   220   198  1003  5211   407  1487   262  8265  1438
     11   290   466   407  1487   262  2493  3891    13   220   198 21412
   1353    62 21412   357   198 50284 15414   257    11   198 50284 15414
    275    11   198 50284 22915   503  5619   198   198  1003  7469   500
    257  8265  1444   953    62    64   351  1115 14090    13   220   198
   1003  5211   407  1487   262  8265  1438    11   290   466   407  1487
    262  2493  3891    13   220   198 21412  1353    62 21412   357   198
  50284 15414   257    11   198 50284 15414   275    11   198 50284 22915
    503  5619   198   198  1003  7469   500   257  8265  1444   953    62
     64   351  1115 14090    13   220   198  1003  5211   407  1487   262
   8265  1438    11   290   466   407  1487   262  2493  3891    13   220
    198 21412  1353    62 21412   357   198 50284 15414   257    11   198
  50284 15414   275    11   198 50284 22915   503  5619   198   198  1003
   7469   500   257  8265  1444   953    62    64   351  1115 14090    13
    220   198  1003  5211   407  1487   262  8265  1438    11   290   466
    407  1487   262  2493  3891    13   220   198 21412  1353    62 21412
    357   198 50284 15414   257    11   198 50284 15414   275    11   198
  50284 22915   503  5619   198   198  1003  7469   500   257  8265  1444
    953    62    64   351  1115 14090    13   220   198  1003  5211   407
   1487   262  8265  1438    11   290   466   407  1487   262  2493  3891
     13   220   198 21412  1353    62 21412   357   198 50284 15414   257
     11   198 50284 15414   275    11   198 50284 22915   503  5619   198
    198  1003  7469   500   257  8265  1444   953    62    64   351  1115
  14090    13   220   198  1003  5211   407  1487   262  8265  1438    11
    290   466   407  1487   262  2493  3891    13   220   198 21412  1353
     62 21412   357   198 50284 15414   257    11   198 50284 15414   275
     11   198 50284 22915   503  5619   198   198  1003  7469   500   257
   8265  1444   953    62    64   351  1115 14090    13   220   198  1003
   5211   407  1487   262  8265  1438    11   290   466   407  1487   262
   2493  3891    13   220   198 21412  1353    62 21412   357   198 50284
  15414   257    11   198 50284 15414   275    11   198 50284 22915   503
   5619   198   198  1003  7469   500   257  8265  1444   953    62    64
    351  1115 14090    13   220   198  1003  5211   407  1487   262  8265
   1438    11   290   466   407  1487   262  2493  3891    13   220   198
  21412  1353    62 21412   357   198 50284 15414   257    11   198 50284
  15414   275    11   198 50284 22915   503  5619   198   198  1003  7469
    500   257  8265  1444   953    62    64   351  1115 14090    13   220
    198  1003  5211   407  1487   262  8265  1438    11   290   466   407
   1487   262  2493  3891    13   220   198 21412  1353    62 21412   357
    198 50284 15414   257    11   198 50284 15414   275    11   198 50284
  22915   503  5619   198   198  1003  7469   500   257  8265  1444   953
     62    64   351  1115 14090    13   220   198  1003  5211   407  1487
    262  8265  1438    11   290   466   407  1487   262  2493  3891    13
    220   198 21412  1353    62 21412   357   198 50284 15414   257    11
    198 50284 15414   275    11   198 50284 22915   503  5619   198   198
   1003  7469   500   257  8265  1444   953    62    64   351  1115 14090
     13   220   198  1003  5211   407  1487   262  8265  1438    11   290
    466   407  1487   262  2493  3891    13   220   198 21412  1353    62
  21412   357   198 50284 15414   257    11   198 50284 15414   275    11
    198 50284 22915   503  5619   198   198  1003  7469   500   257  8265
   1444   953    62    64   351  1115 14090    13   220   198  1003  5211
    407  1487   262  8265  1438    11   290   466   407  1487   262  2493
   3891    13   220   198 21412  1353    62 21412   357   198 50284 15414
    257    11   198 50284 15414   275    11   198 50284 22915   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   351
   1115 14090    13   220   198  1003  5211   407  1487   262  8265  1438
     11   290   466   407  1487   262  2493  3891    13   220   198 21412
   1353    62 21412   357   198 50284 15414   257    11   198 50284 15414
    275    11   198 50284 22915   503  5619   198   198  1003  7469   500
    257  8265  1444   953    62    64   351  1115 14090    13   220   198
   1003  5211   407  1487   262  8265  1438    11   290   466   407  1487
    262  2493  3891    13   220   198 21412  1353    62 21412   357   198
  50284 15414   257    11   198 50284 15414   275    11   198 50284 22915
    503  5619   198   198  1003  7469   500   257  8265  1444   953    62
     64   351  1115 14090    13   220   198  1003  5211   407  1487   262
   8265  1438    11   290   466   407  1487   262  2493  3891    13   220
    198 21412  1353    62 21412   357   198 50284 15414   257    11   198
  50284 15414   275    11   198 50284 22915   503  5619   198   198  1003
   7469   500   257  8265  1444   953    62    64   351  1115 14090    13
    220   198  1003  5211   407  1487   262  8265  1438    11   290   466
    407  1487   262  2493  3891    13   220   198 21412  1353]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,    13,   220,   198,  1003,
          5211,   407,  1487,   262,  8265,  1438,    11,   290,   466,   407,
          1487,   262,  2493,  3891,    13,   220,   198, 21412,  1353,    62,
         21412,   357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,
           275,    11,   198, 50284, 22915,   503,  5619,   198,   198,  1003,
          7469,   500,   257,  8265,  1444,   953,    62,    64,   351,  1115,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,
          1438,    11,   290,   466,   407,  1487,   262,  2493,  3891,    13,
           220,   198, 21412,  1353,    62, 21412,   357,   198, 50284, 15414,
           257,    11,   198, 50284, 15414,   275,    11,   198, 50284, 22915,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,    13,   220,   198,  1003,
          5211,   407,  1487,   262,  8265,  1438,    11,   290,   466,   407,
          1487,   262,  2493,  3891,    13,   220,   198, 21412,  1353,    62,
         21412,   357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,
           275,    11,   198, 50284, 22915,   503,  5619,   198,   198,  1003,
          7469,   500,   257,  8265,  1444,   953,    62,    64,   351,  1115,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,
          1438,    11,   290,   466,   407,  1487,   262,  2493,  3891,    13,
           220,   198, 21412,  1353,    62, 21412,   357,   198, 50284, 15414,
           257,    11,   198, 50284, 15414,   275,    11,   198, 50284, 22915,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,    13,   220,   198,  1003,
          5211,   407,  1487,   262,  8265,  1438,    11,   290,   466,   407,
          1487,   262,  2493,  3891,    13,   220,   198, 21412,  1353,    62,
         21412,   357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,
           275,    11,   198, 50284, 22915,   503,  5619,   198,   198,  1003,
          7469,   500,   257,  8265,  1444,   953,    62,    64,   351,  1115,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,
          1438,    11,   290,   466,   407,  1487,   262,  2493,  3891,    13,
           220,   198, 21412,  1353,    62, 21412,   357,   198, 50284, 15414,
           257,    11,   198, 50284, 15414,   275,    11,   198, 50284, 22915,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,    13,   220,   198,  1003,
          5211,   407,  1487,   262,  8265,  1438,    11,   290,   466,   407,
          1487,   262,  2493,  3891,    13,   220,   198, 21412,  1353,    62,
         21412,   357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,
           275,    11,   198, 50284, 22915,   503,  5619,   198,   198,  1003,
          7469,   500,   257,  8265,  1444,   953,    62,    64,   351,  1115,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,
          1438,    11,   290,   466,   407,  1487,   262,  2493,  3891,    13,
           220,   198, 21412,  1353,    62, 21412,   357,   198, 50284, 15414,
           257,    11,   198, 50284, 15414,   275,    11,   198, 50284, 22915,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,    13,   220,   198,  1003,
          5211,   407,  1487,   262,  8265,  1438,    11,   290,   466,   407,
          1487,   262,  2493,  3891,    13,   220,   198, 21412,  1353,    62,
         21412,   357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,
           275,    11,   198, 50284, 22915,   503,  5619,   198,   198,  1003,
          7469,   500,   257,  8265,  1444,   953,    62,    64,   351,  1115,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,
          1438,    11,   290,   466,   407,  1487,   262,  2493,  3891,    13,
           220,   198, 21412,  1353,    62, 21412,   357,   198, 50284, 15414,
           257,    11,   198, 50284, 15414,   275,    11,   198, 50284, 22915,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,    13,   220,   198,  1003,
          5211,   407,  1487,   262,  8265,  1438,    11,   290,   466,   407,
          1487,   262,  2493,  3891,    13,   220,   198, 21412,  1353,    62,
         21412,   357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,
           275,    11,   198, 50284, 22915,   503,  5619,   198,   198,  1003,
          7469,   500,   257,  8265,  1444,   953,    62,    64,   351,  1115,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,
          1438,    11,   290,   466,   407,  1487,   262,  2493,  3891,    13,
           220,   198, 21412,  1353,    62, 21412,   357,   198, 50284, 15414,
           257,    11,   198, 50284, 15414,   275,    11,   198, 50284, 22915,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,    13,   220,   198,  1003,
          5211,   407,  1487,   262,  8265,  1438,    11,   290,   466,   407,
          1487,   262,  2493,  3891,    13,   220,   198, 21412,  1353,    62,
         21412,   357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,
           275,    11,   198, 50284, 22915,   503,  5619,   198,   198,  1003,
          7469,   500,   257,  8265,  1444,   953,    62,    64,   351,  1115,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,
          1438,    11,   290,   466,   407,  1487,   262,  2493,  3891,    13,
           220,   198, 21412,  1353,    62, 21412,   357,   198, 50284, 15414,
           257,    11,   198, 50284, 15414,   275,    11,   198, 50284, 22915,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,    13,   220,   198,  1003,
          5211,   407,  1487,   262,  8265,  1438,    11,   290,   466,   407,
          1487,   262,  2493,  3891,    13,   220,   198, 21412,  1353,    62,
         21412,   357,   198, 50284, 15414,   257,    11,   198, 50284, 15414,
           275,    11,   198, 50284, 22915,   503,  5619,   198,   198,  1003,
          7469,   500,   257,  8265,  1444,   953,    62,    64,   351,  1115,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,
          1438,    11,   290,   466,   407,  1487,   262,  2493,  3891,    13,
           220,   198, 21412,  1353]], device='cuda:0')
Checking if done:
tokens generated:  862
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  50.762937556
-------------------------------------------------------
MCTS Iteration:  38.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.92361945 0.92361945 0.92361945 0.92361945 0.92361945 0.92361945
 0.92361945 1.4045243  1.4045243  1.4045243 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0028530899999736903
-------------------------------------------------------
MCTS Iteration:  39.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9455772 0.9455772 0.9455772 0.9455772 0.9455772 0.9455772 0.9455772
 0.9455772 1.4319715 1.4319715]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020766890000345484
-------------------------------------------------------
MCTS Iteration:  40.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9672622 0.9672622 0.9672622 0.9672622 0.9672622 0.9672622 0.9672622
 0.9672622 0.9672622 1.4590778]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.88 0.88 2.76 2.76 2.76 2.76 2.76 2.76 2.76 2.76]  taking action:  2
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002099028999964503
-------------------------------------------------------
MCTS Iteration:  41.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.9886845 0.9886845 0.9886845 0.9886845 0.9886845 0.9886845 0.9886845
 0.9886845 0.9886845 0.9886845]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002041593000001285
-------------------------------------------------------
MCTS Iteration:  42.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.67487746 1.0098529  1.0098529  1.0098529  1.0098529  1.0098529
 1.0098529  1.0098529  1.0098529  1.0098529 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020587429999636697
-------------------------------------------------------
MCTS Iteration:  43.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6923142 0.6923142 1.030777  1.030777  1.030777  1.030777  1.030777
 1.030777  1.030777  1.030777 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020776670000373088
-------------------------------------------------------
MCTS Iteration:  44.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.70955354 0.70955354 0.70955354 1.0514643  1.0514643  1.0514643
 1.0514643  1.0514643  1.0514643  1.0514643 ]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002063572999986718
-------------------------------------------------------
MCTS Iteration:  45.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7266026 0.7266026 0.7266026 0.7266026 1.071923  1.071923  1.071923
 1.071923  1.071923  1.071923 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
SEQUENCE:  [[ 257   11  275   11  266   16 5619  198 4666   62]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[ 257   11  275   11  266   16 5619  198 4666   62]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 ( a, b, w1 );
mod_a instance2 ( w1, b, w2 );
mod_a instance3 ( a, w2, out );

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357   257    11   275    11
    266    16  5619   198  4666    62    64  4554    17   357   266    16
     11   275    11   266    17  5619   198  4666    62    64  4554    18
    357   257    11   266    17    11   503  5619   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,   257,    11,   275,    11,   266,    16,  5619,   198,
          4666,    62,    64,  4554,    17,   357,   266,    16,    11,   275,
            11,   266,    17,  5619,   198,  4666,    62,    64,  4554,    18,
           357,   257,    11,   266,    17,    11,   503,  5619,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  60
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 ( a, b, w1 );
mod_a instance2 ( w1, b, w2 );
mod_a instance3 ( a, w2, out );

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.146418933000007
-------------------------------------------------------
MCTS Iteration:  46.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.74346715 0.74346715 0.74346715 0.74346715 0.74346715 1.0921607
 1.0921607  1.0921607  1.0921607  1.0921607 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0021184870000183764
-------------------------------------------------------
MCTS Iteration:  47.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7601535 0.7601535 0.7601535 0.7601535 0.7601535 0.7601535 1.112184
 1.112184  1.112184  1.112184 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64    13   632   468   734 14090   357    64   290   275]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  ) and one output (out)
module mod 1
LLMEstimate:  ) and one output (out)
module mod 1
LLMEstimate:  ), and one output (out)
module mod 1
LLMEstimate:  ) and one output (out)
module mod 1
LLMEstimate:  ) and one output (out)
module top 1
LLMEstimate:  ) and one output (out)
module mod 1
LLMEstimate:  ) and one output (out)
module mod 1
LLMEstimate:  ) and one output (out).

end 1
LLMEstimate:  ) and one output (out)
module mod 1
LLMEstimate:  ), and one output (out)
module mod 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    13
    632   468   734 14090   357    64   290   275]]
SEQUENCE:  [[    8   290   530  5072   357   448     8   198 21412   953]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[    8   290   530  5072   357   448     8   198 21412   953]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a. It has two ports (a and b) and one output (out)
module mod_a ( input a, input b, output out );

//Define the instance of the module mod_a. You can use the following code:
//This is a combinational circuit, so use a combinational always block.
//The initial statement must be a combinational statement.
always @ (a or b)
	out = a & b;

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    13
    632   468   734 14090   357    64   290   275     8   290   530  5072
    357   448     8   198 21412   953    62    64   357  5128   257    11
   5128   275    11  5072   503  5619   198   198  1003  7469   500   262
   4554   286   262  8265   953    62    64    13   921   460   779   262
   1708  2438    25   198  1003  1212   318   257  1974 26201 10349    11
    523   779   257  1974 26201  1464  2512    13   198  1003   464  4238
   2643  1276   307   257  1974 26201  2643    13   198 33770  2488   357
     64   393   275     8   198   197   448   796   257  1222   275    26
    198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,    13,   632,   468,   734, 14090,   357,    64,
           290,   275,     8,   290,   530,  5072,   357,   448,     8,   198,
         21412,   953,    62,    64,   357,  5128,   257,    11,  5128,   275,
            11,  5072,   503,  5619,   198,   198,  1003,  7469,   500,   262,
          4554,   286,   262,  8265,   953,    62,    64,    13,   921,   460,
           779,   262,  1708,  2438,    25,   198,  1003,  1212,   318,   257,
          1974, 26201, 10349,    11,   523,   779,   257,  1974, 26201,  1464,
          2512,    13,   198,  1003,   464,  4238,  2643,  1276,   307,   257,
          1974, 26201,  2643,    13,   198, 33770,  2488,   357,    64,   393,
           275,     8,   198,   197,   448,   796,   257,  1222,   275,    26,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  112
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a. It has two ports (a and b) and one output (out)
module mod_a ( input a, input b, output out );

//Define the instance of the module mod_a. You can use the following code:
//This is a combinational circuit, so use a combinational always block.
//The initial statement must be a combinational statement.
always @ (a or b)
	out = a & b;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  12.716567263999991
-------------------------------------------------------
MCTS Iteration:  48.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7766667 0.7766667 0.7766667 0.7766667 0.7766667 0.7766667 0.7766667
 1.132     1.132     1.132    ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0021502980000036587
-------------------------------------------------------
MCTS Iteration:  49.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.7930123 0.7930123 0.7930123 0.7930123 0.7930123 0.7930123 0.7930123
 0.7930123 1.1516147 1.1516147]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020621340000275268
-------------------------------------------------------
MCTS Iteration:  50.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8091952 0.8091952 0.8091952 0.8091952 0.8091952 0.8091952 0.8091952
 0.8091952 0.8091952 1.1710343]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0428869 1.0428869 1.0428869 3.0857737 3.0857737 3.0857737 3.0857737
 3.0857737 3.0857737 3.0857737]  taking action:  3
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020590510000033646
-------------------------------------------------------
MCTS Iteration:  51.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.8252203 0.8252203 0.8252203 0.8252203 0.8252203 0.8252203 0.8252203
 0.8252203 0.8252203 0.8252203]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020538229999829127
-------------------------------------------------------
MCTS Iteration:  52.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5780788  0.84109193 0.84109193 0.84109193 0.84109193 0.84109193
 0.84109193 0.84109193 0.84109193 0.84109193]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.00208553900000652
-------------------------------------------------------
MCTS Iteration:  53.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5915553  0.5915553  0.85681456 0.85681456 0.85681456 0.85681456
 0.85681456 0.85681456 0.85681456 0.85681456]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002072085000008883
-------------------------------------------------------
MCTS Iteration:  54.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6049077  0.6049077  0.6049077  0.87239236 0.87239236 0.87239236
 0.87239236 0.87239236 0.87239236 0.87239236]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020292829999561945
-------------------------------------------------------
MCTS Iteration:  55.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6181391 0.6181391 0.6181391 0.6181391 0.887829  0.887829  0.887829
 0.887829  0.887829  0.887829 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
SEQUENCE:  [[  64   11  275   11  266   16 1776  198 4666   62]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  64   11  275   11  266   16 1776  198 4666   62]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (a, b, w1);
mod_a instance2 (a, w1, w2);
mod_a instance3 (a, w2, w3);
mod_a instance4 (w3, b, out);

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357    64    11   275    11
    266    16  1776   198  4666    62    64  4554    17   357    64    11
    266    16    11   266    17  1776   198  4666    62    64  4554    18
    357    64    11   266    17    11   266    18  1776   198  4666    62
     64  4554    19   357    86    18    11   275    11   503  1776   198
    198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,    64,    11,   275,    11,   266,    16,  1776,   198,
          4666,    62,    64,  4554,    17,   357,    64,    11,   266,    16,
            11,   266,    17,  1776,   198,  4666,    62,    64,  4554,    18,
           357,    64,    11,   266,    17,    11,   266,    18,  1776,   198,
          4666,    62,    64,  4554,    19,   357,    86,    18,    11,   275,
            11,   503,  1776,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  75
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (a, b, w1);
mod_a instance2 (a, w1, w2);
mod_a instance3 (a, w2, w3);
mod_a instance4 (w3, b, out);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.896088847000044
-------------------------------------------------------
MCTS Iteration:  56.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.63125306 0.63125306 0.63125306 0.63125306 0.63125306 0.9031287
 0.9031287  0.9031287  0.9031287  0.9031287 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002097559999981513
-------------------------------------------------------
MCTS Iteration:  57.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.64425236 0.64425236 0.64425236 0.64425236 0.64425236 0.64425236
 0.9182945  0.9182945  0.9182945  0.9182945 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64   326  2753   734 17311   290   281  5072    11   788]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   instantiate it
//four times. 
 1
LLMEstimate:   instantiate it. 
//The instance is 1
LLMEstimate:   instantiate it. 
//The module's 1
LLMEstimate:   instantiate it
//four times.

 1
LLMEstimate:   instantiate it.
//You can use the 1
LLMEstimate:   instantiate it.

module mod_a 1
LLMEstimate:   
// instantiate it three times.
 1
LLMEstimate:   instantiate it
//four times.

 1
LLMEstimate:   instantiate it
module mod_a ( input 1
LLMEstimate:   instantiate it
module mod_a ( input 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
   2753   734 17311   290   281  5072    11   788]]
SEQUENCE:  [[ 9113  9386   340   198  1003 14337  1661    13   628]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[ 9113  9386   340   198  1003 14337  1661    13   628]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  29
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a that takes two inputs and an output, then instantiate it
//four times.


endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
   2753   734 17311   290   281  5072    11   788  9113  9386   340   198
   1003 14337  1661    13   628   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   326,  2753,   734, 17311,   290,   281,  5072,
            11,   788,  9113,  9386,   340,   198,  1003, 14337,  1661,    13,
           628,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  32
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a that takes two inputs and an output, then instantiate it
//four times.


endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.805825317000028
-------------------------------------------------------
MCTS Iteration:  58.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6571402  0.6571402  0.6571402  0.6571402  0.6571402  0.6571402
 0.6571402  0.93333024 0.93333024 0.93333024]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0021253929999716092
-------------------------------------------------------
MCTS Iteration:  59.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6699192 0.6699192 0.6699192 0.6699192 0.6699192 0.6699192 0.6699192
 0.6699192 0.948239  0.948239 ]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002086525999970945
-------------------------------------------------------
MCTS Iteration:  60.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6825921 0.6825921 0.6825921 0.6825921 0.6825921 0.6825921 0.6825921
 0.6825921 0.6825921 0.9630242]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1901479 1.1901479 1.1901479 1.1901479 3.3802958 3.3802958 3.3802958
 3.3802958 3.3802958 3.3802958]  taking action:  4
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002114138000024468
-------------------------------------------------------
MCTS Iteration:  61.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.6951615 0.6951615 0.6951615 0.6951615 0.6951615 0.6951615 0.6951615
 0.6951615 0.6951615 0.6951615]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020434909999949014
-------------------------------------------------------
MCTS Iteration:  62.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.49417627 0.70763    0.70763    0.70763    0.70763    0.70763
 0.70763    0.70763    0.70763    0.70763   ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002066863999971247
-------------------------------------------------------
MCTS Iteration:  63.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.505      0.505      0.71999997 0.71999997 0.71999997 0.71999997
 0.71999997 0.71999997 0.71999997 0.71999997]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002065281000000141
-------------------------------------------------------
MCTS Iteration:  64.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.51573944 0.51573944 0.51573944 0.73227364 0.73227364 0.73227364
 0.73227364 0.73227364 0.73227364 0.73227364]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002032044000031874
-------------------------------------------------------
MCTS Iteration:  65.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.52639663 0.52639663 0.52639663 0.52639663 0.74445325 0.74445325
 0.74445325 0.74445325 0.74445325 0.74445325]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16    7]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16     7]]
SEQUENCE:  [[  64   11  275   11  266   16 1776  198 4666   62]]
MCTS Stage 2 - Expansion: next action:  8  corresponding to state:  [[  64   11  275   11  266   16 1776  198 4666   62]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1(a, b, w1);
mod_a instance2(w1, b, w2);
mod_a instance3(a, w2, out);

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16     7    64    11   275    11
    266    16  1776   198  4666    62    64  4554    17     7    86    16
     11   275    11   266    17  1776   198  4666    62    64  4554    18
      7    64    11   266    17    11   503  1776   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,     7,    64,    11,   275,    11,   266,    16,  1776,   198,
          4666,    62,    64,  4554,    17,     7,    86,    16,    11,   275,
            11,   266,    17,  1776,   198,  4666,    62,    64,  4554,    18,
             7,    64,    11,   266,    17,    11,   503,  1776,   198,   198,
           437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  60
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1(a, b, w1);
mod_a instance2(w1, b, w2);
mod_a instance3(a, w2, out);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.135365137999997
-------------------------------------------------------
MCTS Iteration:  66.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.53697336 0.53697336 0.53697336 0.53697336 0.53697336 0.75654095
 0.75654095 0.75654095 0.75654095 0.75654095]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002134624999996504
-------------------------------------------------------
MCTS Iteration:  67.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5474714 0.5474714 0.5474714 0.5474714 0.5474714 0.5474714 0.7685388
 0.7685388 0.7685388 0.7685388]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64   326 20417  1115 14090   284  1115 19474    13   220]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  
//The ports are called in1, in 1
LLMEstimate:  
//Do not change the module's name or 1
LLMEstimate:  
//Do not change the module's code. 1
LLMEstimate:  
//Do not change the module's code. 1
LLMEstimate:  
//Do not change the module declaration below. 1
LLMEstimate:  
//Do not change the module name, even 1
LLMEstimate:  
//Do not change the module's code. 1
LLMEstimate:  
// Do not change the module's code. 1
LLMEstimate:  
//Do not change the module's code. 1
LLMEstimate:  
//Do not change the module's code. 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
  20417  1115 14090   284  1115 19474    13   220]]
SEQUENCE:  [[ 198 1003 5211  407 1487  262 8265  338 2438   13]]
MCTS Stage 2 - Expansion: next action:  6  corresponding to state:  [[ 198 1003 5211  407 1487  262 8265  338 2438   13]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a that connects three ports to three wires. 
//Do not change the module's code. 

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
  20417  1115 14090   284  1115 19474    13   220   198  1003  5211   407
   1487   262  8265   338  2438    13   220   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   326, 20417,  1115, 14090,   284,  1115, 19474,
            13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,   338,
          2438,    13,   220,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  35
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a that connects three ports to three wires. 
//Do not change the module's code. 

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  8.90742738900002
-------------------------------------------------------
MCTS Iteration:  68.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.55789256 0.55789256 0.55789256 0.55789256 0.55789256 0.55789256
 0.55789256 0.7804486  0.7804486  0.7804486 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002097112000001289
-------------------------------------------------------
MCTS Iteration:  69.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5682385 0.5682385 0.5682385 0.5682385 0.5682385 0.5682385 0.5682385
 0.5682385 0.7922725 0.7922725]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020550129999605815
-------------------------------------------------------
MCTS Iteration:  70.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.5785109 0.5785109 0.5785109 0.5785109 0.5785109 0.5785109 0.5785109
 0.5785109 0.5785109 0.8040125]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.3255684 1.3255684 1.3255684 1.3255684 1.3255684 3.6511369 3.6511369
 3.6511369 3.6511369 3.6511369]  taking action:  5
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020493189999797323
-------------------------------------------------------
MCTS Iteration:  71.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.588711 0.588711 0.588711 0.588711 0.588711 0.588711 0.588711 0.588711
 0.588711 0.588711]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020736050000209616
-------------------------------------------------------
MCTS Iteration:  72.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.42119163 0.5988406  0.5988406  0.5988406  0.5988406  0.5988406
 0.5988406  0.5988406  0.5988406  0.5988406 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020055960000036066
-------------------------------------------------------
MCTS Iteration:  73.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.43013436 0.43013436 0.60890114 0.60890114 0.60890114 0.60890114
 0.60890114 0.60890114 0.60890114 0.60890114]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020206379999763158
-------------------------------------------------------
MCTS Iteration:  74.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.43901676 0.43901676 0.43901676 0.61889386 0.61889386 0.61889386
 0.61889386 0.61889386 0.61889386 0.61889386]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002044999000020198
-------------------------------------------------------
MCTS Iteration:  75.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.44784015 0.44784015 0.44784015 0.44784015 0.6288202  0.6288202
 0.6288202  0.6288202  0.6288202  0.6288202 ]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
SEQUENCE:  [[  64   11  275   11  266   16 1776  198 4666   62]]
MCTS Stage 2 - Expansion: next action:  3  corresponding to state:  [[  64   11  275   11  266   16 1776  198 4666   62]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (a, b, w1);
mod_a instance2 (a, w1, w2);
mod_a instance3 (a, w2, b, w3);

assign out = w3;

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357    64    11   275    11
    266    16  1776   198  4666    62    64  4554    17   357    64    11
    266    16    11   266    17  1776   198  4666    62    64  4554    18
    357    64    11   266    17    11   275    11   266    18  1776   198
    198   562   570   503   796   266    18    26   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,    64,    11,   275,    11,   266,    16,  1776,   198,
          4666,    62,    64,  4554,    17,   357,    64,    11,   266,    16,
            11,   266,    17,  1776,   198,  4666,    62,    64,  4554,    18,
           357,    64,    11,   266,    17,    11,   275,    11,   266,    18,
          1776,   198,   198,   562,   570,   503,   796,   266,    18,    26,
           198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  72
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (a, b, w1);
mod_a instance2 (a, w1, w2);
mod_a instance3 (a, w2, b, w3);

assign out = w3;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.738373945999967
-------------------------------------------------------
MCTS Iteration:  76.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.45660573 0.45660573 0.45660573 0.45660573 0.45660573 0.6386814
 0.6386814  0.6386814  0.6386814  0.6386814 ]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020555899999976646
-------------------------------------------------------
MCTS Iteration:  77.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.46531445 0.46531445 0.46531445 0.46531445 0.46531445 0.46531445
 0.64847875 0.64847875 0.64847875 0.64847875]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64    13   632   481   307   925   286 19474   290 28441]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  .

//Define registers
reg out 1
LLMEstimate:  .

wire out_mod_a; 1
LLMEstimate:  .

assign out = a & b 1
LLMEstimate:  .

assign out = a & b 1
LLMEstimate:  .

//Define the module's ports 1
LLMEstimate:  .

assign out = a & b 1
LLMEstimate:  .

//Define a module called mod 1
LLMEstimate:  . 
//Do not worry about the details 1
LLMEstimate:  .

assign out = a & b 1
LLMEstimate:  .

reg out;

always @ 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    13
    632   481   307   925   286 19474   290 28441]]
SEQUENCE:  [[  13  220  198 1003 5211  407 5490  546  262 3307]]
MCTS Stage 2 - Expansion: next action:  7  corresponding to state:  [[  13  220  198 1003 5211  407 5490  546  262 3307]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a. It will be made of wires and registers. 
//Do not worry about the details.

//Define an instance of the module mod_a. You can call it "m1". 
//Do not call the instance "a", as that is the name of the input wire. 
//Do not call the instance "b", as that is the name of the input wire. 
//Do not call the instance "out", as that is the name of the output wire. 
//Do not call the instance "m1", as that is the name of the module. 
//Do not call the instance "m2", as that is the name of the module. 
//Do not call the instance "m3", as that is the name of the module. 
//Do not call the instance "m4", as that is the name of the module. 
//Do not call the instance "m5", as that is the name of the module. 
//Do not call the instance "m6", as that is the name of the module. 
//Do not call the instance "m7", as that is the name of the module. 
//Do not call the instance "m8", as that is the name of the module. 
//Do not call the instance "m9", as that is the name of the module. 
//Do not call the instance "m10", as that is the name of the module. 
//Do not call the instance "m11", as that is the name of the module. 
//Do not call the instance "m12", as that is the name of the module. 
//Do not call the instance "m13", as that is the name of the module. 
//Do not call the instance "m14", as that is the name of the module. 
//Do not call the instance "m15", as that is the name of the module. 
//Do not call the instance "m16", as that is the name of the module. 
//Do not call the instance "m17", as that is the name of the module. 
//Do not call the instance "m18", as that is the name of the module. 
//Do not call the instance "m19", as that is the name of the module. 
//Do not call the instance "m20", as that is the name of the module. 
//Do not call the instance "m21", as that is the name of the module. 
//Do not call the instance "m22", as that is the name of the module. 
//Do not call the instance "m23", as that is the name of the module. 
//Do not call the instance "m24", as that is the name of the module. 
//Do not call the instance "m25", as that is the name of the module. 
//Do not call the instance "m26", as that is the name of the module. 
//Do not call the instance "m27", as that is the name of the module. 
//Do not call the instance "m28", as that is the name of the module. 
//Do not call the instance "m29", as that is the name of the module. 
//Do not call the instance "m30", as that is the name of the module. 
//Do not call the instance "m31", as that is the name of the module. 
//Do not call the instance "m32", as that is the name of the module. 
//Do not call the instance "m33", as that is the name of the module. 
//Do not call the instance "m34", as that is the name of the module. 
//Do not call the instance "m35", as that is the name of the module. 
//Do not call the instance "m36
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    13
    632   481   307   925   286 19474   290 28441    13   220   198  1003
   5211   407  5490   546   262  3307    13   198   198  1003  7469   500
    281  4554   286   262  8265   953    62    64    13   921   460   869
    340   366    76    16  1911   220   198  1003  5211   407   869   262
   4554   366    64  1600   355   326   318   262  1438   286   262  5128
   6503    13   220   198  1003  5211   407   869   262  4554   366    65
   1600   355   326   318   262  1438   286   262  5128  6503    13   220
    198  1003  5211   407   869   262  4554   366   448  1600   355   326
    318   262  1438   286   262  5072  6503    13   220   198  1003  5211
    407   869   262  4554   366    76    16  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76    17  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
     18  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76    19  1600   355
    326   318   262  1438   286   262  8265    13   220   198  1003  5211
    407   869   262  4554   366    76    20  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76    21  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
     22  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76    23  1600   355
    326   318   262  1438   286   262  8265    13   220   198  1003  5211
    407   869   262  4554   366    76    24  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76   940  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
   1157  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76  1065  1600   355
    326   318   262  1438   286   262  8265    13   220   198  1003  5211
    407   869   262  4554   366    76  1485  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76  1415  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
   1314  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76  1433  1600   355
    326   318   262  1438   286   262  8265    13   220   198  1003  5211
    407   869   262  4554   366    76  1558  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76  1507  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
   1129  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76  1238  1600   355
    326   318   262  1438   286   262  8265    13   220   198  1003  5211
    407   869   262  4554   366    76  2481  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76  1828  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
   1954  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76  1731  1600   355
    326   318   262  1438   286   262  8265    13   220   198  1003  5211
    407   869   262  4554   366    76  1495  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76  2075  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
   1983  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76  2078  1600   355
    326   318   262  1438   286   262  8265    13   220   198  1003  5211
    407   869   262  4554   366    76  1959  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76  1270  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
   3132  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76  2624  1600   355
    326   318   262  1438   286   262  8265    13   220   198  1003  5211
    407   869   262  4554   366    76  2091  1600   355   326   318   262
   1438   286   262  8265    13   220   198  1003  5211   407   869   262
   4554   366    76  2682  1600   355   326   318   262  1438   286   262
   8265    13   220   198  1003  5211   407   869   262  4554   366    76
   2327  1600   355   326   318   262  1438   286   262  8265    13   220
    198  1003  5211   407   869   262  4554   366    76  2623]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,    13,   632,   481,   307,   925,   286, 19474,
           290, 28441,    13,   220,   198,  1003,  5211,   407,  5490,   546,
           262,  3307,    13,   198,   198,  1003,  7469,   500,   281,  4554,
           286,   262,  8265,   953,    62,    64,    13,   921,   460,   869,
           340,   366,    76,    16,  1911,   220,   198,  1003,  5211,   407,
           869,   262,  4554,   366,    64,  1600,   355,   326,   318,   262,
          1438,   286,   262,  5128,  6503,    13,   220,   198,  1003,  5211,
           407,   869,   262,  4554,   366,    65,  1600,   355,   326,   318,
           262,  1438,   286,   262,  5128,  6503,    13,   220,   198,  1003,
          5211,   407,   869,   262,  4554,   366,   448,  1600,   355,   326,
           318,   262,  1438,   286,   262,  5072,  6503,    13,   220,   198,
          1003,  5211,   407,   869,   262,  4554,   366,    76,    16,  1600,
           355,   326,   318,   262,  1438,   286,   262,  8265,    13,   220,
           198,  1003,  5211,   407,   869,   262,  4554,   366,    76,    17,
          1600,   355,   326,   318,   262,  1438,   286,   262,  8265,    13,
           220,   198,  1003,  5211,   407,   869,   262,  4554,   366,    76,
            18,  1600,   355,   326,   318,   262,  1438,   286,   262,  8265,
            13,   220,   198,  1003,  5211,   407,   869,   262,  4554,   366,
            76,    19,  1600,   355,   326,   318,   262,  1438,   286,   262,
          8265,    13,   220,   198,  1003,  5211,   407,   869,   262,  4554,
           366,    76,    20,  1600,   355,   326,   318,   262,  1438,   286,
           262,  8265,    13,   220,   198,  1003,  5211,   407,   869,   262,
          4554,   366,    76,    21,  1600,   355,   326,   318,   262,  1438,
           286,   262,  8265,    13,   220,   198,  1003,  5211,   407,   869,
           262,  4554,   366,    76,    22,  1600,   355,   326,   318,   262,
          1438,   286,   262,  8265,    13,   220,   198,  1003,  5211,   407,
           869,   262,  4554,   366,    76,    23,  1600,   355,   326,   318,
           262,  1438,   286,   262,  8265,    13,   220,   198,  1003,  5211,
           407,   869,   262,  4554,   366,    76,    24,  1600,   355,   326,
           318,   262,  1438,   286,   262,  8265,    13,   220,   198,  1003,
          5211,   407,   869,   262,  4554,   366,    76,   940,  1600,   355,
           326,   318,   262,  1438,   286,   262,  8265,    13,   220,   198,
          1003,  5211,   407,   869,   262,  4554,   366,    76,  1157,  1600,
           355,   326,   318,   262,  1438,   286,   262,  8265,    13,   220,
           198,  1003,  5211,   407,   869,   262,  4554,   366,    76,  1065,
          1600,   355,   326,   318,   262,  1438,   286,   262,  8265,    13,
           220,   198,  1003,  5211,   407,   869,   262,  4554,   366,    76,
          1485,  1600,   355,   326,   318,   262,  1438,   286,   262,  8265,
            13,   220,   198,  1003,  5211,   407,   869,   262,  4554,   366,
            76,  1415,  1600,   355,   326,   318,   262,  1438,   286,   262,
          8265,    13,   220,   198,  1003,  5211,   407,   869,   262,  4554,
           366,    76,  1314,  1600,   355,   326,   318,   262,  1438,   286,
           262,  8265,    13,   220,   198,  1003,  5211,   407,   869,   262,
          4554,   366,    76,  1433,  1600,   355,   326,   318,   262,  1438,
           286,   262,  8265,    13,   220,   198,  1003,  5211,   407,   869,
           262,  4554,   366,    76,  1558,  1600,   355,   326,   318,   262,
          1438,   286,   262,  8265,    13,   220,   198,  1003,  5211,   407,
           869,   262,  4554,   366,    76,  1507,  1600,   355,   326,   318,
           262,  1438,   286,   262,  8265,    13,   220,   198,  1003,  5211,
           407,   869,   262,  4554,   366,    76,  1129,  1600,   355,   326,
           318,   262,  1438,   286,   262,  8265,    13,   220,   198,  1003,
          5211,   407,   869,   262,  4554,   366,    76,  1238,  1600,   355,
           326,   318,   262,  1438,   286,   262,  8265,    13,   220,   198,
          1003,  5211,   407,   869,   262,  4554,   366,    76,  2481,  1600,
           355,   326,   318,   262,  1438,   286,   262,  8265,    13,   220,
           198,  1003,  5211,   407,   869,   262,  4554,   366,    76,  1828,
          1600,   355,   326,   318,   262,  1438,   286,   262,  8265,    13,
           220,   198,  1003,  5211,   407,   869,   262,  4554,   366,    76,
          1954,  1600,   355,   326,   318,   262,  1438,   286,   262,  8265,
            13,   220,   198,  1003,  5211,   407,   869,   262,  4554,   366,
            76,  1731,  1600,   355,   326,   318,   262,  1438,   286,   262,
          8265,    13,   220,   198,  1003,  5211,   407,   869,   262,  4554,
           366,    76,  1495,  1600,   355,   326,   318,   262,  1438,   286,
           262,  8265,    13,   220,   198,  1003,  5211,   407,   869,   262,
          4554,   366,    76,  2075,  1600,   355,   326,   318,   262,  1438,
           286,   262,  8265,    13,   220,   198,  1003,  5211,   407,   869,
           262,  4554,   366,    76,  1983,  1600,   355,   326,   318,   262,
          1438,   286,   262,  8265,    13,   220,   198,  1003,  5211,   407,
           869,   262,  4554,   366,    76,  2078,  1600,   355,   326,   318,
           262,  1438,   286,   262,  8265,    13,   220,   198,  1003,  5211,
           407,   869,   262,  4554,   366,    76,  1959,  1600,   355,   326,
           318,   262,  1438,   286,   262,  8265,    13,   220,   198,  1003,
          5211,   407,   869,   262,  4554,   366,    76,  1270,  1600,   355,
           326,   318,   262,  1438,   286,   262,  8265,    13,   220,   198,
          1003,  5211,   407,   869,   262,  4554,   366,    76,  3132,  1600,
           355,   326,   318,   262,  1438,   286,   262,  8265,    13,   220,
           198,  1003,  5211,   407,   869,   262,  4554,   366,    76,  2624,
          1600,   355,   326,   318,   262,  1438,   286,   262,  8265,    13,
           220,   198,  1003,  5211,   407,   869,   262,  4554,   366,    76,
          2091,  1600,   355,   326,   318,   262,  1438,   286,   262,  8265,
            13,   220,   198,  1003,  5211,   407,   869,   262,  4554,   366,
            76,  2682,  1600,   355,   326,   318,   262,  1438,   286,   262,
          8265,    13,   220,   198,  1003,  5211,   407,   869,   262,  4554,
           366,    76,  2327,  1600,   355,   326,   318,   262,  1438,   286,
           262,  8265,    13,   220,   198,  1003,  5211,   407,   869,   262,
          4554,   366,    76,  2623]], device='cuda:0')
Checking if done:
tokens generated:  862
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  50.66747728500002
-------------------------------------------------------
MCTS Iteration:  78.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4739675 0.4739675 0.4739675 0.4739675 0.4739675 0.4739675 0.4739675
 0.6582135 0.6582135 0.6582135]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002331798999989587
-------------------------------------------------------
MCTS Iteration:  79.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.48256606 0.48256606 0.48256606 0.48256606 0.48256606 0.48256606
 0.48256606 0.48256606 0.66788685 0.66788685]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0021081200000026
-------------------------------------------------------
MCTS Iteration:  80.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4911111 0.4911111 0.4911111 0.4911111 0.4911111 0.4911111 0.4911111
 0.4911111 0.4911111 0.6775   ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 1.4516147 3.9032295
 3.9032295 3.9032295 3.9032295]  taking action:  6
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002116713000020809
-------------------------------------------------------
MCTS Iteration:  81.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.49960345 0.49960345 0.49960345 0.49960345 0.49960345 0.49960345
 0.49960345 0.49960345 0.49960345 0.49960345]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020116320000056476
-------------------------------------------------------
MCTS Iteration:  82.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.35723984 0.5080442  0.5080442  0.5080442  0.5080442  0.5080442
 0.5080442  0.5080442  0.5080442  0.5080442 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020459140000070875
-------------------------------------------------------
MCTS Iteration:  83.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.36479092 0.36479092 0.5164344  0.5164344  0.5164344  0.5164344
 0.5164344  0.5164344  0.5164344  0.5164344 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002064241999960359
-------------------------------------------------------
MCTS Iteration:  84.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.37229717 0.37229717 0.37229717 0.5247745  0.5247745  0.5247745
 0.5247745  0.5247745  0.5247745  0.5247745 ]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020178809999720215
-------------------------------------------------------
MCTS Iteration:  85.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3797593  0.3797593  0.3797593  0.3797593  0.53306586 0.53306586
 0.53306586 0.53306586 0.53306586 0.53306586]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
SEQUENCE:  [[ 13 259  16   7  64 828  13 259  17   7]]
MCTS Stage 2 - Expansion: next action:  9  corresponding to state:  [[ 13 259  16   7  64 828  13 259  17   7]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (.in1(a),.in2(b),.out(w1));
mod_a instance2 (.in1(a),.in2(b),.out(w2));
mod_a instance3 (.in1(a),.in2(b),.out(w3));

assign out = w1 | w2 | w3;

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16 20262   259    16     7    64
    828    13   259    17     7    65   828    13   448     7    86    16
  18125   198  4666    62    64  4554    17 20262   259    16     7    64
    828    13   259    17     7    65   828    13   448     7    86    17
  18125   198  4666    62    64  4554    18 20262   259    16     7    64
    828    13   259    17     7    65   828    13   448     7    86    18
  18125   198   198   562   570   503   796   266    16   930   266    17
    930   266    18    26   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,    13,   259,    16,     7,    64,   828,    13,   259,
            17,     7,    65,   828,    13,   448,     7,    86,    16, 18125,
           198,  4666,    62,    64,  4554,    17,   357,    13,   259,    16,
             7,    64,   828,    13,   259,    17,     7,    65,   828,    13,
           448,     7,    86,    17, 18125,   198,  4666,    62,    64,  4554,
            18,   357,    13,   259,    16,     7,    64,   828,    13,   259,
            17,     7,    65,   828,    13,   448,     7,    86,    18, 18125,
           198,   198,   562,   570,   503,   796,   266,    16,   930,   266,
            17,   930,   266,    18,    26,   198,   198,   437, 21412]],
       device='cuda:0')
Checking if done:
tokens generated:  104
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (.in1(a),.in2(b),.out(w1));
mod_a instance2 (.in1(a),.in2(b),.out(w2));
mod_a instance3 (.in1(a),.in2(b),.out(w3));

assign out = w1 | w2 | w3;

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  12.475319403000015
-------------------------------------------------------
MCTS Iteration:  86.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3871783 0.3871783 0.3871783 0.3871783 0.3871783 0.5413093 0.5413093
 0.5413093 0.5413093 0.5413093]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0021785859999567947
-------------------------------------------------------
MCTS Iteration:  87.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.39455473 0.39455473 0.39455473 0.39455473 0.39455473 0.39455473
 0.5495052  0.5495052  0.5495052  0.5495052 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64    11   351 17311   257   290   275    11   290 23862]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:   out.

endmodule 1
LLMEstimate:   out.

endmodule 1
LLMEstimate:   out.

endmodule 1
LLMEstimate:   out.

endmodule 1
LLMEstimate:   out. 
//The module should be declared 1
LLMEstimate:   out.

assign out = a & 1
LLMEstimate:   out.

assign out = a & 1
LLMEstimate:   out.

endmodule 1
LLMEstimate:   out.

endmodule 1
LLMEstimate:   out.

endmodule 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    11
    351 17311   257   290   275    11   290 23862]]
SEQUENCE:  [[ 503   13  220  198 1003  464 8265  815  307 6875]]
MCTS Stage 2 - Expansion: next action:  4  corresponding to state:  [[ 503   13  220  198 1003  464 8265  815  307 6875]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a, with inputs a and b, and outputs out. 
//The module should be declared as a submodule of top_module. 
//Do not change the module name, file location, or any other information in the file.

//Define the module's ports. You may add, remove, or rename ports. 
//Do not change the port names. 

//Define the instance's ports. You may add, remove, or rename ports. 
//Do not change the port names. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define the instance's instantiation code. You may add, remove, or rename lines of code. 
//Do not change the line numbers. 

//Define
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    11
    351 17311   257   290   275    11   290 23862   503    13   220   198
   1003   464  8265   815   307  6875   355   257   850 21412   286  1353
     62 21412    13   220   198  1003  5211   407  1487   262  8265  1438
     11  2393  4067    11   393   597   584  1321   287   262  2393    13
    198   198  1003  7469   500   262  8265   338 14090    13   921   743
    751    11  4781    11   393 36265 14090    13   220   198  1003  5211
    407  1487   262  2493  3891    13   220   198   198  1003  7469   500
    262  4554   338 14090    13   921   743   751    11  4781    11   393
  36265 14090    13   220   198  1003  5211   407  1487   262  2493  3891
     13   220   198   198  1003  7469   500   262  4554   338  9113  3920
   2438    13   921   743   751    11  4781    11   393 36265  3951   286
   2438    13   220   198  1003  5211   407  1487   262  1627  3146    13
    220   198   198  1003  7469   500   262  4554   338  9113  3920  2438
     13   921   743   751    11  4781    11   393 36265  3951   286  2438
     13   220   198  1003  5211   407  1487   262  1627  3146    13   220
    198   198  1003  7469   500   262  4554   338  9113  3920  2438    13
    921   743   751    11  4781    11   393 36265  3951   286  2438    13
    220   198  1003  5211   407  1487   262  1627  3146    13   220   198
    198  1003  7469   500   262  4554   338  9113  3920  2438    13   921
    743   751    11  4781    11   393 36265  3951   286  2438    13   220
    198  1003  5211   407  1487   262  1627  3146    13   220   198   198
   1003  7469   500   262  4554   338  9113  3920  2438    13   921   743
    751    11  4781    11   393 36265  3951   286  2438    13   220   198
   1003  5211   407  1487   262  1627  3146    13   220   198   198  1003
   7469   500   262  4554   338  9113  3920  2438    13   921   743   751
     11  4781    11   393 36265  3951   286  2438    13   220   198  1003
   5211   407  1487   262  1627  3146    13   220   198   198  1003  7469
    500   262  4554   338  9113  3920  2438    13   921   743   751    11
   4781    11   393 36265  3951   286  2438    13   220   198  1003  5211
    407  1487   262  1627  3146    13   220   198   198  1003  7469   500
    262  4554   338  9113  3920  2438    13   921   743   751    11  4781
     11   393 36265  3951   286  2438    13   220   198  1003  5211   407
   1487   262  1627  3146    13   220   198   198  1003  7469   500   262
   4554   338  9113  3920  2438    13   921   743   751    11  4781    11
    393 36265  3951   286  2438    13   220   198  1003  5211   407  1487
    262  1627  3146    13   220   198   198  1003  7469   500   262  4554
    338  9113  3920  2438    13   921   743   751    11  4781    11   393
  36265  3951   286  2438    13   220   198  1003  5211   407  1487   262
   1627  3146    13   220   198   198  1003  7469   500   262  4554   338
   9113  3920  2438    13   921   743   751    11  4781    11   393 36265
   3951   286  2438    13   220   198  1003  5211   407  1487   262  1627
   3146    13   220   198   198  1003  7469   500   262  4554   338  9113
   3920  2438    13   921   743   751    11  4781    11   393 36265  3951
    286  2438    13   220   198  1003  5211   407  1487   262  1627  3146
     13   220   198   198  1003  7469   500   262  4554   338  9113  3920
   2438    13   921   743   751    11  4781    11   393 36265  3951   286
   2438    13   220   198  1003  5211   407  1487   262  1627  3146    13
    220   198   198  1003  7469   500   262  4554   338  9113  3920  2438
     13   921   743   751    11  4781    11   393 36265  3951   286  2438
     13   220   198  1003  5211   407  1487   262  1627  3146    13   220
    198   198  1003  7469   500   262  4554   338  9113  3920  2438    13
    921   743   751    11  4781    11   393 36265  3951   286  2438    13
    220   198  1003  5211   407  1487   262  1627  3146    13   220   198
    198  1003  7469   500   262  4554   338  9113  3920  2438    13   921
    743   751    11  4781    11   393 36265  3951   286  2438    13   220
    198  1003  5211   407  1487   262  1627  3146    13   220   198   198
   1003  7469   500   262  4554   338  9113  3920  2438    13   921   743
    751    11  4781    11   393 36265  3951   286  2438    13   220   198
   1003  5211   407  1487   262  1627  3146    13   220   198   198  1003
   7469   500   262  4554   338  9113  3920  2438    13   921   743   751
     11  4781    11   393 36265  3951   286  2438    13   220   198  1003
   5211   407  1487   262  1627  3146    13   220   198   198  1003  7469
    500   262  4554   338  9113  3920  2438    13   921   743   751    11
   4781    11   393 36265  3951   286  2438    13   220   198  1003  5211
    407  1487   262  1627  3146    13   220   198   198  1003  7469   500
    262  4554   338  9113  3920  2438    13   921   743   751    11  4781
     11   393 36265  3951   286  2438    13   220   198  1003  5211   407
   1487   262  1627  3146    13   220   198   198  1003  7469   500   262
   4554   338  9113  3920  2438    13   921   743   751    11  4781    11
    393 36265  3951   286  2438    13   220   198  1003  5211   407  1487
    262  1627  3146    13   220   198   198  1003  7469   500]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,    11,   351, 17311,   257,   290,   275,    11,
           290, 23862,   503,    13,   220,   198,  1003,   464,  8265,   815,
           307,  6875,   355,   257,   850, 21412,   286,  1353,    62, 21412,
            13,   220,   198,  1003,  5211,   407,  1487,   262,  8265,  1438,
            11,  2393,  4067,    11,   393,   597,   584,  1321,   287,   262,
          2393,    13,   198,   198,  1003,  7469,   500,   262,  8265,   338,
         14090,    13,   921,   743,   751,    11,  4781,    11,   393, 36265,
         14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,  2493,
          3891,    13,   220,   198,   198,  1003,  7469,   500,   262,  4554,
           338, 14090,    13,   921,   743,   751,    11,  4781,    11,   393,
         36265, 14090,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          2493,  3891,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500,   262,  4554,   338,  9113,  3920,  2438,
            13,   921,   743,   751,    11,  4781,    11,   393, 36265,  3951,
           286,  2438,    13,   220,   198,  1003,  5211,   407,  1487,   262,
          1627,  3146,    13,   220,   198,   198,  1003,  7469,   500,   262,
          4554,   338,  9113,  3920,  2438,    13,   921,   743,   751,    11,
          4781,    11,   393, 36265,  3951,   286,  2438,    13,   220,   198,
          1003,  5211,   407,  1487,   262,  1627,  3146,    13,   220,   198,
           198,  1003,  7469,   500]], device='cuda:0')
Checking if done:
tokens generated:  862
Calling isPromptComplete: 
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  50.72401283100004
-------------------------------------------------------
MCTS Iteration:  88.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.40188944 0.40188944 0.40188944 0.40188944 0.40188944 0.40188944
 0.40188944 0.5576549  0.5576549  0.5576549 ]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0024024720000284105
-------------------------------------------------------
MCTS Iteration:  89.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.4091829  0.4091829  0.4091829  0.4091829  0.4091829  0.4091829
 0.4091829  0.4091829  0.56575876 0.56575876]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002131423999969684
-------------------------------------------------------
MCTS Iteration:  90.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.41643608 0.41643608 0.41643608 0.41643608 0.41643608 0.41643608
 0.41643608 0.41643608 0.41643608 0.5738179 ]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999 1.5699999
 4.14      4.14      4.14     ]  taking action:  7
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002051624999978685
-------------------------------------------------------
MCTS Iteration:  91.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.42364955 0.42364955 0.42364955 0.42364955 0.42364955 0.42364955
 0.42364955 0.42364955 0.42364955 0.42364955]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020328420000055303
-------------------------------------------------------
MCTS Iteration:  92.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.30074888 0.4308238  0.4308238  0.4308238  0.4308238  0.4308238
 0.4308238  0.4308238  0.4308238  0.4308238 ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002044981999972606
-------------------------------------------------------
MCTS Iteration:  93.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.30723602 0.30723602 0.43795967 0.43795967 0.43795967 0.43795967
 0.43795967 0.43795967 0.43795967 0.43795967]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020569509999859292
-------------------------------------------------------
MCTS Iteration:  94.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3136887  0.3136887  0.3136887  0.44505763 0.44505763 0.44505763
 0.44505763 0.44505763 0.44505763 0.44505763]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002061053999966589
-------------------------------------------------------
MCTS Iteration:  95.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.32010752 0.32010752 0.32010752 0.32010752 0.45211828 0.45211828
 0.45211828 0.45211828 0.45211828 0.45211828]  taking action:  4
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
SEQUENCE:  [[  18   26  198  198 4666   62   64 4554   16  357]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  .in1(a),.in2( 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
LLMEstimate:  a, b, w1);
mod_ 1
LLMEstimate:   a, b, w1 );
mod_ 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
SEQUENCE:  [[  64   11  275   11  266   16 1776  198 4666   62]]
MCTS Stage 2 - Expansion: next action:  0  corresponding to state:  [[  64   11  275   11  266   16 1776  198 4666   62]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (a, b, w1);
mod_a instance2 (a, w1, w2);
mod_a instance3 (a, w2, w3);
mod_a instance4 (w3, b, out);

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357    64    11   275    11
    266    16  1776   198  4666    62    64  4554    17   357    64    11
    266    16    11   266    17  1776   198  4666    62    64  4554    18
    357    64    11   266    17    11   266    18  1776   198  4666    62
     64  4554    19   357    86    18    11   275    11   503  1776   198
    198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198, 21809,   266,    16,    11,   266,    17,
            11,   266,    18,    26,   198,   198,  4666,    62,    64,  4554,
            16,   357,    64,    11,   275,    11,   266,    16,  1776,   198,
          4666,    62,    64,  4554,    17,   357,    64,    11,   266,    16,
            11,   266,    17,  1776,   198,  4666,    62,    64,  4554,    18,
           357,    64,    11,   266,    17,    11,   266,    18,  1776,   198,
          4666,    62,    64,  4554,    19,   357,    86,    18,    11,   275,
            11,   503,  1776,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  75
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

wire w1, w2, w3;

mod_a instance1 (a, b, w1);
mod_a instance2 (a, w1, w2);
mod_a instance3 (a, w2, w3);
mod_a instance4 (w3, b, out);

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  10.897900739000022
-------------------------------------------------------
MCTS Iteration:  96.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.32649308 0.32649308 0.32649308 0.32649308 0.32649308 0.45914245
 0.45914245 0.45914245 0.45914245 0.45914245]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.002159817999995539
-------------------------------------------------------
MCTS Iteration:  97.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.33284563 0.33284563 0.33284563 0.33284563 0.33284563 0.33284563
 0.46613026 0.46613026 0.46613026 0.46613026]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
SEQUENCE:  [[   64   351  1115 14090   357   259    16    11   287    17]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  20
Calling isPromptComplete: 
Getting LLM token estimates (probs/ids).
LLMEstimate:  , and out). 
//Connect the ports 1
LLMEstimate:  , and out). 
//The module mod 1
LLMEstimate:  , and out). 
//Connect the ports 1
LLMEstimate:  , and out)
module mod_a ( 1
LLMEstimate:  , and out).
//Do not change the 1
LLMEstimate:  , and out). 
//Connect the ports 1
LLMEstimate:  , and out)
module mod_a ( 1
LLMEstimate:  , and out)
module top_module ( 1
LLMEstimate:  , and out)
module mod_a ( 1
LLMEstimate:  , and out). 
//Connect the ports 1
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   351
   1115 14090   357   259    16    11   287    17]]
SEQUENCE:  [[   11   290   503   737   220   198  1003 13313   262 14090]]
MCTS Stage 2 - Expansion: next action:  2  corresponding to state:  [[   11   290   503   737   220   198  1003 13313   262 14090]]

MCTS Stage 3 - Rollout: Getting rollout return of leaf.

Setting terminal state to random.
Checking if done:
tokens generated:  30
Calling isPromptComplete: 
original text:  // create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a with three ports (in1, in2, and out). 
//Connect the ports to wires a, b, and out.

endmodule
[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   351
   1115 14090   357   259    16    11   287    17    11   290   503   737
    220   198  1003 13313   262 14090   284 19474   257    11   275    11
    290   503    13   198   198   437 21412]]
tensor([[ 1003,  2251,   530,  4554,   286,  8265,   953,    62,    64,    11,
           788,  2018,   262,  8265,   338,  1115, 20567,   357,   259,    16,
            11,   287,    17,    11,   290,   503,     8,   220,   198,  1003,
           284,   534,  1353,    12,  5715,  8265,   338,  1115, 14090,   357,
            86,  2387,   257,    11,   275,    11,   290,   503,   737,   220,
           198,  1003,   464,  8265,   953,    62,    64,   318,  2810,   329,
           345,   851,   345,  1276,  9113,  9386,   340,    13,   628,   198,
          1003,    39,   600,    25,  1649, 14320, 13103,    11,   691,   262,
         14090,   319,   262,  8265,   389,  1593,    13,   220,   198,  1003,
           921,   466,   407,   761,   284,   760,   262,  2438,  2641,   262,
          8265,    13,   220,   198,  1003,   383,  2438,   329,  8265,   953,
            62,    64,  3073,   588,   428,    25,   198,   198, 21412,  1353,
            62, 21412,   357,  5128,   257,    11,  5128,   275,    11,  5072,
           503,  5619,   198,   198,  1003,  7469,   500,   257,  8265,  1444,
           953,    62,    64,   351,  1115, 14090,   357,   259,    16,    11,
           287,    17,    11,   290,   503,   737,   220,   198,  1003, 13313,
           262, 14090,   284, 19474,   257,    11,   275,    11,   290,   503,
            13,   198,   198,   437, 21412]], device='cuda:0')
Checking if done:
tokens generated:  43
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );

//Define a module called mod_a with three ports (in1, in2, and out). 
//Connect the ports to wires a, b, and out.

endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  9.299826437999968
-------------------------------------------------------
MCTS Iteration:  98.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.339166   0.339166   0.339166   0.339166   0.339166   0.339166
 0.339166   0.47308266 0.47308266 0.47308266]  taking action:  7
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020096400000397807
-------------------------------------------------------
MCTS Iteration:  99.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3454545  0.3454545  0.3454545  0.3454545  0.3454545  0.3454545
 0.3454545  0.3454545  0.48000002 0.48000002]  taking action:  8
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020261889999915184
-------------------------------------------------------
MCTS Iteration:  100.0
MCTS Stage 1 - Selection: finding leaf node.

Leaf selection - depth:  0
Leaf selection - action scores:  [0.3517117  0.3517117  0.3517117  0.3517117  0.3517117  0.3517117
 0.3517117  0.3517117  0.3517117  0.48688293]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715 1.6819715
 1.6819715 4.363943  4.363943 ]  taking action:  8
Adding child.
STATE:  [[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
SEQUENCE:  [[  198   437 21412]]
Leaf selection - depth:  2
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Leaf is terminal - getting return value.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Stage 4 - Backpropogation: incorporating estimates.

Iteration TIME (sec):  0.0020568400000229303
----
 Tree depth: 0
 Node: action=None
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619]]
• Child Action scores:[0.35793787 0.35793787 0.35793787 0.35793787 0.35793787 0.35793787
 0.35793787 0.35793787 0.35793787 0.35793787]
• Child averaged monte carlo:-0.9901960784313726
• Child probablities:[4.05774210e-13 2.03511615e-03 8.52882650e-26 4.23441617e-40
 2.86368626e-06 4.07079948e-55 1.47962020e-01 1.40213632e-23
 3.97182509e-16 4.70567548e-11]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=101.0,Q=-0.9901960784313726,M=-0.9901960784313726
----
 Tree depth: 1
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 1
 Node: action=9
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26]]
• Child Action scores:[1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712 1.7884712
 1.7884712 1.7884712 4.5769424]
• Child averaged monte carlo:-0.9090909090909091
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[1 1 1 1 1 1 1 1 1 0]
• N=10.0,Q=-0.9090909090909091,M=-0.9090909090909091
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16     7]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198 21809   266    16    11   266    17    11   266    18    26
    198   198  4666    62    64  4554    16   357]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
  20417   734 17311   284   530  5072    13   220]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    11
    351  1115 14090    25   198  1003   259    16]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   351
   1115 14090    13   220   198  1003  5211   407]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    13
    632   468   734 14090   357    64   290   275]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
   2753   734 17311   290   281  5072    11   788]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   326
  20417  1115 14090   284  1115 19474    13   220]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    13
    632   481   307   925   286 19474   290 28441]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64    11
    351 17311   257   290   275    11   290 23862]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198   198  1003  7469   500   257  8265  1444   953    62    64   351
   1115 14090   357   259    16    11   287    17]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003  2251   530  4554   286  8265   953    62    64    11   788  2018
    262  8265   338  1115 20567   357   259    16    11   287    17    11
    290   503     8   220   198  1003   284   534  1353    12  5715  8265
    338  1115 14090   357    86  2387   257    11   275    11   290   503
    737   220   198  1003   464  8265   953    62    64   318  2810   329
    345   851   345  1276  9113  9386   340    13   628   198  1003    39
    600    25  1649 14320 13103    11   691   262 14090   319   262  8265
    389  1593    13   220   198  1003   921   466   407   761   284   760
    262  2438  2641   262  8265    13   220   198  1003   383  2438   329
   8265   953    62    64  3073   588   428    25   198   198 21412  1353
     62 21412   357  5128   257    11  5128   275    11  5072   503  5619
    198 50284   562   570   503   796   257  1222   275    26   198   437
  21412]]
• Child Action scores:[1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147 1.9516147
 1.9516147 1.9516147 1.9516147]
• Child averaged monte carlo:-0.5
• Child probablities:[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
END ROBUST/MAX VALUES:
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Checking if done:
tokens generated:  13
Calling isPromptComplete: 
Ends with endmodule.
Running functionality check.
// create one instance of module mod_a, then connect the module's three pins (in1, in2, and out) 
// to your top-level module's three ports (wires a, b, and out). 
//The module mod_a is provided for you — you must instantiate it.


//Hint: When connecting modules, only the ports on the module are important. 
// You do not need to know the code inside the module. 
// The code for module mod_a looks like this:

module top_module ( input a, input b, output out );
    assign out = a & b;
endmodule
LOGGING VERILOG CODE.
Verilog compilation failed, error:  1
Compilation output:  b'/mnt/shared-scratch/Rajendran_J/matthewdelorenzo/research/mcts_new/test_testbenches/Module_1/Module_1_0_tb.v: No such file or directory\nNo top level modules, and no -s option.\n'
MCTS tree has reached the end.
Running getPromptScore: 
MCTS Total Time:  412.377585
