Area,Delay,Score,Current Run,Episode,Verilog
300.314,1228.16,0.1,0,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {32'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
300.314,1228.16,0.1,1,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {32'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
300.314,1228.16,0.1,2,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {1'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
N/A,N/A,-0.1,3,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    wire [31:0] sum_temp;
    wire cout_temp;
    wire [31:0] in1_temp;
    wire [31:0] in2_temp;
    wire [32:0] temp;
    assign in1_temp = in1;
    assign in2_temp = in2;
    assign temp = {in1_temp, in2_temp, cin};
    assign sum_temp = temp[31:0] + temp[32];
    assign cout_temp = temp[32];
    assign sum = sum_temp[31:0];
    assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,4,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  //gates instantiation
  //sum module instantiation
endmodule"
N/A,N/A,-0.1,5,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  //gates instantiation
  //sum module instantiation
endmodule"
N/A,N/A,-0.1,6,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  //gates instantiation
  //sum module instantiation
endmodule"
N/A,N/A,-0.1,7,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  //gates instantiation
  //sum module instantiation
endmodule"
N/A,N/A,-0.1,8,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  //gates instantiation
  //sum module instantiation
endmodule"
N/A,N/A,-0.1,9,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_temp;
  assign temp_sum = in1 + in2 + cin;
  assign sum_temp = temp_sum[31:0];
  assign add_temp[32] = temp_sum[32];
  assign cout_temp = temp_sum[32] + temp_sum[33];
  assign cout = cout_temp;
  assign sum = sum_temp;
endmodule"
N/A,N/A,-0.1,10,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3; //intermediate carries
  wire [31:0] s1, s2, s3, s4, s5, s6, s7, s8, s9, s10; //intermediate results
  wire [31:0] p, g;
  assign c1 = cin;
  assign g = in1 & in2;
  assign p = in1 ^ in2;
  assign s1 = p ^ cin;
  assign s2 = g ^ cin;
  assign s3 = g & p;
  assign s4 = s1 & cin;
  assign s5 = p & c1;
  assign s6 = s3 | s5;
  assign s7 = s4 | s6;
  assign s8 = s2 & s7;
  assign s9 = s1 & s2;
  assign s10 = s9 | s8;
  assign c2 = s9 | s8;
  assign s11 = s3 & s5;
  assign s12 = s4 & s6;
  assign s13 = s11 | s12;
  assign c3 = s11 | s12;
  assign sum = s10 + s13;
  assign cout = c3;
endmodule"
N/A,N/A,-0.1,11,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  assign {cout, sum} = in1 + in2 + cin;
  assign s1 = in1 << 1;
  assign s2 = in2 << 1;
  assign c1 = (in1[31] & in2[31]) | (in1[31] & cin) | (cin & in2[31]);
  assign c2 = (in1[30:0] & in2[30:0]) | (in1[30:0] & cin) | (cin & in2[30:0]);
  assign c3 = (s1[31] & s2[31]) | (s1[31] & cin) | (cin & s2[31]);
  assign sum = {c3, c2, c1, s1[30:0]};
endmodule"
N/A,N/A,-0.1,12,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  assign {cout, sum} = in1 + in2 + cin;
  assign s1 = in1 << 1;
  assign s2 = in2 << 1;
  assign c1 = (in1[31] & in2[31]) | (in1[31] & cin) | (cin & in2[31]);
  assign c2 = (in1[30:0] & in2[30:0]) | (in1[30:0] & cin) | (cin & in2[30:0]);
  assign c3 = (s1[31] & s2[31]) | (s1[31] & cin) | (cin & s2[31]);
  assign sum = {c3, c2, c1, s1[30:0]};
endmodule"
300.314,1228.16,0.1,13,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //module body
  assign {cout, sum} = in1 + in2 + cin;
  //assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,14,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //module body
  assign {cout, sum} = in1 + in2 + cin;
  //assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,15,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //module body
  assign {cout, sum} = in1 + in2 + cin;
  //assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,16,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //module body
  assign {cout, sum} = in1 + in2 + cin;
  //assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,17,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //module body
  assign {cout, sum} = in1 + in2 + cin;
  //assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,18,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,19,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,20,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_temp;
  assign temp_sum = in1 + in2 + cin;
  assign sum = temp_sum[31:0];
  assign cout = temp_sum[32];
endmodule"
300.314,1228.16,0.1,21,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_temp;
  assign temp_sum = in1 + in2 + cin;
  assign sum = temp_sum[31:0];
  assign cout = temp_sum[32];
endmodule"
300.314,1228.16,0.1,22,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_temp;
  assign temp_sum = in1 + in2 + cin;
  assign sum = temp_sum[31:0];
  assign cout = temp_sum[32];
endmodule"
300.314,1228.16,0.1,23,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_temp;
  assign temp_sum = in1 + in2 + cin;
  assign sum = temp_sum[31:0];
  assign cout = temp_sum[32];
endmodule"
300.314,1228.16,0.1,24,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_temp;
  assign temp_sum = in1 + in2 + cin;
  assign sum = temp_sum[31:0];
  assign cout = temp_sum[32];
endmodule"
300.314,1228.16,0.1,25,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_temp;
  assign temp_sum = in1 + in2 + cin;
  assign sum = temp_sum[31:0];
  assign cout = temp_sum[32];
endmodule"
300.314,1228.16,0.1,26,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_temp;
  assign temp_sum = in1 + in2 + cin;
  assign sum = temp_sum[31:0];
  assign cout = temp_sum[32];
endmodule"
300.314,1228.16,0.1,27,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {1'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
300.314,1228.16,0.1,28,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {1'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
300.314,1228.16,0.1,29,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {1'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
300.314,1228.16,0.1,30,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {1'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
300.314,1228.16,0.1,31,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,32,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,33,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,34,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    wire [31:0] carry;
    genvar i;
    generate for (i = 0; i < 32; i = i + 1) begin: adder
        if (i == 0)
            full_adder FA1(sum[i], carry[i], in1[i], in2[i], cin);
        else
            full_adder FA2(sum[i], carry[i], in1[i], in2[i], carry[i-1]);
    end endgenerate
    assign cout = carry[31];
endmodule"
300.314,1228.16,0.1,35,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,36,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire [31:0] carry;
  genvar i;
  generate for(i = 0; i < 32; i = i + 1) begin: adder
    full_adder FA1(sum_temp[i], carry[i], in1[i], in2[i], cin);
  end
  endgenerate
  assign sum = sum_temp;
  assign cout = carry[32];
endmodule"
N/A,N/A,-1,37,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire [31:0] carry;
  genvar i;
  generate for(i = 0; i < 32; i = i + 1) begin: adder
    full_adder FA1(sum_temp[i], carry[i], in1[i], in2[i], cin);
  end
  endgenerate
  assign sum = sum_temp;
  assign cout = carry[32];
endmodule"
N/A,N/A,-1,38,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire [31:0] carry;
  genvar i;
  generate for(i = 0; i < 32; i = i + 1) begin: adder
    full_adder FA1(sum_temp[i], carry[i], in1[i], in2[i], cin);
  end
  endgenerate
  assign sum = sum_temp;
  assign cout = carry[32];
endmodule"
N/A,N/A,-1,39,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire [31:0] carry;
  genvar i;
  generate for(i = 0; i < 32; i = i + 1) begin: adder
    full_adder FA1(sum_temp[i], carry[i], in1[i], in2[i], cin);
  end
  endgenerate
  assign sum = sum_temp;
  assign cout = carry[32];
endmodule"
N/A,N/A,-0.1,40,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  
  wire c1, c2, c3;
  
  assign {c1, sum} = in1 + in2 + cin;
  assign cout = c1 | c2 | c3;
  
endmodule"
N/A,N/A,-0.1,41,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire [32:0] temp_sum;
  wire cout_temp;
  //add
  assign temp_sum = in1 + in2;
  //check if the carry is generated
  assign cout_temp = temp_sum[32];
  //set the sum output
  assign sum = temp_sum[31:0];
  //set the carry output
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,42,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    wire c1, c2, c3;
    assign {c1, sum} = in1 + in2 + cin;
    assign cout = c1 | c2 | c3;
endmodule"
N/A,N/A,-0.1,43,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    wire c1, c2, c3;
    assign {c1, sum} = in1 + in2 + cin;
    assign cout = c1 | c2 | c3;
endmodule"
300.314,1228.16,0.1,44,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,45,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  wire [31:0] sum;
  wire cout;
  assign {c1, sum[31:0]} = in1[31:0] + in2[31:0] + cin;
  assign cout = c1;
endmodule"
300.314,1228.16,0.1,46,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,47,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3; //intermediate carries
  //first 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
  //second 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca2(sum[7:4], c2, in1[7:4], in2[7:4], 1'b0);
  //third 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca3(sum[11:8], c3, in1[11:8], in2[11:8], 1'b0);
  //fourth 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca4(sum[15:12], cout, in1[15:12], in2[15:12], 1'b0);
endmodule"
N/A,N/A,-1,48,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3; //intermediate carries
  //first 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
  //second 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca2(sum[7:4], c2, in1[7:4], in2[7:4], 1'b0);
  //third 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca3(sum[11:8], c3, in1[11:8], in2[11:8], 1'b0);
  //fourth 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca4(sum[15:12], cout, in1[15:12], in2[15:12], 1'b0);
endmodule"
N/A,N/A,-1,49,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3; //intermediate carries
  //first 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
  //second 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca2(sum[7:4], c2, in1[7:4], in2[7:4], 1'b0);
  //third 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca3(sum[11:8], c3, in1[11:8], in2[11:8], 1'b0);
  //fourth 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca4(sum[15:12], cout, in1[15:12], in2[15:12], 1'b0);
endmodule"
N/A,N/A,-1,50,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3; //intermediate carries
  //first 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
  //second 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca2(sum[7:4], c2, in1[7:4], in2[7:4], 1'b0);
  //third 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca3(sum[11:8], c3, in1[11:8], in2[11:8], 1'b0);
  //fourth 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca4(sum[15:12], cout, in1[15:12], in2[15:12], 1'b0);
endmodule"
N/A,N/A,-1,51,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3; //intermediate carries
  //first 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
  //second 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca2(sum[7:4], c2, in1[7:4], in2[7:4], 1'b0);
  //third 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca3(sum[11:8], c3, in1[11:8], in2[11:8], 1'b0);
  //fourth 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca4(sum[15:12], cout, in1[15:12], in2[15:12], 1'b0);
endmodule"
N/A,N/A,-1,52,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3; //intermediate carries
  //first 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
  //second 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca2(sum[7:4], c2, in1[7:4], in2[7:4], 1'b0);
  //third 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca3(sum[11:8], c3, in1[11:8], in2[11:8], 1'b0);
  //fourth 4-bit by ripple_carry_adder
  ripple_carry_4_bit rca4(sum[15:12], cout, in1[15:12], in2[15:12], 1'b0);
endmodule"
300.314,1228.16,0.1,53,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,54,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //design implementation
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,55,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    //module body
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,56,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire [32:0] temp_sum;
  assign temp_sum = {1'b0,in1} + {1'b0,in2} + {30'b0,cin};
  assign sum_temp = temp_sum[31:0];
  assign cout = temp_sum[32];
  assign sum = sum_temp;
endmodule"
N/A,N/A,-0.1,57,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  wire [31:0] sum_temp;
  
  assign c1 = cin;
  assign c2 = 1'b0;
  assign s1 = in1;
  assign s2 = in2;
  assign sum_temp = s1 + s2;
  assign cout = c1 + c2;
  assign sum = sum_temp[31:0];
endmodule"
N/A,N/A,-0.1,58,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  wire [31:0] sum_temp;
  
  assign c1 = cin;
  assign c2 = 1'b0;
  assign s1 = in1;
  assign s2 = in2;
  assign sum_temp = s1 + s2;
  assign cout = c1 + c2;
  assign sum = sum_temp[31:0];
endmodule"
N/A,N/A,-0.1,59,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire c1, c2, c3;
  //summing
  assign in1_temp = in1 + in2;
  assign sum_temp = in1_temp + cin;
  //overflow condition
  assign c1 = in1[31] ^ in2[31] ^ cin;
  assign c2 = in1_temp[31] ^ sum_temp[31];
  assign c3 = c1 | c2;
  assign cout = c3;
  //assign sum = sum_temp[31:0];
  assign sum = sum_temp;
endmodule"
N/A,N/A,-0.1,60,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire c1, c2, c3;
  //summing
  assign in1_temp = in1 + in2;
  assign sum_temp = in1_temp + cin;
  //overflow condition
  assign c1 = in1[31] ^ in2[31] ^ cin;
  assign c2 = in1_temp[31] ^ sum_temp[31];
  assign c3 = c1 | c2;
  assign cout = c3;
  //assign sum = sum_temp[31:0];
  assign sum = sum_temp;
endmodule"
300.314,1228.16,0.1,61,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {1'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
300.314,1228.16,0.1,62,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {1'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
300.314,1228.16,0.1,63,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp;
  assign temp = {1'b0,in1} + {1'b0,in2} + {1'b0,cin};
  assign sum = temp[31:0];
  assign cout = temp[32];
endmodule"
N/A,N/A,-0.1,64,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire [31:0] carry_in;
  wire [32:0] carry;
  assign carry_in[0] = cin;
  assign carry[0] = 0;
  assign carry[32:1] = {carry_in[31], carry_in};
  assign sum_temp[0] = in1[0] ^ in2[0];
  assign sum_temp[1] = in1[1] ^ in2[1];
  assign sum_temp[2] = in1[2] ^ in2[2];
  assign sum_temp[3] = in1[3] ^ in2[3];
  assign sum_temp[4] = in1[4] ^ in2[4];
  assign sum_temp[5] = in1[5] ^ in2[5];
  assign sum_temp[6] = in1[6] ^ in2[6];
  assign sum_temp[7] = in1[7] ^ in2[7];
  assign sum_temp[8] = in1[8] ^ in2[8];
  assign sum_temp[9] = in1[9] ^ in2[9];
  assign sum_temp[10] = in1[10] ^ in2[10];
  assign sum_temp[11] = in1[11] ^ in2[11];
  assign sum_temp[12] = in1[12] ^ in2[12];
  assign sum_temp[13] = in1[13] ^ in2[13];
  assign sum_temp[14] = in1[14] ^ in2[14];
  assign sum_temp[15] = in1[15] ^ in2[15];
  assign sum_temp[16] = in1[16] ^ in2[16];
  assign sum_temp[17] = in1[17] ^ in2[17];
  assign sum_temp[18] = in1[18] ^ in2[18];
  assign sum_temp[19] = in1[19] ^ in2[19];
  assign sum_temp[20] = in1[20] ^ in2[20];
  assign sum_temp[21] = in1[21] ^ in2[21];
  assign sum_temp[22] = in1[22] ^ in2[22];
  assign sum_temp[23] = in1[23] ^ in2[23];
  assign sum_temp[24] = in1[24] ^ in2[24];
  assign sum_temp[25] = in1[25] ^ in2[25];
  assign sum_temp[26] = in1[26] ^ in2[26];
  assign sum_temp[27] = in1[27] ^ in2[27];
  assign sum_temp[28] = in1[28] ^ in2[28];
  assign sum_temp[29] = in1[29] ^ in2[29];
  assign sum_temp[30] = in1[30] ^ in2[30];
  assign sum_temp[31] = in1[31] ^ in2[31];
  assign sum[31:0] = sum_temp[31:0];
  assign cout = carry[32];
endmodule"
N/A,N/A,-0.1,65,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire [31:0] carry_in;
  wire [32:0] carry;
  assign carry_in[0] = cin;
  assign carry[0] = 0;
  assign carry[32:1] = {carry_in[31], carry_in};
  assign sum_temp[0] = in1[0] ^ in2[0];
  assign sum_temp[1] = in1[1] ^ in2[1];
  assign sum_temp[2] = in1[2] ^ in2[2];
  assign sum_temp[3] = in1[3] ^ in2[3];
  assign sum_temp[4] = in1[4] ^ in2[4];
  assign sum_temp[5] = in1[5] ^ in2[5];
  assign sum_temp[6] = in1[6] ^ in2[6];
  assign sum_temp[7] = in1[7] ^ in2[7];
  assign sum_temp[8] = in1[8] ^ in2[8];
  assign sum_temp[9] = in1[9] ^ in2[9];
  assign sum_temp[10] = in1[10] ^ in2[10];
  assign sum_temp[11] = in1[11] ^ in2[11];
  assign sum_temp[12] = in1[12] ^ in2[12];
  assign sum_temp[13] = in1[13] ^ in2[13];
  assign sum_temp[14] = in1[14] ^ in2[14];
  assign sum_temp[15] = in1[15] ^ in2[15];
  assign sum_temp[16] = in1[16] ^ in2[16];
  assign sum_temp[17] = in1[17] ^ in2[17];
  assign sum_temp[18] = in1[18] ^ in2[18];
  assign sum_temp[19] = in1[19] ^ in2[19];
  assign sum_temp[20] = in1[20] ^ in2[20];
  assign sum_temp[21] = in1[21] ^ in2[21];
  assign sum_temp[22] = in1[22] ^ in2[22];
  assign sum_temp[23] = in1[23] ^ in2[23];
  assign sum_temp[24] = in1[24] ^ in2[24];
  assign sum_temp[25] = in1[25] ^ in2[25];
  assign sum_temp[26] = in1[26] ^ in2[26];
  assign sum_temp[27] = in1[27] ^ in2[27];
  assign sum_temp[28] = in1[28] ^ in2[28];
  assign sum_temp[29] = in1[29] ^ in2[29];
  assign sum_temp[30] = in1[30] ^ in2[30];
  assign sum_temp[31] = in1[31] ^ in2[31];
  assign sum[31:0] = sum_temp[31:0];
  assign cout = carry[32];
endmodule"
N/A,N/A,-0.1,66,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;
  wire [31:0] adder_in1;
  wire [31:0] adder_in2;
  wire [32:0] adder_out;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;
  assign adder_in1 = in1_temp;
  assign adder_in2 = in2_temp;
  assign sum_temp = adder_in1 + adder_in2 + cin_temp;
  assign cout_temp = (adder_in1[31] == adder_in2[31] && adder_in1[31]!= sum_temp[31])? 1'b1 : 1'b0;
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,67,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;
  wire [31:0] adder_in1;
  wire [31:0] adder_in2;
  wire [32:0] adder_out;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;
  assign adder_in1 = in1_temp;
  assign adder_in2 = in2_temp;
  assign sum_temp = adder_in1 + adder_in2 + cin_temp;
  assign cout_temp = (adder_in1[31] == adder_in2[31] && adder_in1[31]!= sum_temp[31])? 1'b1 : 1'b0;
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,68,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;
  wire [31:0] adder_in1;
  wire [31:0] adder_in2;
  wire [32:0] adder_out;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;
  assign adder_in1 = in1_temp;
  assign adder_in2 = in2_temp;
  assign sum_temp = adder_in1 + adder_in2 + cin_temp;
  assign cout_temp = (adder_in1[31] == adder_in2[31] && adder_in1[31]!= sum_temp[31])? 1'b1 : 1'b0;
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,69,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;
  wire [31:0] adder_in1;
  wire [31:0] adder_in2;
  wire [32:0] adder_out;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;
  assign adder_in1 = in1_temp;
  assign adder_in2 = in2_temp;
  assign sum_temp = adder_in1 + adder_in2 + cin_temp;
  assign cout_temp = (adder_in1[31] == adder_in2[31] && adder_in1[31]!= sum_temp[31])? 1'b1 : 1'b0;
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,70,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;
  wire [31:0] adder_in1;
  wire [31:0] adder_in2;
  wire [32:0] adder_out;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;
  assign adder_in1 = in1_temp;
  assign adder_in2 = in2_temp;
  assign sum_temp = adder_in1 + adder_in2 + cin_temp;
  assign cout_temp = (adder_in1[31] == adder_in2[31] && adder_in1[31]!= sum_temp[31])? 1'b1 : 1'b0;
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-1,71,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire [32:0] temp_sum;
  wire cout_temp;
  wire [32:0] {cout_temp, sum_temp} = in1 + in2 + cin;
  assign {cout, sum} = temp_sum[32:0];
endmodule"
N/A,N/A,-1,72,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire [31:0] adder_in_1;
  wire [31:0] adder_in_2;
  wire adder_in_3;
  //split the 32 bit inputs into sign bit, exponent bits, mantissa bits
  assign in1_temp[31] = in1[31];
  assign in1_temp[30:23] = in1[30:23];
  assign in1_temp[22:0] = in1[22:0];
  assign in2_temp[31] = in2[31];
  assign in2_temp[30:23] = in2[30:23];
  assign in2_temp[22:0] = in2[22:0];
  assign adder_in_1 = in1_temp;
  assign adder_in_2 = in2_temp;
  assign adder_in_3 = cin;
  //adder 1
  assign sum_temp[31] = adder_in_1[31] ^ adder_in_2[31];
  assign sum_temp[30:23] = adder_in_1[30:23] + adder_in_2[30:23];
  assign sum_temp[22:0] = adder_in_1[22:0] + adder_in_2[22:0];
  assign sum[31] = sum_temp[31];
  assign sum[30:23] = sum_temp[30:23];
  assign sum[22:0] = sum_temp[22:0];
  //adder 2
  assign sum_temp[31] = adder_in_3 ^ sum[31];
  assign sum_temp[30:23] = sum[30:23] + adder_in_3[30:23];
  assign sum_temp[22:0] = sum[22:0] + adder_in_3[22:0];
  assign sum[31] = sum_temp[31];
  assign sum[30:23] = sum_temp[30:23];
  assign sum[22:0] = sum_temp[22:0];
  //final carry calculation
  assign cout_temp = (adder_in_1[31] & adder_in_2[31]) | (adder_in_2[31] & adder_in_3) | (adder_in_3 & sum[31]);
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,73,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  
  wire c1, c2, c3;
  
  assign {c1, sum} = in1 + in2 + cin;
  assign cout = c1 | c2 | c3;
  
endmodule"
N/A,N/A,-0.1,74,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    wire c1, c2, c3; //intermediate carries
    assign c1 = cin;
    assign c2 = in1[31] ^ in2[31];
    assign c3 = ((in1[31] & in2[31]) ^ (in1[31] & c1) ^ (in2[31] & c1));
    assign sum[0]  = cin     ^ in1[0]  ^ in2[0];
    assign sum[1]  = c1      ^ in1[1]  ^ in2[1];
    assign sum[2]  = c2      ^ in1[2]  ^ in2[2];
    assign sum[3]  = c3      ^ in1[3]  ^ in2[3];
    assign sum[4]  = in1[4]  ^ in2[4];
    assign sum[5]  = in1[5]  ^ in2[5];
    assign sum[6]  = in1[6]  ^ in2[6];
    assign sum[7]  = in1[7]  ^ in2[7];
    assign sum[8]  = in1[8]  ^ in2[8];
    assign sum[9]  = in1[9]  ^ in2[9];
    assign sum[10] = in1[10] ^ in2[10];
    assign sum[11] = in1[11] ^ in2[11];
    assign sum[12] = in1[12] ^ in2[12];
    assign sum[13] = in1[13] ^ in2[13];
    assign sum[14] = in1[14] ^ in2[14];
    assign sum[15] = in1[15] ^ in2[15];
    assign sum[16] = in1[16] ^ in2[16];
    assign sum[17] = in1[17] ^ in2[17];
    assign sum[18] = in1[18] ^ in2[18];
    assign sum[19] = in1[19] ^ in2[19];
    assign sum[20] = in1[20] ^ in2[20];
    assign sum[21] = in1[21] ^ in2[21];
    assign sum[22] = in1[22] ^ in2[22];
    assign sum[23] = in1[23] ^ in2[23];
    assign sum[24] = in1[24] ^ in2[24];
    assign sum[25] = in1[25] ^ in2[25];
    assign sum[26] = in1[26] ^ in2[26];
    assign sum[27] = in1[27] ^ in2[27];
    assign sum[28] = in1[28] ^ in2[28];
    assign sum[29] = in1[29] ^ in2[29];
    assign sum[30] = in1[30] ^ in2[30];
    assign sum[31] = in1[31] ^ in2[31];
    assign cout = c1;
endmodule"
N/A,N/A,-0.1,75,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    wire c1, c2, c3; //intermediate carries
    assign c1 = cin;
    assign c2 = in1[31] ^ in2[31];
    assign c3 = ((in1[31] & in2[31]) ^ (in1[31] & c1) ^ (in2[31] & c1));
    assign sum[0]  = cin     ^ in1[0]  ^ in2[0];
    assign sum[1]  = c1      ^ in1[1]  ^ in2[1];
    assign sum[2]  = c2      ^ in1[2]  ^ in2[2];
    assign sum[3]  = c3      ^ in1[3]  ^ in2[3];
    assign sum[4]  = in1[4]  ^ in2[4];
    assign sum[5]  = in1[5]  ^ in2[5];
    assign sum[6]  = in1[6]  ^ in2[6];
    assign sum[7]  = in1[7]  ^ in2[7];
    assign sum[8]  = in1[8]  ^ in2[8];
    assign sum[9]  = in1[9]  ^ in2[9];
    assign sum[10] = in1[10] ^ in2[10];
    assign sum[11] = in1[11] ^ in2[11];
    assign sum[12] = in1[12] ^ in2[12];
    assign sum[13] = in1[13] ^ in2[13];
    assign sum[14] = in1[14] ^ in2[14];
    assign sum[15] = in1[15] ^ in2[15];
    assign sum[16] = in1[16] ^ in2[16];
    assign sum[17] = in1[17] ^ in2[17];
    assign sum[18] = in1[18] ^ in2[18];
    assign sum[19] = in1[19] ^ in2[19];
    assign sum[20] = in1[20] ^ in2[20];
    assign sum[21] = in1[21] ^ in2[21];
    assign sum[22] = in1[22] ^ in2[22];
    assign sum[23] = in1[23] ^ in2[23];
    assign sum[24] = in1[24] ^ in2[24];
    assign sum[25] = in1[25] ^ in2[25];
    assign sum[26] = in1[26] ^ in2[26];
    assign sum[27] = in1[27] ^ in2[27];
    assign sum[28] = in1[28] ^ in2[28];
    assign sum[29] = in1[29] ^ in2[29];
    assign sum[30] = in1[30] ^ in2[30];
    assign sum[31] = in1[31] ^ in2[31];
    assign cout = c1;
endmodule"
N/A,N/A,-0.1,76,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_out;
  wire [32:0] and_out;
  wire cout_out;
  assign temp_sum = in1 + in2 + cin;
  assign add_out = temp_sum[31:0];
  assign and_out = temp_sum[32:1];
  assign cout_out = and_out[32];
  assign sum = add_out;
  assign cout = cout_out;
endmodule"
N/A,N/A,-0.1,77,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_out;
  wire [32:0] and_out;
  wire cout_out;
  assign temp_sum = in1 + in2 + cin;
  assign add_out = temp_sum[31:0];
  assign and_out = temp_sum[32:1];
  assign cout_out = and_out[32];
  assign sum = add_out;
  assign cout = cout_out;
endmodule"
N/A,N/A,-0.1,78,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_out;
  wire [32:0] and_out;
  wire cout_out;
  assign temp_sum = in1 + in2 + cin;
  assign add_out = temp_sum[31:0];
  assign and_out = temp_sum[32:1];
  assign cout_out = and_out[32];
  assign sum = add_out;
  assign cout = cout_out;
endmodule"
N/A,N/A,-0.1,79,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [32:0] temp_sum;
  wire [32:0] add_out;
  wire [32:0] and_out;
  wire cout_out;
  assign temp_sum = in1 + in2 + cin;
  assign add_out = temp_sum[31:0];
  assign and_out = temp_sum[32:1];
  assign cout_out = and_out[32];
  assign sum = add_out;
  assign cout = cout_out;
endmodule"
300.314,1228.16,0.1,80,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,81,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
300.314,1228.16,0.1,82,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.1,83,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  
  wire c1, c2, c3;
  
  assign {c1, sum} = in1 + in2 + cin;
  assign cout = c1 | c2 | c3;
  
endmodule"
N/A,N/A,-0.1,84,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  
  wire c1, c2, c3;
  
  assign {c1, sum} = in1 + in2 + cin;
  assign cout = c1 | c2 | c3;
  
endmodule"
N/A,N/A,-0.1,85,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire c1, c2, c3;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign c1 = cin;
  assign c2 = in1[31] ^ in2[31];
  assign c3 = ((in1[31] & in2[31]) & ~(in1[31] ^ in2[31]));
  assign sum_temp = in1_temp + in2_temp + c1;
  assign sum = sum_temp[31:0];
  assign cout = c1 | c2 | c3;
endmodule"
N/A,N/A,-0.1,86,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;

  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;

  assign sum_temp = in1_temp + in2_temp + cin_temp;
  assign cout_temp = (in1_temp[31] == in2_temp[31] && in1_temp[31]!= sum_temp[31])? 1'b1 : 1'b0;
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,87,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;

  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;

  assign sum_temp = in1_temp + in2_temp + cin_temp;
  assign cout_temp = (in1_temp[31] == in2_temp[31] && in1_temp[31]!= sum_temp[31])? 1'b1 : 1'b0;
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,88,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31;

  assign c1 = cin;
  assign c2 = 0;
  assign s1 = in1;
  assign s2 = in2;
  assign s3 = s1 & s2;
  assign s4 = s3 << 1;
  assign s5 = s4 + s2;
  assign s6 = s5 << 1;
  assign s7 = s6 + s3;
  assign s8 = s7 << 1;
  assign s9 = s8 + s5;
  assign s10 = s9 << 1;
  assign s11 = s10 + s7;
  assign s12 = s11 << 1;
  assign s13 = s12 + s9;
  assign s14 = s13 << 1;
  assign s15 = s14 + s11;
  assign s16 = s15 << 1;
  assign s17 = s16 + s13;
  assign s18 = s17 << 1;
  assign s19 = s18 + s15;
  assign s20 = s19 << 1;
  assign s21 = s20 + s17;
  assign s22 = s21 << 1;
  assign s23 = s22 + s19;
  assign s24 = s23 << 1;
  assign s25 = s24 + s21;
  assign s26 = s25 << 1;
  assign s27 = s26 + s23;
  assign s28 = s27 << 1;
  assign s29 = s28 + s25;
  assign s30 = s29 << 1;
  assign s31 = s30 + s27;
  assign cout = s31 << 1;
  assign sum = s31 + c1;
endmodule"
N/A,N/A,-0.1,89,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31;

  assign c1 = cin;
  assign c2 = 0;
  assign s1 = in1;
  assign s2 = in2;
  assign s3 = s1 & s2;
  assign s4 = s3 << 1;
  assign s5 = s4 + s2;
  assign s6 = s5 << 1;
  assign s7 = s6 + s3;
  assign s8 = s7 << 1;
  assign s9 = s8 + s5;
  assign s10 = s9 << 1;
  assign s11 = s10 + s7;
  assign s12 = s11 << 1;
  assign s13 = s12 + s9;
  assign s14 = s13 << 1;
  assign s15 = s14 + s11;
  assign s16 = s15 << 1;
  assign s17 = s16 + s13;
  assign s18 = s17 << 1;
  assign s19 = s18 + s15;
  assign s20 = s19 << 1;
  assign s21 = s20 + s17;
  assign s22 = s21 << 1;
  assign s23 = s22 + s19;
  assign s24 = s23 << 1;
  assign s25 = s24 + s21;
  assign s26 = s25 << 1;
  assign s27 = s26 + s23;
  assign s28 = s27 << 1;
  assign s29 = s28 + s25;
  assign s30 = s29 << 1;
  assign s31 = s30 + s27;
  assign cout = s31 << 1;
  assign sum = s31 + c1;
endmodule"
N/A,N/A,-0.1,90,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
    wire [31:0] sum_temp;
    wire cout_temp;
    wire [31:0] in1_temp;
    wire [31:0] in2_temp;
    wire c1, c2, c3;
    assign in1_temp = in1;
    assign in2_temp = in2;
    assign c1 = cin;
    assign c2 = in1[31] & in2[31];
    assign c3 = in1[31] ^ in2[31];
    assign sum_temp = {in1_temp[31:0], c1};
    assign cout_temp = c2 | c3;
    assign sum = sum_temp[31:0];
    assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,91,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  wire [32:0] s3;
  assign {c1, s1} = in1 + in2;
  assign {c2, s2} = s1 + cin;
  assign {c3, sum} = s2 + c1;
  assign cout = c3;
endmodule"
N/A,N/A,-0.1,92,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum_temp;
  wire cout_temp;
  wire [31:0] in1_temp;
  wire [31:0] in2_temp;
  wire cin_temp;

  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;

  assign sum_temp = in1_temp + in2_temp + cin_temp;
  assign cout_temp = (in1_temp[31] == in2_temp[31] && in1_temp[31]!= sum_temp[31])? 1'b1 : 1'b0;
  assign sum = sum_temp[31:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.1,93,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  
  wire c1, c2, c3;
  
  assign {c1, sum} = in1 + in2 + cin;
  assign cout = c1 | c2 | c3;
  
endmodule"
N/A,N/A,-0.1,94,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  //Implement the adder as shown in Figure 3.
  assign {c1, sum} = in1 + in2 + cin;
  assign cout = (in1[31] == in2[31] && in1[31]!= sum[31])? c1 : c2;
endmodule"
N/A,N/A,-0.1,95,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  //Implement the adder as shown in Figure 3.
  assign {c1, sum} = in1 + in2 + cin;
  assign cout = (in1[31] == in2[31] && in1[31]!= sum[31])? c1 : c2;
endmodule"
N/A,N/A,-0.1,96,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  //Implement the adder as shown in Figure 3.
  assign {c1, sum} = in1 + in2 + cin;
  assign cout = (in1[31] == in2[31] && in1[31]!= sum[31])? c1 : c2;
endmodule"
300.314,1228.16,0.1,97,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [31:0] s1, s2;
  wire [31:0] sum;
  wire cout;
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.1,98,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire [31:0] carry_in;
  wire [32:0] carry;
  assign carry[0] = cin;
  assign carry_in[0] = cin;
  assign carry[32:1] = {carry_in[31:0], 1'b0};
  assign sum_temp[0] = in1[0] ^ in2[0] ^ carry_in[0];
  assign sum_temp[31:1] = in1[30:0] ^ in2[30:0] ^ carry[31:1];
  assign sum[0] = sum_temp[0];
  assign sum[31:1] = sum_temp[31:1];
  assign cout = carry[32];
endmodule"
N/A,N/A,-0.1,99,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  //internal variables
  wire [31:0] sum_temp;
  wire [31:0] carry_in;
  wire [32:0] carry;
  assign carry[0] = cin;
  assign carry_in[0] = cin;
  assign carry[32:1] = {carry_in[31:0], 1'b0};
  assign sum_temp[0] = in1[0] ^ in2[0] ^ carry_in[0];
  assign sum_temp[31:1] = in1[30:0] ^ in2[30:0] ^ carry[31:1];
  assign sum[0] = sum_temp[0];
  assign sum[31:1] = sum_temp[31:1];
  assign cout = carry[32];
endmodule"
